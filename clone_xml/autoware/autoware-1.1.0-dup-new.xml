<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="simian.xsl" type="text/xsl"?>
<!--
Similarity Analyser 2.5.10 - http://www.harukizaemon.com/simian
Copyright (c) 2003-2018 Simon Harris.  All rights reserved.
Simian is not free unless used solely for non-commercial or evaluation purposes.
-->
<simian version="2.5.10">
    <check balanceParentheses="true" balanceSquareBrackets="true" failOnDuplication="true" ignoreCharacterCase="true" ignoreCharacters="true" ignoreCurlyBraces="true" ignoreIdentifierCase="true" ignoreIdentifiers="true" ignoreModifiers="true" ignoreNumbers="true" ignoreStringCase="true" ignoreStrings="true" ignoreVariableNames="true" reportDuplicateText="true" threshold="6">
        <set lineCount="6" fingerprint="ec4fcadaf24f86199d75a0172c4c14bd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.h" startLineNumber="115" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\includes\Cluster.h" startLineNumber="104" endLineNumber="114"/>
            <text>
<![CDATA[	float								GetWidth();
	/* \brief Returns the Height of the Cluster */
	float								GetHeight();
	/* \brief Returns the Id of the Cluster */
	int									GetId();
	/* \brief Returns the Label of the Cluster */
	std::string							GetLabel();
	/* \brief Returns the Eigen Vectors of the cluster */
	Eigen::Matrix3f						GetEigenVectors();
	/* \brief Returns the Eigen Values of the Cluster */
	Eigen::Vector3f						GetEigenValues();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="46e204995d797970102e075e346b52cc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="173" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="165" endLineNumber="170"/>
            <text>
<![CDATA[            data[0]=beams[i]*cos(theta);
            data[1]=beams[i]*sin(theta);
            data[2]=virtualscan.minheights[i];
            data[4]=255;
            ring=(int *)(data+5*sizeof(float));
            *ring=0;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="60f65735f60db065486ed10a619ab30b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\view.cpp" startLineNumber="334" endLineNumber="342"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\view.cpp" startLineNumber="327" endLineNumber="335"/>
            <text>
<![CDATA[    v.Activate();
    state.Apply();
}

void View::ActivateAndScissor(const OpenGlRenderState& state) const
{
    vp.Scissor();
    v.Activate();
    state.Apply();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="9970dd683fe09915bc3be4a47cfe6c48">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\compat\ovr.h" startLineNumber="28" endLineNumber="40"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\boost.h" startLineNumber="41" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\switch_float.h" startLineNumber="34" endLineNumber="39"/>
            <text>
<![CDATA[#ifdef USE_FLOAT_AS_DECIMAL
typedef float FLOAT;
#ifdef FROM_GPU
#define sqrt sqrtf
#endif
#else
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="1f6140f1140b42c72056932f0ecfcee0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="792" endLineNumber="797"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="756" endLineNumber="786"/>
            <text>
<![CDATA[STBTT_DEF unsigned char *stbtt_GetCodepointBitmap(const stbtt_fontinfo *info, float scale_x, float scale_y, int codepoint, int *width, int *height, int *xoff, int *yoff);
// allocates a large-enough single-channel 8bpp bitmap and renders the
// specified character/glyph at the specified scale into it, with
// antialiasing. 0 is no coverage (transparent), 255 is fully covered (opaque).
// *width & *height are filled out with the width & height of the bitmap,
// which is stored left-to-right, top-to-bottom.
//
// xoff/yoff are the offset it pixel space from the glyph origin to the top-left of the bitmap

STBTT_DEF unsigned char *stbtt_GetCodepointBitmapSubpixel(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint, int *width, int *height, int *xoff, int *yoff);
// the same as stbtt_GetCodepoitnBitmap, but you can specify a subpixel
// shift for the character

STBTT_DEF void stbtt_MakeCodepointBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int codepoint);
// the same as stbtt_GetCodepointBitmap, but you pass in storage for the bitmap
// in the form of 'output', with row spacing of 'out_stride' bytes. the bitmap
// is clipped to out_w/out_h bytes. Call stbtt_GetCodepointBitmapBox to get the
// width and height and positioning info for it first.

STBTT_DEF void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint);
// same as stbtt_MakeCodepointBitmap, but you can specify a subpixel
// shift for the character

STBTT_DEF void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1);
// get the bbox of the bitmap centered around the glyph origin; so the
// bitmap width is ix1-ix0, height is iy1-iy0, and location to place
// the bitmap top left is (leftSideBearing*scale,iy0).
// (Note that the bitmap uses y-increases-down, but the shape uses
// y-increases-up, so CodepointBitmapBox and CodepointBox are inverted.)

STBTT_DEF void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="f6ae4148c70ac15c841044f1df22c4b0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2181" endLineNumber="2186"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2101" endLineNumber="2106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2100" endLineNumber="2105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2099" endLineNumber="2104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2098" endLineNumber="2103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2097" endLineNumber="2102"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2096" endLineNumber="2101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2095" endLineNumber="2100"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2094" endLineNumber="2099"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2093" endLineNumber="2098"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2092" endLineNumber="2097"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2091" endLineNumber="2096"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2090" endLineNumber="2095"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2058" endLineNumber="2063"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2057" endLineNumber="2062"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2056" endLineNumber="2061"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2055" endLineNumber="2060"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2054" endLineNumber="2059"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2037" endLineNumber="2042"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1960" endLineNumber="1965"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1959" endLineNumber="1964"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1958" endLineNumber="1963"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1957" endLineNumber="1962"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1956" endLineNumber="1961"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="120" endLineNumber="125"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="119" endLineNumber="124"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="182" endLineNumber="187"/>
            <text>
<![CDATA[		area.x_min = std::stod(cols[1]);
		area.y_min = std::stod(cols[2]);
		area.z_min = std::stod(cols[3]);
		area.x_max = std::stod(cols[4]);
		area.y_max = std::stod(cols[5]);
		area.z_max = std::stod(cols[6]);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="4c64509d4f516542ba0c4543e58a6258">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="321" endLineNumber="326"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\datalog.h" startLineNumber="154" endLineNumber="163"/>
            <text>
<![CDATA[    bool isMonotonic;
    float sum;
    float sum_sq;
    float min;
    float max;
};

/// A DataLog can efficiently record floating point sample data of any size.
/// Memory is allocated in blocks is transparent to the user.
class PANGOLIN_EXPORT DataLog
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="a8212b73df5b6857c0e4091df9f98bbf">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="60" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="46" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\datalog.h" startLineNumber="136" endLineNumber="141"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="17" endLineNumber="25"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="28" endLineNumber="36"/>
            <text>
<![CDATA[	int pady;
	int max_scale;
	//image size information
	int IM_WIDTH;
	int IM_HEIGHT;

	//per root
	int *ridx;	//root index information
	int *oidx;	//offsetindex information
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="40e896e06b6d1e25363c5a19a23a0a5b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_viewer\vscan_image_viewer.cpp" startLineNumber="98" endLineNumber="107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_d_viewer\vscan_image_d_viewer.cpp" startLineNumber="187" endLineNumber="196"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_d_viewer\scan_image_d_viewer.cpp" startLineNumber="232" endLineNumber="241"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_viewer\points_image_viewer.cpp" startLineNumber="99" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="312" endLineNumber="321"/>
            <text>
<![CDATA[static void image_cb(const sensor_msgs::Image& msg)
{
  image_msg = msg;
  existImage = true;
  show();
}

static void points_cb(const points2image::PointsImageConstPtr& msg)
{
  points_msg = msg;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="46588ce721730fa6291c4471cf3d7d30">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\state\state_machine\nodes\state_machine\state_machine.h" startLineNumber="32" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.h" startLineNumber="33" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\include\astar_util.h" startLineNumber="1" endLineNumber="10"/>
            <text>
<![CDATA[#ifndef ASTAR_UTIL_H
#define ASTAR_UTIL_H

#include <tf/transform_listener.h>

enum class STATUS : uint8_t
{
  NONE,
  OPEN,
  CLOSED,
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="539b1bcbc6b5c5c4531963d2318df0b3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\marginal_covariance_cholesky.cpp" startLineNumber="136" endLineNumber="141"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\marginal_covariance_cholesky.cpp" startLineNumber="110" endLineNumber="115"/>
            <text>
<![CDATA[    for (int rr = 0; rr < vdim; ++rr)
      for (int cc = rr; cc < vdim; ++cc) {
        int r = _perm ? _perm[rr + base] : rr + base; // apply permutation
        int c = _perm ? _perm[cc + base] : cc + base;
        if (r > c) // make sure it's still upper triangular after applying the permutation
          swap(r, c);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="bcca055f73926ae7f08c582a8e0cb48b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="857" endLineNumber="862"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="853" endLineNumber="858"/>
            <text>
<![CDATA[      g = 1;
      break;
    case 4:
      marker.type = visualization_msgs::Marker::CUBE;
      r = 1;
      break;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="304db3bf970c0ad87fb21bb5c2476f82">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\gazebo\twist_cmd_converter\src\converter.cpp" startLineNumber="78" endLineNumber="91"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\gazebo\laser_scan_converter\src\converter.cpp" startLineNumber="88" endLineNumber="101"/>
            <text>
<![CDATA[    pub_points_.publish(output);
  }
};

/* ---[ */
int main(int argc, char **argv) {
  // ROS init
  ros::init(argc, argv, "laser_scan_converter",
            ros::init_options::AnonymousName);

  LaserScanConverter p;
  ros::spin();

  return (0);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="d6e228f3f8fc125c1acc1dce51746c20">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="646" endLineNumber="652"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="631" endLineNumber="637"/>
            <text>
<![CDATA[  current_state_ = msg->data;
  is_current_state_subscribed_ = true;

  if(current_lane_idx_ == -1)
    initForLaneSelect();
  else
    processing();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="612d758d8e3dc9779602d7d917a102c8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\ndt.h" startLineNumber="168" endLineNumber="180"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\ndt.h" startLineNumber="150" endLineNumber="162"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\icp.h" startLineNumber="238" endLineNumber="248"/>
            <text>
<![CDATA[      inline void
      setUseReciprocalCorrespondences (bool use_reciprocal_correspondence)
      {
        use_reciprocal_correspondence_ = use_reciprocal_correspondence;
      }

      /** \brief Obtain whether reciprocal correspondence are used or not */
      inline bool
      getUseReciprocalCorrespondences () const
      {
        return (use_reciprocal_correspondence_);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="de32d27005e476d9f3b7a66cc2de83ad">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="45" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\vectacam\nodes\vectacam\VectaCam.h" startLineNumber="58" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\view.h" startLineNumber="204" endLineNumber="220"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.h" startLineNumber="350" endLineNumber="356"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\FClass.h" startLineNumber="10" endLineNumber="28"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\src\__nodes\mt\TrackingThread.h" startLineNumber="45" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="218" endLineNumber="233"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="16" endLineNumber="24"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="27" endLineNumber="35"/>
            <text>
<![CDATA[	int padx;	//pad information
	int pady;
	int max_scale;
	//image size information
	int IM_WIDTH;
	int IM_HEIGHT;

	//per root
	int *ridx;	//root index information
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="acf5ad4a0c86cd725010a740ec3c20c5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="747" endLineNumber="754"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="731" endLineNumber="739"/>
            <text>
<![CDATA[    if (vscan_result != KEEP)
    {  // found obstacle
      displayObstacle(vscan_result);
      prev_detection = vscan_result;
      // SoundPlay();
      false_count = 0;
      return vscan_result;
    }
    else
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="9685394e7e70c40e1c56cd9ff9b65b75">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_loader\waypoint_loader_core.cpp" startLineNumber="172" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_loader\waypoint_loader_core.cpp" startLineNumber="142" endLineNumber="149"/>
            <text>
<![CDATA[void WaypointLoaderNode::parseWaypointForVer1(const std::string &line, waypoint_follower::waypoint *wp)
{
  std::vector<std::string> columns;
  parseColumns(line, &columns);

  wp->pose.pose.position.x = std::stod(columns[0]);
  wp->pose.pose.position.y = std::stod(columns[1]);
  wp->pose.pose.position.z = std::stod(columns[2]);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="31ec5dbcebd66e50c25717590ffbc5b0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="519" endLineNumber="529"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="195" endLineNumber="204"/>
            <text>
<![CDATA[    if (area.aid == 0)
    {
      ROS_ERROR_STREAM("[createGutterMarkerArray] invalid area: " << area);
      continue;
    }

    visualization_msgs::Marker marker;
    switch (gutter.type)
    {
    case Gutter::NO_COVER:
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="90ea10205b56372dc125c81ffa11a080">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.cpp" startLineNumber="530" endLineNumber="536"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.cpp" startLineNumber="520" endLineNumber="526"/>
            <text>
<![CDATA[          cerr << __PRETTY_FUNCTION__ << ": Unable to find vertices for edge " << token;
          for (int l = 0; l < numV; ++l) {
            if (l > 0)
              cerr << " <->";
            cerr << " " << ids[l];
          }
          delete e;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="a5e077524ed0b9a9c9ebfe8aa58c1a6a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\sync_drivers.cpp" startLineNumber="75" endLineNumber="86"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\twist_filter\twist_filter.cpp" startLineNumber="91" endLineNumber="103"/>
            <text>
<![CDATA[  g_twist_pub.publish(tp);

}
} // namespace

int main(int argc, char **argv)
{
    ros::init(argc, argv, "twist_filter");

    ros::NodeHandle nh;
    ros::NodeHandle private_nh("~");

    ros::Subscriber twist_sub = nh.subscribe("twist_raw", 1, TwistCmdCallback);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="acbc10ca83747e0b0f7b52576137001f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="527" endLineNumber="536"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="516" endLineNumber="525"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="305" endLineNumber="313"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="416" endLineNumber="425"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="405" endLineNumber="414"/>
            <text>
<![CDATA[    tf::Matrix3x3 mat_l;  // localizer
    mat_l.setValue(static_cast<double>(t(0, 0)), static_cast<double>(t(0, 1)), static_cast<double>(t(0, 2)),
                   static_cast<double>(t(1, 0)), static_cast<double>(t(1, 1)), static_cast<double>(t(1, 2)),
                   static_cast<double>(t(2, 0)), static_cast<double>(t(2, 1)), static_cast<double>(t(2, 2)));

    // Update localizer_pose
    localizer_pose.x = t(0, 3);
    localizer_pose.y = t(1, 3);
    localizer_pose.z = t(2, 3);
    mat_l.getRPY(localizer_pose.roll, localizer_pose.pitch, localizer_pose.yaw, 1);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="2c43919b12106400448df76d2889452b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\log\packetstream.h" startLineNumber="60" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Sim3Solver.h" startLineNumber="96" endLineNumber="103"/>
            <text>
<![CDATA[    int mnBestInliers;
    cv::Mat mBestT12;
    cv::Mat mBestRotation;
    cv::Mat mBestTranslation;
    float mBestScale;

    // Scale is fixed to 1 in the stereo/RGBD case
    bool mbFixScale;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="1afab969d7d9c86eca9b5071a7144202">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_points_map_update\sample_points_map_update.cpp" startLineNumber="56" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\map_tools\nodes\pcd_arealist\pcd_arealist.cpp" startLineNumber="36" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\hexacam\nodes\hexacam\hexacam.cpp" startLineNumber="89" endLineNumber="94"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="108" endLineNumber="115"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\plotter.h" startLineNumber="181" endLineNumber="188"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\ORBextractor.h" startLineNumber="97" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="546" endLineNumber="563"/>
            <text>
<![CDATA[      bool converged_;

      /** \brief The minimum number of correspondences that the algorithm needs before attempting to estimate the 
        * transformation. The default value is 3.
        */
      int min_number_correspondences_;

      /** \brief The set of correspondences determined at this ICP step. */
      CorrespondencesPtr correspondences_;

      /** \brief A TransformationEstimation object, used to calculate the 4x4 rigid transformation. */
      TransformationEstimationPtr transformation_estimation_;

      /** \brief A CorrespondenceEstimation object, used to estimate correspondences between the source and the target cloud. */
      CorrespondenceEstimationPtr correspondence_estimation_;

      /** \brief The list of correspondence rejectors to use. */
      std::vector<CorrespondenceRejectorPtr> correspondence_rejectors_;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="6bf04d1b7eced325659dd4cb07ed0194">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1573" endLineNumber="1579"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1464" endLineNumber="1470"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1413" endLineNumber="1419"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1386" endLineNumber="1392"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1362" endLineNumber="1368"/>
            <text>
<![CDATA[  marker.scale.z = MAKER_SCALE_POINT;
  marker.color = createColorRGBA(color);
  if (marker.color.a == COLOR_VALUE_MIN)
    return marker;

  enableMarker(marker);
  return marker;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="76c890c83d5d678e860e2eaf4b907a17">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="95" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="89" endLineNumber="99"/>
            <text>
<![CDATA[static double offset_x, offset_y, offset_z, offset_yaw;  // current_pos - previous_pose

// Can't load if typed "pcl::PointCloud<pcl::PointXYZRGB> map, add;"
static pcl::PointCloud<pcl::PointXYZ> map, add;

// If the map is loaded, map_loaded will be 1.
static int map_loaded = 0;
static int _use_gnss = 1;
static int init_pos_set = 0;

static pcl::NormalDistributionsTransform<pcl::PointXYZ, pcl::PointXYZ> ndt;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="7311cb24a557d9d27f684432623bc39a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\state\state_machine\nodes\state_machine\state_machine_core.h" startLineNumber="31" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit.h" startLineNumber="31" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\cg.h" startLineNumber="70" endLineNumber="78"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\solver.h" startLineNumber="28" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\matrix_structure.h" startLineNumber="27" endLineNumber="39"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\gnss_localizer\nodes\nmea2tfpose\nmea2tfpose_core.h" startLineNumber="31" endLineNumber="51"/>
            <text>
<![CDATA[#ifndef NMEA2TFPOSE_CORE_H
#define NMEA2TFPOSE_CORE_H

// C++ includes
#include <string>
#include <memory>

// ROS includes
#include <ros/ros.h>
#include <geometry_msgs/PoseStamped.h>
#include <nmea_msgs/Sentence.h>
#include <tf/transform_broadcaster.h>

#include "geo_pos_conv.hh"

namespace gnss_localizer
{
class Nmea2TFPoseNode
{
public:
  Nmea2TFPoseNode();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="df792cdcc4683ee98db40cf48de92010">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1252" endLineNumber="1257"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1243" endLineNumber="1248"/>
            <text>
<![CDATA[  insertMarkerArray(marker_array, createWhiteLineMarkerArray(vmap, Color::WHITE, Color::YELLOW));
  insertMarkerArray(marker_array, createStopLineMarkerArray(vmap, Color::WHITE));
  insertMarkerArray(marker_array, createZebraZoneMarkerArray(vmap, Color::WHITE));
  insertMarkerArray(marker_array, createCrossWalkMarkerArray(vmap, Color::WHITE));
  insertMarkerArray(marker_array, createRoadMarkMarkerArray(vmap, Color::WHITE));
  insertMarkerArray(marker_array, createRoadPoleMarkerArray(vmap, Color::GRAY));
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="54134c3b71c0c7022938231eb5b97e29">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="292" endLineNumber="304"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="252" endLineNumber="263"/>
            <text>
<![CDATA[    i++;
  }

  for (int j = 0; j < fill_in_zero; j++)
  {
    if (!checkWaypoint(num + j, "avoidSuddenBraking"))
      continue;
    current_waypoints_.waypoints[num + j].twist.twist.linear.x = 0.0;
  }


  return;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="e5840c2acbe0323bb170a71a00160bf7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.cpp" startLineNumber="149" endLineNumber="154"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.cpp" startLineNumber="105" endLineNumber="110"/>
            <text>
<![CDATA[    nu.rotation    = descretized_angle * -1.0;
    nu.index_theta = -1;
    nu.step        = step;
    nu.curve       = true;
    nu.back        = false;
    state_update_table_[i][1] = nu;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="29587f42b358fbcc7f2e3311d6ee4838">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="805" endLineNumber="821"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_navi.cpp" startLineNumber="26" endLineNumber="37"/>
            <text>
<![CDATA[  return;
}

}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "astar_navi");
  ros::NodeHandle n;
  ros::NodeHandle private_nh_("~");

  double waypoint_velocity_kmph;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="81a07aa0c9d78545b003d2706349be8f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\include\fastvirtualscan\fastvirtualscan.h" startLineNumber="14" endLineNumber="22"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\include\waypoint_follower\libwaypoint_follower.h" startLineNumber="31" endLineNumber="49"/>
            <text>
<![CDATA[#ifndef _LIB_WAYPOINT_FOLLOWER_H_
#define _LIB_WAYPOINT_FOLLOWER_H_

// C++ header
#include <iostream>
#include <sstream>
#include <fstream>

// ROS header
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
#include "waypoint_follower/lane.h"

class WayPoints
{
protected:
  waypoint_follower::lane current_waypoints_;

public:
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="dac9b0b3f1add5a40d52486f22e1f48b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="272" endLineNumber="278"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="210" endLineNumber="216"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="104" endLineNumber="110"/>
            <text>
<![CDATA[    QLabel * imagesizeshow;

    QSplitter * imagesplitter;
    QTabWidget * cameraimagetab;
    QTime cameratimestamp;
    cv::Mat calibimage;
    QLabel * calibimageshow;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="79141f79ffcfa7e64ed5d7a9e4bc689c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\PnPsolver.h" startLineNumber="163" endLineNumber="174"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\PnPsolver.h" startLineNumber="152" endLineNumber="159"/>
            <text>
<![CDATA[  cv::Mat mTcwi;
  vector<bool> mvbInliersi;
  int mnInliersi;

  // Current Ransac State
  int mnIterations;
  vector<bool> mvbBestInliers;
  int mnBestInliers;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="619f70d72e090fed3a3708f43b2e82b2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\featurepyramid.cpp" startLineNumber="343" endLineNumber="348"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\featurepyramid.cpp" startLineNumber="338" endLineNumber="346"/>
            <text>
<![CDATA[				src+=BLOCK_SQ;
			}

			//texture gradient
			*dst=0.2357*t1;
			dst+=O_DIM;
			*dst=0.2357*t2;
			dst+=O_DIM;
			*dst=0.2357*t3;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="71d3bdd5c9d66928a886fbd1ced6f4fb">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\PnPsolver.h" startLineNumber="171" endLineNumber="186"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Frame.h" startLineNumber="182" endLineNumber="190"/>
            <text>
<![CDATA[    vector<float> mvInvLevelSigma2;

    // Undistorted Image Bounds (computed once).
    static float mnMinX;
    static float mnMaxX;
    static float mnMinY;
    static float mnMaxY;

    static bool mbInitialComputations;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="af6b84a3abd1ae58bce3f5f9651b2cb8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="87" endLineNumber="93"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="83" endLineNumber="89"/>
            <text>
<![CDATA[  if (!private_nh.getParam("map_resolution", map_resolution_)) {
    map_resolution_ = 0.25;
    ROS_INFO("map resolution %f", map_resolution_);
  }
  if (!private_nh.getParam("map_x_size", map_x_size_)) {
    map_x_size_ = 40.0;
    ROS_INFO("map x size %f", map_x_size_);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="789694fac91c46df7f33332ac1f97d2d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="112" endLineNumber="124"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="526" endLineNumber="532"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="124" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="53" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\dpm_ocv\dpm_ocv.cpp" startLineNumber="47" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\libvelocity_set.h" startLineNumber="42" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\libvelocity_set.h" startLineNumber="44" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Sim3Solver.h" startLineNumber="116" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapDrawer.h" startLineNumber="52" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.h" startLineNumber="34" endLineNumber="39"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\integrated_viewer\node\image_viewer_plugin\image_viewer_plugin.h" startLineNumber="59" endLineNumber="68"/>
            <text>
<![CDATA[    static const QString kImageDataType;
    static const QString kRectDataTypeBase;
    static const QString kPointDataType;

    // The blank topic name
    static const QString kBlankTopic;

    // The base topic name of detection result rectangles
    static const std::string  kRectDataTypeImageObjRanged;
    static const std::string  kRectDataTypeImageObjTracked;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="808e996fd96c324a4aa71405245b3182">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_core.h" startLineNumber="95" endLineNumber="102"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\plotter.h" startLineNumber="152" endLineNumber="163"/>
            <text>
<![CDATA[        GLenum drawing_mode;
        Colour colour;
        bool used;
    };

    struct PANGOLIN_EXPORT PlotImplicit
    {
        // Assign to gl_FragColor
        void CreatePlot(const std::string& code);

        // Expression uses x,y and assignes colours [0,1] to r,g,b,a
        void CreateColouredPlot(const std::string& code);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="f74649100b40cab3ded9d66084e8ccd7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="617" endLineNumber="624"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="587" endLineNumber="594"/>
            <text>
<![CDATA[        if (indent != -1) {
            --indent;
            if (! u_.array_->empty()) {
                _indent(oi, indent);
            }
        }
        *oi++ = ']';
        break;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="5b7ee26d8d544947dcdebdcdabbb2723">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="889" endLineNumber="900"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="826" endLineNumber="834"/>
            <text>
<![CDATA[  rate.sleep();

  // signaldata
  for (i=0; i<signaldatas.size(); i++) {
    if (signaldatas[i].id <= 0) {
      continue;
    }
    int vid = signaldatas[i].vid;
    int pid = vectorclasses[vid].pid;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="5beb42673060d900233ac2ca066e9d22">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="493" endLineNumber="498"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="776" endLineNumber="781"/>
            <text>
<![CDATA[	int          sbin     = args->sbin;
	int          level    = args->F_C;
	CUdeviceptr  hist_dev = args->hist_dev;
	CUdeviceptr  norm_dev = args->norm_dev;
	CUdeviceptr  feat_dev = args->feat_dev;
	CUstream     stream   = args->stream;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="f6550353214442e6b2d1262592ac1bdc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\hexacam\nodes\hexacam\hexacam.cpp" startLineNumber="401" endLineNumber="408"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\hexacam\nodes\hexacam\hexacam.cpp" startLineNumber="154" endLineNumber="161"/>
            <text>
<![CDATA[	if((sock = socket(PF_INET, SOCK_DGRAM, 0))<0){
		throw("START CAMERA SOCKET FAILED\n");
	}

	local.sin_family = AF_INET;
	local.sin_addr.s_addr = htonl(INADDR_ANY);
	local.sin_port = htons(setup_port);
	bind(sock, reinterpret_cast<sockaddr *>(&local), sizeof(local));
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="50423e0cd222726983b73ce8e121ed78">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Sim3Solver.h" startLineNumber="110" endLineNumber="123"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\ORBextractor.h" startLineNumber="95" endLineNumber="101"/>
            <text>
<![CDATA[    std::vector<cv::Point> pattern;

    int nfeatures;
    double scaleFactor;
    int nlevels;
    int iniThFAST;
    int minThFAST;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="a42be95fdaa43315041d511f1a89016e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_d_viewer\scan_image_d_viewer.cpp" startLineNumber="78" endLineNumber="83"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="99" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_d_viewer\image_d_viewer.cpp" startLineNumber="112" endLineNumber="117"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\fusion\fusion.cpp" startLineNumber="392" endLineNumber="397"/>
            <text>
<![CDATA[		char distance_string[32];
		CvFont dfont;
		float hscale      = 1.0f;
		float vscale      = 1.0f;
		float italicscale = 0.0f;
		int  thickness    = 2;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="9e927340104208f28f53f90480cb2e23">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\oculus_socket\nodes\oculus_sender\oculus_sender.cpp" startLineNumber="59" endLineNumber="66"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\oculus_socket\nodes\oculus_sender\oculus_sender.cpp" startLineNumber="42" endLineNumber="49"/>
            <text>
<![CDATA[  tf::Quaternion q(input->pose.orientation.x, input->pose.orientation.y, input->pose.orientation.z, input->pose.orientation.w);
  tf::Matrix3x3 m(q);

  m.getEulerYPR(yaw, pitch, roll);
  
  ROS_INFO("x=[%f] y=[%f] z=[%f]", input->pose.position.x, input->pose.position.y, input->pose.position.z);
  ROS_INFO("roll=[%f] pitch=[%f] yaw=[%f], PI=[%f]", roll/PI*180, pitch/PI*180, yaw/PI*180, PI);
  gettimeofday(&t,NULL);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="dded85b5a44d1f2ffeffe9b88cd37bcb">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="122" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="92" endLineNumber="101"/>
            <text>
<![CDATA[void LaneSelectNode::initForLaneSelect()
{
  if(!isAllTopicsSubscribed())
    return;

  // search closest waypoint number for each lanes
  if (!getClosestWaypointNumberForEachLanes())
  {
    resetLaneIdx();
    return;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="e87b092ff54c4ba7e51297bdf150c4de">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\gltext.cpp" startLineNumber="187" endLineNumber="196"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\gltext.cpp" startLineNumber="160" endLineNumber="169"/>
            <text>
<![CDATA[    Draw();

    // Restore viewport
    glViewport(view[0],view[1],view[2],view[3]);

    // Restore modelview / project matrices
    glMatrixMode(GL_PROJECTION);
    glPopMatrix();
    glMatrixMode(GL_MODELVIEW);
    glPopMatrix();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="b7d2dbbf3c5a381cfd4acdda4363a6e6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\sparse_block_matrix_ccs.h" startLineNumber="184" endLineNumber="190"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\sparse_block_matrix_ccs.h" startLineNumber="152" endLineNumber="158"/>
            <text>
<![CDATA[            for (typename SparseColumn::const_iterator it = _blockCols[i].begin(); it!=_blockCols[i].end(); ++it) {
              const SparseMatrixBlock* b=it->block;
              int rstart=it->row ? _rowBlockIndices[it->row-1] : 0;

              int elemsToCopy = b->rows();
              if (upperTriangle && rstart == cstart)
                elemsToCopy = c + 1;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="3d7f9f9e4a2c9a9ec1fc97ddd576e0ed">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\pointgrey\nodes\grasshopper3\grasshopper3.cpp" startLineNumber="262" endLineNumber="268"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\hexacam\nodes\hexacam\hexacam.cpp" startLineNumber="611" endLineNumber="617"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\baumer\nodes\vlg22\src\vlg22_main.cpp" startLineNumber="23" endLineNumber="29"/>
            <text>
<![CDATA[	double fps;
	if (private_nh.getParam("fps", fps))
	{
		ROS_INFO("fps set to %.2f", fps);
	} else {
		fps = 15.0;
		ROS_INFO("No param received, defaulting to %.2f", fps);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="cb5c77c451a960e5c654f5b97895c395">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="675" endLineNumber="681"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="667" endLineNumber="673"/>
            <text>
<![CDATA[  a = fabs(l[1] / l[0]);
  if (a < 0.0001)
  {
    if (l[1] > 0)
      l[1] = fabs(l[0]) / 1000.0;
    else
      l[1] = -fabs(l[0]) / 1000.0;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="b656b180445c156b2d3d2c64c35e821e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_matching\orb_matching.cpp" startLineNumber="460" endLineNumber="465"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_matching\orb_matching.cpp" startLineNumber="459" endLineNumber="464"/>
            <text>
<![CDATA[			gpose.pose.pose.position.x = pose->getOrigin().x();
			gpose.pose.pose.position.y = pose->getOrigin().y();
			gpose.pose.pose.position.z = pose->getOrigin().z();
			gpose.pose.pose.orientation.x = pose->getRotation().x();
			gpose.pose.pose.orientation.y = pose->getRotation().y();
			gpose.pose.pose.orientation.z = pose->getRotation().z();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="3e90398062177d7e6fd1057b72872aa6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\base_unary_edge.h" startLineNumber="83" endLineNumber="88"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\base_multi_edge.h" startLineNumber="93" endLineNumber="98"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\base_binary_edge.h" startLineNumber="98" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\ndt.h" startLineNumber="217" endLineNumber="223"/>
            <text>
<![CDATA[    protected:

      using Registration<PointSource, PointTarget>::reg_name_;
      using Registration<PointSource, PointTarget>::getClassName;
      using Registration<PointSource, PointTarget>::input_;
      using Registration<PointSource, PointTarget>::indices_;
      using Registration<PointSource, PointTarget>::target_;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="3052ae198b8e118b439953c351aaa9cd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="264" endLineNumber="271"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="182" endLineNumber="189"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="150" endLineNumber="157"/>
            <text>
<![CDATA[	std::reverse(l.waypoints.begin(), l.waypoints.end());

	std::vector<size_t> reverse_start_indexes;
	for (const size_t i : start_indexes)
		reverse_start_indexes.push_back(l.waypoints.size() - i - 1);
	std::reverse(reverse_start_indexes.begin(), reverse_start_indexes.end());

	for (const size_t i : reverse_start_indexes)
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="22c62986318482884ed698c57d524dee">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_points_map_update\sample_points_map_update.cpp" startLineNumber="153" endLineNumber="162"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\path_select\path_select.cpp" startLineNumber="39" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\obstacle_avoid\obstacle_avoid.cpp" startLineNumber="39" endLineNumber="49"/>
            <text>
<![CDATA[    _pub.publish(msg);
}


int main(int argc, char **argv)
{
    ros::init(argc, argv, "obstacle_avoid");

    ros::NodeHandle nh;
    ros::Subscriber twist_sub = nh.subscribe("temporal_waypoints", 1, callback);
    _pub = nh.advertise<waypoint_follower::lane>("final_waypoints", 1000,true);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="86c6bf564a0af6a0d0e6e8bf9b9e84ba">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\obj_fusion\obj_fusion.cpp" startLineNumber="247" endLineNumber="255"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_lidar_track\euclidean_lidar_track.cpp" startLineNumber="122" endLineNumber="130"/>
            <text>
<![CDATA[int main(int argc, char *argv[]) {
  /* ROS initialization */
  ros::init(argc, argv, "euclidean_lidar_track");

  ros::NodeHandle n;
  ros::NodeHandle private_n("~");

  if (!private_n.getParam("threshold_dist", threshold_dist)) {
    threshold_dist = 2.0;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="5a937ae25de9d8dfb1ab98603b401d54">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="65" endLineNumber="70"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\plotter.h" startLineNumber="178" endLineNumber="185"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.h" startLineNumber="348" endLineNumber="353"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\src\__nodes\mt\TrackingThread.h" startLineNumber="43" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="241" endLineNumber="246"/>
            <text>
<![CDATA[  NDPtr *nd;
  int layer;
  int x;
  int y;
  int z;
  int to_x;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="2f7a2135d50c1e5cb8fa73d1f8a1bd82">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_mobility\sample_mobility.cpp" startLineNumber="68" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\map_tools\nodes\pcd_converter\csv2pcd.cpp" startLineNumber="15" endLineNumber="21"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_navi\lane_navi.cpp" startLineNumber="55" endLineNumber="61"/>
            <text>
<![CDATA[std::vector<std::string> split(const std::string& str, char delim)
{
	std::stringstream ss(str);
	std::string s;
	std::vector<std::string> vec;
	while (std::getline(ss, s, delim))
		vec.push_back(s);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="51b3c5b494feaf97d63c22636a075acf">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="132" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\log\packetstream.h" startLineNumber="61" endLineNumber="66"/>
            <text>
<![CDATA[    std::string     uri;
    json::value     info;
    json::value     meta;
    int64_t         version;
    int64_t         data_alignment_bytes;
    std::string     data_definitions;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="8eb8fa6800012fd9b5bfb7735d3403c7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\includes\Cluster.h" startLineNumber="60" endLineNumber="67"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\includes\Cluster.h" startLineNumber="55" endLineNumber="62"/>
            <text>
<![CDATA[	pcl::PointXYZ 						average_point_;
	pcl::PointXYZ 						centroid_;
	double 								orientation_angle_;
	float 								length_, width_, height_;

	jsk_recognition_msgs::BoundingBox 	bounding_box_;

	std::string							label_;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="066d741e9571b4bf67516957b603c67b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\load_model.cpp" startLineNumber="289" endLineNumber="298"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\load_model.cpp" startLineNumber="280" endLineNumber="289"/>
            <text>
<![CDATA[	s_free(MO->MI->y2);
	s_free(MO->MI);

	//free root-filter information
	for(int ii=0;ii<MO->RF->NoR;ii++)
	{
		s_free(MO->RF->root_size[ii]);
		s_free(MO->RF->rootfilter[ii]);
	}
	s_free(MO->RF->rootsym);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="8d4de45d0b3edbbe22c9f34b1cd8301f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\ndt.h" startLineNumber="177" endLineNumber="189"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\ndt.h" startLineNumber="132" endLineNumber="144"/>
            <text>
<![CDATA[      inline float
      getResolution () const
      {
        return (resolution_);
      }

      /** \brief Get the newton line search maximum step length.
        * \return maximum step length
        */
      inline double
      getStepSize () const
      {
        return (step_size_);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="2bdf2429383728e93b459f57acb381cb">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\gltext.cpp" startLineNumber="141" endLineNumber="147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\compat\glutbitmap.h" startLineNumber="49" endLineNumber="55"/>
            <text>
<![CDATA[#else
    glGetDoublev(GL_PROJECTION_MATRIX, projection );
    glGetDoublev(GL_MODELVIEW_MATRIX, modelview );
#endif
    glGetIntegerv(GL_VIEWPORT, view );
    
    pangolin::glProject(x, y, z, modelview, projection, view,
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="e20161991e805bf5fa9effade18e626d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="61" endLineNumber="66"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\mainwindow.h" startLineNumber="21" endLineNumber="26"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\vscan_lidar_track\mainwindow.h" startLineNumber="117" endLineNumber="122"/>
            <text>
<![CDATA[public slots:
    void slotReceive();
    void slotReceiveDetection();
    void slotReceiveBoxes();
    void slotReceiveTF();
    void slotReceiveTFMap2Lidar();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="c7542288eb8611ed80bd804778de3831">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_viz.cpp" startLineNumber="158" endLineNumber="164"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set.cpp" startLineNumber="51" endLineNumber="57"/>
            <text>
<![CDATA[  marker.header.stamp = ros::Time();
  marker.ns = "my_namespace";
  marker.id = 0;
  marker.type = visualization_msgs::Marker::CUBE;
  marker.action = visualization_msgs::Marker::ADD;

  static geometry_msgs::Point prev_obstacle_point;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="f8b03ff3399d312fe2e3268ea9de16bb">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="57" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\display_internal.h" startLineNumber="61" endLineNumber="74"/>
            <text>
<![CDATA[    View base;
    
    // Named views which are managed by pangolin (i.e. created / deleted by pangolin)
    ViewMap named_managed_views;

    // Optional user app
    UserApp* user_app;
    
    // Global keypress hooks
    KeyhookMap keypress_hooks;
    
    // Manage fullscreen (ToggleFullscreen is quite new)
    bool is_double_buffered;
    bool is_fullscreen;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="90acee3d92827c8f374fdd856b0a611a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\DUtils\Timestamp.cpp" startLineNumber="143" endLineNumber="153"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\DUtils\Timestamp.cpp" startLineNumber="121" endLineNumber="131"/>
            <text>
<![CDATA[	unsigned long secs = (long)floor(s);
	unsigned long usecs = (long)((s - (double)secs) * 1e6);

  return this->plus(secs, usecs);
}

Timestamp Timestamp::plus(unsigned long secs, unsigned long usecs) const
{
  Timestamp t;

	const unsigned long max = 1000000ul;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="f8a3c02daea0ce536a60df3992f1a4e6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\datalog.h" startLineNumber="135" endLineNumber="140"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\TemplatedVocabulary.h" startLineNumber="404" endLineNumber="419"/>
            <text>
<![CDATA[protected:

  /// Branching factor
  int m_k;
  
  /// Depth levels 
  int m_L;
  
  /// Weighting method
  WeightingType m_weighting;
  
  /// Scoring method
  ScoringType m_scoring;
  
  /// Object for computing scores
  GeneralScoring* m_scoring_object;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="7bfe710e2fdb6fd9ebdc66bf2b04074e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1254" endLineNumber="1259"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1244" endLineNumber="1249"/>
            <text>
<![CDATA[  insertMarkerArray(marker_array, createStopLineMarkerArray(vmap, Color::WHITE));
  insertMarkerArray(marker_array, createZebraZoneMarkerArray(vmap, Color::WHITE));
  insertMarkerArray(marker_array, createCrossWalkMarkerArray(vmap, Color::WHITE));
  insertMarkerArray(marker_array, createRoadMarkMarkerArray(vmap, Color::WHITE));
  insertMarkerArray(marker_array, createRoadPoleMarkerArray(vmap, Color::GRAY));
  insertMarkerArray(marker_array, createRoadSignMarkerArray(vmap, Color::GREEN, Color::GRAY));
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="d569e051f43793ec77f77ecc998dec9f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.h" startLineNumber="120" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\KeyFrame.h" startLineNumber="71" endLineNumber="78"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\includes\Cluster.h" startLineNumber="90" endLineNumber="100"/>
            <text>
<![CDATA[	pcl::PointXYZ 						GetMinPoint();
	/* \brief Returns the maximum point in the cluster*/
	pcl::PointXYZ 						GetMaxPoint();
	/* \brief Returns the average point in the cluster*/
	pcl::PointXYZ 						GetAveragePoint();
	/* \brief Returns the centroid point in the cluster */
	pcl::PointXYZ 						GetCentroid();
	/* \brief Returns the calculated BoundingBox of the object */
	jsk_recognition_msgs::BoundingBox	GetBoundingBox();
	/* \brief Returns the angle in radians of the BoundingBox. 0 if pose estimation was not enabled. */
	double								GetOrientationAngle();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="ca0226e310bb08c99fd1364cbc343dd1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.cpp" startLineNumber="300" endLineNumber="305"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.cpp" startLineNumber="151" endLineNumber="156"/>
            <text>
<![CDATA[  const float invz = 1.0f/trans_xyz[2];
  Vector3d res;
  res[0] = trans_xyz[0]*invz*fx + cx;
  res[1] = trans_xyz[1]*invz*fy + cy;
  res[2] = res[0] - bf*invz;
  return res;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="415dca68678fe1bddc6e784e511af730">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="915" endLineNumber="924"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="878" endLineNumber="886"/>
            <text>
<![CDATA[	if(calc_flag == PART){
		gettimeofday(&tv_fconv_others_end, NULL);
		tvsub(&tv_fconv_others_end, &tv_fconv_others_start, &tv);
		time_fconv_others += tv.tv_sec * 1000.0 + (float)tv.tv_usec / 1000.0;
	}

	/* start threads */
	if(calc_flag == PART){
		gettimeofday(&tv_fconv_start, NULL);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="76aeaaf5d9572a98a8404578d266f17d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="945" endLineNumber="952"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="504" endLineNumber="510"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="756" endLineNumber="764"/>
            <text>
<![CDATA[  estimated_vel_pub = nh.advertise<geometry_msgs::Vector3Stamped>("/estimated_vel", 1000);
  time_icp_matching_pub = nh.advertise<std_msgs::Float32>("/time_icp_matching", 1000);
  icp_stat_pub = nh.advertise<icp_localizer::icp_stat>("/icp_stat", 1000);
//  ndt_reliability_pub = nh.advertise<std_msgs::Float32>("/ndt_reliability", 1000);

  // Subscribers
  ros::Subscriber param_sub = nh.subscribe("config/icp", 10, param_callback);
  ros::Subscriber gnss_sub = nh.subscribe("gnss_pose", 10, gnss_callback);
  ros::Subscriber map_sub = nh.subscribe("points_map", 10, map_callback);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="57660d71a571b01beb21f56ba26fe53d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="379" endLineNumber="385"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl_es_compat.h" startLineNumber="28" endLineNumber="33"/>
            <text>
<![CDATA[#else
    #define glOrtho                     glOrthof
    #define glGenFramebuffersEXT        glGenFramebuffersOES
    #define glDeleteFramebuffersEXT     glDeleteFramebuffersOES
    #define glBindFramebufferEXT        glBindFramebufferOES
    #define glDrawBuffers               glDrawBuffersOES
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="d8d5fe4ca00fbcf05dffe3b83bb3bc31">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="906" endLineNumber="913"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="832" endLineNumber="839"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="738" endLineNumber="745"/>
            <text>
<![CDATA[	uintptr_t pointer_Ix = (uintptr_t)sub_dst_Ix;
	uintptr_t pointer_Iy = (uintptr_t)sub_dst_Iy;
	for(int level=interval; level<L_MAX; level++) {
		int L = level - interval;

		if(feature_size[level*2]+2*pady<MO->MI->max_Y ||(feature_size[level*2+1]+2*padx<MO->MI->max_X))
		{
			continue;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="5b95dcc233b78d2ad2c01c7f61a7d064">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="90" endLineNumber="96"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="53" endLineNumber="59"/>
            <text>
<![CDATA[class CalibrationToolkitBase : public QWidget
{
    Q_OBJECT
public:
    CalibrationToolkitBase(QWidget * parent=0);
protected:
    QSplitter * splitter;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="6e1d542970ef32132ba513fb250eb491">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="827" endLineNumber="834"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="824" endLineNumber="831"/>
            <text>
<![CDATA[				M_array[L][jj][kk] = (FLOAT *)pointer_M;
				pointer_M += (unsigned long long int)(dims0*dims1*sizeof(FLOAT));

				tmpM_array[L][jj][kk] = (FLOAT *)pointer_tmpM;
				pointer_tmpM += (unsigned long long int)(dims0*dims1*sizeof(FLOAT));

				tmpIx_array[L][jj][kk] = (int *)pointer_tmpIx;
				pointer_tmpIx += (unsigned long long int)(dims0*dims1*sizeof(int));
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="c9723c987a21428690ddabe90ab45517">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="172" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="156" endLineNumber="161"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="138" endLineNumber="143"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="123" endLineNumber="128"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="109" endLineNumber="114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_receiver\udon_receiver.cpp" startLineNumber="58" endLineNumber="63"/>
            <text>
<![CDATA[		if (nbytes < 0) {
			ROS_ERROR_STREAM("recv: " << std::strerror(errno));
			goto delete_buf;
		} else if (nbytes == 0) {
			ROS_INFO_STREAM("disconnect " << astr << ":" << ntohs(client_addr.sin_port));
			goto delete_buf;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="e24a572d0da97d7a7310c0923228ec8f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lane_detector\nodes\lane_detector\lane_detector.cpp" startLineNumber="464" endLineNumber="472"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lane_detector\nodes\lane_detector\lane_detector.cpp" startLineNumber="446" endLineNumber="454"/>
            <text>
<![CDATA[#if defined(USE_POSIX_SHARED_MEMORY)
#ifdef SHOW_DETAIL
  cvLine(temp_frame, cvPoint(x, laneR.k.get()*x + laneR.b.get()),
         cvPoint(x2, laneR.k.get()*x2 + laneR.b.get()), PURPLE, 2);
#endif

  cvLine(org_frame, cvPoint(x, laneR.k.get()*x + laneR.b.get() + org_offset),
         cvPoint(x2, laneR.k.get()*x2 + laneR.b.get() + org_offset), PURPLE, 2);
#else
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="d17a0b9c6df36f953beda9d117cb720f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="337" endLineNumber="342"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="311" endLineNumber="316"/>
            <text>
<![CDATA[		&pm_size_array_dev[pt->pid],           // int *size_array
		&numpart_dev[pt->pid],                 // int *numpart,
		&PIDX_array_dev[pt->pid],              // int *PIDX_array,
		(void*)&(pt->NoC),                  // int NoC
		(void*)&(pt->max_numpart),          // int max_numpart
		(void*)&(pt->interval),             // int interval
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="3d43e8e647203d22a138ab00247a111d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="58" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\integrated_viewer\node\traffic_light_plugin\traffic_light_plugin.h" startLineNumber="26" endLineNumber="34"/>
            <text>
<![CDATA[      RED       = 0,
      GREEN     = 1,
      UNDEFINED = 2,
    };

    // The structure to represent viewer information
    struct StateInfo {
      QString label;
      QColor label_color;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="419a9a624240aae450ca291ce09fd373">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\vectacam\nodes\vectacam\VectaCam.h" startLineNumber="51" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\plotter.h" startLineNumber="125" endLineNumber="133"/>
            <text>
<![CDATA[protected:
    struct PANGOLIN_EXPORT Tick
    {
        float val;
        float factor;
        std::string symbol;
    };

    struct PANGOLIN_EXPORT PlotAttrib
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="f9d3a14ae205db5a7cc04a88c2163b36">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="877" endLineNumber="885"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="650" endLineNumber="660"/>
            <text>
<![CDATA[	int sum_SNJ = 0;
	/* prepare for parallel execution */
	for(int level=interval; level<L_MAX; level++) {
		int L = level - interval;

		if(feature_size[level*2]+2*pady<MO->MI->max_Y ||(feature_size[level*2+1]+2*padx<MO->MI->max_X))
		{
			continue;
		}

		for(int j=0; j<NoC; j++) {
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="aaabf0766cb5d8847ae73c1dbe907c57">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\glviewer\GLViewer\glviewer.cpp" startLineNumber="39" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2109" endLineNumber="2114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="929" endLineNumber="934"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="425" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="423" endLineNumber="429"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="422" endLineNumber="428"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="421" endLineNumber="427"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="420" endLineNumber="426"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="419" endLineNumber="425"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="418" endLineNumber="423"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="416" endLineNumber="422"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="415" endLineNumber="421"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="414" endLineNumber="420"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="413" endLineNumber="419"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="412" endLineNumber="418"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="411" endLineNumber="416"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="409" endLineNumber="415"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="408" endLineNumber="414"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="407" endLineNumber="413"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="406" endLineNumber="412"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="405" endLineNumber="411"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="404" endLineNumber="409"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="402" endLineNumber="408"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="401" endLineNumber="407"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="400" endLineNumber="406"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="399" endLineNumber="405"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="398" endLineNumber="404"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="397" endLineNumber="402"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="432" endLineNumber="437"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="430" endLineNumber="436"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="429" endLineNumber="435"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="428" endLineNumber="434"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="427" endLineNumber="433"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="426" endLineNumber="432"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="425" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="423" endLineNumber="429"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="422" endLineNumber="428"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="421" endLineNumber="427"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="420" endLineNumber="426"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="419" endLineNumber="425"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="418" endLineNumber="423"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="416" endLineNumber="422"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="415" endLineNumber="421"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="414" endLineNumber="420"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="413" endLineNumber="419"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="412" endLineNumber="418"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="411" endLineNumber="416"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="409" endLineNumber="415"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="408" endLineNumber="414"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="407" endLineNumber="413"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="406" endLineNumber="412"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="405" endLineNumber="411"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="404" endLineNumber="409"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="741" endLineNumber="746"/>
            <text>
<![CDATA[  initial_pose.x = 0.0;
  initial_pose.y = 0.0;
  initial_pose.z = 0.0;
  initial_pose.roll = 0.0;
  initial_pose.pitch = 0.0;
  initial_pose.yaw = 0.0;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="02171a9a2b1678468daddfffd7532864">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="387" endLineNumber="395"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="382" endLineNumber="392"/>
            <text>
<![CDATA[				src += blocks[0]*blocks[1];
			}

			/* texture features */
			*dst = 0.2357 * t1;
			dst += out[0]*out[1];

			*dst = 0.2357 * t2;
			dst += out[0]*out[1];

			*dst = 0.2357 * t3;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="e88f0d1f732378a42aeb388e9a5cf622">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\LocalMapping.h" startLineNumber="118" endLineNumber="125"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.h" startLineNumber="33" endLineNumber="38"/>
            <text>
<![CDATA[    static cv::Point Clicked_point;
    static int Signal_color;
    int H_slider_val;
    int S_slider_val;
    int V_slider_val;
    static cv::Mat src_img;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="968523ce8d60b158c5427eb857f5e961">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_client\vector_map_client.cpp" startLineNumber="233" endLineNumber="238"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_client\vector_map_client.cpp" startLineNumber="230" endLineNumber="235"/>
            <text>
<![CDATA[        case Signal::PEDESTRIAN_BLUE:
          vector_marker = createVectorMarker("signal", id++, Color::BLUE, vmap, vector);
          break;
        case Signal::YELLOW:
          vector_marker = createVectorMarker("signal", id++, Color::YELLOW, vmap, vector);
          break;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="87b8c551de8ef57251397efc0bbce6db">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="876" endLineNumber="886"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="809" endLineNumber="818"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="707" endLineNumber="714"/>
            <text>
<![CDATA[	for(int level=interval; level<L_MAX; level++) {
		int L = level - interval;

		if( (FSIZE[level*2]+2*pady < max_Y) || (FSIZE[level*2+1]+2*padx < max_X) )
			continue;

		for(int jj=0; jj<NoC; jj++) {
			for(int kk=0; kk<numpart[jj]; kk++) {
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="b54b13ea5642b92a0fbd0b3fc21375dd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\polygon\packages\points2polygon\nodes\points2polygon\points2polygon.cpp" startLineNumber="49" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\laserscan2costmap\laserscan2costmap.cpp" startLineNumber="48" endLineNumber="53"/>
            <text>
<![CDATA[std::string g_sensor_frame = "/velodyne";  // sensor which publihes lasescan message
std::string g_scan_topic = "/scan";        // laser scan topic
double g_resolution = 0.1;                 // [m]
int g_scan_size_x = 1000;                  // actual scanning size
int g_scan_size_y = 1000;
int g_map_size_x = 500;  // publishing occupancy grid map size
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="2b43ebcf5a565ad4f84fb10c09b0214e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="569" endLineNumber="576"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="428" endLineNumber="435"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="316" endLineNumber="322"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="282" endLineNumber="289"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="144" endLineNumber="153"/>
            <text>
<![CDATA[	if(pt->pid == 0 && pt->calc_flag == PART){
		gettimeofday(&tv_fconv_others_end, NULL);
		tvsub(&tv_fconv_others_end, &tv_fconv_others_start, &tv);
		time_fconv_others += tv.tv_sec * 1000.0 + (float)tv.tv_usec / 1000.0;
	}


	/* upload data to GPU memory */
	if(pt->pid == 0){
		gettimeofday(&tv_memcpy_start, NULL);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="a6f2bf4c3d5e5f651cc80725907ae883">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1323" endLineNumber="1331"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="641" endLineNumber="649"/>
            <text>
<![CDATA[    calibvelodynenormalstab->setCurrentIndex(id);
}

void CalibrateCameraVelodyneChessboardBase::projectPointsSlot()
{
    cv::Mat invR=cameraextrinsicmat(cv::Rect(0,0,3,3)).t();
    cv::Mat invT=-invR*(cameraextrinsicmat(cv::Rect(3,0,1,3)));
    int i,n=calibvelodynespoints.size();
    for(i=0;i<n;i++)
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="78e7bc02944ba9e079b33361a9ff9945">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="312" endLineNumber="317"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="160" endLineNumber="165"/>
            <text>
<![CDATA[		&PIDX_array_dev[pt->pid],
		&numpart_dev[pt->pid],
		(void*)&(pt->NoC),
		(void*)&(pt->max_numpart),
		(void*)&(pt->interval),
		(void*)&(pt->L_MAX),
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="ebfa48350fdad79f27b302042334e74b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\search_info_ros.h" startLineNumber="43" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\src\__nodes\mt\DebugMT.h" startLineNumber="48" endLineNumber="57"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\Context.h" startLineNumber="20" endLineNumber="27"/>
            <text>
<![CDATA[	cv::Point topLeft;
	cv::Point botRight;
	LightState lightState;
	int signalID;
	int stateJudgeCount;
};

#endif
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="247b1cb19d006a2c4c3d7185ed758cc4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_uploader\pos_uploader.cpp" startLineNumber="68" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="50" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler.h" startLineNumber="76" endLineNumber="81"/>
            <text>
<![CDATA[    const static int hwin = 8;
    AxisDirection enforce_up;
    float tf; // translation factor
    float zf; // zoom fraction
    CameraSpec cameraspec;
    GLprecision last_z;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="4cac84e66398af840b7ec8520b873ff7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="94" endLineNumber="99"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="92" endLineNumber="97"/>
            <text>
<![CDATA[	struct timeval tv_fconv_kernel_start, tv_fconv_kernel_end;
	float time_fconv_kernel;
	struct timeval tv_fconv_memcpyHtoD_start, tv_fconv_memcpyHtoD_end;
	float time_fconv_memcpyHtoD;
	struct timeval tv_fconv_memcpyDtoH_start, tv_fconv_memcpyDtoH_end;
	float time_fconv_memcpyDtoH;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="f8830befc5d7b7bcef1815c95bf17602">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\dpm_ttic\dpm_ttic.cpp" startLineNumber="155" endLineNumber="162"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\dpm_ttic\dpm_ttic.cpp" startLineNumber="150" endLineNumber="157"/>
            <text>
<![CDATA[	std::string comp_csv_path;
	if (!private_nh.getParam("comp_model_path", comp_csv_path)) {
		comp_csv_path = STR(MODEL_DIR) "car_comp.csv";
	}

	std::string root_csv_path;
	if (!private_nh.getParam("root_model_path", root_csv_path)) {
		root_csv_path = STR(MODEL_DIR) "car_root.csv";
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="cc935705f65ca5d2648d1e2a32d55973">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="1387" endLineNumber="1394"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="1380" endLineNumber="1387"/>
            <text>
<![CDATA[    try {
        pangolin::json::value v(std::numeric_limits<double>::quiet_NaN());
        ok(false, "should not accept NaN");
    } catch (std::overflow_error e) {
        ok(true, "should not accept NaN");
    }

    try {
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="f28faf387c52aa985d07d310933769a3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\lib\pos_db\util.cpp" startLineNumber="31" endLineNumber="36"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\lib\pos_db\util.cpp" startLineNumber="29" endLineNumber="34"/>
            <text>
<![CDATA[  std::memcpy(header + len, &major, sizeof(int16_t));
  len += sizeof(int16_t);
  std::memcpy(header + len, &minor, sizeof(int16_t));
  len += sizeof(int16_t);
  std::memcpy(header + len, &sql_inst, sizeof(int32_t));
  len += sizeof(int32_t);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="8f8db7ec1b96c68e02b45f9779004067">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\laserscan2costmap\laserscan2costmap.cpp" startLineNumber="148" endLineNumber="157"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\laserscan2costmap\laserscan2costmap.cpp" startLineNumber="129" endLineNumber="138"/>
            <text>
<![CDATA[  int ix = (x + transform.getOrigin().x()) / g_resolution;
  int iy = (y + transform.getOrigin().y()) / g_resolution;

  // Make indexes positive value
  int global_grid_x = (ix + 100000 * g_scan_size_x) % g_scan_size_x;
  int global_grid_y = (iy + 100000 * g_scan_size_y) % g_scan_size_y;

  int global_index = global_grid_x + global_grid_y * g_scan_size_x;

  return global_index;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="08bfe19bfc27c00d7f1a846a5dd65970">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="204" endLineNumber="209"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="201" endLineNumber="206"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="155" endLineNumber="160"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="137" endLineNumber="142"/>
            <text>
<![CDATA[	for (const vector_map::Node& n : vmap.nodes) {
		if (n.nid != lane.bnid)
			continue;
		for (const vector_map::Point& p : vmap.points) {
			if (p.pid != n.pid)
				continue;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="5352330fe058dcbb1c85658dec83815d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\gazebo\twist_cmd_converter\src\converter.cpp" startLineNumber="43" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\gazebo\laser_scan_converter\src\converter.cpp" startLineNumber="41" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="19" endLineNumber="24"/>
            <text>
<![CDATA[class PotentialField {
private:
  ros::NodeHandle nh_;
  ros::Publisher publisher_;
  ros::Subscriber waypoint_subscriber_;
  ros::Subscriber vscan_subscriber_;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="70db4bef8f5506cc0a975f880fd8319c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_receiver\tablet_receiver.cpp" startLineNumber="362" endLineNumber="367"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_receiver\tablet_receiver.cpp" startLineNumber="361" endLineNumber="366"/>
            <text>
<![CDATA[		pose.pose.position.x = geo.y();
		pose.pose.position.y = geo.x();
		pose.pose.position.z = geo.z();
		pose.pose.orientation.x = q.x();
		pose.pose.orientation.y = q.y();
		pose.pose.orientation.z = q.z();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="8b4e8ad20a9721e84b78fab4c42b5aa2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\datalog.h" startLineNumber="39" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\opengl_render_state.h" startLineNumber="44" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="60" endLineNumber="69"/>
            <text>
<![CDATA[  int linkid;
}WhiteLine;

typedef struct{
  int lid;
}Mark;

typedef struct{
  int did;
  double dist;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="dfdeee0bb6dd094bda41665598d4352a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\dpm_ocv_gpu.cpp" startLineNumber="450" endLineNumber="456"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\cpu\dpm_ocv_cpu.cpp" startLineNumber="629" endLineNumber="636"/>
            <text>
<![CDATA[    objectDetections.clear();
    if( numThreads <= 0 )
        numThreads = 1;

    for( size_t classID = 0; classID < detectors.size(); classID++ )
    {
        IplImage image_ipl = image;
        CvMemStorage* storage = cvCreateMemStorage(0);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="4f4ec1120bbd6ea51b06bc40db3a791c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\hexacam\nodes\hexacam\hexacam.cpp" startLineNumber="456" endLineNumber="461"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\hexacam\nodes\hexacam\hexacam.cpp" startLineNumber="449" endLineNumber="454"/>
            <text>
<![CDATA[		msgs[0][i].header.frame_id = "camera";
		msgs[0][i].height = y_size;
		msgs[0][i].width  = x_size;
		msgs[0][i].encoding = "rgb8";
		msgs[0][i].step = x_size*3;
		msgs[0][i].data.resize(x_size*y_size*3);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="78429affe3211e032607802bb94c5ca0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.cpp" startLineNumber="290" endLineNumber="295"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.cpp" startLineNumber="141" endLineNumber="146"/>
            <text>
<![CDATA[Vector2d EdgeSE3ProjectXYZ::cam_project(const Vector3d & trans_xyz) const{
  Vector2d proj = project2d(trans_xyz);
  Vector2d res;
  res[0] = proj[0]*fx + cx;
  res[1] = proj[1]*fy + cy;
  return res;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="dbd9f726577e6176aa735201a179d812">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\rcnn\rcnn_node.cpp" startLineNumber="236" endLineNumber="244"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\autoware_connector\nodes\can_info_translator\can_info_translator_core.h" startLineNumber="51" endLineNumber="58"/>
            <text>
<![CDATA[  double maximum_steering_angle;

  VehicleInfo()
  {
    is_stored = false;
    wheel_base = 0;
    minimum_turning_radius = 0;
    maximum_steering_angle = 0;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="2313cc9ba04bc270d32ffca8233e1aff">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="998" endLineNumber="1003"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="921" endLineNumber="926"/>
            <text>
<![CDATA[    bool set_null() { return false; }
    bool set_bool(bool) { return false; }
#ifdef PICOJSON_USE_INT64
    bool set_int64(int64_t) { return false; }
#endif
    bool set_number(double) { return false; }
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="ab0c6c3ad83802091e3b61ad221b0d07">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_trajectory\sample_trajectory.cpp" startLineNumber="69" endLineNumber="79"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_points_map_update\sample_points_map_update.cpp" startLineNumber="84" endLineNumber="92"/>
            <text>
<![CDATA[  return tbl;
}

std::vector<PcdFileRange> read_pcdfilerange(const char* filename)
{
  Tbl tbl = read_csv(filename);
  size_t i, n = tbl.size();
  std::vector<PcdFileRange> ret(n);
  for (i=0; i<n; i++) {
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="32fa78ec8191c0a4bc09cab9e98c09a8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\fusion\fusion.cpp" startLineNumber="50" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\KeyFrame.h" startLineNumber="205" endLineNumber="212"/>
            <text>
<![CDATA[    std::vector<float> mvScaleFactors;
    std::vector<float> mvLevelSigma2;
    std::vector<float> mvInvLevelSigma2;

    // Image bounds and calibration
    int mnMinX;
    int mnMinY;
    int mnMaxX;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="da68826248d8769b5b0059a7d42f0609">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="62" endLineNumber="70"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="73" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\for_use_gpu.h" startLineNumber="41" endLineNumber="49"/>
            <text>
<![CDATA[    int numLevels;
    CvLSVMFeatureMapGPU **pyramid;
} CvLSVMFeaturePyramidGPU;

typedef struct
{
    float *score;
    int *x;
    int *y;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="48d3d1bf614bff014c84b6d529233c5a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\gazebo\catvehicle\src\distanceEstimator.cpp" startLineNumber="23" endLineNumber="28"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\scan2image\nodes\scan2image\scan2image.cpp" startLineNumber="27" endLineNumber="33"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_publisher\calibration_publisher.cpp" startLineNumber="13" endLineNumber="20"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\space_filter\space_filter.cpp" startLineNumber="23" endLineNumber="31"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\ground_filter\ground_filter.cpp" startLineNumber="25" endLineNumber="33"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="306" endLineNumber="313"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="23" endLineNumber="28"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\klt_track\klt_track.cpp" startLineNumber="68" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_path.h" startLineNumber="38" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\search_info_ros.h" startLineNumber="42" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_property.h" startLineNumber="39" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_dogleg.h" startLineNumber="76" endLineNumber="82"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\src\__nodes\mt\DebugMT.h" startLineNumber="47" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\src\__nodes\ImageGrabber.h" startLineNumber="91" endLineNumber="97"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\KeyFrame.h" startLineNumber="195" endLineNumber="204"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\gnss_localizer\nodes\nmea2tfpose\nmea2tfpose_core.h" startLineNumber="65" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.h" startLineNumber="39" endLineNumber="44"/>
            <text>
<![CDATA[    cv::Mat base;
    static cv::Mat mask;
    static std::string windowName;
    static thresholds_set Red_set;
    static thresholds_set Yellow_set;
    static thresholds_set Green_set;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="91af5d4be68faeb11746e27fc150c7fd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\src\__nodes\utils.h" startLineNumber="2" endLineNumber="18"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\common.h" startLineNumber="2" endLineNumber="19"/>
            <text>
<![CDATA[#ifndef _ORB_UTILS_H
#define _ORB_UTILS_H 1

#include <tf/tf.h>
#include <opencv2/core/core.hpp>
#include <rosbag/bag.h>
#include <string>
#include <vector>
#include <exception>
#include "Frame.h"


using std::string;
using std::vector;
using std::exception;


void tfToCV(const tf::Transform &src, cv::Mat &position, cv::Mat &orientation);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="0b13523b839dfff188ec11c7ff56b0b2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_sender\tablet_sender.cpp" startLineNumber="99" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\polygon\packages\points2polygon\nodes\points2polygon\points2polygon.cpp" startLineNumber="122" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\polygon\packages\points2polygon\nodes\points2polygon\points2polygon.cpp" startLineNumber="121" endLineNumber="126"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\polygon\packages\points2polygon\nodes\points2polygon\points2polygon.cpp" startLineNumber="120" endLineNumber="125"/>
            <text>
<![CDATA[	config_k_search = msg.k_search;
	config_search_radius = msg.search_radius;
	config_mu = msg.mu;
	config_maximum_nearest_neighbors = msg.maximum_nearest_neighbors;
	config_maximum_surface_angle = msg.maximum_surface_angle;
	config_minimum_angle = msg.minimum_angle;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="bf6220bdc5d79594b79b15b034debea4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_d_viewer\image_d_viewer.cpp" startLineNumber="253" endLineNumber="293"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="664" endLineNumber="673"/>
            <text>
<![CDATA[int main (int argc, char** argv)
{
	// Initialize ROS
	ros::init (argc, argv, "euclidean_cluster");

	ros::NodeHandle h;
	ros::NodeHandle private_nh("~");

	tf::StampedTransform transform;
	tf::TransformListener listener;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="e610ddf5deae9fc2d650998e003760bc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="280" endLineNumber="286"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="152" endLineNumber="158"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="134" endLineNumber="140"/>
            <text>
<![CDATA[	vector_map::Point error;
	error.pid = -1;

	for (const vector_map::Node& n : vmap.nodes) {
		if (n.nid != lane.bnid)
			continue;
		for (const vector_map::Point& p : vmap.points) {
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="154c571cd8aef4a3c078fcd7623697f1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\warp_point_rigid_6d.h" startLineNumber="43" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\transformation_estimation_svd.h" startLineNumber="41" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\transformation_estimation_point_to_plane_lls.h" startLineNumber="41" endLineNumber="67"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\icp.h" startLineNumber="41" endLineNumber="102"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="346" endLineNumber="381"/>
            <text>
<![CDATA[        bool source_cloud_updated_;
        /** \brief A flag which, if set, means the tree operating on the target cloud 
         * will never be recomputed*/
        bool force_no_recompute_;
        
        /** \brief A flag which, if set, means the tree operating on the source cloud 
         * will never be recomputed*/
        bool force_no_recompute_reciprocal_;

     };

    /** \brief @b CorrespondenceEstimation represents the base class for
      * determining correspondences between target and query point
      * sets/features.
      *
      * Code example:
      *
      * \code
      * pcl::PointCloud<pcl::PointXYZRGBA>::Ptr source, target;
      * // ... read or fill in source and target
      * pcl::CorrespondenceEstimation<pcl::PointXYZ, pcl::PointXYZ> est;
      * est.setInputSource (source);
      * est.setInputTarget (target);
      *
      * pcl::Correspondences all_correspondences;
      * // Determine all reciprocal correspondences
      * est.determineReciprocalCorrespondences (all_correspondences);
      * \endcode
      *
      * \author Radu B. Rusu, Michael Dixon, Dirk Holz
      * \ingroup registration
      */
    template <typename PointSource, typename PointTarget, typename Scalar = float>
    class CorrespondenceEstimation : public CorrespondenceEstimationBase<PointSource, PointTarget, Scalar>
    {
      public:
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="f15b864f0e412a2afe2006fc344c184c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\rawdata.h" startLineNumber="153" endLineNumber="163"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\var\input_record_repeat.h" startLineNumber="28" endLineNumber="43"/>
            <text>
<![CDATA[#ifndef PANGOLIN_INPUT_RECORD_REPEAT_H
#define PANGOLIN_INPUT_RECORD_REPEAT_H

#include <pangolin/pangolin.h>

#include <list>
#include <string>
#include <fstream>

namespace pangolin
{

struct FrameInput
{
    int index;
    std::string var;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="dddff2fb05f701cfa28bb1ff8a253903">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\src\__nodes\mt\SystemMT.h" startLineNumber="118" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\Context.h" startLineNumber="15" endLineNumber="20"/>
            <text>
<![CDATA[	cv::Point greenCenter;
	cv::Point3d redCenter3d;
	cv::Point3d yellowCenter3d;
	cv::Point3d greenCenter3d;
	int lampRadius;
	cv::Point topLeft;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="c66c0c30271125e2f85028b878dd399e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\var\varvaluegeneric.h" startLineNumber="28" endLineNumber="39"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_property.h" startLineNumber="27" endLineNumber="40"/>
            <text>
<![CDATA[#ifndef G2O_OPTIMIZATION_ALGORITHM_PROPERTY_H
#define G2O_OPTIMIZATION_ALGORITHM_PROPERTY_H

#include <string>

namespace g2o {

/**
 * \brief describe the properties of a solver
 */
struct  OptimizationAlgorithmProperty
{
  std::string name;           ///< name of the solver, e.g., var
  std::string desc;           ///< short description of the solver
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="0f239bf0dd3f510dc9828be5b5f0e596">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching_tku\ndt_matching_tku.cpp" startLineNumber="1097" endLineNumber="1102"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching_tku\ndt_matching_tku.cpp" startLineNumber="1096" endLineNumber="1101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="859" endLineNumber="864"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping_tku\ndt_mapping_tku.cpp" startLineNumber="1098" endLineNumber="1103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping_tku\ndt_mapping_tku.cpp" startLineNumber="1097" endLineNumber="1102"/>
            <text>
<![CDATA[  private_nh.getParam("downsampler", _downsampler);
  private_nh.getParam("init_x", g_ini_x);
  private_nh.getParam("init_y", g_ini_y);
  private_nh.getParam("init_z", g_ini_z);
  private_nh.getParam("init_roll", g_ini_roll);
  private_nh.getParam("init_pitch", g_ini_pitch);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="94555830897959dbae152b497986333c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\cpu\dpm_ocv_cpu.cpp" startLineNumber="590" endLineNumber="596"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\cpu\dpm_ocv_cpu.cpp" startLineNumber="419" endLineNumber="428"/>
            <text>
<![CDATA[    cvReleaseImage(&dy);


    free(w);
    free(nearest);

    free(r);
    free(alfa);

    return LATENT_SVM_OK;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="eda3b355639f9c695ba4fa4ab2b9943a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="317" endLineNumber="322"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.cpp" startLineNumber="59" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="126" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="125" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="131" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="130" endLineNumber="135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\resizeimg_gpu.cpp" startLineNumber="93" endLineNumber="101"/>
            <text>
<![CDATA[    W = img->width;
    H = img->height;

    tW = dev_img->sizeX;
    tH = dev_img->sizeY;

    nChannels = img->nChannels;

    widthStepIn = img->widthStep;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="da110bd16aca221cc6ae833f62a3d1d3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\BowVector.h" startLineNumber="40" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\BowVector.h" startLineNumber="31" endLineNumber="40"/>
            <text>
<![CDATA[  L1,
  L2
};

/// Weighting type
enum WeightingType
{
  TF_IDF,
  TF,
  IDF,
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="3236e33ec7470218275c1ebbf7744491">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\feat_proj\feat_proj.cpp" startLineNumber="275" endLineNumber="295"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\feat_proj\feat_proj.cpp" startLineNumber="271" endLineNumber="291"/>
            <text>
<![CDATA[  ros::Subscriber sub_point     = rosnode.subscribe("vector_map_info/point",
                                                    SUBSCRIBE_QUEUE_SIZE,
                                                    &VectorMap::load_points,
                                                    &vmap);
  ros::Subscriber sub_line      = rosnode.subscribe("vector_map_info/line",
                                                    SUBSCRIBE_QUEUE_SIZE,
                                                    &VectorMap::load_lines,
                                                    &vmap);
  ros::Subscriber sub_lane      = rosnode.subscribe("vector_map_info/lane",
                                                    SUBSCRIBE_QUEUE_SIZE,
                                                    &VectorMap::load_lanes,
                                                    &vmap);
  ros::Subscriber sub_vector    = rosnode.subscribe("vector_map_info/vector",
                                                    SUBSCRIBE_QUEUE_SIZE,
                                                    &VectorMap::load_vectors,
                                                    &vmap);
  ros::Subscriber sub_signal    = rosnode.subscribe("vector_map_info/signal",
                                                    SUBSCRIBE_QUEUE_SIZE,
                                                    &VectorMap::load_signals,
                                                    &vmap);
  ros::Subscriber sub_whiteline = rosnode.subscribe("vector_map_info/white_line",
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="ba8d492c890d21dd29c0772af3294d6b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="56" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="130" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="124" endLineNumber="131"/>
            <text>
<![CDATA[static ros::Time current_scan_time;
static ros::Time previous_scan_time;
static ros::Duration scan_duration;

static double exe_time = 0.0;
static double fitness_score = 0.0;

static double diff = 0.0;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="5398dec77c2ec9366834cb48e5351317">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="81" endLineNumber="93"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\KeyFrame.h" startLineNumber="280" endLineNumber="292"/>
            <text>
<![CDATA[    cv::Mat extPosition;
    cv::Mat extOrientation;

	// These two static variables are set by other threads
	static std::mutex extPoseMutex;
	static cv::Mat extEgoPosition;
	static cv::Mat extEgoOrientation;

};

} //namespace ORB_SLAM

#endif // KEYFRAME_H
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="a059dbdbedc09713c9186546251ea9d3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapObjectSerialization.h" startLineNumber="539" endLineNumber="546"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapObjectSerialization.h" startLineNumber="531" endLineNumber="538"/>
            <text>
<![CDATA[		mapPoint.mNormalVector &
		mapPoint.mDescriptor;

	int refKfId;
	ar & refKfId;

	ar &
		mapPoint.mnVisible &
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="a093f82eee8ae8404c7091cf6fd73a6c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\image\image_io.cpp" startLineNumber="38" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\pangolin.h" startLineNumber="50" endLineNumber="59"/>
            <text>
<![CDATA[#endif // BUILD_PANGOLIN_GUI

#ifdef BUILD_PANGOLIN_VARS
  #include <pangolin/var/varextra.h>
  #ifdef BUILD_PANGOLIN_GUI
    #include <pangolin/display/widgets/widgets.h>
  #endif // BUILD_PANGOLIN_GUI
#endif // BUILD_PANGOLIN_VARS

#ifdef BUILD_PANGOLIN_VIDEO
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="dab2b9fdb904df5b88a05276afaa42bd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\state\state_machine\nodes\state_machine\state_machine.h" startLineNumber="31" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_core.h" startLineNumber="31" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.h" startLineNumber="32" endLineNumber="58"/>
            <text>
<![CDATA[#ifndef LANE_SELECT_CORE_H
#define LANE_SELECT_CORE_H

// ROS includes
#include <ros/ros.h>
#include <tf/transform_datatypes.h>
#include <std_msgs/Int32.h>
#include <visualization_msgs/MarkerArray.h>
#include <std_msgs/String.h>

// C++ includes
#include <iostream>
#include <numeric>
#include <tuple>

// User defined includes
#include "waypoint_follower/LaneArray.h"
#include "waypoint_follower/libwaypoint_follower.h"
#include "runtime_manager/ConfigLaneSelect.h"
#include "hermite_curve.h"

namespace lane_planner
{
enum class ChangeFlag : int32_t
{
  straight,
  right,
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="d8265c4fcc0a4f834d193b42ae313330">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\solvers\linear_solver_eigen.h" startLineNumber="27" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\solvers\linear_solver_dense.h" startLineNumber="28" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\voxel_grid_covariance.h" startLineNumber="38" endLineNumber="62"/>
            <text>
<![CDATA[#ifndef FAST_PCL_VOXEL_GRID_COVARIANCE_H_
#define FAST_PCL_VOXEL_GRID_COVARIANCE_H_

//#include <pcl/filters/boost.h>
//#include <pcl/filters/voxel_grid.h>
#include "fast_pcl/filters/boost.h"
#include "fast_pcl/filters/voxel_grid.h"

#include <map>
#include <pcl/point_types.h>
#include <pcl/kdtree/kdtree_flann.h>

namespace pcl
{
  /** \brief A searchable voxel strucure containing the mean and covariance of the data.
    * \note For more information please see
    * <b>Magnusson, M. (2009). The Three-Dimensional Normal-Distributions Transform 鈥?
    * an Ef铿乧ient Representation for Registration, Surface Analysis, and Loop Detection.
    * PhD thesis, Orebro University. Orebro Studies in Technology 36</b>
    * \author Brian Okorn (Space and Naval Warfare Systems Center Pacific)
    */
  template<typename PointT>
  class VoxelGridCovariance : public VoxelGrid<PointT>
  {
    protected:
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="fab17f8bba65ec02b333a7226957d1b5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\feat_proj\feat_proj.cpp" startLineNumber="35" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\glviewer\include\glviewer\glviewer.h" startLineNumber="58" endLineNumber="66"/>
            <text>
<![CDATA[    int pointsize;
};

struct DISPLAYLIST
{
    bool show;
    GLuint listid;
	Eigen::Matrix4d transform;
	Eigen::Matrix4d scale;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="da8975303dd77d9e01768129bcd68965">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\DUtils\Timestamp.cpp" startLineNumber="20" endLineNumber="26"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\point_types.h" startLineNumber="19" endLineNumber="30"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\compat\type_traits.h" startLineNumber="28" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\stuff\timeutil.h" startLineNumber="27" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\sparse_block_matrix_ccs.h" startLineNumber="27" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\robust_kernel.h" startLineNumber="27" endLineNumber="38"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\openmp_mutex.h" startLineNumber="27" endLineNumber="38"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\marginal_covariance_cholesky.h" startLineNumber="27" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\hyper_graph.h" startLineNumber="27" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\estimate_propagator.h" startLineNumber="27" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\structure.h" startLineNumber="43" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\structure.h" startLineNumber="37" endLineNumber="43"/>
            <text>
<![CDATA[    double Y;
    double Z;
    double W;
}LOCATION;

typedef struct _ANGLE{
    double thiX;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="198b9f4735be12342eecd926132cb5aa">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\voxel_grid_filter\voxel_grid_filter.cpp" startLineNumber="142" endLineNumber="147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\ring_filter\ring_filter.cpp" startLineNumber="170" endLineNumber="175"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\random_filter\random_filter.cpp" startLineNumber="132" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\distance_filter\distance_filter.cpp" startLineNumber="149" endLineNumber="154"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="851" endLineNumber="856"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping_tku\mapping.cpp" startLineNumber="117" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="669" endLineNumber="674"/>
            <text>
<![CDATA[  char buffer[80];
  std::time_t now = std::time(NULL);
  std::tm *pnow = std::localtime(&now);
  std::strftime(buffer,80,"%Y%m%d_%H%M%S",pnow);
  filename = "icp_matching_" + std::string(buffer) + ".csv";
  ofs.open(filename.c_str(), std::ios::app);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="c40ffe4cdf7615ef55a64216ca28415d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="137" endLineNumber="144"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\gazebo\catvehicle\src\distanceEstimator.cpp" startLineNumber="21" endLineNumber="26"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\scan2image\nodes\scan2image\scan2image.cpp" startLineNumber="25" endLineNumber="31"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_publisher\calibration_publisher.cpp" startLineNumber="11" endLineNumber="18"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\ground_filter\ground_filter.cpp" startLineNumber="23" endLineNumber="30"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="304" endLineNumber="311"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="129" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="89" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="21" endLineNumber="26"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\gnss_localizer\nodes\fix2tfpose\fix2tfpose.cpp" startLineNumber="43" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\klt_track\klt_track.cpp" startLineNumber="66" endLineNumber="73"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\search_info_ros.h" startLineNumber="39" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\threadedfilebuf.h" startLineNumber="66" endLineNumber="73"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\gnss_localizer\nodes\nmea2tfpose\nmea2tfpose_core.h" startLineNumber="59" endLineNumber="72"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\Context.h" startLineNumber="14" endLineNumber="19"/>
            <text>
<![CDATA[	cv::Point yellowCenter;
	cv::Point greenCenter;
	cv::Point3d redCenter3d;
	cv::Point3d yellowCenter3d;
	cv::Point3d greenCenter3d;
	int lampRadius;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="c7576e47ff2caa2f1f7e296734542970">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="509" endLineNumber="515"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="474" endLineNumber="480"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="437" endLineNumber="443"/>
            <text>
<![CDATA[  color_neighbor.g = 0.5;
  color_neighbor.a = 1.0;

  std_msgs::ColorRGBA color_neighbor_change;
  color_neighbor_change.b = 0.7;
  color_neighbor_change.g = 1.0;
  color_neighbor_change.a = 1.0;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="227a7c1ab3e5181128ab7a2aaa4da638">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\rcnn\rcnn_node.cpp" startLineNumber="242" endLineNumber="247"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="931" endLineNumber="937"/>
            <text>
<![CDATA[	MEAS_NOISE_COV		= 25;
	ERROR_ESTIMATE_COV	= 1000000;
	OVERLAPPING_PERC	= 80.0;
	SHOW_PREDICTIONS	= false;

	ORB_NUM_FEATURES	= 2000;
	ORB_MIN_MATCHES		= 3;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="9d025c3459ee6cc5f045c0c247e0eab3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_levenberg.h" startLineNumber="39" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_dogleg.h" startLineNumber="48" endLineNumber="61"/>
            <text>
<![CDATA[    public:
      /**
       * construct the Dogleg algorithm, which will use the given Solver for solving the
       * linearized system.
       */
      explicit OptimizationAlgorithmDogleg(BlockSolverBase* solver);
      virtual ~OptimizationAlgorithmDogleg();

      virtual SolverResult solve(int iteration, bool online = false);

      virtual void printVerbose(std::ostream& os) const;

      //! return the type of the last step taken by the algorithm
      int lastStep() const { return _lastStep;}
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="db0d8f3bdaa157bb69b51dc3d72cfa8a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\rosinterface\include\rosinterface\rosinterface.h" startLineNumber="215" endLineNumber="224"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\rosinterface\include\rosinterface\rosinterface.h" startLineNumber="112" endLineNumber="121"/>
            <text>
<![CDATA[template<class MSGTYPE>
QString ROSPub<MSGTYPE>::getTopic()
{
    return QString::fromStdString(pub.getTopic());
}

template<class MSGTYPE>
void ROSPub<MSGTYPE>::resetTopic(QString Topic, u_int32_t QueueSize)
{
    pub.shutdown();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="6948b6e880c0d0db43f199bab9d8ae11">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\hyper_graph_action.cpp" startLineNumber="110" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\hyper_graph_action.cpp" startLineNumber="100" endLineNumber="107"/>
            <text>
<![CDATA[  HyperGraphElementAction* HyperGraphElementActionCollection::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params)
  {
    ActionMap::iterator it=_actionMap.find(typeid(*element).name());
    //cerr << typeid(*element).name() << endl;
    if (it==_actionMap.end())
      return 0;
    HyperGraphElementAction* action=it->second;
    return (*action)(element, params);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="5f2a138cf89d1cafa3d749159eebce83">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="106" endLineNumber="111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="105" endLineNumber="110"/>
            <text>
<![CDATA[  std::map<int, Point > points;
  std::map<int, Line > lines;
  std::map<int, WhiteLine > whitelines;
  std::map<int, Lane > lanes;
  std::map<int, DTLane > dtlanes;
  std::map<int, Vector > vectors;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="9a96e2d35989593aba5c7ceb8d41822c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\rawdata.h" startLineNumber="145" endLineNumber="153"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="490" endLineNumber="506"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="300" endLineNumber="316"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.h" startLineNumber="32" endLineNumber="37"/>
            <text>
<![CDATA[private:
    static cv::Point Clicked_point;
    static int Signal_color;
    int H_slider_val;
    int S_slider_val;
    int V_slider_val;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="386f4c5a903df81e57daec0087e7ddab">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.cpp" startLineNumber="783" endLineNumber="789"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.cpp" startLineNumber="772" endLineNumber="778"/>
            <text>
<![CDATA[void OptimizableGraph::preIteration(int iter)
{
  HyperGraphActionSet& actions = _graphActions[AT_PREITERATION];
  if (actions.size() > 0) {
    HyperGraphAction::ParametersIteration params(iter);
    for (HyperGraphActionSet::iterator it = actions.begin(); it != actions.end(); ++it) {
      (*(*it))(this, &params);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="61310f995a652b5a1114edcef1bb7a9b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\compat\mutex.h" startLineNumber="28" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\compat\memory.h" startLineNumber="28" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\compat\function.h" startLineNumber="28" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\compat\condition_variable.h" startLineNumber="28" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\compat\bind.h" startLineNumber="28" endLineNumber="41"/>
            <text>
<![CDATA[#ifndef PANGOLIN_COMPAT_BIND_H
#define PANGOLIN_COMPAT_BIND_H

#include <pangolin/platform.h>

#ifdef CPP11_NO_BOOST
    #include <functional>
#else
    #include <boost/bind.hpp>
#endif

#include <pangolin/compat/boostd.h>

#endif // PANGOLIN_COMPAT_BIND_H
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="f3cbb0cc309f8432d826276ba94d018c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="290" endLineNumber="295"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="245" endLineNumber="250"/>
            <text>
<![CDATA[		try {
			std::thread sender(send_info, client_addr, connect_fd, bufsize, period);
			sender.detach();
		} catch (std::exception &ex) {
			ROS_ERROR_STREAM("std::thread::thread: " << ex.what());
			goto close_connect_fd;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="a2047398c6cec939b905702fdbff03db">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_saver\waypoint_saver.cpp" startLineNumber="188" endLineNumber="193"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_saver\waypoint_saver.cpp" startLineNumber="178" endLineNumber="183"/>
            <text>
<![CDATA[  marker.color.r = 0.0;
  marker.color.g = 1.0;
  marker.color.b = 0.0;
  marker.ns = "saved_waypoint_arrow";
  marker.type = visualization_msgs::Marker::ARROW;
  marker.action = visualization_msgs::Marker::ADD;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="06be54bc51c555768ce95a55504d178b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_path.h" startLineNumber="79" endLineNumber="92"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="101" endLineNumber="114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="96" endLineNumber="109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="91" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="86" endLineNumber="99"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="81" endLineNumber="94"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="76" endLineNumber="89"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gltext.h" startLineNumber="71" endLineNumber="85"/>
            <text>
<![CDATA[        return str;
    }
    
    // Return width in pixels of this text.
    GLfloat Width() const {
        return width;
    }

    // Return height in pixels of this text.
    GLfloat Height() const {
        return ymax;
    }
    
    // Return height in pixels of this text, including under baseline
    GLfloat FullHeight() const {
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="2c73e325373c849785d3922e3454e231">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_d_viewer\vscan_image_d_viewer.cpp" startLineNumber="205" endLineNumber="212"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="330" endLineNumber="337"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\range_fusion\range_fusion.cpp" startLineNumber="102" endLineNumber="109"/>
            <text>
<![CDATA[	init();
	ros::init(argc, argv, "range_fusion");

	ros::NodeHandle n;
	ros::NodeHandle private_nh("~");

	std::string image_topic;
	std::string points_topic;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="4943f8eca14320c35ba7553883050bae">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="39" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="336" endLineNumber="353"/>
            <text>
<![CDATA[        bool
        initComputeReciprocal ();

        /** \brief Variable that stores whether we have a new target cloud, meaning we need to pre-process it again.
         * This way, we avoid rebuilding the kd-tree for the target cloud every time the determineCorrespondences () method
         * is called. */
        bool target_cloud_updated_;
        /** \brief Variable that stores whether we have a new source cloud, meaning we need to pre-process it again.
         * This way, we avoid rebuilding the reciprocal kd-tree for the source cloud every time the determineCorrespondences () method
         * is called. */
        bool source_cloud_updated_;
        /** \brief A flag which, if set, means the tree operating on the target cloud 
         * will never be recomputed*/
        bool force_no_recompute_;
        
        /** \brief A flag which, if set, means the tree operating on the source cloud 
         * will never be recomputed*/
        bool force_no_recompute_reciprocal_;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="91d87ba651bcbb43440a2d4470294879">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit.h" startLineNumber="78" endLineNumber="88"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_path.h" startLineNumber="72" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="124" endLineNumber="136"/>
            <text>
<![CDATA[  geometry_msgs::PoseStamped getControlPose() const
  {
    return control_pose_;
  }

  geometry_msgs::PoseStamped getLocalizerPose() const
  {
    return localizer_pose_;
  }

  int getClosestWaypoint() const
  {
    return closest_waypoint_;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="193a5ff475a9462e4754901abb1d8a1e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lane_detector\nodes\lane_detector\lane_detector.cpp" startLineNumber="110" endLineNumber="117"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="91" endLineNumber="96"/>
            <text>
<![CDATA[        SYSTEM_NOT_READY=-1,
        NO_IMAGES_YET=0,
        NOT_INITIALIZED=1,
        OK=2,
        LOST=3,
		MAP_OPEN=4
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="59b8f9e74d06c648a893d39516fc1fe3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\pointgrey\nodes\ladybug\ladybug.cpp" startLineNumber="197" endLineNumber="204"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\pointgrey\nodes\ladybug\ladybug.cpp" startLineNumber="188" endLineNumber="195"/>
            <text>
<![CDATA[		case LADYBUG_DEVICE_LADYBUG3:
		{
			m_dataFormat = LADYBUG_DATAFORMAT_RAW8;
			m_frameRate = 16.0f;
			m_isFrameRateAuto = true;
			m_jpegQualityPercentage = 80;
		}
		break;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="6bd6bac23ba83d1487012235e7750002">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_uploader\pos_uploader.cpp" startLineNumber="323" endLineNumber="330"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_downloader\pos_downloader.cpp" startLineNumber="521" endLineNumber="528"/>
            <text>
<![CDATA[  if(argc < 2) {
    std::cerr << "usage : \n\trosrun " << MYNAME << " <user name> [show_my_pose]" << std::endl;
    return -1;
  }
  if(argc > 2) {
    if(strncmp(argv[2], "show_my_pose", 12) == 0) ignore_my_pose = 0;
  }
  std::cerr << "ignore_my_pose=" << ignore_my_pose << std::endl;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="ce8d26773adc656ab41e0cfcd133d7a7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2image\main.cpp" startLineNumber="48" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="314" endLineNumber="320"/>
            <text>
<![CDATA[#if _INVALID_RANGE
    double invalid_range;
#endif

    std::string ip;
    int port;
    int interlace;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="56f29b5a23978b198988a45c216a589d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="226" endLineNumber="231"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="225" endLineNumber="230"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="224" endLineNumber="229"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="223" endLineNumber="228"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="215" endLineNumber="220"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="123" endLineNumber="128"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="122" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="121" endLineNumber="126"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="120" endLineNumber="125"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="119" endLineNumber="124"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="117" endLineNumber="123"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="115" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="61" endLineNumber="69"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="59" endLineNumber="67"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="57" endLineNumber="66"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="55" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="53" endLineNumber="63"/>
            <text>
<![CDATA[    ctx = (CUcontext*) malloc(device_num * sizeof(CUcontext));

    module = (CUmodule*) malloc(device_num * sizeof(CUmodule));

    ConvolutionKernel_func = (CUfunction*) malloc(
            device_num * sizeof(CUfunction));
    DistanceTransformTwoDimensionalProblem_func = (CUfunction*) malloc(
            device_num * sizeof(CUfunction));
    BilinearKernelTex32F_func = (CUfunction*) malloc(
            device_num * sizeof(CUfunction));
    calculateHistogram_func = (CUfunction*) malloc(
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="0bf31c06a7a1b427f7ae54b89cb146b9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\icp.h" startLineNumber="199" endLineNumber="207"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\icp.h" startLineNumber="194" endLineNumber="202"/>
            <text>
<![CDATA[          else if (fields[i].name == "normal_x") 
          {
            source_has_normals_ = true;
            nx_idx_offset_ = fields[i].offset;
          }
          else if (fields[i].name == "normal_y") 
          {
            source_has_normals_ = true;
            ny_idx_offset_ = fields[i].offset;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="5b56fde70aedec9d3cc9be6f76389341">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="67" endLineNumber="72"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_trajectory_gen\lattice_trajectory_gen.cpp" startLineNumber="97" endLineNumber="103"/>
            <text>
<![CDATA[static int g_param_flag = 0; //0 = waypoint, 1 = Dialog
static double g_lookahead_threshold = 4.0; //meter
static double g_initial_velocity = 5.0; //km/h
static double g_look_ahead_threshold_calc_ratio = 2.0;
static double g_minimum_look_ahead_threshold = 6.0; // the next waypoint must be outside of this threshold.

static WayPoints g_current_waypoints;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="98c47601e64eb2b85f64c04a0553e406">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\camera_lidar2d_offline_calib.cpp" startLineNumber="64" endLineNumber="69"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\camera_lidar2d_offline_calib.cpp" startLineNumber="63" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1329" endLineNumber="1334"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="79" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="78" endLineNumber="83"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="77" endLineNumber="82"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="76" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_trajectory_gen\lattice_trajectory_gen.cpp" startLineNumber="94" endLineNumber="101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="83" endLineNumber="88"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="80" endLineNumber="87"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="79" endLineNumber="86"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="78" endLineNumber="85"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="77" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="384" endLineNumber="389"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="383" endLineNumber="388"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="382" endLineNumber="387"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="381" endLineNumber="386"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="380" endLineNumber="385"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="60" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="59" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="58" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="57" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="56" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="55" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="54" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="53" endLineNumber="58"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="52" endLineNumber="57"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="51" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="50" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="49" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="48" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="47" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="46" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="45" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="42" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="41" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="38" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="37" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="36" endLineNumber="45"/>
            <text>
<![CDATA[const int PANGO_SPECIAL = 128;
const int PANGO_CTRL = -96;
const int PANGO_OPTN = 132;

// Ordinary keys
const int PANGO_KEY_TAB       = 9;
const int PANGO_KEY_ESCAPE    = 27;

// Special Keys (same as GLUT_ defines)
const int PANGO_KEY_F1        = 1;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="d4ba53881b1853c72201fb72bea8c377">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\resize_GPU.cpp" startLineNumber="42" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="47" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\display.h" startLineNumber="28" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="18" endLineNumber="26"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="29" endLineNumber="37"/>
            <text>
<![CDATA[	int max_scale;
	//image size information
	int IM_WIDTH;
	int IM_HEIGHT;

	//per root
	int *ridx;	//root index information
	int *oidx;	//offsetindex information
	FLOAT *offw;	//offset weight
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="9816b86fbf13457a0cb1aafd1b1f0b17">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\DUtils\Timestamp.h" startLineNumber="10" endLineNumber="21"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\src\__nodes\mt\TrackingThread.h" startLineNumber="1" endLineNumber="24"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\src\__nodes\mt\DebugMT.h" startLineNumber="8" endLineNumber="32"/>
            <text>
<![CDATA[#ifndef _DEBUGMT_H_
#define _DEBUGMT_H_


#include <string>
#include <mutex>

#include <ros/ros.h>
#include <cv_bridge/cv_bridge.h>
#include <image_transport/image_transport.h>
#include <sensor_msgs/Image.h>
#include <sensor_msgs/image_encodings.h>
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
#include <orb_localizer/debug.h>


using namespace std;


class TrackingThread;


class DebugMT {
public:
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="667d62a3a3660d430c3dde42404b6034">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\switch_float.h" startLineNumber="56" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\switch_float.h" startLineNumber="20" endLineNumber="28"/>
            <text>
<![CDATA[	ret->tv_sec = x->tv_sec - y->tv_sec;
	ret->tv_usec = x->tv_usec - y->tv_usec;
	if (ret->tv_usec < 0) {
		ret->tv_sec--;
		ret->tv_usec += 1000000;
	}
}
/* for measurement */
#endif
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="9005a4eafc5d9d68591089d4df3cc077">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="229" endLineNumber="236"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_stop\lane_stop.cpp" startLineNumber="128" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="593" endLineNumber="600"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_navi\lane_navi.cpp" startLineNumber="243" endLineNumber="250"/>
            <text>
<![CDATA[	ros::Subscriber route_sub = n.subscribe("/route_cmd", sub_route_queue_size, create_waypoint);
	ros::Subscriber point_sub = n.subscribe("/vector_map_info/point", sub_vmap_queue_size, cache_point);
	ros::Subscriber lane_sub = n.subscribe("/vector_map_info/lane", sub_vmap_queue_size, cache_lane);
	ros::Subscriber node_sub = n.subscribe("/vector_map_info/node", sub_vmap_queue_size, cache_node);

	ros::spin();

	return EXIT_SUCCESS;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="16c868c8705f476a833a256d1ffa9776">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="591" endLineNumber="596"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="590" endLineNumber="595"/>
            <text>
<![CDATA[	ros::Subscriber waypoint_sub = n.subscribe("/lane_waypoints_array", sub_waypoint_queue_size, create_waypoint);
	ros::Subscriber point_sub = n.subscribe("/vector_map_info/point", sub_vmap_queue_size, cache_point);
	ros::Subscriber lane_sub = n.subscribe("/vector_map_info/lane", sub_vmap_queue_size, cache_lane);
	ros::Subscriber node_sub = n.subscribe("/vector_map_info/node", sub_vmap_queue_size, cache_node);
	ros::Subscriber stopline_sub = n.subscribe("/vector_map_info/stop_line", sub_vmap_queue_size, cache_stopline);
	ros::Subscriber dtlane_sub = n.subscribe("/vector_map_info/dtlane", sub_vmap_queue_size, cache_dtlane);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="4be4a6a4871d0f1f7ba00adef91b830c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\var\var.h" startLineNumber="107" endLineNumber="114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\var\var.h" startLineNumber="92" endLineNumber="98"/>
            <text>
<![CDATA[        VarValueGeneric*& v = VarState::I()[name];
        if(v) {
            throw std::runtime_error("Var with that name already exists.");
        }else{
            // new VarRef<T> (owned by VarStore)
            VarValue<T&>* nv = new VarValue<T&>(variable);
            v = nv;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="66f7f0041c1236dd1ca4c296895a41c1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\range_fusion\range_fusion.cpp" startLineNumber="136" endLineNumber="143"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\dpm_ttic\dpm_ttic.cpp" startLineNumber="193" endLineNumber="200"/>
            <text>
<![CDATA[	image_obj_pub = n.advertise<cv_tracker::image_obj>("image_obj", 1);

	ros::Subscriber config_sub;
	std::string config_topic("/config");
	config_topic += ros::this_node::getNamespace() + "/dpm";
	config_sub = n.subscribe(config_topic, 1, config_cb);

	ros::spin();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="19e55cb7d49bd69a8186b89a7c98968b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="241" endLineNumber="246"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="238" endLineNumber="243"/>
            <text>
<![CDATA[      case GREEN:
        mask_color = CV_RGB(0, 255, 0);
        break;
      case YELLOW:
        mask_color = CV_RGB(255, 255, 0);
        break;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="4a96693b3a226beb04f9828bcc9ec413">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\rosinterface\include\rosinterface\rosinterface.h" startLineNumber="125" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\vscan_lidar_track\rbsspfvehicletracker.h" startLineNumber="12" endLineNumber="18"/>
            <text>
<![CDATA[class RBSSPFVehicleTrackerInstance : public QObject
{
    Q_OBJECT
public:
    RBSSPFVehicleTrackerInstance(int vehicleID, QThread * thread);
    ~RBSSPFVehicleTrackerInstance();
protected:
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="d027fa880b648646d258db084e0d3725">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="139" endLineNumber="147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_loader\waypoint_loader_core.h" startLineNumber="83" endLineNumber="94"/>
            <text>
<![CDATA[  ros::NodeHandle nh_;
  ros::NodeHandle private_nh_;

  // publisher
  ros::Publisher lane_pub_;

  // variables
  std::string multi_lane_csv_;
  double decelerate_;

  // initializer
  void initPublisher();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="d82639e3bb4a9aadca9c5e7ebf6acf53">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="2024" endLineNumber="2029"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="2020" endLineNumber="2025"/>
            <text>
<![CDATA[                  stbtt__handle_clipped_edge(scanline,x,e, x0,y0, x1,y1);
                  stbtt__handle_clipped_edge(scanline,x,e, x1,y1, x2,y2);
                  stbtt__handle_clipped_edge(scanline,x,e, x2,y2, x3,y3);
               } else if (x3 < x1 && x0 > x2) {  // three segments descending down-left
                  stbtt__handle_clipped_edge(scanline,x,e, x0,y0, x2,y2);
                  stbtt__handle_clipped_edge(scanline,x,e, x2,y2, x1,y1);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="884ec7f98edead1a72bee1fca424e285">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\datalog.h" startLineNumber="155" endLineNumber="165"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\convergence_criteria.h" startLineNumber="40" endLineNumber="66"/>
            <text>
<![CDATA[#ifndef FAST_PCL_REGISTRATION_CONVERGENCE_CRIERIA_H_
#define FAST_PCL_REGISTRATION_CONVERGENCE_CRIERIA_H_

#include <pcl/pcl_macros.h>

namespace pcl
{
  namespace registration
  {
    /** \brief @b ConvergenceCriteria represents an abstract base class for
      * different convergence criteria used in registration loops.
      *
      * This should be used as part of an Iterative Closest Point (ICP)-like
      * method, to verify if the algorithm has reached convergence.
      *
      * Typical convergence criteria that could inherit from this include:
      * 
      *  * a maximum number of iterations has been reached
      *  * the transformation (R, t) cannot be further updated (the difference between current and previous is smaller than a threshold)
      *  * the Mean Squared Error (MSE) between the current set of correspondences and the previous one is smaller than some threshold
      *
      * \author Radu B. Rusu
      * \ingroup registration
      */
    class PCL_EXPORTS ConvergenceCriteria
    {
      public:
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="ea7f78d470ef81873cce7c21845112a0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\sparse_block_matrix_diagonal.h" startLineNumber="27" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\linear_solver.h" startLineNumber="27" endLineNumber="43"/>
            <text>
<![CDATA[#ifndef G2O_LINEAR_SOLVER_H
#define G2O_LINEAR_SOLVER_H
#include "g2o/core/sparse_block_matrix.h"
#include "g2o/core/sparse_block_matrix_ccs.h"

namespace g2o {

/**
 * \brief basic solver for Ax = b
 *
 * basic solver for Ax = b which has to reimplemented for different linear algebra libraries.
 * A is assumed to be symmetric (only upper triangular block is stored) and positive-semi-definit.
 */
template <typename MatrixType>
class LinearSolver
{
  public:
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="cbffee63bb8f75b8615c373d796d58a8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\image\image_io.cpp" startLineNumber="526" endLineNumber="531"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\image\image_io.cpp" startLineNumber="524" endLineNumber="529"/>
            <text>
<![CDATA[    case ImageFileTypeTga:
        return LoadTga(filename);
    case ImageFileTypePng:
        return LoadPng(filename);
    case ImageFileTypeJpg:
        return LoadJpg(filename);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="bfa89a93a8422e593c8b68d821c96143">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\glviewer\GLViewer\glviewer.cpp" startLineNumber="239" endLineNumber="246"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\glviewer\GLViewer\glviewer.cpp" startLineNumber="233" endLineNumber="240"/>
            <text>
<![CDATA[        break;
    case Qt::Key_1:
        {
            bperspective=1;
            setProjection();
        }
        break;
    case Qt::Key_2:
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="caaaeca8b4c2d57ae62e1faa52c17ae6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\stuff\timeutil.h" startLineNumber="76" endLineNumber="83"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\TrafficLight.h" startLineNumber="29" endLineNumber="36"/>
            <text>
<![CDATA[struct valueSet {
    double upper;
    double lower;
};

struct hsvSet {
    valueSet Hue;
    valueSet Sat;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="089fe24a0aacfa328efcaa0edc3d3e8e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_downloader\pos_downloader.cpp" startLineNumber="405" endLineNumber="411"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_downloader\pos_downloader.cpp" startLineNumber="404" endLineNumber="410"/>
            <text>
<![CDATA[      pose.position.x = std::stod(cols[1]);
      pose.position.y = std::stod(cols[2]);
      pose.orientation.x = std::stod(cols[4]);
      pose.orientation.y = std::stod(cols[5]);
    }
    pose.position.z = std::stod(cols[3]);
    pose.orientation.z = std::stod(cols[6]);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="16e45024e6a5f3a544f7309682f5ad6f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.h" startLineNumber="190" endLineNumber="200"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.h" startLineNumber="159" endLineNumber="169"/>
            <text>
<![CDATA[  bool isDepthPositive() {
    const VertexSE3Expmap* v1 = static_cast<const VertexSE3Expmap*>(_vertices[0]);
    return (v1->estimate().map(Xw))(2)>0.0;
  }


  virtual void linearizeOplus();

  Vector2d cam_project(const Vector3d & trans_xyz) const;

  Vector3d Xw;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="af73c82148705394475ab436a401a07a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\space_filter\space_filter.cpp" startLineNumber="47" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\ground_filter\ground_filter.cpp" startLineNumber="45" endLineNumber="53"/>
            <text>
<![CDATA[GroundFilter::GroundFilter() :
		node_handle_("~")
{

	node_handle_.param<std::string>("subscribe_topic",  subscribe_topic_,  "/points_clipped");

	node_handle_.param("remove_floor",  floor_removal_,  true);
	node_handle_.param("points_distance",  points_distance_,  0.2);
	node_handle_.param("angle_threshold",  angle_threshold_,  0.35);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="ca578e55dcf899065b1321615dcdb026">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="480" endLineNumber="485"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="478" endLineNumber="483"/>
            <text>
<![CDATA[	else if (area == "3x3")
		margin = MARGIN_UNIT * 1;
	else if (area == "5x5")
		margin = MARGIN_UNIT * 2;
	else if (area == "7x7")
		margin = MARGIN_UNIT * 3;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="7cbbe20e7fdca19f8bb1eeea6fe536c5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\feat_proj\feat_proj.cpp" startLineNumber="33" endLineNumber="39"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="12" endLineNumber="30"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="127" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\include\astar_util.h" startLineNumber="41" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\timer.h" startLineNumber="38" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\timer.h" startLineNumber="28" endLineNumber="40"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\cg.h" startLineNumber="28" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.h" startLineNumber="28" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\autoware_connector\nodes\can_info_translator\can_info_translator_core.h" startLineNumber="31" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\TrafficLight.h" startLineNumber="35" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="75" endLineNumber="82"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="49" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="40" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="33" endLineNumber="40"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="25" endLineNumber="32"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="20" endLineNumber="28"/>
            <text>
<![CDATA[    int mapSize;        //mapX * mapY
    int filterSize;     //filterX * filterY
    int scoreSize;      //scoreX * scoreY
} ConvolutionParam;

typedef struct
{
    float internalDistTrans;
    int internalPoints;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="9a151502e03685a75d79aa8108624b88">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\jacobian_workspace.h" startLineNumber="27" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.h" startLineNumber="24" endLineNumber="32"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="95" endLineNumber="103"/>
            <text>
<![CDATA[  double span;
  int lcnt;
  int lno;
}Lane;


class VectorMap
{
 public:
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="2cf5fc1f6c59d6c1f10c8aed3c186f39">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gltexturecache.h" startLineNumber="28" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glfont.h" startLineNumber="28" endLineNumber="42"/>
            <text>
<![CDATA[#ifndef PANGOLIN_GLFONT_H
#define PANGOLIN_GLFONT_H

#include <pangolin/gl/gltext.h>

#include <cstdio>
#include <cstdarg>

namespace pangolin {

class PANGOLIN_EXPORT GlFont
{
public:
    // Singleton instance if requested.
    static GlFont& I();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="22e796e80ec7e7118dd8d39834f7262e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="793" endLineNumber="800"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="790" endLineNumber="797"/>
            <text>
<![CDATA[			M_array[L][jj] = (FLOAT **)pointer_M;
			pointer_M += (unsigned long long int)(numpart_jj*sizeof(FLOAT*));

			tmpM_array[L][jj] = (FLOAT **)pointer_tmpM;
			pointer_tmpM += (unsigned long long int)(numpart_jj*sizeof(FLOAT*));

			tmpIx_array[L][jj] = (int **)pointer_tmpIx;
			pointer_tmpIx += (unsigned long long int)(numpart_jj*sizeof(int*));
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="b4d0b0a194fb2ec6024a7a7e7cc64433">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_client\vector_map_client.cpp" startLineNumber="114" endLineNumber="119"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_client\vector_map_client.cpp" startLineNumber="112" endLineNumber="117"/>
            <text>
<![CDATA[  ros::ServiceClient white_line_cli =
    nh.serviceClient<vector_map_server::GetWhiteLine>("vector_map_server/get_white_line");
  ros::ServiceClient stop_line_cli =
    nh.serviceClient<vector_map_server::GetStopLine>("vector_map_server/get_stop_line");
  ros::ServiceClient cross_walk_cli =
    nh.serviceClient<vector_map_server::GetCrossWalk>("vector_map_server/get_cross_walk");
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="15620f8e26eea7108e2fa15860d33416">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\file_extension.h" startLineNumber="28" endLineNumber="40"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\view.h" startLineNumber="28" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\attach.h" startLineNumber="28" endLineNumber="41"/>
            <text>
<![CDATA[#ifndef PANGOLIN_ATTACH_H
#define PANGOLIN_ATTACH_H

#include <iostream>
#include <string>
#include <cmath>

namespace pangolin
{

/// Units for measuring screen distances.
enum Unit {
    Fraction,
    Pixel,
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="3cb6e4ea546be5200ee534b45dd178ef">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="69" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="124" endLineNumber="129"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapPoint.h" startLineNumber="120" endLineNumber="127"/>
            <text>
<![CDATA[    long int mnFirstFrame;
    int nObs;

    // Variables used by the tracking
    float mTrackProjX;
    float mTrackProjY;
    float mTrackProjXR;
    bool mbTrackInView;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="ad176760019be4e102163f529e5cdd65">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\warp_point_rigid_6d.h" startLineNumber="42" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\transformation_estimation_svd.h" startLineNumber="40" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\transformation_estimation_point_to_plane_lls.h" startLineNumber="40" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\transformation_estimation_lm.h" startLineNumber="40" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="342" endLineNumber="379"/>
            <text>
<![CDATA[        bool target_cloud_updated_;
        /** \brief Variable that stores whether we have a new source cloud, meaning we need to pre-process it again.
         * This way, we avoid rebuilding the reciprocal kd-tree for the source cloud every time the determineCorrespondences () method
         * is called. */
        bool source_cloud_updated_;
        /** \brief A flag which, if set, means the tree operating on the target cloud 
         * will never be recomputed*/
        bool force_no_recompute_;
        
        /** \brief A flag which, if set, means the tree operating on the source cloud 
         * will never be recomputed*/
        bool force_no_recompute_reciprocal_;

     };

    /** \brief @b CorrespondenceEstimation represents the base class for
      * determining correspondences between target and query point
      * sets/features.
      *
      * Code example:
      *
      * \code
      * pcl::PointCloud<pcl::PointXYZRGBA>::Ptr source, target;
      * // ... read or fill in source and target
      * pcl::CorrespondenceEstimation<pcl::PointXYZ, pcl::PointXYZ> est;
      * est.setInputSource (source);
      * est.setInputTarget (target);
      *
      * pcl::Correspondences all_correspondences;
      * // Determine all reciprocal correspondences
      * est.determineReciprocalCorrespondences (all_correspondences);
      * \endcode
      *
      * \author Radu B. Rusu, Michael Dixon, Dirk Holz
      * \ingroup registration
      */
    template <typename PointSource, typename PointTarget, typename Scalar = float>
    class CorrespondenceEstimation : public CorrespondenceEstimationBase<PointSource, PointTarget, Scalar>
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="b716f53dfa9340fcce07ea44e23fb917">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\vscan2image\vscan2image.cpp" startLineNumber="96" endLineNumber="101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\obj_reproj.cpp" startLineNumber="386" endLineNumber="391"/>
            <text>
<![CDATA[  ros::NodeHandle n;
  ros::NodeHandle private_nh("~");
  std::string projectionMat_topic_name;
  private_nh.param<std::string>("projection_matrix_topic", projectionMat_topic_name, "/projection_matrix");
  std::string camera_info_topic_name;
  private_nh.param<std::string>("camera_info_topic", camera_info_topic_name, "/camera/camera_info");
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="3ca710016306de944b9db9a88f150575">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_factory.h" startLineNumber="41" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\KeyFrameDatabase.h" startLineNumber="50" endLineNumber="61"/>
            <text>
<![CDATA[namespace ORB_SLAM2
{

class KeyFrame;
class Frame;


class KeyFrameDatabase
{
public:

    KeyFrameDatabase(const ORBVocabulary &voc);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="eae1c654d3ef76c5b10627a1f4427cca">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="41" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\libvelocity_set.h" startLineNumber="95" endLineNumber="100"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\libvelocity_set.h" startLineNumber="98" endLineNumber="103"/>
            <text>
<![CDATA[    , detection_crosswalk_id_(-1)
    , loaded_crosswalk(false)
    , loaded_area(false)
    , loaded_line(false)
    , loaded_point(false)
    , loaded_all(false)
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="9dc3b22ed62292ee96fc10e20aca9402">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="437" endLineNumber="443"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\pangolin.h" startLineNumber="29" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glplatform.h" startLineNumber="47" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\opengl_render_state.h" startLineNumber="54" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\display_internal.h" startLineNumber="28" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="58" endLineNumber="65"/>
            <text>
<![CDATA[  char color;
  int type;
  int linkid;
}WhiteLine;

typedef struct{
  int lid;
}Mark;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="5ecd07391b10e68ee51ee9fd02f1e4ac">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\main.cpp" startLineNumber="5" endLineNumber="11"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tlr_tuner.cpp" startLineNumber="6" endLineNumber="14"/>
            <text>
<![CDATA[int main(int argc, char *argv[])
{
  ros::init(argc, argv,"tlr_tuner");

  QApplication a(argc, argv);
  MainWindow w;
  TunerBody tuner;

  w.show();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="b2f95de693c2f6e55aa23199ab46b94c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="50" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="57" endLineNumber="64"/>
            <text>
<![CDATA[std::string frame_id;

ros::Publisher traffic_pub;
ros::Publisher red_pub;
ros::Publisher green_pub;

lane_planner::vmap::VectorMap all_vmap;
lane_planner::vmap::VectorMap lane_vmap;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="80a40a99fcb219c022586cf3b9f072de">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_uploader\pos_uploader.cpp" startLineNumber="86" endLineNumber="96"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_uploader\obj_uploader.cpp" startLineNumber="85" endLineNumber="95"/>
            <text>
<![CDATA[static std::string getTimeStamp(time_t sec, time_t nsec)
{
  char buf[30];
  int msec = static_cast<int>(nsec / (1000 * 1000));

  tm *t = localtime(&sec);
  sprintf(buf, "%04d-%02d-%02d %02d:%02d:%02d.%d",
          t->tm_year + 1900, t->tm_mon + 1, t->tm_mday,
          t->tm_hour, t->tm_min, t->tm_sec, msec);

  return std::string(static_cast<const char*>(buf));
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="2a55f9ce88cec003ab28be54d02a8922">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_points_map_update\sample_points_map_update.cpp" startLineNumber="53" endLineNumber="58"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\map_tools\nodes\pcd_arealist\pcd_arealist.cpp" startLineNumber="33" endLineNumber="38"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="105" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\TrafficLightDetector.cpp" startLineNumber="7" endLineNumber="15"/>
            <text>
<![CDATA[struct regionCandidate {
  cv::Point  center;
  int    idx;
  double circleLevel;
  bool   isBlacked;
};


extern thresholdSet thSet;      // declared in traffic_light_lkf.cpp
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="700f34317d0784f030326830bac893d8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\include\fastvirtualscan\fastvirtualscan.h" startLineNumber="22" endLineNumber="27"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\libvelocity_set.h" startLineNumber="39" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="43" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\libvelocity_set.h" startLineNumber="41" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\solvers\linear_solver_eigen.h" startLineNumber="132" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapDrawer.h" startLineNumber="48" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_rejection.h" startLineNumber="377" endLineNumber="391"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\CalObjLoc.h" startLineNumber="72" endLineNumber="79"/>
            <text>
<![CDATA[private:
    double U;//X from camera picture
    double V;//Y from camera picture
    double distance;

    //camera parameter
    double fkx;
    double fky;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="6e1b4ec1206206c84922b1356b1edbc5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\resize_GPU.cpp" startLineNumber="45" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\for_use_GPU.h" startLineNumber="64" endLineNumber="69"/>
            <text>
<![CDATA[extern CUdeviceptr *tmpIx_dev;
extern CUdeviceptr *tmpIy_dev;
extern CUdeviceptr *pm_size_array_dev;
extern CUdeviceptr *PIDX_array_dev;
extern CUdeviceptr *def_array_dev;
extern int sum_size_def_array;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="7bd46577b102b31be42812948f99c43c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\FastVirtualScan\fastvirtualscan.cpp" startLineNumber="37" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching_tku\ndt_matching_tku.cpp" startLineNumber="1162" endLineNumber="1168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching_tku\ndt_matching_tku.cpp" startLineNumber="1161" endLineNumber="1167"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="832" endLineNumber="837"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping_tku\ndt_mapping_tku.cpp" startLineNumber="1163" endLineNumber="1169"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping_tku\ndt_mapping_tku.cpp" startLineNumber="1162" endLineNumber="1168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="650" endLineNumber="655"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\Context.cpp" startLineNumber="6" endLineNumber="11"/>
            <text>
<![CDATA[	redCenter = aRedCenter;
	yellowCenter = aYellowCenter;
	greenCenter = aGreenCenter;
	lampRadius = aLampRadius;
	topLeft = aTopLeft;
	botRight = aBotRight;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="799f63d717e5c74f7bbc8525d9afb9e4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\newton.cpp" startLineNumber="84" endLineNumber="89"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\newton.cpp" startLineNumber="81" endLineNumber="86"/>
            <text>
<![CDATA[    qda[j][0] = qd3[j][0] * nd->inv_covariance[0][0] + qd3[j][1] * nd->inv_covariance[1][0] +
                qd3[j][2] * nd->inv_covariance[2][0];
    qda_p++;
    qda[j][1] = qd3[j][0] * nd->inv_covariance[0][1] + qd3[j][1] * nd->inv_covariance[1][1] +
                qd3[j][2] * nd->inv_covariance[2][1];
    qda_p++;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="448578d15aa181e34c143cfcd5a6c4bf">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\rosinterface\include\rosinterface\rosinterface.h" startLineNumber="281" endLineNumber="286"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\rosinterface\include\rosinterface\rosinterface.h" startLineNumber="245" endLineNumber="250"/>
            <text>
<![CDATA[public:
    bool sendTF(tf::Transform & transform);
    QString getChildFrameID();
    void resetChildFrameID(QString childFrameID);
    QString getFrameID();
    void resetFrameID(QString frameID="world");
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="235d0c862fdf8d3e858a1f7254733cc0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\simple_math.h" startLineNumber="129" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\simple_math.h" startLineNumber="105" endLineNumber="112"/>
            <text>
<![CDATA[template<int R, int M, int C, typename P>
void MatMul(P mo[R*C], const P m1[R*M], const P m2[M*C] )
{
    for( int r=0; r < R; ++r)
        for( int c=0; c < C; ++c )
        {
            mo[R*c+r] = 0;
            for( int m=0; m < M; ++ m) mo[R*c+r] += m1[R*m+r] * m2[M*c+m];
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="87b4cacbb52292d1023ae1c5ad7a673d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\camera_lidar2d_offline_calib.cpp" startLineNumber="347" endLineNumber="353"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\camera_lidar2d_offline_calib.cpp" startLineNumber="175" endLineNumber="180"/>
            <text>
<![CDATA[        std::string camera_yaml;
        n.param<std::string>("/camera_lidar2d/camera_yaml", camera_yaml, STR(CAMERA_YAML));
        cv::FileStorage fs(camera_yaml.c_str(), cv::FileStorage::WRITE);
        if(!fs.isOpened()){
            fprintf(stderr, "%s : cannot open file\n", camera_yaml.c_str());
            exit(EXIT_FAILURE);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="cf242e0b11f2509ddd13dbfa004d0134">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\display.cpp" startLineNumber="482" endLineNumber="489"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\display.cpp" startLineNumber="472" endLineNumber="479"/>
            <text>
<![CDATA[void Zoom(float m)
{
#ifdef HAVE_GLUT
    context->mouse_state &= 0x0000ffff;
    context->mouse_state |= glutGetModifiers() << 16;
#endif    
    
    SpecialInput(InputSpecialZoom, last_x, last_y, m, 0, 0, 0);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="ebe27840482d1a71e870be0b23b3d0c7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\threadedfilebuf.h" startLineNumber="62" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_image.h" startLineNumber="296" endLineNumber="302"/>
            <text>
<![CDATA[    ImageViewHandler* linked_view_handler;

    pangolin::XYRangef rview_default;
    pangolin::XYRangef rview_max;
    pangolin::XYRangef rview;
    pangolin::XYRangef target;
    pangolin::XYRangef selection;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="8c71f8a8dc47763a2cb16abd502c912a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gldraw.h" startLineNumber="173" endLineNumber="182"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gldraw.h" startLineNumber="153" endLineNumber="163"/>
            <text>
<![CDATA[    glDisableClientState(GL_VERTEX_ARRAY);
}

inline void glDrawCircle( GLfloat x, GLfloat y, GLfloat rad )
{    
    const int N = 50;
    GLfloat verts[N*2];
    
    // Draw vertices anticlockwise for front face
    const float TAU_DIV_N = 2*(float)M_PI/N;
    for(int i = 0; i < N*2; i+=2) {
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="16917bae90e8ee447e3a1d6d950eaa96">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="486" endLineNumber="494"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="476" endLineNumber="484"/>
            <text>
<![CDATA[	for (int i = 0; i < device_num; ++i) {
		res = cuModuleUnload(module[i]);
		if(res != CUDA_SUCCESS){
			printf("\ncuModuleUnload failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}
	}

	printf("module unloaded\n");
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="3de05f6fb0b640a05e8d01a15cad0142">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\ssd_node.cpp" startLineNumber="184" endLineNumber="192"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\rcnn\rcnn_node.cpp" startLineNumber="196" endLineNumber="204"/>
            <text>
<![CDATA[		if (private_node_handle.getParam("use_gpu", use_gpu_))
		{
			ROS_INFO("GPU Mode: %d", use_gpu_);
		}
		int gpu_id;
		if (private_node_handle.getParam("gpu_device_id", gpu_id ))
		{
			ROS_INFO("GPU Device ID: %d", gpu_id);
			gpu_device_id_ = (unsigned int) gpu_id;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="b6ac5175118536fef628f799550f59cc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\FORB.cpp" startLineNumber="162" endLineNumber="167"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\FORB.cpp" startLineNumber="161" endLineNumber="166"/>
            <text>
<![CDATA[      p[0] = (desc[j] & (1 << 7) ? 1 : 0);
      p[1] = (desc[j] & (1 << 6) ? 1 : 0);
      p[2] = (desc[j] & (1 << 5) ? 1 : 0);
      p[3] = (desc[j] & (1 << 4) ? 1 : 0);
      p[4] = (desc[j] & (1 << 3) ? 1 : 0);
      p[5] = (desc[j] & (1 << 2) ? 1 : 0);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="e9f54834fd7345a7733d61f3a6bd974b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="322" endLineNumber="327"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapPoint.h" startLineNumber="125" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\KeyFrame.h" startLineNumber="152" endLineNumber="161"/>
            <text>
<![CDATA[    double mTimeStamp;

    // Grid (to speed up feature matching)
    int mnGridCols;
    int mnGridRows;
    float mfGridElementWidthInv;
    float mfGridElementHeightInv;

    // Variables used by the tracking
    long unsigned int mnTrackReferenceForFrame;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="8de1a98cc4a397ddfb437b3aecb72b81">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\log\packetstream.h" startLineNumber="49" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\log\packetstream.h" startLineNumber="48" endLineNumber="53"/>
            <text>
<![CDATA[const uint32_t TAG_PANGO_HDR   = PANGO_TAG('L', 'I', 'N');
const uint32_t TAG_PANGO_SYNC  = PANGO_TAG('S', 'Y', 'N');
const uint32_t TAG_PANGO_STATS = PANGO_TAG('S', 'T', 'A');
const uint32_t TAG_ADD_SOURCE  = PANGO_TAG('S', 'R', 'C');
const uint32_t TAG_SRC_JSON    = PANGO_TAG('J', 'S', 'N');
const uint32_t TAG_SRC_PACKET  = PANGO_TAG('P', 'K', 'T');
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="dbd63c908c9a0e6c9fa2c8cf8ae3bdc2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\get_boxes.cpp" startLineNumber="33" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\get_boxes.cpp" startLineNumber="20" endLineNumber="29"/>
            <text>
<![CDATA[static void free_rootmatch(FLOAT **rootmatch, MODEL *MO)
{
	if (rootmatch == nullptr)
		return;

	for(int i = 0; i < MO->RF->NoR; i++) {
		free(rootmatch[i]);

	}
	s_free(rootmatch);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="a2459d6aa65707183aff321c598401b3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="453" endLineNumber="459"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1481" endLineNumber="1488"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1427" endLineNumber="1433"/>
            <text>
<![CDATA[    return marker;

  Line line = vmap.findByKey(Key<Line>(area.slid));
  if (line.lid == 0)
    return marker;
  if (line.blid != 0) // must set beginning line
    return marker;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="8d33411c2df0520e8f677ac53b4c48c6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_downloader\pos_downloader.cpp" startLineNumber="77" endLineNumber="82"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_twist_convert\lattice_twist_convert.cpp" startLineNumber="71" endLineNumber="86"/>
            <text>
<![CDATA[union Spline curvature;

// Global variable to hold vehicle state
union State veh; 

// Global var
union State veh_temp;

// Global variable to keep track of when the last message was recieved:
double start_time;

// Global variable keep track of current time in this node:
double current_time;

// Global flag to indicate a new state
bool newState = FALSE;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="4dd639084d5873414292192034d25298">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="48" endLineNumber="58"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\libvelocity_set.h" startLineNumber="26" endLineNumber="35"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\libvelocity_set.h" startLineNumber="28" endLineNumber="37"/>
            <text>
<![CDATA[  double width;
};

class CrossWalk
{
private:
  // detection_points_[bdID] has information of each crosswalk
  std::unordered_map<int, CrossWalkPoints> detection_points_;
  int detection_waypoint_;
  int detection_crosswalk_id_;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="018bcd6b97fe4dc040cbe2255b1d3619">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\rosinterface\ROSInterface\rosinterface.cpp" startLineNumber="280" endLineNumber="289"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\rosinterface\ROSInterface\rosinterface.cpp" startLineNumber="268" endLineNumber="277"/>
            <text>
<![CDATA[QString ROSTFSub::getDestinationFrame()
{
    return destinationframe;
}

void ROSTFSub::resetDestinationFrame(QString destinationFrame)
{
    lock.lockForWrite();
    destinationframe=destinationFrame;
    lock.unlock();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="8bcea2b03b0722250bbe273795ba1a25">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\rosinterface\ROSInterface\rosinterface.cpp" startLineNumber="205" endLineNumber="213"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\rosinterface\ROSInterface\rosinterface.cpp" startLineNumber="102" endLineNumber="110"/>
            <text>
<![CDATA[    receiveflag=1;
    clearMessage();
    lock.unlock();
}

void ROSSubBase::stopReceiveSlot()
{
    lock.lockForWrite();
    receiveflag=0;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="531ee7eaefc58b448991987c34c88a4a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="422" endLineNumber="432"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="262" endLineNumber="272"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="190" endLineNumber="200"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="62" endLineNumber="72"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_trajectory\sample_trajectory.cpp" startLineNumber="62" endLineNumber="73"/>
            <text>
<![CDATA[  return tbl;
}

/* for gnssdata.csv */
struct GnssData {
  double x;
  double y;
  double z;
};


std::vector<GnssData> read_gnssdata(const char* filename)
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="b248b0bc305413688841b349c8a216af">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="55" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_levenberg.h" startLineNumber="74" endLineNumber="85"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\fusion\include\fusion_func.h" startLineNumber="65" endLineNumber="72"/>
            <text>
<![CDATA[	int x;
	int y;
	double distance;
	float min_h;
	float max_h;
};

extern void fuse();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="cf8451cefd93128478f6025559ebbf97">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="68" endLineNumber="75"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\for_use_gpu.h" startLineNumber="34" endLineNumber="42"/>
            <text>
<![CDATA[    int sizeY;
    int numFeatures;
    CUdeviceptr map;
} CvLSVMFeatureMapGPU;

typedef struct
{
    int numLevels;
    CvLSVMFeatureMapGPU **pyramid;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="bb86b61b61c981162a9a41465f501b6b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_publisher\calibration_publisher.cpp" startLineNumber="113" endLineNumber="123"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_lidar_track\euclidean_lidar_track.cpp" startLineNumber="118" endLineNumber="129"/>
            <text>
<![CDATA[  tracked_bba_textlabel_pub.publish(pub_textlabel_msg);

} /* void cluster_cb() */

int main(int argc, char *argv[]) {
  /* ROS initialization */
  ros::init(argc, argv, "euclidean_lidar_track");

  ros::NodeHandle n;
  ros::NodeHandle private_n("~");

  if (!private_n.getParam("threshold_dist", threshold_dist)) {
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="7f2bf6ab85809f8153735c143d8b438f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\space_filter\space_filter.cpp" startLineNumber="121" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="569" endLineNumber="575"/>
            <text>
<![CDATA[		else
			downsampled_cloud_ptr=removed_points_cloud_ptr;

		if(_keep_lanes)
			keepLanePoints(downsampled_cloud_ptr, inlanes_cloud_ptr, _keep_lane_left_distance, _keep_lane_right_distance);
		else
			inlanes_cloud_ptr = downsampled_cloud_ptr;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="3343ce706375321d9435c3c1b82f2456">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\oculus_socket\nodes\oculus_sender\oculus_sender.cpp" startLineNumber="24" endLineNumber="31"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="9" endLineNumber="17"/>
            <text>
<![CDATA[#define TRANS_RESULT_COUNT 64

typedef struct
{
    int numSectors;     //number of sectors
    int mapX;           //map sizeX * numSectors
    int mapY;           //map sizeY
    int filterX;        //filter sizeX * numSectors
    int filterY;        //filter sizeY
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="da7a2b810aecc83591502668dada450a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="285" endLineNumber="290"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="224" endLineNumber="229"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="115" endLineNumber="120"/>
            <text>
<![CDATA[    void refreshParametersSlot();
signals:
    void imageRefreshedSignal();
    void imageRefreshedErrorSignal();
protected:
    virtual bool refreshImage();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="862bab1a875bbda3698edbbf9ef42db2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="719" endLineNumber="728"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="546" endLineNumber="554"/>
            <text>
<![CDATA[    br.sendTransform(tf::StampedTransform(transform, current_scan_time, "/map", "/base_link"));

    matching_end = std::chrono::system_clock::now();
    exe_time = std::chrono::duration_cast<std::chrono::microseconds>(matching_end - matching_start).count() / 1000.0;
    time_icp_matching.data = exe_time;
    time_icp_matching_pub.publish(time_icp_matching);

    // Set values for /estimate_twist
    estimate_twist_msg.header.stamp = current_scan_time;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="4e16bd8f0c39c3ed40a170bfad60bc38">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_core.cpp" startLineNumber="166" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.cpp" startLineNumber="57" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="640" endLineNumber="646"/>
            <text>
<![CDATA[void LaneSelectNode::callbackFromConfig(const runtime_manager::ConfigLaneSelectConstPtr &msg)
{
  distance_threshold_ = msg-> distance_threshold_neighbor_lanes;
  lane_change_interval_= msg->lane_change_interval;
    lane_change_target_ratio_ = msg->lane_change_target_ratio;
  lane_change_target_minimum_ = msg->lane_change_target_minimum;
    vlength_hermite_curve_= msg->vector_length_hermite_curve;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="cd9630198adc6d26a72f9d568eebf1d1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\src\conversions\transform.h" startLineNumber="43" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\src\conversions\convert.h" startLineNumber="28" endLineNumber="37"/>
            <text>
<![CDATA[namespace velodyne_pointcloud
{
  class Convert
  {
  public:

    Convert(ros::NodeHandle node, ros::NodeHandle private_nh);
    ~Convert() {}

  private:
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="962c7621673be0b98f02cacf4ca497a8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="345" endLineNumber="350"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="337" endLineNumber="342"/>
            <text>
<![CDATA[        sensors_time_diff.sec = time_diff_msg->lidar.sec - time_diff_msg->camera.sec;
        if (time_diff_msg->lidar.nsec >= time_diff_msg->camera.nsec) {
            sensors_time_diff.nsec = time_diff_msg->lidar.nsec - time_diff_msg->camera.nsec;
        } else {
            sensors_time_diff.sec -= 1;
            sensors_time_diff.nsec = 1000000000L + time_diff_msg->lidar.nsec - time_diff_msg->camera.nsec;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="60f24fc3dfa7686d31a4b1ac4a1c7c32">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\robust_kernel_factory.cpp" startLineNumber="56" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\factory.cpp" startLineNumber="69" endLineNumber="77"/>
            <text>
<![CDATA[  return factoryInstance;
}

void Factory::registerType(const std::string& tag, AbstractHyperGraphElementCreator* c)
{
  CreatorMap::const_iterator foundIt = _creator.find(tag);
  if (foundIt != _creator.end()) {
    cerr << "FACTORY WARNING: Overwriting Vertex tag " << tag << endl;
    assert(0);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="5a683b1303eb9cfc8b69b97f104fc412">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="199" endLineNumber="204"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="110" endLineNumber="115"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\file_extension.h" startLineNumber="43" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\view.h" startLineNumber="43" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\hyper_graph.h" startLineNumber="66" endLineNumber="71"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="248" endLineNumber="254"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="77" endLineNumber="82"/>
            <text>
<![CDATA[          CONVERGENCE_CRITERIA_NOT_CONVERGED,
          CONVERGENCE_CRITERIA_ITERATIONS,
          CONVERGENCE_CRITERIA_TRANSFORM,
          CONVERGENCE_CRITERIA_ABS_MSE,
          CONVERGENCE_CRITERIA_REL_MSE,
          CONVERGENCE_CRITERIA_NO_CORRESPONDENCES
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="3f186e19dc9ad8dc25c9ccbb57f764bc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="41" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="42" endLineNumber="66"/>
            <text>
<![CDATA[#define FAST_PCL_REGISTRATION_CORRESPONDENCE_ESTIMATION_H_

#include <string>

#include <pcl/pcl_base.h>
#include <pcl/common/transforms.h>
#include <pcl/search/kdtree.h>
#include <pcl/pcl_macros.h>

//#include <pcl/registration/correspondence_types.h>
#include "fast_pcl/registration/correspondence_types.h"

namespace pcl
{
  namespace registration
  {
    /** \brief Abstract @b CorrespondenceEstimationBase class. 
      * All correspondence estimation methods should inherit from this.
      * \author Radu B. Rusu
      * \ingroup registration
      */
    template <typename PointSource, typename PointTarget, typename Scalar = float>
      class CorrespondenceEstimationBase: public PCLBase<PointSource>
    {
      public:
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="52cc7881efa032448e594c04c29fab76">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="93" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\plotter.h" startLineNumber="182" endLineNumber="189"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\ORBextractor.h" startLineNumber="98" endLineNumber="105"/>
            <text>
<![CDATA[    double scaleFactor;
    int nlevels;
    int iniThFAST;
    int minThFAST;

    std::vector<int> mnFeaturesPerLevel;

    std::vector<int> umax;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="36ae63ee09e34de99c7cb0bd4ef9b852">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_d_viewer\scan_image_d_viewer.cpp" startLineNumber="85" endLineNumber="91"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="106" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_d_viewer\image_d_viewer.cpp" startLineNumber="120" endLineNumber="126"/>
            <text>
<![CDATA[    CvFont      dfont_label;
    float       hscale_label = 0.5f;
    float       vscale_label = 0.5f;
    CvSize      text_size;
    int         baseline     = 0;

    cvInitFont(&dfont_label, CV_FONT_HERSHEY_COMPLEX, hscale_label, vscale_label, italicscale, thickness, CV_AA);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="cd246f53e09603d99c3af3aded653aa6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\widgets\widgets.h" startLineNumber="114" endLineNumber="121"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\widgets\widgets.h" startLineNumber="71" endLineNumber="80"/>
            <text>
<![CDATA[    void Render();
    
    //Cache params on resize
    void ResizeChildren();
    GlText gltext;
    GLfloat raster[2];
    bool down;
};

#ifdef CPP11_NO_BOOST
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="a622704166ec45eeafb84861d6d01d1d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="383" endLineNumber="388"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\sync_car_dpm.cpp" startLineNumber="380" endLineNumber="385"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\copy.cpp" startLineNumber="438" endLineNumber="443"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\car_dpm_sync.cpp" startLineNumber="380" endLineNumber="385"/>
            <text>
<![CDATA[    ros::Subscriber image_raw_sub = nh.subscribe("/image_raw", 1, image_raw_callback);
    ros::Subscriber points_raw_sub = nh.subscribe("/points_raw", 1, points_raw_callback);
    image_raw_pub = nh.advertise<sensor_msgs::Image>("/image_raw_", 5);
    points_raw_pub = nh.advertise<sensor_msgs::PointCloud2>("/points_raw_", 5);
    while (!buf_flag) {
        ros::spinOnce();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="612e9e6eb549665a1dd238fb0ce25b2a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_matching\orb_matching.cpp" startLineNumber="331" endLineNumber="336"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_matching\orb_matching.cpp" startLineNumber="330" endLineNumber="335"/>
            <text>
<![CDATA[		newTransform.transform.translation.x = srcTransform.getOrigin().x();
		newTransform.transform.translation.y = srcTransform.getOrigin().y();
		newTransform.transform.translation.z = srcTransform.getOrigin().z();
		newTransform.transform.rotation.x = srcTransform.getRotation().x();
		newTransform.transform.rotation.y = srcTransform.getRotation().y();
		newTransform.transform.rotation.z = srcTransform.getRotation().z();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="457515357cf9b8a692fc5748edff9d83">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapObjectSerialization.h" startLineNumber="421" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapObjectSerialization.h" startLineNumber="419" endLineNumber="428"/>
            <text>
<![CDATA[	ar & keyframe._imConnectedKeyFrameWeights;

	ar & keyframe._vmvpOrderedConnectedKeyFrames;

	ar & keyframe.mvOrderedWeights;
	ar & keyframe.mbFirstConnection;

	ar & keyframe._parentId;

	ar & keyframe._vmspChildrens;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="361109e4a12e4cb3e16db505afa0ebab">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\image\image_io.cpp" startLineNumber="378" endLineNumber="384"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\image\image_io.cpp" startLineNumber="214" endLineNumber="222"/>
            <text>
<![CDATA[        fclose(in);
        return img;
    }
    
    throw std::runtime_error("Unable to load PNG file, '" + filename + "'");    
    
#else
    throw std::runtime_error("PNG Support not enabled. Please rebuild Pangolin.");
#endif
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="c0836219d4440c17ce7a6465f44fa128">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.cpp" startLineNumber="52" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_sba.cpp" startLineNumber="36" endLineNumber="45"/>
            <text>
<![CDATA[  VertexSBAPointXYZ::VertexSBAPointXYZ() : BaseVertex<3, Vector3d>()
  {
  }

  bool VertexSBAPointXYZ::read(std::istream& is)
  {
    Vector3d lv;
    for (int i=0; i<3; i++)
      is >> _estimate[i];
    return true;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="639e777862b55937640b37fc4e8a2727">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\selectionwidget.h" startLineNumber="79" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\vscan_lidar_track\mainwindow.h" startLineNumber="50" endLineNumber="55"/>
            <text>
<![CDATA[protected:
    void mousePressEvent(QMouseEvent *event);
    void wheelEvent(QWheelEvent *event);
    void keyPressEvent(QKeyEvent *event);
    void keyReleaseEvent(QKeyEvent *event);
protected:
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="635e8ffc38c2459f63168a409337e96f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="127" endLineNumber="135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\display_internal.h" startLineNumber="74" endLineNumber="81"/>
            <text>
<![CDATA[    bool is_fullscreen;
    GLint windowed_size[2];
    
    // State relating to interactivity
    bool quit;
    int had_input;
    int has_resized;
    int mouse_state;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="b01c78f4416439f67a7d7ab253174795">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set.cpp" startLineNumber="467" endLineNumber="475"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_navi.cpp" startLineNumber="31" endLineNumber="38"/>
            <text>
<![CDATA[int main(int argc, char **argv)
{
  ros::init(argc, argv, "astar_navi");
  ros::NodeHandle n;
  ros::NodeHandle private_nh_("~");

  double waypoint_velocity_kmph;
  std::string map_topic;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="d026969e8950af15066ea201e79814a1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="17" endLineNumber="23"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="16" endLineNumber="21"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="15" endLineNumber="20"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="14" endLineNumber="19"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="12" endLineNumber="18"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="11" endLineNumber="17"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\common_2d_calib.h" startLineNumber="36" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\System.h" startLineNumber="160" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\for_use_GPU.h" startLineNumber="63" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\for_use_GPU.h" startLineNumber="62" endLineNumber="67"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\for_use_GPU.h" startLineNumber="61" endLineNumber="66"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\for_use_GPU.h" startLineNumber="60" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\for_use_GPU.h" startLineNumber="59" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\for_use_GPU.h" startLineNumber="58" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\for_use_GPU.h" startLineNumber="57" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\for_use_GPU.h" startLineNumber="56" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\for_use_GPU.h" startLineNumber="55" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\for_use_GPU.h" startLineNumber="54" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\for_use_gpu.h" startLineNumber="70" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\for_use_gpu.h" startLineNumber="69" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\for_use_gpu.h" startLineNumber="68" endLineNumber="73"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\for_use_gpu.h" startLineNumber="67" endLineNumber="72"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\for_use_gpu.h" startLineNumber="65" endLineNumber="71"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\for_use_gpu.h" startLineNumber="64" endLineNumber="70"/>
            <text>
<![CDATA[extern CUdevice *dev;
extern CUcontext *ctx;

extern CUfunction *BilinearKernelTex32F_func;
extern CUfunction *calculateHistogram_func;
extern CUfunction *getFeatureMaps_func;
extern CUfunction *calculateNorm_func;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="9ce7c8baf18e543422b3054fc5bbc049">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\obj_reproj.cpp" startLineNumber="174" endLineNumber="184"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\obj_reproj.cpp" startLineNumber="160" endLineNumber="170"/>
            <text>
<![CDATA[        marker.type = visualization_msgs::Marker::SPHERE;

        /* set pose of marker  */
        marker.pose.position = reproj_pos;

        /* set scale of marker */
        marker.scale.x = (double)1.5;
        marker.scale.y = (double)1.5;
        marker.scale.z = (double)1.5;

        marker.color = color_blue;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="f0b93bfd504534f960b67dbc6f4159a5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\sim3.h" startLineNumber="45" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lane_detector\nodes\lane_detector\utils.h" startLineNumber="34" endLineNumber="39"/>
            <text>
<![CDATA[private:
        double alpha; // [0;1] less = more stable, more = less stable
	double oldValue;
        bool unset;
public:
	ExpMovingAverage()
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="30614b79f2329b7fcd0c950e2a8f6d11">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\gazebo\twist_cmd_converter\src\converter.cpp" startLineNumber="64" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\gazebo\laser_scan_converter\src\converter.cpp" startLineNumber="63" endLineNumber="75"/>
            <text>
<![CDATA[    nh_.resolveName(laser_in_).c_str();
    nh_.resolveName(laser_out_).c_str();
  }

  void cloud_cb_points(const sensor_msgs::LaserScanConstPtr &msg) {
    if (pub_points_.getNumSubscribers() <= 0) {
      // ROS_DEBUG ("[point_cloud_converter] Got a PointCloud with %d points on
      // %s, but no subscribers.", (int)msg->points.size (), nh_.resolveName
      // (points_in_).c_str ());
      return;
    }

    sensor_msgs::LaserScan output;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="9a611d48b37bcabf778a304ceacec18e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapObjectSerialization.h" startLineNumber="486" endLineNumber="493"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapObjectSerialization.h" startLineNumber="478" endLineNumber="485"/>
            <text>
<![CDATA[		mapPoint.mNormalVector &
		mapPoint.mDescriptor;

	int refKfId = (mapPoint.mpRefKF==NULL ? -1 : mapPoint.mpRefKF->mnId);
	ar & refKfId;

	ar &
		mapPoint.mnVisible &
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="9f1464edcb411ceeb9fc452bac0a234e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\selectionwidget.h" startLineNumber="40" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Sim3Solver.h" startLineNumber="109" endLineNumber="122"/>
            <text>
<![CDATA[    std::vector<cv::Mat> mvP1im1;
    std::vector<cv::Mat> mvP2im2;

    // RANSAC probability
    double mRansacProb;

    // RANSAC min inliers
    int mRansacMinInliers;

    // RANSAC max iterations
    int mRansacMaxIts;

    // Threshold inlier/outlier. e = dist(Pi,T_ij*Pj)^2 < 5.991*mSigma2
    float mTh;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="185a3afd9bc1102553781318afe0c678">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\include\waypoint_follower\libwaypoint_follower.h" startLineNumber="72" endLineNumber="82"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\autoware_connector\nodes\can_info_translator\can_info_translator_core.h" startLineNumber="153" endLineNumber="166"/>
            <text>
<![CDATA[inline double kmph2mps(double velocity_kmph)
{
  return (velocity_kmph * 1000) / (60 * 60);
}

inline double mps2kmph(double velocity_mps)
{
  return (velocity_mps * 60 * 60) / 1000;
}

// convert degree to radian
inline double deg2rad(double deg)
{
  return deg * M_PI / 180;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="b5aa62b6ec848a9d4bff1f4cc07f9861">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\point_types.h" startLineNumber="27" endLineNumber="33"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\pangolin.h" startLineNumber="49" endLineNumber="57"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\structure.h" startLineNumber="46" endLineNumber="54"/>
            <text>
<![CDATA[}ANGLE;

typedef struct _RESULT{
    double lat;
    double lon;

}RESULT;

#endif
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="b6fe9e440051e1d3c0ebd6142e9bc1bd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\ScoringObject.cpp" startLineNumber="294" endLineNumber="306"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\ScoringObject.cpp" startLineNumber="249" endLineNumber="261"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\ScoringObject.cpp" startLineNumber="152" endLineNumber="163"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\ScoringObject.cpp" startLineNumber="95" endLineNumber="107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\ScoringObject.cpp" startLineNumber="45" endLineNumber="57"/>
            <text>
<![CDATA[      ++v1_it;
      ++v2_it;
    }
    else if(v1_it->first < v2_it->first)
    {
      // move v1 forward
      v1_it = v1.lower_bound(v2_it->first);
      // v1_it = (first element >= v2_it.id)
    }
    else
    {
      // move v2 forward
      v2_it = v2.lower_bound(v1_it->first);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="0e2b8f9e06d81bf993af86dac0a275d3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="766" endLineNumber="773"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="763" endLineNumber="770"/>
            <text>
<![CDATA[		M_array[L] = (FLOAT ***)pointer_M;
		pointer_M += (unsigned long long int)(NoC*sizeof(FLOAT**));

		tmpM_array[L] = (FLOAT ***)pointer_tmpM;
		pointer_tmpM += (unsigned long long int)(NoC*sizeof(FLOAT**));

		tmpIx_array[L] = (int ***)pointer_tmpIx;
		pointer_tmpIx += (unsigned long long int)(NoC*sizeof(int**));
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="73ace78c01c86ae8e4287fda35b8fed7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="187" endLineNumber="198"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="149" endLineNumber="160"/>
            <text>
<![CDATA[        dst[i][j] = 0;
    }
  }
  return 1;
}

int identity_matrix6d(double dst[6][6])
{
  int i, j;
  for (i = 0; i < 6; i++)
  {
    for (j = 0; j < 6; j++)
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="d4321bc2e30ba6d5dfebbbac061a24fa">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="87" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="102" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="88" endLineNumber="96"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="100" endLineNumber="107"/>
            <text>
<![CDATA[static pcl::IterativeClosestPoint<pcl::PointXYZ, pcl::PointXYZ> icp;

// Default values for ICP
static int maximum_iterations = 100;
static double transformation_epsilon = 0.01;
static double max_correspondence_distance = 1.0;
static double euclidean_fitness_epsilon = 0.1;
static double ransac_outlier_rejection_threshold = 1.0;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="f80cf6517db22cae7f85bff5f6674809">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_matching\orb_matching.cpp" startLineNumber="427" endLineNumber="432"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_matching\orb_matching.cpp" startLineNumber="426" endLineNumber="431"/>
            <text>
<![CDATA[			gpose.pose.position.x = pose->getOrigin().x();
			gpose.pose.position.y = pose->getOrigin().y();
			gpose.pose.position.z = pose->getOrigin().z();
			gpose.pose.orientation.x = pose->getRotation().x();
			gpose.pose.orientation.y = pose->getRotation().y();
			gpose.pose.orientation.z = pose->getRotation().z();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="7685ed3d3680f45a9da67a254320a576">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.cpp" startLineNumber="139" endLineNumber="144"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.cpp" startLineNumber="115" endLineNumber="120"/>
            <text>
<![CDATA[    nu.rotation    = descretized_angle;
    nu.index_theta = 1;
    nu.step        = step;
    nu.curve       = true;
    nu.back        = false;
    state_update_table_[i][2] = nu;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="00b50d2161fe8f10bc39baff396376e6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\stuff\string_tools.cpp" startLineNumber="65" endLineNumber="73"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\stuff\string_tools.cpp" startLineNumber="54" endLineNumber="62"/>
            <text>
<![CDATA[  if(b == string::npos)
    return "";
  return std::string(s, b, e - b + 1);
}

std::string trimLeft(const std::string& s)
{
  if(s.length() == 0)
    return s;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="8ab3a5e527a53fb71a94787f4a2216e2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="73" endLineNumber="78"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="18" endLineNumber="23"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\for_use_gpu.h" startLineNumber="60" endLineNumber="69"/>
            <text>
<![CDATA[#endif

// define variables for using GPU

extern CUdevice *dev;
extern CUcontext *ctx;

extern CUfunction *BilinearKernelTex32F_func;
extern CUfunction *calculateHistogram_func;
extern CUfunction *getFeatureMaps_func;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="9de090e8066b470892e8027ad6c9b28f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\scan2image\nodes\scan2image\scan2image.cpp" startLineNumber="23" endLineNumber="30"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\ssd_node.cpp" startLineNumber="45" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\rcnn\rcnn_node.cpp" startLineNumber="44" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\klt_track\klt_track.cpp" startLineNumber="63" endLineNumber="69"/>
            <text>
<![CDATA[class RosTrackerApp
{
	ros::Subscriber 	subscriber_image_raw_;
	ros::Subscriber 	subscriber_image_obj_;
	ros::Subscriber 	subscriber_klt_config_;
	ros::Publisher 		publisher_tracked_objects_;//ROS
	ros::NodeHandle 	node_handle_;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="58880193c4ec15adeaaff528f1e97d1d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\vscan2image\vscan2image.cpp" startLineNumber="95" endLineNumber="100"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\camera_lidar2d_offline_calib.cpp" startLineNumber="340" endLineNumber="347"/>
            <text>
<![CDATA[    ros::init(argc, argv, "camera_lidar2d_offline_calib");
    ros::NodeHandle n;
    ros::NodeHandle private_nh("~");
    std::string image_topic_name;
    private_nh.param<std::string>("image_raw_topic", image_topic_name, "image_raw");

    /* Read parameter xml */
    std::string param_yaml;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="6766e2ae5f165edd74b11dab8cb697ed">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_receiver\tablet_receiver.cpp" startLineNumber="253" endLineNumber="259"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_receiver\tablet_receiver.cpp" startLineNumber="247" endLineNumber="253"/>
            <text>
<![CDATA[	case 1: { // GEAR
		tablet_socket::gear_cmd msg;
		msg.gear = info[1];
		pub[0].publish(msg);
		break;
	}
	case 2: { // MODE
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="56b8c295b65ead9757eca07d3c9ce725">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="215" endLineNumber="221"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="161" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="119" endLineNumber="126"/>
            <text>
<![CDATA[    for (int i = 0; i < static_cast<int>(lane.waypoints.size()); i++)
    {
      //std::cout << _waypoints[i].GetX() << " " << _waypoints[i].GetY() << " " << _waypoints[i].GetZ() << " " << _waypoints[i].GetVelocity_kmh() << std::endl;
      velocity_marker.id = i;
      geometry_msgs::Point relative_p;
      relative_p.y = 0.5;
      velocity_marker.pose.position = calcAbsoluteCoordinate(relative_p, lane.waypoints[i].pose.pose);
      velocity_marker.pose.position.z += 0.2;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="083e4e7fb403b85ddc122c4b092ed447">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gl.h" startLineNumber="199" endLineNumber="205"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gl.h" startLineNumber="110" endLineNumber="117"/>
            <text>
<![CDATA[    GLint internal_format;
    GLuint tid;
    GLint width;
    GLint height;
    
private:
    // Private copy constructor
    GlTexture(const GlTexture&) {}
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="646d6844e6ecf10552ad2c8680f3ce8e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\include\map_file\get_file.h" startLineNumber="47" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="56" endLineNumber="62"/>
            <text>
<![CDATA[  geometry_msgs::PoseStamped localizer_pose_;  // pose of sensor
  geometry_msgs::PoseStamped control_pose_;    // pose of base_link
  int closest_waypoint_;
  bool set_pose_;

 public:
  VelocitySetInfo();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="07678877e2c09969786826f9c0f605ac">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\tracking.cpp" startLineNumber="27" endLineNumber="32"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="823" endLineNumber="828"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\tracking.cpp" startLineNumber="29" endLineNumber="34"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\dpm_ocv_gpu.cpp" startLineNumber="112" endLineNumber="117"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="2656" endLineNumber="2661"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="2655" endLineNumber="2660"/>
            <text>
<![CDATA[   spc->user_allocator_context = alloc_context;
   spc->width = pw;
   spc->height = ph;
   spc->pixels = pixels;
   spc->pack_info = context;
   spc->nodes = nodes;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="8936731e867e55ae0992f5b17ab85801">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\TemplatedVocabulary.h" startLineNumber="299" endLineNumber="310"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\PnPsolver.h" startLineNumber="165" endLineNumber="180"/>
            <text>
<![CDATA[  int mnRefinedInliers;

  // Number of Correspondences
  int N;

  // Indices for random selection [0 .. N-1]
  vector<size_t> mvAllIndices;

  // RANSAC probability
  double mRansacProb;

  // RANSAC min inliers
  int mRansacMinInliers;

  // RANSAC max iterations
  int mRansacMaxIts;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="8ec0d1f60f8db3a66ac559e625495d66">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="246" endLineNumber="251"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="245" endLineNumber="250"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="244" endLineNumber="249"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="243" endLineNumber="248"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="242" endLineNumber="247"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="241" endLineNumber="246"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="240" endLineNumber="245"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="239" endLineNumber="244"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="238" endLineNumber="243"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="237" endLineNumber="242"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="236" endLineNumber="241"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="235" endLineNumber="240"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\polygon\packages\points2polygon\nodes\points2polygon\points2polygon.cpp" startLineNumber="101" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\polygon\packages\points2polygon\nodes\points2polygon\points2polygon.cpp" startLineNumber="100" endLineNumber="107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\polygon\packages\points2polygon\nodes\points2polygon\points2polygon.cpp" startLineNumber="99" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\polygon\packages\points2polygon\nodes\points2polygon\points2polygon.cpp" startLineNumber="98" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\polygon\packages\points2polygon\nodes\points2polygon\points2polygon.cpp" startLineNumber="95" endLineNumber="102"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="284" endLineNumber="289"/>
            <text>
<![CDATA[	ec.setClusterTolerance (in_max_cluster_distance); //
	ec.setMinClusterSize (_cluster_size_min);
	ec.setMaxClusterSize (_cluster_size_max);
	ec.setSearchMethod(tree);
	ec.setInputCloud (in_cloud_ptr);
	ec.extract (cluster_indices);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="f9b7b921e0a0a112e45aa432a47bf398">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="762" endLineNumber="767"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="529" endLineNumber="534"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="528" endLineNumber="533"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="527" endLineNumber="532"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="514" endLineNumber="519"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="513" endLineNumber="518"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="512" endLineNumber="517"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="824" endLineNumber="830"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="823" endLineNumber="829"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="822" endLineNumber="827"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="564" endLineNumber="569"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="555" endLineNumber="560"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="415" endLineNumber="420"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="358" endLineNumber="363"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="343" endLineNumber="348"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="341" endLineNumber="347"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="340" endLineNumber="346"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="339" endLineNumber="345"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="338" endLineNumber="344"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="337" endLineNumber="343"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="336" endLineNumber="341"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="275" endLineNumber="280"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="273" endLineNumber="279"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="272" endLineNumber="278"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="271" endLineNumber="277"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="270" endLineNumber="276"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="269" endLineNumber="275"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="268" endLineNumber="273"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="266" endLineNumber="272"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="265" endLineNumber="271"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="264" endLineNumber="270"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="263" endLineNumber="269"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="262" endLineNumber="268"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="261" endLineNumber="266"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="351" endLineNumber="356"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="339" endLineNumber="344"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="319" endLineNumber="324"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="382" endLineNumber="387"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="352" endLineNumber="357"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="329" endLineNumber="334"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="309" endLineNumber="314"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="642" endLineNumber="648"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="641" endLineNumber="647"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="640" endLineNumber="645"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="453" endLineNumber="458"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="444" endLineNumber="449"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="321" endLineNumber="326"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="290" endLineNumber="295"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="275" endLineNumber="280"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="273" endLineNumber="279"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="272" endLineNumber="278"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="271" endLineNumber="277"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="270" endLineNumber="276"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="269" endLineNumber="275"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="268" endLineNumber="273"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="214" endLineNumber="219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="212" endLineNumber="218"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="211" endLineNumber="217"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="210" endLineNumber="216"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="209" endLineNumber="215"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="208" endLineNumber="214"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="207" endLineNumber="212"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="205" endLineNumber="211"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="204" endLineNumber="210"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="203" endLineNumber="209"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="202" endLineNumber="208"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="201" endLineNumber="207"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="200" endLineNumber="205"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="138" endLineNumber="143"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="137" endLineNumber="142"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="136" endLineNumber="141"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="135" endLineNumber="140"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="134" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="116" endLineNumber="121"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="65" endLineNumber="70"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="64" endLineNumber="69"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="63" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="62" endLineNumber="67"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="61" endLineNumber="66"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="60" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="59" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="58" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="57" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="56" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="55" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="54" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="20" endLineNumber="25"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="19" endLineNumber="24"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="18" endLineNumber="23"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="17" endLineNumber="22"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="16" endLineNumber="21"/>
            <text>
<![CDATA[      tmp.pid	 = point.pid;
      tmp.b      = point.b;
      tmp.l      = point.l;
      tmp.h      = point.h;
      tmp.bx	 = point.ly;
      tmp.ly	 = point.bx;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="ab947955f16a4943de629009395b9dea">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\eigen.h" startLineNumber="40" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\boost.h" startLineNumber="40" endLineNumber="58"/>
            <text>
<![CDATA[#ifndef FAST_PCL_REGISTRATION_BOOST_H_
#define FAST_PCL_REGISTRATION_BOOST_H_

#if defined __GNUC__
#  pragma GCC system_header 
#endif

//#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/graph_traits.hpp>
#include <boost/graph/dijkstra_shortest_paths.hpp>
#include <boost/property_map/property_map.hpp>

#include <boost/unordered_map.hpp>
#include <boost/noncopyable.hpp>
#include <boost/make_shared.hpp>
#include <boost/function.hpp>
#include <boost/bind.hpp>

#endif    // FAST_PCL_REGISTRATION_BOOST_H_
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="dfd4c3c7df13e55871698cc4acb59899">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\view.h" startLineNumber="52" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="92" endLineNumber="99"/>
            <text>
<![CDATA[        NO_IMAGES_YET=0,
        NOT_INITIALIZED=1,
        OK=2,
        LOST=3,
		MAP_OPEN=4
    };

    enum trackingMode {
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="ebe40fed131117058c955b83a7b0affa">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\matching_gpu.cpp" startLineNumber="443" endLineNumber="450"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\matching_gpu.cpp" startLineNumber="438" endLineNumber="446"/>
            <text>
<![CDATA[    res = cuStreamSynchronize(stream[0]);
    CUDA_CHECK(res, "cuStreamSynchronize(stream[0])");

    memcpy(disposition->score, tmp_disposition->score,
            disposition->size * sizeof(float));
    res = cuStreamSynchronize(stream[1]);
    CUDA_CHECK(res, "cuStreamSynchronize(stream[1])");

    memcpy(disposition->x, tmp_disposition->x, disposition->size * sizeof(int));
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="07fdf1575ffb6b399299f675a4b30c4d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="1069" endLineNumber="1079"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="979" endLineNumber="988"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="954" endLineNumber="963"/>
            <text>
<![CDATA[    publish_marker(&marker, pub, rate);
  }

  // road data
  for (i=0; i<lanes.size(); i++) {
    if (lanes[i].lnid <= 0) {
      continue;
    }
    int did = lanes[i].did;
    int pid = dtlanes[did].pid;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="39a401f70f22c9812c2263a09954f6d9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\laserscan2costmap\laserscan2costmap.cpp" startLineNumber="50" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\rawdata.h" startLineNumber="63" endLineNumber="77"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="61" endLineNumber="67"/>
            <text>
<![CDATA[const int PANGO_KEY_PAGE_UP   = 104;
const int PANGO_KEY_PAGE_DOWN = 105;
const int PANGO_KEY_HOME      = 106;
const int PANGO_KEY_END	      = 107;
const int PANGO_KEY_INSERT	  = 108;

enum MouseButton
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="584e307fa1c10b7f062fc425ed2d12fb">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="182" endLineNumber="194"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="45" endLineNumber="57"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="33" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="21" endLineNumber="33"/>
            <text>
<![CDATA[void CalibrationToolkitBase::grabCalibDataSlot()
{
    if(grabCalibData())
    {
        emit calibDataGrabbedSignal();
    }
    else
    {
        emit calibDataGrabbedErrorSignal();
    }
}

void CalibrationToolkitBase::removeCalibDataSlot()
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="440adde4922c17ccab29be70140ec29a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapPoint.h" startLineNumber="131" endLineNumber="140"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapPoint.h" startLineNumber="130" endLineNumber="139"/>
            <text>
<![CDATA[    long unsigned int mnTrackReferenceForFrame;
    long unsigned int mnLastFrameSeen;

    // Variables used by local mapping
    long unsigned int mnBALocalForKF;
    long unsigned int mnFuseCandidateForKF;

    // Variables used by loop closing
    long unsigned int mnLoopPointForKF;
    long unsigned int mnCorrectedByKF;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="50a8be7abcc9c20968142db84f51960a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\feat_proj\feat_proj.cpp" startLineNumber="91" endLineNumber="96"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\feat_proj\feat_proj.cpp" startLineNumber="90" endLineNumber="95"/>
            <text>
<![CDATA[  cameraPose.position.x    = (double)(position.x());
  cameraPose.position.y    = (double)(position.y());
  cameraPose.position.z    = (double)(position.z());
  cameraPose.orientation.x = (double)(orientation.x());
  cameraPose.orientation.y = (double)(orientation.y());
  cameraPose.orientation.z = (double)(orientation.z());
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="fc42d006f72a4d18abb228e168da7353">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_uploader\pos_uploader.cpp" startLineNumber="136" endLineNumber="143"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_uploader\pos_uploader.cpp" startLineNumber="113" endLineNumber="120"/>
            <text>
<![CDATA[static std::string pose_to_insert_statement(const geometry_msgs::Pose& pose, const std::string& timestamp, const char *name)
{
  std::ostringstream oss;
  constexpr int AREA = 7;

  oss << "INSERT INTO POS(id,x,y,z,area,or_x,or_y,or_z,or_w,type,tm) "
      << "VALUES("
      << "'" << mac_addr << "',"
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="740fba04c91c5b66a04ca519b429b6fb">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="281" endLineNumber="288"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="270" endLineNumber="276"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="201" endLineNumber="208"/>
            <text>
<![CDATA[	if(res != CUDA_SUCCESS) {
		printf("cuMemcpyHtoD(RX) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
	}

	gettimeofday(&tv_memcpy_end, nullptr);
	tvsub(&tv_memcpy_end, &tv_memcpy_start, &tv);
	time_memcpy += tv.tv_sec * 1000.0 + (float)tv.tv_usec / 1000.0;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="2e9a8aea6df61c9cf9db3ea712c3d4ae">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="955" endLineNumber="964"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="908" endLineNumber="917"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="878" endLineNumber="886"/>
            <text>
<![CDATA[		for(int level=interval; level<L_MAX; level++) {
			int L = level - interval;

			if(feature_size[level*2]+2*pady<MO->MI->max_Y ||(feature_size[level*2+1]+2*padx<MO->MI->max_X)) {
				continue;
			}

			for(int j=0; j<NoC; j++) {
				for (int k=0;k<numpart[j];k++) {
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="439dac7ae0b4dca8b99e1ffc88febc81">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\var\varstate.h" startLineNumber="52" endLineNumber="58"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\var\varstate.h" startLineNumber="43" endLineNumber="49"/>
            <text>
<![CDATA[struct PANGOLIN_EXPORT NewVarCallback
{
    NewVarCallback(const std::string& filter, NewVarCallbackFn fn, void* data)
        :filter(filter),fn(fn),data(data) {}
    std::string filter;
    NewVarCallbackFn fn;
    void* data;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="8e6a4b244f04d9c2b9e6996ed0b522ce">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="1264" endLineNumber="1269"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="1245" endLineNumber="1250"/>
            <text>
<![CDATA[        pangolin::json::value v;
        const char *s = "[1,true,\"hello\"]";
        string err = pangolin::json::parse(v, s, s + strlen(s));
        ok(err.empty(), "array no error");
        ok(v.is<pangolin::json::array>(), "array check type");
        is(v.get<pangolin::json::array>().size(), size_t(3), "check array size");
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="1b0ba68c275f6c5ba487a818915baac2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="564" endLineNumber="569"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\laserscan2costmap\laserscan2costmap.cpp" startLineNumber="414" endLineNumber="419"/>
            <text>
<![CDATA[  private_nh.param<double>("resolution", g_resolution, 0.1);
  private_nh.param<int>("scan_size_x", g_scan_size_x, 1000);
  private_nh.param<int>("scan_size_y", g_scan_size_y, 1000);
  private_nh.param<int>("map_size_x", g_map_size_x, 500);
  private_nh.param<int>("map_size_y", g_map_size_y, 500);
  private_nh.param<std::string>("scan_topic", g_scan_topic, "/scan");
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="d930015bce1cd0ed3d3515835b898790">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="738" endLineNumber="745"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="449" endLineNumber="456"/>
            <text>
<![CDATA[        freeFeatureMapObjectGPU(&devs_r[i]);
        freeFeatureMapObjectGPU(&devs_alfa[i]);
    }

    free(nearest);
    free(w);
    free(devs_r);
    free(devs_alfa);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="2b3fb66e830046b2369fe3c804207e87">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="65" endLineNumber="75"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="66" endLineNumber="75"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="426" endLineNumber="440"/>
            <text>
<![CDATA[   #endif
#endif

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
////
////   INTERFACE
////
////

#ifndef __STB_INCLUDE_STB_TRUETYPE_H__
#define __STB_INCLUDE_STB_TRUETYPE_H__

#ifdef STBTT_STATIC
#define STBTT_DEF static
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="2b2389e8d9e27b393f8ff503d13b38ce">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\resize_GPU.cpp" startLineNumber="35" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\include\fastvirtualscan\fastvirtualscan.h" startLineNumber="1" endLineNumber="13"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="13" endLineNumber="31"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="128" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\include\astar_util.h" startLineNumber="42" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\timer.h" startLineNumber="40" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\timer.h" startLineNumber="29" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.h" startLineNumber="44" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\autoware_connector\nodes\can_info_translator\can_info_translator_core.h" startLineNumber="32" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.h" startLineNumber="18" endLineNumber="25"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\TrafficLight.h" startLineNumber="36" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\TrafficLight.h" startLineNumber="30" endLineNumber="37"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\structure.h" startLineNumber="31" endLineNumber="38"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="76" endLineNumber="83"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="50" endLineNumber="57"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="41" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="34" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="26" endLineNumber="33"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="1" endLineNumber="12"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="7" endLineNumber="23"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="21" endLineNumber="29"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\fusion\include\fusion_func.h" startLineNumber="59" endLineNumber="67"/>
            <text>
<![CDATA[	int max_y;
	int min_y;
};

struct Point5
{
	int x;
	int y;
	double distance;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="faa2b1acf6cff8c15a92d888cb3c8740">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="765" endLineNumber="775"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="313" endLineNumber="323"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="270" endLineNumber="279"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="234" endLineNumber="244"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="159" endLineNumber="169"/>
            <text>
<![CDATA[      continue;
    }

    Line line = vmap.findByKey(Key<Line>(road_edge.lid));
    if (line.lid == 0)
    {
      ROS_ERROR_STREAM("[createRoadEdgeMarkerArray] invalid line: " << line);
      continue;
    }

    if (line.blid == 0) // if beginning line
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="8a4bec44caca3c034601ed5bcdb31b8a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="541" endLineNumber="548"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="317" endLineNumber="324"/>
            <text>
<![CDATA[  cv::setTrackbarPos("H", windowName, Selected_set->hue.range);
  cv::setTrackbarPos("S", windowName, Selected_set->sat.range);
  cv::setTrackbarPos("V", windowName, Selected_set->val.range);

  /* update mask image according to current status */
  cv::Mat hsv_img;
  cv::cvtColor(src_img, hsv_img, cv::COLOR_BGR2HSV);
  colorTrack(hsv_img,
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="331029ec3dd122cfcde1dff519027181">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="554" endLineNumber="562"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="496" endLineNumber="506"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="468" endLineNumber="476"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="444" endLineNumber="452"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="396" endLineNumber="404"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="372" endLineNumber="380"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="334" endLineNumber="344"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="310" endLineNumber="318"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="284" endLineNumber="292"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="212" endLineNumber="220"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="164" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="136" endLineNumber="144"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="108" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="84" endLineNumber="92"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="88" endLineNumber="101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\include\fastvirtualscan\fastvirtualscan.h" startLineNumber="2" endLineNumber="14"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="18" endLineNumber="32"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="129" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\include\astar_util.h" startLineNumber="43" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\autoware_connector\nodes\can_info_translator\can_info_translator_core.h" startLineNumber="44" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.h" startLineNumber="19" endLineNumber="26"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\structure.h" startLineNumber="32" endLineNumber="39"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="77" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="64" endLineNumber="71"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="51" endLineNumber="58"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="42" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="35" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="27" endLineNumber="34"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="2" endLineNumber="13"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="8" endLineNumber="24"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="22" endLineNumber="30"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\for_use_gpu.h" startLineNumber="50" endLineNumber="57"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\fusion\include\fusion_func.h" startLineNumber="60" endLineNumber="68"/>
            <text>
<![CDATA[	int min_y;
};

struct Point5
{
	int x;
	int y;
	double distance;
	float min_h;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="94e83fdd45197472598c7dddf82204f3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.cpp" startLineNumber="129" endLineNumber="134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.cpp" startLineNumber="95" endLineNumber="100"/>
            <text>
<![CDATA[    nu.rotation    = 0;
    nu.index_theta = 0;
    nu.step        = step;
    nu.curve       = false;
    nu.back        = false;
    state_update_table_[i][0] = nu;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="6b4e8954b8263a188dd9f79d8dc832bf">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\oculus_socket\nodes\oculus_sender\oculus_sender.cpp" startLineNumber="22" endLineNumber="28"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\for_use_gpu.h" startLineNumber="13" endLineNumber="21"/>
            <text>
<![CDATA[#define NUM_SECTOR 9 // ORIGINAL 9
#define LATENT_SVM_SEARCH_OBJECT_FAILED -5
#define LATENT_SVM_FAILED_SUPERPOSITION -6

// Data structures in OpenCV private header files
typedef struct{
    int sizeX;
    int sizeY;
    int numFeatures;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="5cbeafd1298fe52e4b7d82ed2736d4f5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_uploader\pos_uploader.cpp" startLineNumber="366" endLineNumber="373"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_uploader\obj_uploader.cpp" startLineNumber="231" endLineNumber="238"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="263" endLineNumber="271"/>
            <text>
<![CDATA[  pthread_t th;
  if(pthread_create(&th, nullptr, intervalCall, nullptr)){
    printf("thread create error\n");
  }
  pthread_detach(th);

  ros::spin();

  return 0;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="c2e8b3c07c4b5e676e94ef194500d428">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\glviewer\include\glviewer\glviewer.h" startLineNumber="69" endLineNumber="75"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.h" startLineNumber="19" endLineNumber="27"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_toolkit\mainwindow.h" startLineNumber="18" endLineNumber="26"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\mainwindow.h" startLineNumber="10" endLineNumber="18"/>
            <text>
<![CDATA[class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    explicit MainWindow(QWidget *parent = 0);
    ~MainWindow();

private:
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="3037dccdd93219f848767b6bdadac708">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\fusion\fusion.cpp" startLineNumber="53" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\plotter.h" startLineNumber="183" endLineNumber="190"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\ORBextractor.h" startLineNumber="99" endLineNumber="107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\KeyFrame.h" startLineNumber="202" endLineNumber="207"/>
            <text>
<![CDATA[    int mnScaleLevels;
    float mfScaleFactor;
    float mfLogScaleFactor;
    std::vector<float> mvScaleFactors;
    std::vector<float> mvLevelSigma2;
    std::vector<float> mvInvLevelSigma2;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="d309adeb6bce2f1f286b5e4f6faf17f3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="99" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="99" endLineNumber="106"/>
            <text>
<![CDATA[static ros::Duration d_callback, d1, d2, d3, d4, d5;

static ros::Publisher ndt_map_pub;
static ros::Publisher reference_map_pub;
static ros::Publisher current_pose_pub;
static geometry_msgs::PoseStamped current_pose_msg;

static ros::Publisher ndt_stat_pub;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="f2230c3f918c7ece606db065150d9c3b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="426" endLineNumber="434"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\twist_filter\twist_filter.cpp" startLineNumber="96" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\queue_counter\queue_counter.cpp" startLineNumber="62" endLineNumber="70"/>
            <text>
<![CDATA[int main(int argc, char **argv)
{
    ros::init(argc, argv, "queue_counter");

    ros::NodeHandle nh;
    ros::NodeHandle private_nh("~");

    ros::Subscriber points_sub = nh.subscribe("points_raw", 100000, points_callback);
    ros::Subscriber ndt_map_sub = nh.subscribe("ndt_map", 100000, ndt_map_callback);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="19cb6520844b196ad832f13e92c712df">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set.cpp" startLineNumber="492" endLineNumber="499"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set.cpp" startLineNumber="491" endLineNumber="498"/>
            <text>
<![CDATA[  ros::Subscriber localizer_sub = nh.subscribe("localizer_pose", 1, &VelocitySetInfo::localizerPoseCallback, &vs_info);
  ros::Subscriber control_pose_sub = nh.subscribe("current_pose", 1, &VelocitySetInfo::controlPoseCallback, &vs_info);
  ros::Subscriber closest_waypoint_sub = nh.subscribe("closest_waypoint", 1, &VelocitySetInfo::closestWaypointCallback, &vs_info);

  // vector map subscriber
  ros::Subscriber sub_dtlane = nh.subscribe("vector_map_info/cross_walk", 1, &CrossWalk::crossWalkCallback, &crosswalk);
  ros::Subscriber sub_area = nh.subscribe("vector_map_info/area", 1, &CrossWalk::areaCallback, &crosswalk);
  ros::Subscriber sub_line = nh.subscribe("vector_map_info/line", 1, &CrossWalk::lineCallback, &crosswalk);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="0aa16a0c69eeb785e36e23fa38447f25">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\platform.h" startLineNumber="53" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\stuff\timeutil.h" startLineNumber="78" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\for_use_GPU.h" startLineNumber="31" endLineNumber="41"/>
            <text>
<![CDATA[#ifndef _CUDA_H
#define _CUDA_H
#include <cuda.h>
#endif

#include "MODEL_info.h"

#ifndef _SWITCH_FLOAT_H
#define _SWITCH_FLOAT_H
#include "switch_float.h"
#endif
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="fdc4235d568540084ab5e3952fae7e7d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="854" endLineNumber="862"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="764" endLineNumber="773"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="685" endLineNumber="694"/>
            <text>
<![CDATA[	pointer_SCORE = (uintptr_t)dst_SCORE;
	for(int level=interval; level<L_MAX; level++) {
		int L = level - interval;

		if(feature_size[level*2]+2*pady<MO->MI->max_Y ||(feature_size[level*2+1]+2*padx<MO->MI->max_X))
		{
			continue;
		}

		for(int j=0; j<NoC; j++) {
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="717cfa90cc43220a3f0fccb8ba5902d1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\range_fusion\sync_range_fusion.cpp" startLineNumber="416" endLineNumber="424"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\sync_obj_reproj.cpp" startLineNumber="443" endLineNumber="450"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\kf_track\sync_track.cpp" startLineNumber="416" endLineNumber="424"/>
            <text>
<![CDATA[        return true;
    } else {
        ROS_INFO("publish failed");
        return false;
    }
}

#endif
#endif
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="c36661945ccd7427dfd35fb85afdf41c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="170" endLineNumber="181"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="152" endLineNumber="159"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="138" endLineNumber="145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler.h" startLineNumber="77" endLineNumber="82"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\colour.h" startLineNumber="102" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="244" endLineNumber="249"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="224" endLineNumber="232"/>
            <text>
<![CDATA[  double c_zx;

  double x;
  double y;
  double z;

  double w;

  double l[3];/*eigen value*/
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="4f85893badb7c8007809d012249c6a31">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\newton.cpp" startLineNumber="208" endLineNumber="215"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="93" endLineNumber="98"/>
            <text>
<![CDATA[	float time_fconv_kernel;
	struct timeval tv_fconv_memcpyHtoD_start, tv_fconv_memcpyHtoD_end;
	float time_fconv_memcpyHtoD;
	struct timeval tv_fconv_memcpyDtoH_start, tv_fconv_memcpyDtoH_end;
	float time_fconv_memcpyDtoH;
	struct timeval tv_fconv_texture_start, tv_fconv_texture_end;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="7882654d489eb76ced04499471fc421c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="395" endLineNumber="407"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\featurepyramid.cpp" startLineNumber="348" endLineNumber="360"/>
            <text>
<![CDATA[			*dst=0.2357*t4;
		}
	}

	//Release
	s_free(HHist);
	s_free(Norm);

	//size of feature(output)
	*FTSIZE=OUT_SIZE[0];
	*(FTSIZE+1)=OUT_SIZE[1];
	//    printf("feat%f\n",*(feat));
	return(feat);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="bd65a80a287bc9977e0c7daa2f622326">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\scan2image\nodes\scan2image\scan2image.cpp" startLineNumber="114" endLineNumber="120"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\scan2image\nodes\scan2image\scan2image.cpp" startLineNumber="84" endLineNumber="90"/>
            <text>
<![CDATA[	cameraExtrinsicMat = cv::Mat(4,4,CV_64F);
	for (int row=0; row<4; row++) {
		for (int col=0; col<4; col++) {
			cameraExtrinsicMat.at<double>(row, col) = msg.projection_matrix[row * 4 + col];
            printf("%f\t", cameraExtrinsicMat.at<double>(row, col));
		}
        printf("\n");
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="3c5d16523a3729f5e4a5a77c7a545650">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\sparse_optimizer.h" startLineNumber="37" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_with_hessian.h" startLineNumber="27" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_dogleg.h" startLineNumber="27" endLineNumber="41"/>
            <text>
<![CDATA[#ifndef G2O_OPTIMIZATION_ALGORITHM_DOGLEG_H
#define G2O_OPTIMIZATION_ALGORITHM_DOGLEG_H

#include "g2o/core/optimization_algorithm_with_hessian.h"

namespace g2o {

  class BlockSolverBase;

  /**
   * \brief Implementation of Powell's Dogleg Algorithm
   */
  class  OptimizationAlgorithmDogleg : public OptimizationAlgorithmWithHessian
  {
    public:
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="3ef7c8f9bfc9a8c50b955c1d38a69901">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\base_unary_edge.h" startLineNumber="84" endLineNumber="90"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\base_binary_edge.h" startLineNumber="99" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\ndt.h" startLineNumber="229" endLineNumber="239"/>
            <text>
<![CDATA[      using Registration<PointSource, PointTarget>::transformation_epsilon_;
      using Registration<PointSource, PointTarget>::converged_;
      using Registration<PointSource, PointTarget>::corr_dist_threshold_;
      using Registration<PointSource, PointTarget>::inlier_threshold_;

      using Registration<PointSource, PointTarget>::update_visualizer_;

      /** \brief Estimate the transformation and returns the transformed source (input) as output.
        * \param[out] output the resultant input transfomed point cloud dataset
        */
      virtual void
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="5ea52a8ce929999284f313b0409319be">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\sim3.h" startLineNumber="73" endLineNumber="79"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\se3quat.h" startLineNumber="224" endLineNumber="229"/>
            <text>
<![CDATA[        Vector3d omega;
        for (int i=0; i<3; i++)
          omega[i]=update[i];
        Vector3d upsilon;
        for (int i=0; i<3; i++)
          upsilon[i]=update[i+3];
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="96faafffa05851cb4331c6a7b09f0873">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\vectacam\nodes\vectacam\vectacam_node.cpp" startLineNumber="132" endLineNumber="144"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\dummy_track\dummy_track.cpp" startLineNumber="61" endLineNumber="71"/>
            <text>
<![CDATA[    publisher_tracked_objects_.publish(pub_msg);
  }
};

int main(int argc, char* argv[])
{
	ros::init(argc, argv, "dummy_track");
  DummyTrack dummy_track;
  dummy_track.run();

	return 0;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="4ca97099f97f9f82ddc300c35c92f04e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="231" endLineNumber="239"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="222" endLineNumber="231"/>
            <text>
<![CDATA[		in_publisher->publish(in_boundingbox_array);
	}
}

void publishCloud(const ros::Publisher* in_publisher, const pcl::PointCloud<pcl::PointXYZ>::Ptr in_cloud_to_publish_ptr)
{
	sensor_msgs::PointCloud2 cloud_msg;
	pcl::toROSMsg(*in_cloud_to_publish_ptr, cloud_msg);
	cloud_msg.header=_velodyne_header;
	in_publisher->publish(cloud_msg);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="8df4223dcdbf691ca29bda9c7968ca15">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\datalog.h" startLineNumber="38" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glsl.h" startLineNumber="47" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gldraw.h" startLineNumber="35" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gl.h" startLineNumber="35" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\opengl_render_state.h" startLineNumber="36" endLineNumber="44"/>
            <text>
<![CDATA[#if defined(HAVE_EIGEN) && !defined(__CUDACC__) //prevent including Eigen in cuda files
#define USE_EIGEN
#endif

#ifdef USE_EIGEN
#include <Eigen/Eigen>
#endif

#ifdef HAVE_TOON
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="9d7b9007a839cc316a524543c3147610">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="1455" endLineNumber="1466"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\featurepyramid.cpp" startLineNumber="519" endLineNumber="530"/>
            <text>
<![CDATA[	s_free(RI_S);
	s_free(RIM_S);

	//release thread information
	s_free(td);
	s_free(ts);

	return(feat);
}

//release feature pyramid
void dpm_ttic_cpu_free_features(FLOAT **features,Model_info *MI)
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="91fbaa4c69212b593850faa660075aad">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\glfont.cpp" startLineNumber="98" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="2513" endLineNumber="2518"/>
            <text>
<![CDATA[      int advance, lsb, x0,y0,x1,y1,gw,gh;
      int g = stbtt_FindGlyphIndex(&f, first_char + i);
      stbtt_GetGlyphHMetrics(&f, g, &advance, &lsb);
      stbtt_GetGlyphBitmapBox(&f, g, scale,scale, &x0,&y0,&x1,&y1);
      gw = x1-x0;
      gh = y1-y0;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="6eb97f58989cef7ff478ae89229fa9cf">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\include\pos_db.h" startLineNumber="63" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\for_use_gpu.h" startLineNumber="26" endLineNumber="35"/>
            <text>
<![CDATA[    int numLevels;
    CvLSVMFeatureMap **pyramid;
} CvLSVMFeaturePyramid;

// Add for gpu
typedef struct
{
    int sizeX;
    int sizeY;
    int numFeatures;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="aa50409d9de2ed739e886f42f90e0a20">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="593" endLineNumber="598"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="592" endLineNumber="597"/>
            <text>
<![CDATA[		printf("fconv_kernel : %f[ms]\n",time_fconv_kernel);
		printf("fconv_texture : %f[ms]\n",time_fconv_texture);
		printf("fconv_others : %f[ms]\n",time_fconv_others);
		printf("fconv_memalloc : %f[ms]\n",time_fconv_memalloc);
		printf("fconv_memfree : %f[ms]\n",time_fconv_memfree);
		printf("fconv_memcpyHtoD : %f[ms]\n",time_fconv_memcpyHtoD);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="0c4acddf71433dbd51d8374b579f1681">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\load_model.cpp" startLineNumber="164" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\load_model.cpp" startLineNumber="135" endLineNumber="147"/>
            <text>
<![CDATA[	MI->padx=(int)ceil((FLOAT)MI->max_X/2.0+1.0);	//padx
	MI->pady=(int)ceil((FLOAT)MI->max_Y/2.0+1.0);	//padY

	MI->ini=true;


	//fclose
	fclose(file);

	return(MI);
}

static Rootfilters *load_rootfilter(const char *filename)
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="06b5f52ba8c1e1e7c7f323b9295253b0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\load_model.cpp" startLineNumber="192" endLineNumber="201"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\load_model.cpp" startLineNumber="147" endLineNumber="155"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\load_model.cpp" startLineNumber="29" endLineNumber="37"/>
            <text>
<![CDATA[static Model_info *load_modelinfo(const char *filename)
{
	FILE *file;		//File
	Model_info *MI=(Model_info*)malloc(sizeof(Model_info));		//Model information

	if( (file=fopen(filename, "r")) == NULL )
	{
		printf("Model information file not found \n");
		exit(-1);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="dcfe03aaee81133305df44d3c6b0491f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="349" endLineNumber="355"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\lidar_tracker\nodes\obj_fusion\sync_obj_fusion.cpp" startLineNumber="373" endLineNumber="379"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\dpm_sync_2.cpp" startLineNumber="183" endLineNumber="188"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\range_fusion\sync_range_fusion.cpp" startLineNumber="216" endLineNumber="221"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\sync_obj_reproj.cpp" startLineNumber="216" endLineNumber="222"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\kf_track\sync_track.cpp" startLineNumber="216" endLineNumber="221"/>
            <text>
<![CDATA[void* thread(void* args) {
    ros::NodeHandle nh_rcv;
    ros::CallbackQueue rcv_callbackqueue;
    nh_rcv.setCallbackQueue(&rcv_callbackqueue);
    ros::Subscriber image_obj_tracked_sub = nh_rcv.subscribe("/image_obj_tracked", 1, image_obj_tracked_callback);
    while (nh_rcv.ok()) {
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="bf9d00da602d997c466f6b357211988d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_glut.cpp" startLineNumber="75" endLineNumber="83"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_glut.cpp" startLineNumber="72" endLineNumber="79"/>
            <text>
<![CDATA[    if(glutScrollFunc) {
        glutScrollFunc(&process::Scroll);
    }
    if(glutZoomFunc) {
        glutZoomFunc(&process::Zoom);
    }
    if(glutRotateFunc) {
        glutRotateFunc(&process::Rotate);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="866f38ea1bce8b534305e50f6e334752">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="893" endLineNumber="901"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="865" endLineNumber="873"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="837" endLineNumber="845"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="803" endLineNumber="811"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="796" endLineNumber="804"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="764" endLineNumber="772"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="736" endLineNumber="744"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="708" endLineNumber="716"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="680" endLineNumber="688"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="652" endLineNumber="660"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="624" endLineNumber="632"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="573" endLineNumber="581"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="504" endLineNumber="512"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="455" endLineNumber="463"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="427" endLineNumber="435"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="399" endLineNumber="407"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="371" endLineNumber="379"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="343" endLineNumber="351"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="312" endLineNumber="320"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="233" endLineNumber="241"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="190" endLineNumber="198"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="158" endLineNumber="166"/>
            <text>
<![CDATA[      ROS_ERROR_STREAM("[createRoadEdgeMarkerArray] invalid road_edge: " << road_edge);
      continue;
    }

    Line line = vmap.findByKey(Key<Line>(road_edge.lid));
    if (line.lid == 0)
    {
      ROS_ERROR_STREAM("[createRoadEdgeMarkerArray] invalid line: " << line);
      continue;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="5689eba13dc7aa44d0f42be80e434c0d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\baumer\nodes\vlg22\src\bgapi_init.cpp" startLineNumber="73" endLineNumber="80"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\baumer\nodes\vlg22\src\bgapi_init.cpp" startLineNumber="56" endLineNumber="65"/>
            <text>
<![CDATA[	BGAPI_RESULT res = BGAPI_RESULT_FAIL;

	for (unsigned int i = 0; i < cameraObjects.size(); i++)
	{

		res = cameraObjects[i]->setStart( true );
		if( res != BGAPI_RESULT_OK )
		{
			ROS_INFO("BGAPI::Camera::setStart returned with errorcode %d\n", res );
			return false;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="6734c813446207c31fe3a9b5e7ebfa64">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="67" endLineNumber="73"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="90" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\TrafficLightDetector.h" startLineNumber="38" endLineNumber="43"/>
            <text>
<![CDATA[enum daytime_Hue_threshold {
    DAYTIME_RED_LOWER    = 340,
    DAYTIME_RED_UPPER    = 50,
    DAYTIME_YELLOW_LOWER = 50,
    DAYTIME_YELLOW_UPPER = 70,
    DAYTIME_GREEN_LOWER  = 80,//120,//140,
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="4a654b96b31bbfaca6bc83950668c7d3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="54" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="65" endLineNumber="72"/>
            <text>
<![CDATA[const int PANGO_KEY_INSERT	  = 108;

enum MouseButton
{
    MouseButtonLeft = 1,
    MouseButtonMiddle = 2,
    MouseButtonRight = 4,
    MouseWheelUp = 8,
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="cdf5240cc814b70baa5b02e51e9c616d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_d_viewer\image_d_viewer.cpp" startLineNumber="92" endLineNumber="101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_d_viewer\image_d_viewer.cpp" startLineNumber="83" endLineNumber="92"/>
            <text>
<![CDATA[static void obj_carCallback(const cv_tracker::image_obj_ranged& fused_objects)
{
    if(image == NULL){
      return;
    }
    car_fused_objects = fused_objects;
    showImage();
}

static void obj_personCallback(const cv_tracker::image_obj_ranged& fused_objects)
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="25aacb07dcfd5ecf34d0438287e50753">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="586" endLineNumber="593"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="294" endLineNumber="301"/>
            <text>
<![CDATA[    calibsplitter->addWidget(chessboardtype);
    calibsplitter->setStretchFactor(calibsplitter->indexOf(chessboardtype),0);

    chessboardtab=new QTabWidget;
    calibsplitter->addWidget(chessboardtab);
    calibsplitter->setStretchFactor(calibsplitter->indexOf(chessboardtab),1);

    chessboardposeshow=new QTabWidget;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="623581faa953522917e4d392ccefa292">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\ground_filter\ground_filter.cpp" startLineNumber="21" endLineNumber="28"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="297" endLineNumber="302"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="20" endLineNumber="25"/>
            <text>
<![CDATA[private:
  ros::NodeHandle nh_;
  ros::Publisher publisher_;
  ros::Subscriber waypoint_subscriber_;
  ros::Subscriber vscan_subscriber_;
  ros::Subscriber obj_subscriber_;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="b5177003adfc48a2f1be4c47f63efd37">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="473" endLineNumber="479"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1448" endLineNumber="1455"/>
            <text>
<![CDATA[    line = vmap.findByKey(Key<Line>(line.flid));
    if (line.lid == 0)
      return marker;
  }

  Point bp = vmap.findByKey(Key<Point>(line.bpid));
  if (bp.pid == 0)
    return marker;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="c705350b4751a75e0c47a01cc775686b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\resize_GPU.cpp" startLineNumber="242" endLineNumber="250"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="770" endLineNumber="777"/>
            <text>
<![CDATA[static void* feat_calc_forGPU(void *thread_arg)
{
	thread_data_forGPU *args     = (thread_data_forGPU *)thread_arg;
	//  FLOAT       *IM       = args->IM;
	int         *ISIZE    = args->ISIZE;
	int         *FSIZE    = args->FSIZE;
	int          sbin     = args->sbin;
	int          level    = args->F_C;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="23cc780d8ea6c64c87e14c0f05debe05">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_viewer\image_viewer.cpp" startLineNumber="186" endLineNumber="192"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_viewer\image_viewer.cpp" startLineNumber="184" endLineNumber="190"/>
            <text>
<![CDATA[	if (car_dpm_ready)
		drawDetections(cars, cars_score, "car", frame);
	if (ped_dpm_ready)
		drawDetections(peds, peds_score, "pedestrian", frame);

	if (car_image_obj_ready)
		drawDetections(cars, cars_score, "car", frame);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="13137a4ef20553cef2f6c105e8b649e8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Map.h" startLineNumber="39" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\structure.h" startLineNumber="36" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="27" endLineNumber="33"/>
            <text>
<![CDATA[    float internalDistTrans;
    int internalPoints;
    int v;
    float z;
} DistTransWork;

#endif
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="ab181e4ab5b596bd137773f2b077cc8f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\src\voxel_grid.cpp" startLineNumber="100" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\src\voxel_grid.cpp" startLineNumber="54" endLineNumber="64"/>
            <text>
<![CDATA[  if (cloud->fields[x_idx].datatype != pcl::PCLPointField::FLOAT32 ||
      cloud->fields[y_idx].datatype != pcl::PCLPointField::FLOAT32 ||
      cloud->fields[z_idx].datatype != pcl::PCLPointField::FLOAT32)
  {
    PCL_ERROR ("[pcl::getMinMax3D] XYZ dimensions are not float type!\n");
    return;
  }

  Eigen::Array4f min_p, max_p;
  min_p.setConstant (FLT_MAX);
  max_p.setConstant (-FLT_MAX);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="dfe62a5e92805a87fb414c640ded9436">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="51" endLineNumber="57"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\integrated_viewer\node\image_viewer_plugin\image_viewer_plugin.h" startLineNumber="80" endLineNumber="89"/>
            <text>
<![CDATA[    Ui::image_viewer_form ui_;

    // The image displayed on viewer
    cv::Mat viewed_image_;
    cv::Mat default_image_;

    // Data pointer to hold subscribed data
    points2image::PointsImage::ConstPtr points_msg_;
    cv_tracker::image_obj::ConstPtr image_obj_msg_;
    cv_tracker::image_obj_ranged::ConstPtr image_obj_ranged_msg_;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="5bdf3d868e49242c9611c8b65193b527">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1209" endLineNumber="1217"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\get_boxes.cpp" startLineNumber="465" endLineNumber="474"/>
            <text>
<![CDATA[	s_free(pm_size);

	//Output boundary-box coorinate information
	int GL=(numpart[0]+1)*4+3;
	FLOAT *boxes=(FLOAT*)calloc(D_NUMS*GL,sizeof(FLOAT));		//box coordinate information(Temp)
	FLOAT *T1=boxes;

	for(int ii=0;ii<LofFeat;ii++)
	{
		int num_t = b_nums[ii]*GL;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="cf8f23e1c095227cef215f819e4ff0b9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\var\varvaluegeneric.h" startLineNumber="41" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapPoint.h" startLineNumber="21" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\KeyFrame.h" startLineNumber="21" endLineNumber="43"/>
            <text>
<![CDATA[#ifndef KEYFRAME_H
#define KEYFRAME_H

#include "MapPoint.h"
#include "DBoW2/BowVector.h"
#include "DBoW2/FeatureVector.h"
#include "ORBVocabulary.h"
#include "ORBextractor.h"
#include "Frame.h"

#include <mutex>
#include <list>
#include <map>
#include <boost/serialization/serialization.hpp>


typedef int64_t idtype;


namespace boost {
namespace serialization {

template <class Archive>
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="8a71d658a7a6243fdf076cbc73ddd5a9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\fusion\fusion.cpp" startLineNumber="49" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Sim3Solver.h" startLineNumber="76" endLineNumber="82"/>
            <text>
<![CDATA[    std::vector<size_t> mvSigmaSquare1;
    std::vector<size_t> mvSigmaSquare2;
    std::vector<size_t> mvnMaxError1;
    std::vector<size_t> mvnMaxError2;

    int N;
    int mN1;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="b7be954404161044030409cfaf87fbde">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\model_publisher\nodes\model_publisher.cpp" startLineNumber="17" endLineNumber="23"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\model_publisher\nodes\model_publisher.cpp" startLineNumber="13" endLineNumber="19"/>
            <text>
<![CDATA[  std::string base_frame;
  private_nh.getParam("base_frame", base_frame);
  ROS_INFO_STREAM("base_frame : " << base_frame);

  std::string topic_name;
  private_nh.getParam("topic_name", topic_name);
  ROS_INFO_STREAM("topic_name : " << topic_name);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="27ad657c2d42b08a69bda2001e487a8a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="315" endLineNumber="321"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_trajectory_gen\lattice_trajectory_gen.cpp" startLineNumber="105" endLineNumber="111"/>
            <text>
<![CDATA[static void ConfigCallback(const runtime_manager::ConfigWaypointFollowerConstPtr &config)
{
  g_param_flag = config->param_flag;
  g_lookahead_threshold = config->lookahead_distance;
  g_initial_velocity = config->velocity;
  g_look_ahead_threshold_calc_ratio = config->lookahead_ratio;
  g_minimum_look_ahead_threshold = config->minimum_lookahead_distance;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="f97c837812e82b472411f743976f535b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gldraw.h" startLineNumber="147" endLineNumber="153"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gldraw.h" startLineNumber="138" endLineNumber="144"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl_es_compat.h" startLineNumber="46" endLineNumber="52"/>
            <text>
<![CDATA[inline void glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
{
    GLfloat verts[] = { x1,y1,  x2,y1,  x2,y2,  x1,y2 };    
    glEnableClientState(GL_VERTEX_ARRAY);
    glVertexPointer(2, GL_FLOAT, 0, verts);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
    glDisableClientState(GL_VERTEX_ARRAY);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="d238d99cf353400cb6fb93e3b8d21146">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\baumer\nodes\vlg22\src\bgapi_init.cpp" startLineNumber="97" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\baumer\nodes\vlg22\src\bgapi_init.cpp" startLineNumber="94" endLineNumber="101"/>
            <text>
<![CDATA[		BGAPI_FeatureState state;
		state.cbSize = sizeof( BGAPI_FeatureState );

		BGAPIX_CameraPixelFormat pformat ;
		pformat.cbSize = sizeof(BGAPIX_CameraPixelFormat) ;

		BGAPIX_TypeListINT pixellist ;
		pixellist.cbSize = sizeof(BGAPIX_TypeListINT) ;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="c157a5b015b475d9b358e5e4ae0fb3e2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_d_viewer\scan_image_d_viewer.cpp" startLineNumber="79" endLineNumber="85"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="100" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_viewer\image_viewer.cpp" startLineNumber="97" endLineNumber="102"/>
            <text>
<![CDATA[	CvFont font;
	const float hscale = 0.5f;
	const float vscale = 0.5f;
	const float italicScale = 0.0f;
	const int thickness = 1;
	CvSize text_size;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="4692ab4bcea9e46b67094dfa87170dbd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\block_solver.h" startLineNumber="69" endLineNumber="75"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\PnPsolver.h" startLineNumber="177" endLineNumber="192"/>
            <text>
<![CDATA[  int mRansacMinInliers;

  // RANSAC max iterations
  int mRansacMaxIts;

  // RANSAC expected inliers/total ratio
  float mRansacEpsilon;

  // RANSAC Threshold inlier/outlier. Max error e = dist(P1,T_12*P2)^2
  float mRansacTh;

  // RANSAC Minimun Set used at each iteration
  int mRansacMinSet;

  // Max square error associated with scale level. Max error = th*th*sigma(level)*sigma(level)
  vector<float> mvMaxError;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="b4b6ceccdd62ed7c80767c5d01adbb33">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="65" endLineNumber="71"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit.h" startLineNumber="96" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\LocalMapping.h" startLineNumber="122" endLineNumber="128"/>
            <text>
<![CDATA[    bool mbStopped;
    bool mbStopRequested;
    bool mbNotStop;
    std::mutex mMutexStop;

    bool mbAcceptKeyFrames;
    std::mutex mMutexAccept;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="13830daef4373e0cc0b2e6246543951d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\rcnn\rcnn_node.cpp" startLineNumber="49" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapPoint.h" startLineNumber="164" endLineNumber="177"/>
            <text>
<![CDATA[     cv::Mat mNormalVector;

     // Best descriptor to fast matching
     cv::Mat mDescriptor;

     // Reference KeyFrame
     KeyFrame* mpRefKF;

     // Tracking counters
     int mnVisible;
     int mnFound;

     // Bad flag (we do not currently erase MapPoint from memory)
     bool mbBad;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="95535b8fed7192fc59ed68ce9da92d36">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\voxel_grid_filter\voxel_grid_filter.cpp" startLineNumber="132" endLineNumber="140"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\ring_filter\ring_filter.cpp" startLineNumber="160" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\random_filter\random_filter.cpp" startLineNumber="122" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\distance_filter\distance_filter.cpp" startLineNumber="139" endLineNumber="147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\tf_mapping\tf_mapping.cpp" startLineNumber="146" endLineNumber="153"/>
            <text>
<![CDATA[int main(int argc, char **argv)
{
  ros::init(argc, argv, "tf_mapping");
  ros::NodeHandle nh;
  ros::NodeHandle private_nh("~");

  private_nh.getParam("parent_frame", PARENT_FRAME);
  private_nh.getParam("child_frame", CHILD_FRAME);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="c1eee46e47add319e6e9681feb998cb7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="113" endLineNumber="125"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="125" endLineNumber="132"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="41" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="54" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_navi\lane_navi.cpp" startLineNumber="43" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\dpm_ocv\dpm_ocv.cpp" startLineNumber="48" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\libvelocity_set.h" startLineNumber="43" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\libvelocity_set.h" startLineNumber="45" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.h" startLineNumber="35" endLineNumber="40"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\integrated_viewer\node\image_viewer_plugin\image_viewer_plugin.h" startLineNumber="60" endLineNumber="71"/>
            <text>
<![CDATA[    static const QString kRectDataTypeBase;
    static const QString kPointDataType;

    // The blank topic name
    static const QString kBlankTopic;

    // The base topic name of detection result rectangles
    static const std::string  kRectDataTypeImageObjRanged;
    static const std::string  kRectDataTypeImageObjTracked;

    // The ROS node handle.
    ros::NodeHandle node_handle_;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="21cde6c2b9a03e88132a06d2a6cda7c6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\sparse_block_matrix_diagonal.h" startLineNumber="46" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\sparse_block_matrix_ccs.h" startLineNumber="214" endLineNumber="224"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\sparse_block_matrix_ccs.h" startLineNumber="52" endLineNumber="62"/>
            <text>
<![CDATA[  template <class MatrixType>
  class SparseBlockMatrixCCS
  {
    public:
      //! this is the type of the elementary block, it is an Eigen::Matrix.
      typedef MatrixType SparseMatrixBlock;

      //! columns of the matrix
      int cols() const {return _colBlockIndices.size() ? _colBlockIndices.back() : 0;}
      //! rows of the matrix
      int rows() const {return _rowBlockIndices.size() ? _rowBlockIndices.back() : 0;}
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="1024f154ada0b86fc31f6d44f83be9f3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="222" endLineNumber="227"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="221" endLineNumber="226"/>
            <text>
<![CDATA[  sub[0] = nh.subscribe("/twist_cmd", 1, twistCMDCallback);
  sub[1] = nh.subscribe("/mode_cmd",  1, modeCMDCallback);
  sub[2] = nh.subscribe("/gear_cmd",  1, gearCMDCallback);
  sub[3] = nh.subscribe("/accel_cmd", 1, accellCMDCallback);
  sub[4] = nh.subscribe("/steer_cmd", 1, steerCMDCallback);
  sub[5] = nh.subscribe("/brake_cmd", 1, brakeCMDCallback);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="f6467cf1cd9a5077c9639929d2cc49c2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\FastVirtualScan\fastvirtualscan.cpp" startLineNumber="7" endLineNumber="12"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="69" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="68" endLineNumber="73"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="67" endLineNumber="72"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="66" endLineNumber="71"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="928" endLineNumber="933"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="583" endLineNumber="588"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="582" endLineNumber="587"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="581" endLineNumber="586"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="580" endLineNumber="585"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="571" endLineNumber="584"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="570" endLineNumber="583"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="569" endLineNumber="582"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="484" endLineNumber="489"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="483" endLineNumber="488"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="482" endLineNumber="487"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="481" endLineNumber="486"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="472" endLineNumber="485"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="471" endLineNumber="484"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="470" endLineNumber="483"/>
            <text>
<![CDATA[			part_size = 0;
			pointer_size = 0;
			move_size = 0;

		}

	}


	/* downloads tmpIx from GPU */

	sum_part_size = 0;
	sum_pointer_size = 0;
	part_size = 0;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="12690727bfa246d83d0bd05915782ebe">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_viewer\image_viewer.cpp" startLineNumber="68" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_viewer\image_viewer.cpp" startLineNumber="67" endLineNumber="73"/>
            <text>
<![CDATA[static bool _drawing = false;
static bool car_track_ready = false;
static bool car_dpm_ready = false;
static bool ped_track_ready = false;
static bool ped_dpm_ready = false;

static bool car_image_obj_ready = false;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="70d3dfe13e88319435150941687fc877">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\detect.cpp" startLineNumber="38" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\detect.cpp" startLineNumber="40" endLineNumber="49"/>
            <text>
<![CDATA[	FLOAT *scales = dpm_ttic_cpu_ini_scales(MO->MI,IM,IM->width,IM->height);

	//initialize feature-size matrix
	int *featsize = dpm_ttic_cpu_ini_featsize(MO->MI);
	//calculate feature pyramid

	gettimeofday(&tv_calc_f_pyramid_start, NULL);
	FLOAT **feature = dpm_ttic_cpu_calc_f_pyramid(IM,MO->MI,featsize,scales);
	gettimeofday(&tv_calc_f_pyramid_end, NULL);
	tvsub(&tv_calc_f_pyramid_end, &tv_calc_f_pyramid_start, &tv);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="ea25929fe180c54df15ad252afb246a9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gldraw.h" startLineNumber="226" endLineNumber="232"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gldraw.h" startLineNumber="222" endLineNumber="228"/>
            <text>
<![CDATA[    glColor4f(1.0f, 0.0f, 0.0f, 1.0f);
    glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
    glDrawArrays(GL_TRIANGLE_STRIP, 4, 4);
    
    glColor4f(0.0f, 1.0f, 0.0f, 1.0f);
    glDrawArrays(GL_TRIANGLE_STRIP, 8, 4);
    glDrawArrays(GL_TRIANGLE_STRIP, 12, 4);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="48d021cc3647d992ee8d422fa6695924">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\state\state_machine\nodes\state_machine\state_machine_core.cpp" startLineNumber="56" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\gnss_localizer\nodes\nmea2tfpose\nmea2tfpose_core.cpp" startLineNumber="64" endLineNumber="77"/>
            <text>
<![CDATA[  sub1_ = nh_.subscribe("nmea_sentence", 100, &Nmea2TFPoseNode::callbackFromNmeaSentence, this);

  // setup publisher
  pub1_ = nh_.advertise<geometry_msgs::PoseStamped>("gnss_pose", 10);
}

void Nmea2TFPoseNode::run()
{
  ros::spin();
}

void Nmea2TFPoseNode::publishPoseStamped()
{
  geometry_msgs::PoseStamped pose;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="f3d5f830aa15821f53204bd199dc3d28">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\include\map_file\get_file.h" startLineNumber="45" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\Context.h" startLineNumber="18" endLineNumber="23"/>
            <text>
<![CDATA[	cv::Point3d greenCenter3d;
	int lampRadius;
	cv::Point topLeft;
	cv::Point botRight;
	LightState lightState;
	int signalID;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="0d464d79645fcc5e7316e3f3e01ed4ed">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\wf_simulator\wf_simulator.cpp" startLineNumber="241" endLineNumber="251"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="606" endLineNumber="672"/>
            <text>
<![CDATA[		_using_sensor_cloud = false;
	}
}

/*
void vectormap_callback(const visualization_msgs::MarkerArray::Ptr in_vectormap_markers)
{
	float min_x=std::numeric_limits<float>::max();float max_x=-std::numeric_limits<float>::max();
	float min_y=std::numeric_limits<float>::max();float max_y=-std::numeric_limits<float>::max();
	pcl::PointXYZ min_point;
	pcl::PointXYZ max_point;
	std::vector<geometry_msgs::Point> vectormap_points;
	for(auto i=in_vectormap_markers->markers.begin(); i!= in_vectormap_markers->markers.end(); i++)
	{
		visualization_msgs::Marker current_marker = *i;
		if (current_marker.ns == "road_edge")
		{
			for (unsigned int j=0; j< current_marker.points.size(); j++)
			{
				geometry_msgs::Point p = current_marker.points[j];
				if(p.x<min_x)	min_x = p.x;
				if(p.y<min_y)	min_y = p.y;
				if(p.x>max_x)	max_x = p.x;
				if(p.y>max_y)	max_y = p.y;
				vectormap_points.push_back(p);
			}
		}
	}
	min_point.x = min_x;	min_point.y = min_y;
	max_point.x = max_x;	max_point.y = max_y;

	min_point.x*=-1.0;
	min_point.y*=-1.0;
	//translate the points to the minimum point
	for (auto i=vectormap_points.begin(); i!=vectormap_points.end(); i++)
	{
		(*i).x+=min_point.x;
		(*i).y+=min_point.y;
	}
	max_point.x+=min_point.x;
	max_point.y+=min_point.y;
	//get world tf
	_transform_listener->lookupTransform("/map", "/world",
					ros::Time(_velodyne_header.stamp), *_transform);

	tf::Vector3 map_origin_point;
	map_origin_point = _transform->getOrigin();

	cv::Mat map_image = cv::Mat::zeros(max_point.x, max_point.y, CV_8UC1);

	for (auto i=vectormap_points.begin(); i!=vectormap_points.end(); i++)
	{
		map_image.at<uchar>( (int)(i->x), (int)(i->y) ) = 255;
	}
	cv::imshow("vectormap", map_image);
	cv::waitKey(0);
}*/

int main (int argc, char** argv)
{
	// Initialize ROS
	ros::init (argc, argv, "euclidean_cluster");

	ros::NodeHandle h;
	ros::NodeHandle private_nh("~");

	tf::StampedTransform transform;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="d54ccb9d9993486b274ed0f0b189938f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="87" endLineNumber="97"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\BowVector.h" startLineNumber="36" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\vscan_lidar_track\rbsspfvehicletracker.h" startLineNumber="43" endLineNumber="49"/>
            <text>
<![CDATA[    enum TrackerState
    {
        NoLaserData,
        OneLaserData,
        ReadyForTracking,
        Processing
    } trackerstate;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="a596c6840afbb4956695ba4dcd8d793e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\scan2image\nodes\scan2image\scan2image.cpp" startLineNumber="111" endLineNumber="117"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\vscan2image\vscan2image.cpp" startLineNumber="64" endLineNumber="70"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2image\points2image.cpp" startLineNumber="64" endLineNumber="70"/>
            <text>
<![CDATA[	imageSize.height = msg.height;
	imageSize.width = msg.width;

	cameraMat = cv::Mat(3,3, CV_64F);
	for (int row=0; row<3; row++) {
		for (int col=0; col<3; col++) {
			cameraMat.at<double>(row, col) = msg.K[row * 3 + col];
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="4224a451e3bf45d0203965c2dc3081cc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="114" endLineNumber="119"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="113" endLineNumber="118"/>
            <text>
<![CDATA[  void load_points(const vector_map::PointArray& msg);
  void load_lines(const vector_map::LineArray& msg);
  void load_lanes(const vector_map::LaneArray& msg);
  void load_vectors(const vector_map::VectorArray& msg);
  void load_signals(const vector_map::SignalArray& msg);
  void load_whitelines(const vector_map::WhiteLineArray& msg);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="af510a6ef7b25ba4dfe97d654aacc74f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="249" endLineNumber="256"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="88" endLineNumber="95"/>
            <text>
<![CDATA[  string res;
  int ret = sd.Sender(value, res);
  if (ret == -1) {
    std::cerr << "Failed: sd.Sender" << std::endl;
    return;
  }

  std::cout << "retrun message from DBserver : " << res << std::endl;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="bd924dd3a08ea004a65ada852f0db67c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="39" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\icp.h" startLineNumber="147" endLineNumber="152"/>
            <text>
<![CDATA[        , nx_idx_offset_ (0)
        , ny_idx_offset_ (0)
        , nz_idx_offset_ (0)
        , use_reciprocal_correspondence_ (false)
        , source_has_normals_ (false)
        , target_has_normals_ (false)
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="ddb59b1eb47c75fe5e29f16ea66496d0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="56" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\libvelocity_set.h" startLineNumber="14" endLineNumber="22"/>
            <text>
<![CDATA[enum EControl
{
  KEEP = -1,
  STOP = 1,
  DECELERATE = 2,
  OTHERS = 3,
};

struct CrossWalkPoints
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="17810c3a82b801639afe6a70932dfc5d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="558" endLineNumber="563"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="502" endLineNumber="507"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="472" endLineNumber="477"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="400" endLineNumber="405"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="340" endLineNumber="345"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="288" endLineNumber="293"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="216" endLineNumber="221"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="168" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="140" endLineNumber="145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="112" endLineNumber="117"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="93" endLineNumber="102"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="50" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_sender\tablet_sender.cpp" startLineNumber="88" endLineNumber="93"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="308" endLineNumber="314"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\hexacam\nodes\hexacam\hexacam.cpp" startLineNumber="61" endLineNumber="67"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="82" endLineNumber="88"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="70" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="65" endLineNumber="70"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="71" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="77" endLineNumber="83"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\obj_reproj.cpp" startLineNumber="85" endLineNumber="90"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\dpm_ocv\dpm_ocv.cpp" startLineNumber="43" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="41" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\include\fastvirtualscan\fastvirtualscan.h" startLineNumber="9" endLineNumber="15"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="26" endLineNumber="33"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="164" endLineNumber="176"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="148" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="132" endLineNumber="140"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\include\astar_util.h" startLineNumber="35" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="256" endLineNumber="261"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="192" endLineNumber="197"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="78" endLineNumber="85"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="65" endLineNumber="72"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="52" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="43" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="28" endLineNumber="35"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="7" endLineNumber="14"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="18" endLineNumber="25"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\fusion\include\fusion_func.h" startLineNumber="63" endLineNumber="69"/>
            <text>
<![CDATA[struct Point5
{
	int x;
	int y;
	double distance;
	float min_h;
	float max_h;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="ea2a96452515928b6e27d05b81866bc3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\copy.cpp" startLineNumber="20" endLineNumber="25"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\space_filter\space_filter.cpp" startLineNumber="24" endLineNumber="32"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="308" endLineNumber="314"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="24" endLineNumber="29"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\klt_track\klt_track.cpp" startLineNumber="69" endLineNumber="78"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_path.h" startLineNumber="39" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_dogleg.h" startLineNumber="77" endLineNumber="83"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="213" endLineNumber="224"/>
            <text>
<![CDATA[    cv::Mat mK;
    cv::Mat mDistCoef;
    float mbf;

    //New KeyFrame rules (according to fps)
    int mMinFrames;
    int mMaxFrames;

    // Threshold close/far points
    // Points seen as close by the stereo/RGBD sensor are considered reliable
    // and inserted from just one frame. Far points requiere a match in two keyframes.
    float mThDepth;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="14dc4c178759de495b672bf89ce56590">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\robust_kernel_factory.h" startLineNumber="66" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\factory.h" startLineNumber="48" endLineNumber="66"/>
            <text>
<![CDATA[  class  Factory
  {
    public:

      //! return the instance
      static Factory* instance();

      //! free the instance
      static void destroy();

      /**
       * register a tag for a specific creator
       */
      void registerType(const std::string& tag, AbstractHyperGraphElementCreator* c);

      /**
       * unregister a tag for a specific creator
       */
      void unregisterType(const std::string& tag);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="c6c4e6419cb1e4eed515984da354d457">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="306" endLineNumber="311"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="303" endLineNumber="308"/>
            <text>
<![CDATA[  case GREEN:
    Selected_set = &Green_set;
    break;
  case YELLOW:
    Selected_set = &Yellow_set;
    break;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="801fb90dda456ae6633beb72fd93ee4b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="570" endLineNumber="575"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="569" endLineNumber="574"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="568" endLineNumber="573"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="567" endLineNumber="572"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="566" endLineNumber="571"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="565" endLineNumber="570"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="564" endLineNumber="569"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="563" endLineNumber="568"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="562" endLineNumber="567"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="561" endLineNumber="566"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="560" endLineNumber="565"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="559" endLineNumber="564"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="507" endLineNumber="512"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="506" endLineNumber="511"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="505" endLineNumber="510"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="504" endLineNumber="509"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="503" endLineNumber="508"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="473" endLineNumber="478"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="345" endLineNumber="350"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="344" endLineNumber="349"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="343" endLineNumber="348"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="342" endLineNumber="347"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="341" endLineNumber="346"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="141" endLineNumber="146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="113" endLineNumber="118"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_points_map_update\sample_points_map_update.cpp" startLineNumber="55" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\map_tools\nodes\pcd_arealist\pcd_arealist.cpp" startLineNumber="35" endLineNumber="40"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="109" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="108" endLineNumber="114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="107" endLineNumber="113"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="106" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="105" endLineNumber="111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="104" endLineNumber="109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="103" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="102" endLineNumber="107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="101" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="100" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="99" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="98" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="54" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="53" endLineNumber="58"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="52" endLineNumber="57"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="51" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_sender\tablet_sender.cpp" startLineNumber="90" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_sender\tablet_sender.cpp" startLineNumber="89" endLineNumber="94"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="15" endLineNumber="22"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="14" endLineNumber="20"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="13" endLineNumber="19"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="12" endLineNumber="18"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="11" endLineNumber="17"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="10" endLineNumber="15"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="9" endLineNumber="14"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="8" endLineNumber="13"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="7" endLineNumber="12"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="6" endLineNumber="11"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="5" endLineNumber="10"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="4" endLineNumber="9"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\trans.cpp" startLineNumber="36" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\trans.cpp" startLineNumber="35" endLineNumber="40"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\space_filter\space_filter.cpp" startLineNumber="28" endLineNumber="34"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="320" endLineNumber="325"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="319" endLineNumber="324"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="318" endLineNumber="323"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="317" endLineNumber="322"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="316" endLineNumber="321"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="315" endLineNumber="320"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="314" endLineNumber="319"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="313" endLineNumber="318"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="312" endLineNumber="317"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="311" endLineNumber="316"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="310" endLineNumber="315"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_uploader\pos_uploader.cpp" startLineNumber="71" endLineNumber="78"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_uploader\pos_uploader.cpp" startLineNumber="70" endLineNumber="75"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_downloader\pos_downloader.cpp" startLineNumber="76" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="107" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="29" endLineNumber="34"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="28" endLineNumber="33"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="27" endLineNumber="32"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="26" endLineNumber="31"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_matching\orb_matching.cpp" startLineNumber="493" endLineNumber="501"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="84" endLineNumber="89"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="72" endLineNumber="77"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="66" endLineNumber="71"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="72" endLineNumber="77"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="79" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\gnss\src\geo_pos_conv.cpp" startLineNumber="105" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="101" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="100" endLineNumber="107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="98" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="97" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="95" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="93" endLineNumber="101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="92" endLineNumber="100"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="91" endLineNumber="98"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="90" endLineNumber="97"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="89" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="88" endLineNumber="93"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\obj_reproj.cpp" startLineNumber="86" endLineNumber="91"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\dpm_ocv\dpm_ocv.cpp" startLineNumber="45" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\dpm_ocv\dpm_ocv.cpp" startLineNumber="44" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="73" endLineNumber="79"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="72" endLineNumber="78"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="71" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="70" endLineNumber="75"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="44" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="43" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="42" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\include\fastvirtualscan\fastvirtualscan.h" startLineNumber="23" endLineNumber="28"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\include\fastvirtualscan\fastvirtualscan.h" startLineNumber="11" endLineNumber="18"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\rawdata.h" startLineNumber="150" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="43" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="40" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="39" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="38" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="37" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="36" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="35" endLineNumber="40"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="34" endLineNumber="39"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="33" endLineNumber="38"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="32" endLineNumber="37"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="31" endLineNumber="36"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="30" endLineNumber="35"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="29" endLineNumber="34"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\vectacam\nodes\vectacam\VectaCam.h" startLineNumber="57" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\vectacam\nodes\vectacam\VectaCam.h" startLineNumber="56" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="519" endLineNumber="524"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_core.h" startLineNumber="92" endLineNumber="98"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\libvelocity_set.h" startLineNumber="40" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="169" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="137" endLineNumber="142"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="136" endLineNumber="141"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="48" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="47" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="46" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="45" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\libvelocity_set.h" startLineNumber="42" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="62" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="61" endLineNumber="66"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="60" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="59" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="58" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="57" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="56" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="55" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="54" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\include\astar_util.h" startLineNumber="38" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\include\astar_util.h" startLineNumber="37" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\plotter.h" startLineNumber="180" endLineNumber="186"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glplatform.h" startLineNumber="39" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glplatform.h" startLineNumber="37" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glplatform.h" startLineNumber="29" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glplatform.h" startLineNumber="28" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gl.h" startLineNumber="197" endLineNumber="203"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="131" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\colour.h" startLineNumber="101" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\colour.h" startLineNumber="100" endLineNumber="107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\colour.h" startLineNumber="99" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\view.h" startLineNumber="202" endLineNumber="217"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\view.h" startLineNumber="201" endLineNumber="213"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\view.h" startLineNumber="200" endLineNumber="210"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\sparse_optimizer.h" startLineNumber="27" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_levenberg.h" startLineNumber="73" endLineNumber="79"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_levenberg.h" startLineNumber="72" endLineNumber="77"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_factory.h" startLineNumber="27" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.h" startLineNumber="349" endLineNumber="354"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="62" endLineNumber="70"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="61" endLineNumber="69"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="60" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="59" endLineNumber="67"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="58" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="57" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="56" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="53" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="51" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="50" endLineNumber="58"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="49" endLineNumber="57"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="48" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="44" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="43" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="42" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="41" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Viewer.h" startLineNumber="32" endLineNumber="40"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Viewer.h" startLineNumber="23" endLineNumber="38"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Viewer.h" startLineNumber="22" endLineNumber="37"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="215" endLineNumber="230"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="47" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="46" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="43" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="23" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="22" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\System.h" startLineNumber="48" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\System.h" startLineNumber="47" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\System.h" startLineNumber="44" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\PnPsolver.h" startLineNumber="174" endLineNumber="189"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapPoint.h" startLineNumber="124" endLineNumber="129"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapPoint.h" startLineNumber="121" endLineNumber="128"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapDrawer.h" startLineNumber="50" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Map.h" startLineNumber="22" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Map.h" startLineNumber="21" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\LoopClosing.h" startLineNumber="22" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\LoopClosing.h" startLineNumber="21" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\LocalMapping.h" startLineNumber="22" endLineNumber="40"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\LocalMapping.h" startLineNumber="21" endLineNumber="38"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\KeyFrame.h" startLineNumber="53" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\FrameDrawer.h" startLineNumber="21" endLineNumber="40"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Frame.h" startLineNumber="115" endLineNumber="120"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="243" endLineNumber="248"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="242" endLineNumber="247"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="223" endLineNumber="230"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="222" endLineNumber="228"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="221" endLineNumber="227"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="220" endLineNumber="226"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="219" endLineNumber="224"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="217" endLineNumber="223"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="216" endLineNumber="222"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="215" endLineNumber="221"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="213" endLineNumber="220"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="211" endLineNumber="219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="210" endLineNumber="217"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="193" endLineNumber="198"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="543" endLineNumber="560"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="537" endLineNumber="557"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="532" endLineNumber="554"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="526" endLineNumber="551"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="521" endLineNumber="546"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="518" endLineNumber="543"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="515" endLineNumber="537"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="512" endLineNumber="532"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="509" endLineNumber="526"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="506" endLineNumber="521"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="501" endLineNumber="518"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="498" endLineNumber="515"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="495" endLineNumber="512"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="255" endLineNumber="272"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="252" endLineNumber="269"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="249" endLineNumber="265"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="246" endLineNumber="261"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="243" endLineNumber="258"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="240" endLineNumber="255"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_rejection.h" startLineNumber="382" endLineNumber="397"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_rejection.h" startLineNumber="379" endLineNumber="394"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="305" endLineNumber="322"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\CalObjLoc.h" startLineNumber="74" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\CalObjLoc.h" startLineNumber="73" endLineNumber="80"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="92" endLineNumber="97"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="91" endLineNumber="96"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="90" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="89" endLineNumber="94"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="88" endLineNumber="93"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="87" endLineNumber="92"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="86" endLineNumber="91"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="85" endLineNumber="90"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="84" endLineNumber="89"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="83" endLineNumber="88"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="82" endLineNumber="87"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="81" endLineNumber="86"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="72" endLineNumber="77"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="71" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="70" endLineNumber="75"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="69" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="68" endLineNumber="73"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="55" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="22" endLineNumber="27"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="21" endLineNumber="26"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="20" endLineNumber="25"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="19" endLineNumber="24"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="18" endLineNumber="23"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="2" endLineNumber="22"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="1" endLineNumber="21"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="14" endLineNumber="21"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="13" endLineNumber="20"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="12" endLineNumber="18"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="11" endLineNumber="17"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="10" endLineNumber="16"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\switch_float.h" startLineNumber="1" endLineNumber="10"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="25" endLineNumber="32"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="24" endLineNumber="31"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="23" endLineNumber="29"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="22" endLineNumber="28"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="21" endLineNumber="27"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="17" endLineNumber="22"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="16" endLineNumber="21"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="15" endLineNumber="20"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="14" endLineNumber="19"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="13" endLineNumber="18"/>
            <text>
<![CDATA[    int numSectors;     //number of sectors
    int mapX;           //map sizeX * numSectors
    int mapY;           //map sizeY
    int filterX;        //filter sizeX * numSectors
    int filterY;        //filter sizeY
    int scoreX;         //mapX - filterX + 1
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="ee3550e82717c4f3141c6ef026776e98">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\include\fastvirtualscan\fastvirtualscan.h" startLineNumber="12" endLineNumber="20"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="44" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glstate.h" startLineNumber="28" endLineNumber="40"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gl.h" startLineNumber="198" endLineNumber="204"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\compat\glconsole.h" startLineNumber="28" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\solver.h" startLineNumber="27" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\robust_kernel_factory.h" startLineNumber="27" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_factory.h" startLineNumber="28" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm.h" startLineNumber="27" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\factory.h" startLineNumber="27" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\base_binary_edge.h" startLineNumber="105" endLineNumber="111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\DUtils\Random.h" startLineNumber="11" endLineNumber="23"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Viewer.h" startLineNumber="35" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="48" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\System.h" startLineNumber="49" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Optimizer.h" startLineNumber="21" endLineNumber="39"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapPoint.h" startLineNumber="55" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\LoopClosing.h" startLineNumber="36" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\LocalMapping.h" startLineNumber="33" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\KeyFrame.h" startLineNumber="56" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\FrameDrawer.h" startLineNumber="22" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Frame.h" startLineNumber="185" endLineNumber="193"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="258" endLineNumber="274"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_rejection.h" startLineNumber="41" endLineNumber="63"/>
            <text>
<![CDATA[#ifndef FAST_PCL_REGISTRATION_CORRESPONDENCE_REJECTION_H_
#define FAST_PCL_REGISTRATION_CORRESPONDENCE_REJECTION_H_

//#include <pcl/registration/correspondence_types.h>
//#include <pcl/registration/correspondence_sorting.h>
#include "fast_pcl/registration/correspondence_types.h"
#include "fast_pcl/registration/correspondence_sorting.h"
#include <pcl/console/print.h>
#include <pcl/common/transforms.h>
#include <pcl/point_cloud.h>
#include <pcl/search/kdtree.h>

namespace pcl
{
  namespace registration
  {
    /** @b CorrespondenceRejector represents the base class for correspondence rejection methods
      * \author Dirk Holz
      * \ingroup registration
      */
    class CorrespondenceRejector
    {
      public:
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="6d7d173cc72738d86fba1cf1ce72e6b1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\ring_filter\ring_filter.cpp" startLineNumber="46" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="58" endLineNumber="63"/>
            <text>
<![CDATA[std_msgs::ColorRGBA g_local_color;
const double g_global_alpha = 0.2;
const double g_local_alpha = 1.0;
int _closest_waypoint = -1;
visualization_msgs::MarkerArray g_global_marker_array;
visualization_msgs::MarkerArray g_local_waypoints_marker_array;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="ea9762d99ca02b8d00dfbbea4f8b8fa5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="394" endLineNumber="412"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="374" endLineNumber="392"/>
            <text>
<![CDATA[	case ROOT:
		res = cuLaunchKernel(
			func_process_root[pt->pid], // call function
			block_num_x,                // gridDimX
			block_num_y,                // gridDimY
			(pt->L_MAX)*(pt->len),      // gridDimZ
			blockDimX,                  // blockDimX
			thread_num_y,               // blockDimY
			1,                          // blockDimZ
			sharedMemBytes,             // sharedMemBytes
			NULL,                       // hStream
			kernel_args,                // kernelParams
			NULL                        // extra
			);
		if(res != CUDA_SUCCESS){
			printf("cuLaunchKernel(root) failed: res = %s\n", cuda_response_to_string(res));
			exit(1);
		}
		break;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="6ee81d9106fa5143f0c7e4773c87369b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\state\state_machine\nodes\state_machine\state_machine_core.h" startLineNumber="32" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit.h" startLineNumber="32" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\search_info_ros.h" startLineNumber="1" endLineNumber="16"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\cg.h" startLineNumber="71" endLineNumber="79"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\matrix_structure.h" startLineNumber="28" endLineNumber="40"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\gnss_localizer\nodes\nmea2tfpose\nmea2tfpose_core.h" startLineNumber="32" endLineNumber="52"/>
            <text>
<![CDATA[#define NMEA2TFPOSE_CORE_H

// C++ includes
#include <string>
#include <memory>

// ROS includes
#include <ros/ros.h>
#include <geometry_msgs/PoseStamped.h>
#include <nmea_msgs/Sentence.h>
#include <tf/transform_broadcaster.h>

#include "geo_pos_conv.hh"

namespace gnss_localizer
{
class Nmea2TFPoseNode
{
public:
  Nmea2TFPoseNode();
  ~Nmea2TFPoseNode();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="4e27172815effc91e255a6b95d64c3e9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_mobility\sample_mobility.cpp" startLineNumber="44" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="64" endLineNumber="69"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_driver\include\velodyne_driver\input.h" startLineNumber="114" endLineNumber="119"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit.h" startLineNumber="95" endLineNumber="102"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\LocalMapping.h" startLineNumber="120" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Frame.h" startLineNumber="117" endLineNumber="124"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_rejection.h" startLineNumber="388" endLineNumber="403"/>
            <text>
<![CDATA[        NormalsConstPtr input_normals_;

        /** \brief Normals to the input point cloud */
        NormalsPtr input_normals_transformed_;

        /** \brief Normals to the target point cloud */
        NormalsConstPtr target_normals_;

        /** \brief A pointer to the spatial search object. */
        KdTreePtr tree_;

        /** \brief The name of the rejection method. */
        std::string class_name_;

        /** \brief Should the current data container use normals? */
        bool needs_normals_;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="2f64179c3cf9351e6606745137927484">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\selectionwidget.h" startLineNumber="68" endLineNumber="73"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\hyper_graph_action.h" startLineNumber="27" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\DUtils\Random.h" startLineNumber="12" endLineNumber="24"/>
            <text>
<![CDATA[#ifndef __D_RANDOM__
#define __D_RANDOM__

#include <cstdlib>
#include <vector>

namespace DUtils {

/// Functions to generate pseudo-random numbers
class Random
{
public:
  class UnrepeatedRandomizer;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="3501d89618329543874df8e0971c3514">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_factory.cpp" startLineNumber="127" endLineNumber="134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_factory.cpp" startLineNumber="117" endLineNumber="124"/>
            <text>
<![CDATA[  OptimizationAlgorithmFactory::CreatorList::const_iterator OptimizationAlgorithmFactory::findSolver(const std::string& name) const
  {
    for (CreatorList::const_iterator it = _creator.begin(); it != _creator.end(); ++it) {
      const OptimizationAlgorithmProperty& sp = (*it)->property();
      if (sp.name == name)
        return it;
    }
    return _creator.end();
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="4f42106285cd0174510f7a879ee4f663">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_uploader\pos_uploader.cpp" startLineNumber="64" endLineNumber="71"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="68" endLineNumber="73"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="47" endLineNumber="53"/>
            <text>
<![CDATA[double config_acceleration = 1; // m/s^2
double config_stopline_search_radius = 1; // meter
int config_number_of_zeros_ahead = 0;
int config_number_of_zeros_behind = 0;

int waypoint_max;
double search_radius; // meter
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="810790742da95c9935729d6549407bfa">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="187" endLineNumber="198"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\LoopClosing.h" startLineNumber="110" endLineNumber="118"/>
            <text>
<![CDATA[    Map* mpMap;
    Tracking* mpTracker;

    KeyFrameDatabase* mpKeyFrameDB;
    ORBVocabulary* mpORBVocabulary;

    LocalMapping *mpLocalMapper;

    std::list<KeyFrame*> mlpLoopKeyFrameQueue;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="f81fa5a2d4db33d98df977a47787d1f1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\sim3.h" startLineNumber="254" endLineNumber="263"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\sim3.h" startLineNumber="241" endLineNumber="249"/>
            <text>
<![CDATA[      assert(i<8);
      if (i<4){

        return r.coeffs()[i];
      }
      if (i<7){
        return t[i-4];
      }
      return s;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="214fc892444eb00b7baf88eab964735a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="507" endLineNumber="513"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="427" endLineNumber="441"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="132" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.h" startLineNumber="20" endLineNumber="27"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\structure.h" startLineNumber="35" endLineNumber="40"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="36" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="23" endLineNumber="31"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\for_use_gpu.h" startLineNumber="28" endLineNumber="37"/>
            <text>
<![CDATA[} CvLSVMFeaturePyramid;

// Add for gpu
typedef struct
{
    int sizeX;
    int sizeY;
    int numFeatures;
    CUdeviceptr map;
} CvLSVMFeatureMapGPU;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="dc4b29eb5c18a9bb8f37bacf42ba97bc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="403" endLineNumber="408"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="220" endLineNumber="225"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="369" endLineNumber="376"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="295" endLineNumber="302"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="301" endLineNumber="308"/>
            <text>
<![CDATA[  tf::StampedTransform transform;
  try
  {
    ros::Time now = ros::Time(0);
    listener.waitForTransform("/map", "/world", now, ros::Duration(10.0));
    listener.lookupTransform("/map", "world", now, transform);
  }
  catch (tf::TransformException& ex)
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="969509fe29b1332160fefe3313208858">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="89" endLineNumber="94"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="311" endLineNumber="316"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="30" endLineNumber="35"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\obj_reproj.cpp" startLineNumber="87" endLineNumber="92"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="66" endLineNumber="73"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\rawdata.h" startLineNumber="151" endLineNumber="157"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="125" endLineNumber="132"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\include\astar_util.h" startLineNumber="39" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glplatform.h" startLineNumber="42" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_dogleg.h" startLineNumber="80" endLineNumber="89"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Map.h" startLineNumber="33" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="257" endLineNumber="262"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="194" endLineNumber="199"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\CalObjLoc.h" startLineNumber="75" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="93" endLineNumber="98"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="73" endLineNumber="78"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="56" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="47" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="31" endLineNumber="36"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="23" endLineNumber="28"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="18" endLineNumber="23"/>
            <text>
<![CDATA[    int scoreX;         //mapX - filterX + 1
    int scoreY;         //mapY - filterY + 1
    int mapSize;        //mapX * mapY
    int filterSize;     //filterX * filterY
    int scoreSize;      //scoreX * scoreY
} ConvolutionParam;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="2be0b7a31db6c05fd201cfbbb4199544">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\plot\plotter.cpp" startLineNumber="778" endLineNumber="785"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\plot\plotter.cpp" startLineNumber="768" endLineNumber="775"/>
            <text>
<![CDATA[    if( linked_plotter_x ) {
        // Synchronise rview and target with linked plotter
        rview.x = linked_plotter_x->rview.x;
        target.x = linked_plotter_x->target.x;
    }else{
        // Animate view window toward target
        Rangef d = target.x - rview.x;
        rview.x += d * sf;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="940f6e9808424935f7a2935eaff0e170">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="83" endLineNumber="90"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="109" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="106" endLineNumber="113"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\traffic_light_viewer\traffic_light_viewer.cpp" startLineNumber="19" endLineNumber="24"/>
            <text>
<![CDATA[  const int   fontThickness = 1;
  int         baseLine      = 0;
  cv::Point   textOrg;
  std::string label;
  cv::Scalar  textColor;
  cv::Scalar  signalColor;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="2745e379845aaa652cfd5709d18bbf13">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\display.cpp" startLineNumber="150" endLineNumber="160"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\display.cpp" startLineNumber="140" endLineNumber="150"/>
            <text>
<![CDATA[bool HadInput()
{
    if( context->had_input > 0 )
    {
        --context->had_input;
        return true;
    }
    return false;
}

bool HasResized()
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="df48ded7e169638becb77a324428be0c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_matching\orb_matching.cpp" startLineNumber="303" endLineNumber="311"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_matching\orb_matching.cpp" startLineNumber="207" endLineNumber="214"/>
            <text>
<![CDATA[			throw std::out_of_range("External reference of keyframe not found");

		tf::Transform kfTr = KeyFramePoseToTf(kf);
		tf::Transform extRef = getKeyFrameExtPose(kf);

		tf::Transform kfTrOffset = KeyFramePoseToTf(kOffset);
		tf::Transform extRefOffset = getKeyFrameExtPose(kOffset);
		return localizeByReference (tfOrb, kfTr, kfTrOffset, extRef, extRefOffset);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="e69ea4ac4e76a90f604df4032331939e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_trajectory_gen\lattice_trajectory_gen.cpp" startLineNumber="76" endLineNumber="82"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="180" endLineNumber="187"/>
            <text>
<![CDATA[static ros::Publisher ndt_reliability_pub;
static std_msgs::Float32 ndt_reliability;

static bool _use_openmp = false;
static bool _get_height = false;
static bool _use_local_transform = false;

static std::ofstream ofs;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="5b9f2c88a829e3c0c7eb024d979a87ba">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\sim3.h" startLineNumber="27" endLineNumber="38"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\se3quat.h" startLineNumber="27" endLineNumber="38"/>
            <text>
<![CDATA[#ifndef G2O_SE3QUAT_H_
#define G2O_SE3QUAT_H_

#include <Eigen/Core>
#include <Eigen/Geometry>
#include "g2o/types/se3_ops.h"

namespace g2o {
  using namespace Eigen;

  typedef Matrix<double, 6, 1> Vector6d;
  typedef Matrix<double, 7, 1> Vector7d;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="775783ad73e27cf10690d8fe32255049">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\gazebo\twist_cmd_converter\src\converter.cpp" startLineNumber="44" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\gazebo\laser_scan_converter\src\converter.cpp" startLineNumber="42" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\space_filter\space_filter.cpp" startLineNumber="20" endLineNumber="28"/>
            <text>
<![CDATA[private:

	ros::NodeHandle node_handle_;
	ros::Subscriber cloud_sub_;
	ros::Publisher 	cloud_pub_;

	std::string 	subscribe_topic_;

	bool			lateral_removal_;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="3c18a0299f629279483894090c99a5a1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\feat_proj\feat_proj.cpp" startLineNumber="260" endLineNumber="267"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\obj_reproj.cpp" startLineNumber="390" endLineNumber="397"/>
            <text>
<![CDATA[  std::string camera_info_topic_name;
  private_nh.param<std::string>("camera_info_topic", camera_info_topic_name, "/camera/camera_info");

  //get camera ID
  camera_id_str = camera_info_topic_name;
  camera_id_str.erase(camera_id_str.find("/camera/camera_info"));
  if (camera_id_str == "/") {
    camera_id_str = "camera";
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="45192a2a02d89137c33882cea7e6d9a4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_d_viewer\vscan_image_d_viewer.cpp" startLineNumber="207" endLineNumber="213"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="332" endLineNumber="338"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_d_viewer\image_d_viewer.cpp" startLineNumber="267" endLineNumber="294"/>
            <text>
<![CDATA[    ros::init(argc, argv, "image_d_viewer");

    /**
     * NodeHandle is the main access point to communications with the ROS system.
     * The first NodeHandle constructed will fully initialize this node, and the last
     * NodeHandle destructed will close down the node.
     */
    ros::NodeHandle n;
    ros::NodeHandle private_nh("~");

    /**
     * The subscribe() call is how you tell ROS that you want to receive messages
     * on a given topic.  This invokes a call to the ROS
     * master node, which keeps a registry of who is publishing and who
     * is subscribing.  Messages are passed to a callback function, here
     * called Callback.  subscribe() returns a Subscriber object that you
     * must hold on to until you want to unsubscribe.  When all copies of the Subscriber
     * object go out of scope, this callback will automatically be unsubscribed from
     * this topic.
     *
     * The second parameter to the subscribe() function is the size of the message
     * queue.  If messages are arriving faster than they are being processed, this
     * is the number of messages that will be buffered up before beginning to throw
     * away the oldest ones.
     */
    std::string image_topic;
    std::string car_topic;
    std::string person_topic;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="5a4a7275a60a2afa8dc04cf745121cd6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\var\input_record_repeat.h" startLineNumber="71" endLineNumber="78"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\plotter.h" startLineNumber="123" endLineNumber="130"/>
            <text>
<![CDATA[    void ClearMarkers();

protected:
    struct PANGOLIN_EXPORT Tick
    {
        float val;
        float factor;
        std::string symbol;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="5159316145d8dd85bd93e68aaaa3e39a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="66" endLineNumber="72"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\log\packetstream.h" startLineNumber="55" endLineNumber="62"/>
            <text>
<![CDATA[#undef PANGO_TAG

struct PANGOLIN_EXPORT PacketStreamSource
{
    std::string     driver;
    int             id;
    std::string     uri;
    json::value     info;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="3c5a91599ee2c8d883ae82ec4089aac9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="393" endLineNumber="398"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_trajectory_gen\lattice_trajectory_gen.cpp" startLineNumber="221" endLineNumber="226"/>
            <text>
<![CDATA[  marker.header.stamp = ros::Time();
  marker.ns = "next_waypoint_marker";
  marker.id = 0;
  marker.type = visualization_msgs::Marker::SPHERE;
  marker.action = visualization_msgs::Marker::ADD;
  marker.pose.position = g_current_waypoints.getWaypointPosition(i);
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="fa53650668dfe5c967a41834076273d9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="64" endLineNumber="69"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="55" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="600" endLineNumber="605"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.h" startLineNumber="347" endLineNumber="352"/>
            <text>
<![CDATA[        OptimizableGraph* _graph;
        Data* _userData;
        int _hessianIndex;
        bool _fixed;
        bool _marginalized;
        int _dimension;
]]>
            </text>
        </set>
        <set lineCount="6" fingerprint="dfe831c63a90f103e9be2c5356e2b8f5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\var\varvaluegeneric.h" startLineNumber="40" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="129" endLineNumber="136"/>
            <text>
<![CDATA[    float color[4];

    GlSlProgram  prog_fixed;

    GLint u_color;
    GLint u_modelViewMatrix;
    GLint u_modelViewProjectionMatrix;
    GLint u_texture;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="a5fc54ea4b59c4c3a469b2e415ede8a5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\get_boxes.cpp" startLineNumber="282" endLineNumber="290"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\get_boxes.cpp" startLineNumber="301" endLineNumber="310"/>
            <text>
<![CDATA[			gettimeofday(&tv_part_score_start, nullptr);
			partmatch = dpm_ttic_cpu_fconvsMT(featp,flipfeat,partfilter,part_sym,1,
							  NoP,PADsize2,part_size,pm_size);
			gettimeofday(&tv_part_score_end, nullptr);
			tvsub(&tv_part_score_end, &tv_part_score_start, &tv);
			time_part_score += tv.tv_sec * 1000.0 + (float)tv.tv_usec / 1000.0;

			//release feature
			s_free(featp);
			s_free(flipfeat);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="eedf047c499d15c93466e5eb5365399f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="190" endLineNumber="203"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="177" endLineNumber="190"/>
            <text>
<![CDATA[  return 1;
}

int zero_matrix3d(double dst[3][3])
{
  int i, j;
  for (i = 0; i < 3; i++)
  {
    for (j = 0; j < 3; j++)
    {
      dst[i][j] = 0;
    }
  }
  return 1;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="641f6b1578a766bac5de15bc8e46a730">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\vscan_lidar_track\mainwindow.h" startLineNumber="117" endLineNumber="123"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\mainwindow.h" startLineNumber="21" endLineNumber="27"/>
            <text>
<![CDATA[    private slots:
        void on_radioButton_green_clicked();
        void on_radioButton_yellow_clicked();
        void on_radioButton_red_clicked();
        void on_pushButton_reloadImage_clicked();
        void on_pushButton_save_clicked();
        void on_pushButton_loadSetting_clicked();
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="3cd94de1e03a372274410b0cfdbbdb6b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="419" endLineNumber="426"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1223" endLineNumber="1230"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1704" endLineNumber="1711"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="550" endLineNumber="557"/>
            <text>
<![CDATA[    else if(tmpimage.type()==CV_8UC1)
    {
        QImage img(tmpimage.data, tmpimage.cols, tmpimage.rows, tmpimage.step, QImage::Format_Indexed8);
        img.setColorTable(colorTable);
        QLabel * tmpcalibimageshow=new QLabel;
        tmpcalibimageshow->setPixmap(QPixmap::fromImage(img));
        QScrollArea * scrollarea=new QScrollArea;
        scrollarea->setWidget(tmpcalibimageshow);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="2d845caca5747e63a3a4d404bbbe91fb">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\plot\plotter.cpp" startLineNumber="75" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\plot\plotter.cpp" startLineNumber="141" endLineNumber="147"/>
            <text>
<![CDATA[    static const std::string vs =
            "attribute vec2 a_position;\n"
            "uniform vec2 u_scale;\n"
            "uniform vec2 u_offset;\n"
            "varying float x;\n"
            "varying float y;\n"
            "void main() {\n"
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="90f7287fc6ecc5e2942377658a77cb1d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\vscan_lidar_track\rbsspfvehicletracker.cpp" startLineNumber="89" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\vscan_lidar_track\rbsspfvehicletracker.cpp" startLineNumber="93" endLineNumber="99"/>
            <text>
<![CDATA[    case OneLaserData:
        trackerstate=ReadyForTracking;
        cuda_SetLaserScan(scan);
        break;
    case ReadyForTracking:
        trackerstate=Processing;
        cuda_SetLaserScan(scan);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="a1060657c70bc5af81693e99dbb6d55c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\klt_track\klt_track.cpp" startLineNumber="63" endLineNumber="71"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\ssd_node.cpp" startLineNumber="45" endLineNumber="53"/>
            <text>
<![CDATA[class RosSsdApp
{
	ros::Subscriber subscriber_image_raw_;
	ros::Subscriber subscriber_ssd_config_;
	ros::Publisher publisher_car_objects_;
	ros::Publisher publisher_person_objects_;
	ros::NodeHandle node_handle_;

	cv::Scalar pixel_mean_;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="246fad21466ade65752d19c5c1d5643c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.h" startLineNumber="32" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\state\state_machine\nodes\state_machine\state_machine.h" startLineNumber="31" endLineNumber="43"/>
            <text>
<![CDATA[#ifndef STATE_MACHINE_H
#define STATE_MACHINE_H

#include <memory>
#include <iostream>

namespace state_machine
{
enum class StateList : int32_t
{
  MOVE_FORWARD,
  TRAFFIC_LIGHT_STOP,
  LANE_CHANGE,
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="8cceaffcb3df20c70f1a5b7d88963dcb">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="342" endLineNumber="381"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\transformation_estimation_point_to_plane_lls.h" startLineNumber="40" endLineNumber="67"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\transformation_estimation_svd.h" startLineNumber="40" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\warp_point_rigid_6d.h" startLineNumber="42" endLineNumber="62"/>
            <text>
<![CDATA[#ifndef FAST_PCL_WARP_POINT_RIGID_6D_H_
#define FAST_PCL_WARP_POINT_RIGID_6D_H_

//#include <pcl/registration/warp_point_rigid.h>
#include "fast_pcl/registration/warp_point_rigid.h"

namespace pcl
{
  namespace registration
  {
    /** \brief @b WarpPointRigid3D enables 6D (3D rotation + 3D translation) 
      * transformations for points.
      * 
      * \note The class is templated on the source and target point types as well as on the output scalar of the transformation matrix (i.e., float or double). Default: float.
      * \author Radu B. Rusu
      * \ingroup registration
      */
    template <typename PointSourceT, typename PointTargetT, typename Scalar = float>
    class WarpPointRigid6D : public WarpPointRigid<PointSourceT, PointTargetT, Scalar>
    {
      public:
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="cf55de90d61bfaec4e2eb7932c5af6b9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\hyper_graph_action.h" startLineNumber="27" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\DUtils\Random.h" startLineNumber="12" endLineNumber="26"/>
            <text>
<![CDATA[#ifndef __D_RANDOM__
#define __D_RANDOM__

#include <cstdlib>
#include <vector>

namespace DUtils {

/// Functions to generate pseudo-random numbers
class Random
{
public:
  class UnrepeatedRandomizer;
  
public:
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="22dae25eb20f5280049117252940e5c2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\Cluster.cpp" startLineNumber="26" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\Cluster.cpp" startLineNumber="21" endLineNumber="36"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="252" endLineNumber="267"/>
            <text>
<![CDATA[    return cameraextrinsicmat;
}

cv::Mat CalibrateCameraBase::getCameraMat()
{
    return cameramat;
}

cv::Mat CalibrateCameraBase::getDistCoeff()
{
    return distcoeff;
}

cv::Size2i CalibrateCameraBase::getImageSize()
{
    return imagesize;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="18952b209d40d7bc2c646e4472326896">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_viewer\vscan_image_viewer.cpp" startLineNumber="134" endLineNumber="145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="380" endLineNumber="390"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_d_viewer\vscan_image_d_viewer.cpp" startLineNumber="267" endLineNumber="278"/>
            <text>
<![CDATA[	cv::Mat grayscale(256,1,CV_8UC1);
	for(int i=0;i<256;i++)
	{
		grayscale.at<uchar>(i)=i;
	}
	cv::applyColorMap(grayscale,colormap,cv::COLORMAP_JET);

	ros::spin();

	cvDestroyWindow(window_name);

	return 0;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="d63fc02989f09313234a23384b84c1f2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2057" endLineNumber="2063"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2056" endLineNumber="2062"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2055" endLineNumber="2061"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2054" endLineNumber="2060"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1959" endLineNumber="1965"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1958" endLineNumber="1964"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1957" endLineNumber="1963"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1956" endLineNumber="1962"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="119" endLineNumber="125"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2100" endLineNumber="2106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2099" endLineNumber="2105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2098" endLineNumber="2104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2097" endLineNumber="2103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2096" endLineNumber="2102"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2095" endLineNumber="2101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2094" endLineNumber="2100"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2093" endLineNumber="2099"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2092" endLineNumber="2098"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2091" endLineNumber="2097"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2090" endLineNumber="2096"/>
            <text>
<![CDATA[  obj.lnid = std::stoi(columns[0]);
  obj.did = std::stoi(columns[1]);
  obj.blid = std::stoi(columns[2]);
  obj.flid = std::stoi(columns[3]);
  obj.bnid = std::stoi(columns[4]);
  obj.fnid = std::stoi(columns[5]);
  obj.jct = std::stoi(columns[6]);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="a3939a58e7e33cc810e09731dc3f0250">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="161" endLineNumber="167"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="160" endLineNumber="166"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="159" endLineNumber="165"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="158" endLineNumber="164"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="157" endLineNumber="163"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="156" endLineNumber="162"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="155" endLineNumber="161"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="918" endLineNumber="926"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="917" endLineNumber="924"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="916" endLineNumber="923"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="914" endLineNumber="922"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="913" endLineNumber="921"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="912" endLineNumber="919"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="911" endLineNumber="918"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="910" endLineNumber="917"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="1452" endLineNumber="1462"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1139" endLineNumber="1147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1138" endLineNumber="1146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1137" endLineNumber="1145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1135" endLineNumber="1143"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1134" endLineNumber="1142"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1132" endLineNumber="1141"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1131" endLineNumber="1139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1129" endLineNumber="1138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1128" endLineNumber="1137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1126" endLineNumber="1135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1125" endLineNumber="1134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1123" endLineNumber="1132"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1122" endLineNumber="1131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1115" endLineNumber="1129"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="520" endLineNumber="526"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="519" endLineNumber="525"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="518" endLineNumber="524"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="517" endLineNumber="523"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="516" endLineNumber="522"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="515" endLineNumber="521"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="514" endLineNumber="520"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="513" endLineNumber="519"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="512" endLineNumber="518"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="511" endLineNumber="517"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="510" endLineNumber="516"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="509" endLineNumber="515"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="508" endLineNumber="514"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="507" endLineNumber="513"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="506" endLineNumber="512"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="505" endLineNumber="511"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="504" endLineNumber="510"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="503" endLineNumber="509"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="502" endLineNumber="508"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="501" endLineNumber="507"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="500" endLineNumber="506"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="499" endLineNumber="505"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="498" endLineNumber="504"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="497" endLineNumber="503"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="496" endLineNumber="502"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="495" endLineNumber="501"/>
            <text>
<![CDATA[	free(featp2_dev);
	free(A_SIZE_dev);
	free(B_dev);
	free(B_dims_dev);
	free(fconvs_error_array_dev);
	free(fconvs_C_dev);
	free(NR_MAXTHREADS_X);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="2eacaff9bcb3e4877299278544fb4d77">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\opengl_render_state.h" startLineNumber="219" endLineNumber="230"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\opengl_render_state.h" startLineNumber="216" endLineNumber="227"/>
            <text>
<![CDATA[PANGOLIN_EXPORT
OpenGlMatrixSpec ProjectionMatrixRUB_BottomLeft(int w, int h, GLprecision fu, GLprecision fv, GLprecision u0, GLprecision v0, GLprecision zNear, GLprecision zFar );

PANGOLIN_EXPORT
OpenGlMatrixSpec ProjectionMatrixRDF_TopLeft(int w, int h, GLprecision fu, GLprecision fv, GLprecision u0, GLprecision v0, GLprecision zNear, GLprecision zFar );

PANGOLIN_EXPORT
OpenGlMatrixSpec ProjectionMatrixRDF_BottomLeft(int w, int h, GLprecision fu, GLprecision fv, GLprecision u0, GLprecision v0, GLprecision zNear, GLprecision zFar );


//! Use OpenGl's default frame RUB_BottomLeft
PANGOLIN_EXPORT
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="c5cb29d2218c293315ae60d2ddfc3a4b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="752" endLineNumber="758"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="750" endLineNumber="757"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="749" endLineNumber="756"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="941" endLineNumber="947"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="940" endLineNumber="946"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="938" endLineNumber="945"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="937" endLineNumber="944"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="680" endLineNumber="687"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_core.cpp" startLineNumber="78" endLineNumber="84"/>
            <text>
<![CDATA[  pub1_ = nh_.advertise<geometry_msgs::TwistStamped>("twist_raw", 10);
  pub2_ = nh_.advertise<waypoint_follower::ControlCommandStamped>("ctrl_cmd", 10);
  pub11_ = nh_.advertise<visualization_msgs::Marker>("next_waypoint_mark", 0);
  pub12_ = nh_.advertise<visualization_msgs::Marker>("next_target_mark", 0);
  pub13_ = nh_.advertise<visualization_msgs::Marker>("search_circle_mark", 0);
  pub14_ = nh_.advertise<visualization_msgs::Marker>("line_point_mark", 0);  // debug tool
  pub15_ = nh_.advertise<visualization_msgs::Marker>("trajectory_circle_mark", 0);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="f0caf8ef592c9e45471fded3a0584dbd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_seven_dof_expmap.cpp" startLineNumber="67" endLineNumber="77"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_seven_dof_expmap.cpp" startLineNumber="105" endLineNumber="116"/>
            <text>
<![CDATA[    return true;
  }

  bool EdgeSim3::write(std::ostream& os) const
  {
    Sim3 cam2world(measurement().inverse());
    Vector7d v7 = cam2world.log();
    for (int i=0; i<7; i++)
    {
      os  << v7[i] << " ";
    }
    for (int i=0; i<7; i++)
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="d96a5b8c828637478a4a2c29aa797055">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="125" endLineNumber="134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="101" endLineNumber="109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="119" endLineNumber="128"/>
            <text>
<![CDATA[static geometry_msgs::PoseStamped localizer_pose_msg;

static ros::Publisher estimate_twist_pub;
static geometry_msgs::TwistStamped estimate_twist_msg;

static ros::Time current_scan_time;
static ros::Time previous_scan_time;
static ros::Duration scan_duration;

static double exe_time = 0.0;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="5651cf9261e5bb8aa7f39c0c3564b287">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="306" endLineNumber="314"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\klt_track\klt_track.cpp" startLineNumber="68" endLineNumber="78"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\space_filter\space_filter.cpp" startLineNumber="23" endLineNumber="32"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_dogleg.h" startLineNumber="76" endLineNumber="83"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_path.h" startLineNumber="38" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="23" endLineNumber="29"/>
            <text>
<![CDATA[  ros::Subscriber waypoint_subscriber_;
  ros::Subscriber vscan_subscriber_;
  ros::Subscriber obj_subscriber_;
  bool use_target_waypoint_;
  bool use_obstacle_box_;
  bool use_vscan_points_;
  double map_x_size_;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="6e931c8ffa0816a5cbff018e5a1bac0d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl_es_compat.h" startLineNumber="18" endLineNumber="24"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="381" endLineNumber="387"/>
            <text>
<![CDATA[   #ifndef stbtt_uint8
   typedef unsigned char   stbtt_uint8;
   typedef signed   char   stbtt_int8;
   typedef unsigned short  stbtt_uint16;
   typedef signed   short  stbtt_int16;
   typedef unsigned int    stbtt_uint32;
   typedef signed   int    stbtt_int32;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="899638476019f1d907f2e06003c7d34d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="57" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glplatform.h" startLineNumber="43" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\pangolin.h" startLineNumber="28" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="436" endLineNumber="443"/>
            <text>
<![CDATA[#ifndef __STB_INCLUDE_STB_TRUETYPE_H__
#define __STB_INCLUDE_STB_TRUETYPE_H__

#ifdef STBTT_STATIC
#define STBTT_DEF static
#else
#define STBTT_DEF extern
#endif
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="f5f3e1561d01e9d343e2da21dc3c2474">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="218" endLineNumber="234"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\src\__nodes\mt\TrackingThread.h" startLineNumber="45" endLineNumber="53"/>
            <text>
<![CDATA[	const string mapFilename;
	string identity;
	const int offsetKeyframeNum;

	const string parentFrame;
	const string targetFrame;

	SystemMT *sysParent;
	volatile bool doStop;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="45d4b6b64480e2d9f8a958d52e37a901">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\factory.h" startLineNumber="153" endLineNumber="159"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\robust_kernel_factory.h" startLineNumber="131" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_factory.h" startLineNumber="143" endLineNumber="149"/>
            <text>
<![CDATA[#if defined _MSC_VER && defined G2O_SHARED_LIBS
#  define G2O_OAF_EXPORT __declspec(dllexport)
#  define G2O_OAF_IMPORT __declspec(dllimport)
#else
#  define G2O_OAF_EXPORT
#  define G2O_OAF_IMPORT
#endif
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="d4b8255c600a009fb9bd4ea35fa9f9ea">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="583" endLineNumber="591"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1274" endLineNumber="1282"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="160" endLineNumber="168"/>
            <text>
<![CDATA[    cameracalibtab->addTab(imagesizeshow,IMAGESIZE);

    imagesplitter=new QSplitter(Qt::Vertical);
    splitter->addWidget(imagesplitter);
    splitter->setStretchFactor(splitter->indexOf(imagesplitter),2);

    cameraimagetab=new QTabWidget;
    imagesplitter->addWidget(cameraimagetab);
    imagesplitter->setStretchFactor(imagesplitter->indexOf(cameraimagetab),1);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="82177ee3e74d3da9536524d1e8ee673f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="303" endLineNumber="311"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="136" endLineNumber="144"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\search_info_ros.h" startLineNumber="38" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\klt_track\klt_track.cpp" startLineNumber="65" endLineNumber="73"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\threadedfilebuf.h" startLineNumber="65" endLineNumber="73"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="88" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\Context.h" startLineNumber="13" endLineNumber="19"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_publisher\calibration_publisher.cpp" startLineNumber="10" endLineNumber="18"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\gazebo\catvehicle\src\distanceEstimator.cpp" startLineNumber="20" endLineNumber="26"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\gnss_localizer\nodes\nmea2tfpose\nmea2tfpose_core.h" startLineNumber="58" endLineNumber="72"/>
            <text>
<![CDATA[  ros::NodeHandle nh_;
  ros::NodeHandle private_nh_;

  // publisher
  ros::Publisher pub1_;

  // subscriber
  ros::Subscriber sub1_;

  // constants
  const std::string MAP_FRAME_;
  const std::string GPS_FRAME_;

  // variables
  int32_t plane_number_;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="a501939c474adf7820b991866ecdde56">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\BowVector.h" startLineNumber="45" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\file_extension.h" startLineNumber="37" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\console\ConsoleInterpreter.h" startLineNumber="36" endLineNumber="43"/>
            <text>
<![CDATA[enum ConsoleLineType
{
    ConsoleLineTypeCmd,
    ConsoleLineTypeCmdOptions,
    ConsoleLineTypeStdout,
    ConsoleLineTypeStderr,
    ConsoleLineTypeOutput,
    ConsoleLineTypeHelp,
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="74ba94aeece71e0b44d94d5664d4c659">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\base_multi_edge.h" startLineNumber="91" endLineNumber="98"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\base_binary_edge.h" startLineNumber="96" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\base_unary_edge.h" startLineNumber="81" endLineNumber="88"/>
            <text>
<![CDATA[      using BaseEdge<D,E>::computeError;

    protected:
      using BaseEdge<D,E>::_measurement;
      using BaseEdge<D,E>::_information;
      using BaseEdge<D,E>::_error;
      using BaseEdge<D,E>::_vertices;
      using BaseEdge<D,E>::_dimension;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="d58f469143d7f3423e035a8270ef34ac">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\featurepyramid.cpp" startLineNumber="194" endLineNumber="202"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\featurepyramid.cpp" startLineNumber="200" endLineNumber="208"/>
            <text>
<![CDATA[			FLOAT dy2=*(s+1)-*(s-1);
			FLOAT dx2=*(s+dims[0])-*(s-dims[0]);
			FLOAT v2=dx2*dx2+dy2*dy2;

			//third color channel
			s+=SQUARE;
			FLOAT dy3=*(s+1)-*(s-1);
			FLOAT dx3=*(s+dims[0])-*(s-dims[0]);
			FLOAT v3=dx3*dx3+dy3*dy3;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="8d57f1b198ce286972de6b46ce8158ff">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set.cpp" startLineNumber="76" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_trajectory_gen\lattice_trajectory_gen.cpp" startLineNumber="459" endLineNumber="469"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="408" endLineNumber="416"/>
            <text>
<![CDATA[    marker.color.r = 1.0;
    marker.color.g = 0.0;
    marker.color.b = 0.0;
  }
  else
  {
    marker.color.r = 1.0;
    marker.color.g = 1.0;
    marker.color.b = 0.0;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="c8ced902730fb51c5f0ce1fda9d19d77">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_gauss_newton.h" startLineNumber="27" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_levenberg.h" startLineNumber="27" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_with_hessian.h" startLineNumber="28" endLineNumber="43"/>
            <text>
<![CDATA[#define G2O_OPTIMIZATION_ALGORITHM_WITH_HESSIAN_H

#include "g2o/core/optimization_algorithm.h"

namespace g2o {

  class Solver;

  /**
   * \brief Base for solvers operating on the approximated Hessian, e.g., Gauss-Newton, Levenberg
   */
  class  OptimizationAlgorithmWithHessian : public OptimizationAlgorithm
  {
    public:
      explicit OptimizationAlgorithmWithHessian(Solver* solver);
      virtual ~OptimizationAlgorithmWithHessian();
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="5a249d535166738505c617063c2b9473">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="597" endLineNumber="604"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="779" endLineNumber="786"/>
            <text>
<![CDATA[    std::cout << "-----------------------------------------------------------------" << std::endl;
    std::cout << "Sequence: " << input->header.seq << std::endl;
    std::cout << "Timestamp: " << input->header.stamp << std::endl;
    std::cout << "Frame ID: " << input->header.frame_id << std::endl;
    //		std::cout << "Number of Scan Points: " << scan_ptr->size() << " points." << std::endl;
    std::cout << "Number of Filtered Scan Points: " << scan_points_num << " points." << std::endl;
    std::cout << "NDT has converged: " << ndt.hasConverged() << std::endl;
    std::cout << "Fitness Score: " << fitness_score << std::endl;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="0988ddf8e3fb639f4424c5964b80a726">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="592" endLineNumber="600"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_stop\lane_stop.cpp" startLineNumber="127" endLineNumber="136"/>
            <text>
<![CDATA[	ros::Subscriber light_sub = n.subscribe("/light_color", sub_light_queue_size, receive_auto_detection);
	ros::Subscriber light_managed_sub = n.subscribe("/light_color_managed", sub_light_queue_size,
							receive_manual_detection);
	ros::Subscriber red_sub = n.subscribe("/red_waypoints_array", sub_waypoint_queue_size, cache_red_lane);
	ros::Subscriber green_sub = n.subscribe("/green_waypoints_array", sub_waypoint_queue_size, cache_green_lane);
	ros::Subscriber config_sub = n.subscribe("/config/lane_stop", sub_config_queue_size, config_parameter);

	ros::spin();

	return EXIT_SUCCESS;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="e6f50e524659e706d70d73d4d7c336ce">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\polygon\packages\points2polygon\nodes\points2polygon\points2polygon.cpp" startLineNumber="129" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\polygon\packages\points2polygon\nodes\points2polygon\points2polygon.cpp" startLineNumber="176" endLineNumber="185"/>
            <text>
<![CDATA[	if (use_pcd_file) {
		// Load input file into a PointCloud<T> with an appropriate
		// type
		pcl::PointCloud<pcl::PointXYZ>::Ptr
			cloud(new pcl::PointCloud<pcl::PointXYZ>);
		pcl::PCLPointCloud2 cloud_blob;
		pcl::io::loadPCDFile(velodyne_points_pcd, cloud_blob);
		pcl::fromPCLPointCloud2(cloud_blob, *cloud);

		points_to_polygon(cloud);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="ee348e081aeafc2a35e5be6535a622c5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\gnss_localizer\nodes\nmea2tfpose\nmea2tfpose_core.h" startLineNumber="31" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\matrix_structure.h" startLineNumber="27" endLineNumber="40"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\cg.h" startLineNumber="70" endLineNumber="79"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit.h" startLineNumber="31" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\state\state_machine\nodes\state_machine\state_machine_core.h" startLineNumber="31" endLineNumber="49"/>
            <text>
<![CDATA[#ifndef STATE_MACHINE_CORE_H
#define STATE_MACHINE_CORE_H

// ROS includes
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <std_msgs/Int32.h>

// User Defined includes
#include "runtime_manager/traffic_light.h"
#include "state_machine.h"

namespace state_machine
{
class StateMachineNode
{
public:
  StateMachineNode();
  ~StateMachineNode();
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="ef1883e85c18c6416eb800b12c9abea6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\opengl_render_state.h" startLineNumber="50" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\timer.h" startLineNumber="33" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\TrafficLight.h" startLineNumber="31" endLineNumber="41"/>
            <text>
<![CDATA[    double lower;
};

struct hsvSet {
    valueSet Hue;
    valueSet Sat;
    valueSet Val;
};

struct thresholdSet {
    hsvSet Red;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="80d71b1592f41e04aff6cfae057949f9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\mainwindow.cpp" startLineNumber="24" endLineNumber="38"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\mainwindow.cpp" startLineNumber="31" endLineNumber="45"/>
            <text>
<![CDATA[void MainWindow::on_radioButton_yellow_clicked()
{
  TunerBody::setColor(TunerBody::YELLOW);
  return;
}


void MainWindow::on_radioButton_red_clicked()
{
  TunerBody::setColor(TunerBody::RED);
  return;
}


void MainWindow::on_pushButton_reloadImage_clicked()
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="3c95439fd6bc18674db39eb65d895472">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="235" endLineNumber="246"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="243" endLineNumber="254"/>
            <text>
<![CDATA[    gl.UpdateMatrices();
}

inline void glLoadMatrixd(const GLdouble* m)
{
    pangolin::GlEngine& gl = pangolin::glEngine();
    pangolin::GLprecision* cm = gl.currentmatrix->top().m;
    for(int i=0; i<16; ++i) cm[i] = (pangolin::GLprecision)m[i];
    gl.UpdateMatrices();
}

inline void glMultMatrixf(const GLfloat* m)
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="94a6378cd5826e45228deef25e346d63">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="903" endLineNumber="909"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="138" endLineNumber="144"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="133" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="146" endLineNumber="152"/>
            <text>
<![CDATA[        std::cout << "--- Initial Position (gnss) ---" << std::endl;
        std::cout << "initial_x: " << initial_x << std::endl;
        std::cout << "initial_y: " << initial_y << std::endl;
        std::cout << "initial_z: " << initial_z << std::endl;
        std::cout << "initial_roll: " << initial_roll << std::endl;
        std::cout << "initial_pitch: " << initial_pitch << std::endl;
        std::cout << "initial_yaw: " << initial_yaw << std::endl;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="5ee0baf96d7ec3795cefc7b8f53e0e34">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\map_tools\nodes\pcd_converter\csv2pcd.cpp" startLineNumber="15" endLineNumber="23"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_mobility\sample_mobility.cpp" startLineNumber="68" endLineNumber="76"/>
            <text>
<![CDATA[static std::vector<std::string> split(const std::string& input, char delimiter)
{
  std::istringstream stream(input);
  std::string field;
  std::vector<std::string> result;
  while (std::getline(stream, field, delimiter)) {
    result.push_back(field);
  }
  return result;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="41a071536f613b9746d957945b6b0f49">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\voxel_grid_covariance.h" startLineNumber="331" endLineNumber="342"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\voxel_grid_covariance.h" startLineNumber="358" endLineNumber="369"/>
            <text>
<![CDATA[        int idx = ijk0 * divb_mul_[0] + ijk1 * divb_mul_[1] + ijk2 * divb_mul_[2];

        // Find leaf associated with index
        typename std::map<size_t, Leaf>::iterator leaf_iter = leaves_.find (idx);
        if (leaf_iter != leaves_.end ())
        {
          // If such a leaf exists return the pointer to the leaf structure
          LeafConstPtr ret (&(leaf_iter->second));
          return ret;
        }
        else
          return NULL;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="b1d6e970f92b110e30af99846a2a9c7b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="383" endLineNumber="389"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="382" endLineNumber="388"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="381" endLineNumber="387"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="380" endLineNumber="386"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="80" endLineNumber="88"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="79" endLineNumber="87"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="78" endLineNumber="86"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="77" endLineNumber="85"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\camera_lidar2d_offline_calib.cpp" startLineNumber="63" endLineNumber="69"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="59" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="58" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="57" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="56" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="55" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="54" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="53" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="52" endLineNumber="58"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="51" endLineNumber="57"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="50" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="49" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="48" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="47" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="46" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="45" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="42" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="41" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="38" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="37" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="36" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="78" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="77" endLineNumber="83"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="76" endLineNumber="82"/>
            <text>
<![CDATA[double g_detection_range = 0;                   // if obstacle is in this range, stop
double g_deceleration_range = 1.8;              // if obstacle is in this range, decelerate
int g_threshold_points = 15;
double g_detection_height_top = 2.0;  // actually +2.0m
double g_detection_height_bottom = -2.0;
double g_others_distance = 8.0;            // meter: stopping distance from obstacles (using VSCAN)
double g_decel = 1.5;                      // (m/s) deceleration
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="c11402c51853c07ea153f7b696c52d62">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\voxel_grid.h" startLineNumber="179" endLineNumber="186"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\voxel_grid_covariance.h" startLineNumber="59" endLineNumber="66"/>
            <text>
<![CDATA[  template<typename PointT>
  class VoxelGridCovariance : public VoxelGrid<PointT>
  {
    protected:
      using VoxelGrid<PointT>::filter_name_;
      using VoxelGrid<PointT>::getClassName;
      using VoxelGrid<PointT>::input_;
      using VoxelGrid<PointT>::indices_;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="d31064dbf2349400409f0ab99aaab5ab">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\rcnn\rcnn_node.cpp" startLineNumber="46" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\ssd_node.cpp" startLineNumber="48" endLineNumber="59"/>
            <text>
<![CDATA[	ros::Subscriber subscriber_ssd_config_;
	ros::Publisher publisher_car_objects_;
	ros::Publisher publisher_person_objects_;
	ros::NodeHandle node_handle_;

	cv::Scalar pixel_mean_;

	//Caffe based Object Detection ConvNet
	SsdDetector* ssd_detector_;

	//The minimum score required to filter the detected objects by the ConvNet
	float score_threshold_;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="c9fc246f97a009f53c26ecd492ce8b63">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="621" endLineNumber="631"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="632" endLineNumber="642"/>
            <text>
<![CDATA[  is_current_state_subscribed_ = true;

  if(current_lane_idx_ == -1)
    initForLaneSelect();
  else
    processing();
}

void LaneSelectNode::callbackFromConfig(const runtime_manager::ConfigLaneSelectConstPtr &msg)
{
  distance_threshold_ = msg-> distance_threshold_neighbor_lanes;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="b6080265933c33f75bde718938d7b6da">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="168" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="310" endLineNumber="320"/>
            <text>
<![CDATA[    pcl::PointCloud<pcl::PointXYZ>::Ptr map_ptr(new pcl::PointCloud<pcl::PointXYZ>(map));
    // Setting point cloud to be aligned to.
    ndt.setInputTarget(map_ptr);

    // Setting NDT parameters to default values
    ndt.setMaximumIterations(max_iter);
    ndt.setResolution(ndt_res);
    ndt.setStepSize(step_size);
    ndt.setTransformationEpsilon(trans_eps);

    map_loaded = 1;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="d8f67a583ff307e24253505fdba652dc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\featurepyramid.cpp" startLineNumber="415" endLineNumber="423"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="799" endLineNumber="806"/>
            <text>
<![CDATA[static void ini_thread_data(thread_data *TD,FLOAT *IM,int *INSIZE,int sbin,int level)
{
	TD->IM       = IM;
	memcpy(TD->ISIZE, INSIZE, sizeof(int)*3);
	TD->FSIZE[0] = 0;
	TD->FSIZE[1] = 0;
	TD->sbin     = sbin;
	TD->F_C      = level;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="8b4e91121c13106c17c3501aad415565">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="300" endLineNumber="308"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="368" endLineNumber="376"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="402" endLineNumber="408"/>
            <text>
<![CDATA[	tf::TransformListener listener;
	tf::StampedTransform transform;
	try {
		ros::Time zero = ros::Time(0);
		listener.waitForTransform("map", "world", zero, ros::Duration(10));
		listener.lookupTransform("map", "world", zero, transform);
	} catch (tf::TransformException &ex) {
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="42998644509226e47b57bc48370a2764">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="57" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\src\__nodes\mt\TrackingThread.h" startLineNumber="46" endLineNumber="54"/>
            <text>
<![CDATA[	string identity;
	const int offsetKeyframeNum;

	const string parentFrame;
	const string targetFrame;

	SystemMT *sysParent;
	volatile bool doStop;
	thread *proc;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="6f8e892afa4a5cab5537fc67770ccea8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\get_boxes.cpp" startLineNumber="240" endLineNumber="246"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="388" endLineNumber="394"/>
            <text>
<![CDATA[	int **RF_size = MO->RF->root_size;
	int *rootsym = MO->RF->rootsym;
	int *part_sym = MO->PF->part_sym;
	int **part_size = MO->PF->part_size;
	FLOAT **rootfilter = MO->RF->rootfilter;
	FLOAT **partfilter=MO->PF->partfilter;
	int **psize = MO->MI->psize;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="ba39fd00de5c6460b1b9447bfcac33c0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\block_solver.h" startLineNumber="152" endLineNumber="161"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\block_solver.h" startLineNumber="151" endLineNumber="159"/>
            <text>
<![CDATA[      SparseBlockMatrix<PoseMatrixType>* _Hpp;
      SparseBlockMatrix<LandmarkMatrixType>* _Hll;
      SparseBlockMatrix<PoseLandmarkMatrixType>* _Hpl;

      SparseBlockMatrix<PoseMatrixType>* _Hschur;
      SparseBlockMatrixDiagonal<LandmarkMatrixType>* _DInvSchur;

      SparseBlockMatrixCCS<PoseLandmarkMatrixType>* _HplCCS;
      SparseBlockMatrixCCS<PoseMatrixType>* _HschurTransposedCCS;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="a80de8a186ba256ec5ddfcfa0cc50a03">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping_tku\ndt_mapping_tku.cpp" startLineNumber="44" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching_tku\ndt_matching_tku.cpp" startLineNumber="44" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler.h" startLineNumber="79" endLineNumber="86"/>
            <text>
<![CDATA[    float zf; // zoom fraction
    CameraSpec cameraspec;
    GLprecision last_z;
    float last_pos[2];
    GLprecision rot_center[3];
    
    GLprecision p[3];
    GLprecision Pw[3];
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="40c8ccf2ebec7b69ca1c5636eeb5f87b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\search_info_ros.cpp" startLineNumber="22" endLineNumber="33"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.cpp" startLineNumber="378" endLineNumber="389"/>
            <text>
<![CDATA[  tf::StampedTransform map2ogm_frame;
  try
  {
    tf_listener_.lookupTransform(map_frame, ogm_frame, ros::Time(0), map2ogm_frame);
  }
  catch (tf::TransformException ex)
  {
    ROS_ERROR("%s", ex.what());
    return;
  }

  tf::Transform map2ogm;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="1682ae7fa56465737364f7f22633fec5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\rosinterface\ROSInterface\rosinterface.cpp" startLineNumber="79" endLineNumber="85"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\rosinterface\ROSInterface\rosinterface.cpp" startLineNumber="179" endLineNumber="185"/>
            <text>
<![CDATA[    timer=new QTimer(this);
    timer->setInterval(QueryInterval);
    connect(timer,SIGNAL(timeout()),this,SLOT(receiveTFSlot()));
    connect(this,SIGNAL(startReceiveSignal()),timer,SLOT(start()));
    connect(this,SIGNAL(stopReceiveSignal()),timer,SLOT(stop()));
    connect(this,SIGNAL(resetQueryIntervalSignal(int)),timer,SLOT(start(int)));
    receiveflag=0;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="d1502ed318f31edf7ea0a915080fe857">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="33" endLineNumber="39"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="112" endLineNumber="118"/>
            <text>
<![CDATA[	FLOAT *C = args->C;
	FLOAT *F = args->F;
	FLOAT *T = args->T;
	int *A_dims = args->A_dims;
	int *B_dims = args->B_dims;
	int *C_dims = args->C_dims;
	int num_features = A_dims[2];
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="c0d7110e7cf9838c0d28c57708187f33">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\sparse_optimizer.cpp" startLineNumber="496" endLineNumber="503"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\sparse_optimizer.cpp" startLineNumber="506" endLineNumber="513"/>
            <text>
<![CDATA[  SparseOptimizer::EdgeContainer::const_iterator SparseOptimizer::findActiveEdge(const OptimizableGraph::Edge* e) const
  {
    EdgeContainer::const_iterator lower = lower_bound(_activeEdges.begin(), _activeEdges.end(), e, EdgeIDCompare());
    if (lower == _activeEdges.end())
      return _activeEdges.end();
    if ((*lower) == e)
      return lower;
    return _activeEdges.end();
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="bd9a9fd9f10db2a807b22baa444850a0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\selectionwidget.cpp" startLineNumber="358" endLineNumber="364"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\selectionwidget.cpp" startLineNumber="371" endLineNumber="377"/>
            <text>
<![CDATA[    pointsid=id;
    imagesize=imageSize;
    maxrange=maxRange;
    gridsize=gridSize;
    extracted=0;
    justshow=0;
    setMouseTracking(1);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="221b80a5c1692037aa78a247c249a376">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\src\voxel_grid.cpp" startLineNumber="71" endLineNumber="83"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\src\voxel_grid.cpp" startLineNumber="351" endLineNumber="364"/>
            <text>
<![CDATA[    for (size_t cp = 0; cp < nr_points; ++cp)
    {
      // Unoptimized memcpys: assume fields x, y, z are in random order
      memcpy (&pt[0], &input_->data[xyz_offset[0]], sizeof (float));
      memcpy (&pt[1], &input_->data[xyz_offset[1]], sizeof (float));
      memcpy (&pt[2], &input_->data[xyz_offset[2]], sizeof (float));

      // Check if the point is invalid
      if (!pcl_isfinite (pt[0]) || 
          !pcl_isfinite (pt[1]) || 
          !pcl_isfinite (pt[2]))
      {
        xyz_offset += input_->point_step;
        continue;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="38f1fa709503acd63f3d3e5a563cddcf">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="35" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="34" endLineNumber="40"/>
            <text>
<![CDATA[    private_nh.param("BEAMNUM", BEAMNUM, 1440);
    private_nh.param("STEP", STEP, 0.1);
    private_nh.param("MINFLOOR", MINFLOOR, -3.0);
    private_nh.param("MAXFLOOR", MAXFLOOR, -1.3);
    private_nh.param("MAXCEILING", MAXCEILING, 6.0);
    private_nh.param("MINCEILING", MINCEILING, -0.5);
    private_nh.param("ROADSLOPMINHEIGHT", ROADSLOPMINHEIGHT, 80.0);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="4981b3d859b8917b013776de88bc53a1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="527" endLineNumber="534"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="365" endLineNumber="372"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="597" endLineNumber="604"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_points_map_update\sample_points_map_update.cpp" startLineNumber="94" endLineNumber="101"/>
            <text>
<![CDATA[    ret[i].x_min = std::stod(tbl[i][1]);
    ret[i].y_min = std::stod(tbl[i][2]);
    ret[i].z_min = std::stod(tbl[i][3]);
    ret[i].x_max = std::stod(tbl[i][4]);
    ret[i].y_max = std::stod(tbl[i][5]);
    ret[i].z_max = std::stod(tbl[i][6]);
  }
  return ret;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="8bf4a48597f60135041314001ff0f903">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_sba.h" startLineNumber="39" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_seven_dof_expmap.h" startLineNumber="48" endLineNumber="56"/>
            <text>
<![CDATA[  class VertexSim3Expmap : public BaseVertex<7, Sim3>
  {
  public:
    EIGEN_MAKE_ALIGNED_OPERATOR_NEW
    VertexSim3Expmap();
    virtual bool read(std::istream& is);
    virtual bool write(std::ostream& os) const;

    virtual void setToOriginImpl() {
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="fe9358c0661e3a0406280802ce26f784">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="99" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="123" endLineNumber="129"/>
            <text>
<![CDATA[        , transformation_estimation_ ()
        , correspondence_estimation_ ()
        , correspondence_rejectors_ ()
        , target_cloud_updated_ (true)
        , source_cloud_updated_ (true)
        , force_no_recompute_ (false)
        , force_no_recompute_reciprocal_ (false)
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="e30985d5d822eb2abef2202a9a0771ca">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\structure.h" startLineNumber="44" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\point_types.h" startLineNumber="20" endLineNumber="32"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\image\image_io.cpp" startLineNumber="40" endLineNumber="51"/>
            <text>
<![CDATA[#ifdef HAVE_JPEG
#include <jpeglib.h>
#ifndef HAVE_PNG
// This should not be included when HAVE_PNG, as png.h includes its own.
#include <setjmp.h>
#endif // HAVE_PNG
#endif // HAVE_JPEG

#ifdef _WIN_
// Undef windows Macro polution from jpeglib.h
#undef LoadImage
#endif
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="5d5e21e1c745a61742e9b1638ca7df84">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="1007" endLineNumber="1017"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="1040" endLineNumber="1051"/>
            <text>
<![CDATA[    publish_marker(&marker, pub, rate);
  }


  // roadedge
  marker.type = visualization_msgs::Marker::LINE_STRIP;
  for (i=0; i<roadedges.size(); i++) {
    if (roadedges[i].id <= 0) {
      continue;
    }
    int lid = roadedges[i].lid;
    if(lines[lid].blid == 0) {
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="06ae193b056232f5e25881db46203a20">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="236" endLineNumber="245"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="243" endLineNumber="251"/>
            <text>
<![CDATA[	if (res != CUDA_SUCCESS) {
		printf("cuTexRefSetFlags(featp2_texref) failed: res = %d\n->%s\n", res, getCudaDrvErrorString(res));
		exit(1);
	}

	res = cuTexRefSetFlags(B_texref, CU_TRSF_NORMALIZED_COORDINATES);
	if (res != CUDA_SUCCESS) {
		printf("cuTexRefSetFlags(B_texref) failed: res = %d\n->%s\n", res, getCudaDrvErrorString(res));
		exit(1);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="fff4551eda2982ec1d92f9e62e883fab">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glpangoglu.h" startLineNumber="51" endLineNumber="83"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glpangoglu.h" startLineNumber="40" endLineNumber="72"/>
            <text>
<![CDATA[PANGOLIN_EXPORT
GLint glProject(
    float objx, float objy, float objz,
    const float modelMatrix[16],
    const float projMatrix[16],
    const GLint viewport[4],
    float* winx, float* winy, float* winz
);


/// Clone of gluUnProject
PANGOLIN_EXPORT
GLint glUnProject(
    float winx, float winy, float winz,
    const float modelMatrix[16],
    const float projMatrix[16],
    const GLint viewport[4],
    float* objx, float* objy, float* objz
);

/// Clone of gluProject
PANGOLIN_EXPORT
GLint glProject(
    double objx, double objy, double objz,
    const double modelMatrix[16],
    const double projMatrix[16],
    const GLint viewport[4],
    double* winx, double* winy, double* winz
);


/// Clone of gluUnProject
PANGOLIN_EXPORT
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="53ac097ecbead12275e78342e0f64c3e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="377" endLineNumber="387"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="390" endLineNumber="400"/>
            <text>
<![CDATA[	if (((now - current_time).toSec() * 1000) < update_rate)
		return;
	current_time = now;

	if (can_download)
		request_queue.enqueue(msg.pose.position);

	publish_pcd(create_pcd(msg.pose.position));
}

void publish_dragged_pcd(const geometry_msgs::PoseWithCovarianceStamped& msg)
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="61fea426a1a7d6c9c5fb678e84260a1d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1088" endLineNumber="1099"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1581" endLineNumber="1592"/>
            <text>
<![CDATA[    return 1;
}

bool CalibrateCameraLidarChessboardBase::saveCalibResult(cv::FileStorage &fs)
{
    CalibrateCameraChessboardBase::saveCalibResult(fs);

    QMessageBox::StandardButton button=QMessageBox::question(this,"Save Option","Save LIDAR Calibration Data?");
    if(button==QMessageBox::Yes)
    {
        int i,n=caliblidarspoints.size();
        for(i=0;i<n;i++)
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="252e7fe4066b7afe9dabcc985b2cf871">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2117" endLineNumber="2124"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2102" endLineNumber="2109"/>
            <text>
<![CDATA[  obj.flid4 = std::stoi(columns[12]);
  obj.clossid = std::stoi(columns[13]);
  obj.span = std::stod(columns[14]);
  obj.lcnt = std::stoi(columns[15]);
  obj.lno = std::stoi(columns[16]);
  if (n == 17)
  {
    obj.lanetype = 0;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="54dfa318c24ea10184e686af0b74bc96">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="1290" endLineNumber="1296"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="1312" endLineNumber="1318"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="1301" endLineNumber="1307"/>
            <text>
<![CDATA[        pangolin::json::value v1, v2;
        const char *s;
        string err;
        s = "{ \"b\": true, \"a\": [1,2,\"three\"], \"d\": 2 }";
        err = pangolin::json::parse(v1, s, s + strlen(s));
        s = "{ \"d\": 2.0, \"a\": [1,\"three\"], \"b\": true }";
        err = pangolin::json::parse(v2, s, s + strlen(s));
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="48b487b7158cbf23561c99e89db1c3cc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="1030" endLineNumber="1040"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="1059" endLineNumber="1069"/>
            <text>
<![CDATA[      marker.points.clear();
    }

    int pid = lines[lid].bpid;
    add_marker_points_pointclass(&marker, pointclasses[pid]);
    if(lines[lid].flid == 0) {
      pid = lines[lid].fpid;
      add_marker_points_pointclass(&marker, pointclasses[pid]);
    }

    publish_marker(&marker, pub, rate);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="971cd42c752163d8a168725e7e6fd669">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\common\common.cpp" startLineNumber="53" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\obstacle_detection.cpp" startLineNumber="76" endLineNumber="85"/>
            <text>
<![CDATA[static FLOAT *init_accumulated_score(IplImage *image, size_t& accumulated_size)
{
	size_t num = image->height * image->width;
	accumulated_size = num * sizeof(FLOAT);

	FLOAT *scores = (FLOAT *)calloc(num, sizeof(FLOAT));
	for(size_t i = 0; i < num; i++)
		scores[i] = -100.0;

	return scores;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="ac4fa1e2ad9f5c728fbbfd32bf8e3f3e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\dpm_sync_2.cpp" startLineNumber="35" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\kf_track\sync_track.cpp" startLineNumber="56" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\sync_obj_reproj.cpp" startLineNumber="56" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\range_fusion\sync_range_fusion.cpp" startLineNumber="56" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\lidar_tracker\nodes\obj_fusion\sync_obj_fusion.cpp" startLineNumber="56" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\sync_drivers.cpp" startLineNumber="47" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="34" endLineNumber="43"/>
            <text>
<![CDATA[ros::Publisher obj_label__pub;
ros::Publisher cluster_centroids__pub;
bool obj_pose_flag;

/* ----function---- */
double fabs_time_diff(std_msgs::Header *timespec1, std_msgs::Header *timespec2) {
    double time1 = (double)timespec1->stamp.sec + (double)timespec1->stamp.nsec/1000000000L;
    double time2 = (double)timespec2->stamp.sec + (double)timespec2->stamp.nsec/1000000000L;

    return fabs(time1 - time2);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="65b5fce1336d283b5d416a69efbc41c6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_toolkit\mainwindow.cpp" startLineNumber="89" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_toolkit\mainwindow.cpp" startLineNumber="103" endLineNumber="109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_toolkit\mainwindow.cpp" startLineNumber="75" endLineNumber="81"/>
            <text>
<![CDATA[        ui->tabWidget->addTab(calibration,CALIBCAMERA);
        connect(ui->grab,SIGNAL(clicked()),calibration,SLOT(grabCalibDataSlot()));
        connect(ui->remove,SIGNAL(clicked()),calibration,SLOT(removeCalibDataSlot()));
        connect(ui->calibrate,SIGNAL(clicked()),calibration,SLOT(calibrateSensorSlot()));
        connect(ui->load,SIGNAL(clicked()),calibration,SLOT(loadCalibResultSlot()));
        connect(ui->save,SIGNAL(clicked()),calibration,SLOT(saveCalibResultSlot()));
        connect(ui->refresh,SIGNAL(clicked()),calibration,SLOT(refreshParametersSlot()));
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="728594c860a1bbb475a43be28266e475">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="111" endLineNumber="117"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="110" endLineNumber="116"/>
            <text>
<![CDATA[	FLOAT *A = args->A;
	FLOAT *B = args->B;
	FLOAT *C = args->C;
	FLOAT *F = args->F;
	FLOAT *T = args->T;
	int *A_dims = args->A_dims;
	int *B_dims = args->B_dims;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="7694e4c590d089ca33e9331e6da23b32">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\polygon\packages\points2polygon\nodes\points2polygon\points2polygon.cpp" startLineNumber="121" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\polygon\packages\points2polygon\nodes\points2polygon\points2polygon.cpp" startLineNumber="120" endLineNumber="126"/>
            <text>
<![CDATA[	config_k_search = msg.k_search;
	config_search_radius = msg.search_radius;
	config_mu = msg.mu;
	config_maximum_nearest_neighbors = msg.maximum_nearest_neighbors;
	config_maximum_surface_angle = msg.maximum_surface_angle;
	config_minimum_angle = msg.minimum_angle;
	config_maximum_angle = msg.maximum_angle;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="4a42a63d3f6660bc9e321fd3983a8c4c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Frame.h" startLineNumber="176" endLineNumber="182"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\block_solver.h" startLineNumber="71" endLineNumber="78"/>
            <text>
<![CDATA[    typedef MatrixXd PoseLandmarkMatrixType;
    typedef VectorXd PoseVectorType;
    typedef VectorXd LandmarkVectorType;

    typedef SparseBlockMatrix<PoseMatrixType> PoseHessianType;
    typedef SparseBlockMatrix<LandmarkMatrixType> LandmarkHessianType;
    typedef SparseBlockMatrix<PoseLandmarkMatrixType> PoseLandmarkHessianType;
    typedef LinearSolver<PoseMatrixType> LinearSolverType;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="2aceb5c06b432cb331e2b49f688ce2f9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\opengl_render_state.h" startLineNumber="40" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\opengl_render_state.h" startLineNumber="37" endLineNumber="50"/>
            <text>
<![CDATA[#define USE_EIGEN
#endif

#ifdef USE_EIGEN
#include <Eigen/Eigen>
#endif

#ifdef HAVE_TOON
#include <cstring>
#include <TooN/TooN.h>
#include <TooN/se3.h>
#endif

#ifdef HAVE_OCULUS
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="1b7ed9c618fe3422904cd9841906cdbc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\opengl_render_state.h" startLineNumber="44" endLineNumber="57"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="60" endLineNumber="70"/>
            <text>
<![CDATA[  int linkid;
}WhiteLine;

typedef struct{
  int lid;
}Mark;

typedef struct{
  int did;
  double dist;
  int pid;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="d70a75220f6037e65f5b00fef64caad4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="494" endLineNumber="503"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="505" endLineNumber="514"/>
            <text>
<![CDATA[    reference_map_pub = nh.advertise<sensor_msgs::PointCloud2>("/reference_map", 1000);
    current_pose_pub = nh.advertise<geometry_msgs::PoseStamped>("/current_pose", 1000);

    ros::Subscriber param_sub = nh.subscribe("config/ndt_mapping", 10, param_callback);
    ros::Subscriber output_sub = nh.subscribe("config/ndt_mapping_output", 10, output_callback);
    ros::Subscriber points_sub = nh.subscribe("points_raw", 100000, points_callback);

    ros::spin();

    return 0;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="e12ba4ba8c61bdb4f2194f5a1814e11b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl_es_compat.h" startLineNumber="22" endLineNumber="28"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl_es_compat.h" startLineNumber="32" endLineNumber="38"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="382" endLineNumber="388"/>
            <text>
<![CDATA[   typedef unsigned char   stbtt_uint8;
   typedef signed   char   stbtt_int8;
   typedef unsigned short  stbtt_uint16;
   typedef signed   short  stbtt_int16;
   typedef unsigned int    stbtt_uint32;
   typedef signed   int    stbtt_int32;
   #endif
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="0bca532c9d52541d7b73749dc5ae9b52">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gl.h" startLineNumber="134" endLineNumber="145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gl.h" startLineNumber="111" endLineNumber="122"/>
            <text>
<![CDATA[    GLuint tid;
    GLint width;
    GLint height;
    
private:
    // Private copy constructor
    GlTexture(const GlTexture&) {}
};

struct PANGOLIN_EXPORT GlRenderBuffer
{
    GlRenderBuffer();
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="f1a984e5a327bc23cfada0c4f1ab2899">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_saver\waypoint_saver.cpp" startLineNumber="171" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="98" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="91" endLineNumber="97"/>
            <text>
<![CDATA[  Red_set.isUpdated  = false;
  Yellow_set.hue.center = 0;
  Yellow_set.hue.range  = 0;
  Yellow_set.sat.center = 0;
  Yellow_set.sat.range  = 0;
  Yellow_set.val.center = 0;
  Yellow_set.val.range  = 0;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="802eeef9a74dcfc6ed4778272ca15aac">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="75" endLineNumber="82"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="246" endLineNumber="254"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\hyper_graph.h" startLineNumber="65" endLineNumber="71"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\view.h" startLineNumber="41" endLineNumber="48"/>
            <text>
<![CDATA[enum Layout
{
    LayoutOverlay,
    LayoutVertical,
    LayoutHorizontal,
    LayoutEqual,
    LayoutEqualVertical,
    LayoutEqualHorizontal
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="221997c94fe3fa6fb6ce49b0ccb29903">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2image\points2image.cpp" startLineNumber="144" endLineNumber="155"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2image\points2image.cpp" startLineNumber="133" endLineNumber="144"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_viewer\points_image_viewer.cpp" startLineNumber="121" endLineNumber="129"/>
            <text>
<![CDATA[		points_topic = "points_image";
	}

	std::string image_topic;
	if (private_nh.getParam("image_raw_topic", image_topic)) {
		ROS_INFO("Setting image topic to %s", image_topic.c_str());
	} else {
		ROS_INFO("No image topic received, defaulting to image_raw, you can use _image_raw_topic:=YOUR_NODE");
		image_topic = "/image_raw";
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="6b4bd9566701101cf4be543e99ffcafd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\vscan_lidar_track\mainwindow.h" startLineNumber="1" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\mainwindow.h" startLineNumber="1" endLineNumber="14"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_toolkit\mainwindow.h" startLineNumber="1" endLineNumber="22"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.h" startLineNumber="1" endLineNumber="23"/>
            <text>
<![CDATA[#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include<QPainter>
#include<QImage>
#include<QTime>

#include<rosinterface.h>
#include<fastvirtualscan.h>
#include<sensor_msgs/LaserScan.h>

//#define DEBUG_GUI

namespace Ui {
class MainWindow;
}

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="4c2765efccd74fafbccd626f41c5bd13">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="640" endLineNumber="647"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_core.cpp" startLineNumber="166" endLineNumber="173"/>
            <text>
<![CDATA[void PurePursuitNode::callbackFromConfig(const runtime_manager::ConfigWaypointFollowerConstPtr &config)
{
  param_flag_ = config->param_flag;
  const_lookahead_distance_ = config->lookahead_distance;
  const_velocity_ = config->velocity;
  lookahead_distance_ratio_ = config->lookahead_ratio;
  minimum_lookahead_distance_ = config->minimum_lookahead_distance;
  is_config_set_ = true;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="9de2ab0b0c0c7e4629e039540b491b27">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_viz.cpp" startLineNumber="49" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_viz.cpp" startLineNumber="179" endLineNumber="185"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_viz.cpp" startLineNumber="201" endLineNumber="207"/>
            <text>
<![CDATA[  marker.scale.z = 1.0;
  marker.color.a = 0.1;
  marker.color.r = 1.0;
  marker.color.g = 0.0;
  marker.color.b = 0.0;
  marker.frame_locked = true;
  return marker;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="c708369336ae7a109aadd49e5f1ea7f4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\src\__nodes\ImageGrabber.h" startLineNumber="90" endLineNumber="97"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\src\__nodes\mt\DebugMT.h" startLineNumber="46" endLineNumber="53"/>
            <text>
<![CDATA[	image_transport::ImageTransport *imageTransport;
	image_transport::Publisher visualDebugView;
	ros::Publisher debugMsgPublisher;

	cv::Mat framebufferDebug;
	uint32_t lastKeyframeId;
	double cputimeDebug;
	double lastImageTimestamp;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="95cd776838a5960061b402af0f71e43f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="71" endLineNumber="79"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="75" endLineNumber="83"/>
            <text>
<![CDATA[  if (!private_nh.getParam("use_vscan_points", use_vscan_points_)) {
    ROS_INFO("use vscan points");
    use_vscan_points_ = true;
  }
  if (!private_nh.getParam("use_target_waypoint", use_target_waypoint_)) {
    ROS_INFO("don't use target_waypoint");
    use_target_waypoint_ = false;
  }
  if (!private_nh.getParam("map_resolution", map_resolution_)) {
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="21483a6a47137fc3918023a9ed151076">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="221" endLineNumber="231"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="229" endLineNumber="238"/>
            <text>
<![CDATA[	if (res != CUDA_SUCCESS) {
		printf("cuTexRefSetAddress(featp2_dev) failed: res = %d\n->%s\n", res, getCudaDrvErrorString(res));
		exit(1);
	}


	res = cuTexRefSetAddress(NULL, B_texref, B_dev[pt->pid],  pt->SUM_SIZE_B);
	if (res != CUDA_SUCCESS) {
		printf("cuTexRefSetAddress(B_dev) failed: res = %d\n->%s\n", res, getCudaDrvErrorString(res));
		exit(1);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="8495e6a033e267171a936d07158c2521">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\ORBextractor.h" startLineNumber="70" endLineNumber="82"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\ORBextractor.h" startLineNumber="67" endLineNumber="78"/>
            <text>
<![CDATA[        return scaleFactor;}

    std::vector<float> inline GetScaleFactors(){
        return mvScaleFactor;
    }

    std::vector<float> inline GetInverseScaleFactors(){
        return mvInvScaleFactor;
    }

    std::vector<float> inline GetScaleSigmaSquares(){
        return mvLevelSigma2;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="1d977687179fa0fb1d979ceaa8a1ed96">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\vscan_lidar_track\mainwindow.cpp" startLineNumber="5" endLineNumber="12"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\vscan_lidar_track\mainwindow.cpp" startLineNumber="142" endLineNumber="149"/>
            <text>
<![CDATA[UpdateTrackerView::UpdateTrackerView(QWidget *parent)
    : QGraphicsView(parent)
{
    scene=new QGraphicsScene;
    scene->setSceneRect(-5000,-5000,10000,10000);
    this->setScene(scene);
    sx=sy=15;
    this->scale(sx,sy);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="54237c9101bd242dbb4c69e65d163a35">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="107" endLineNumber="115"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\map_tools\nodes\pcd_arealist\pcd_arealist.cpp" startLineNumber="35" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_points_map_update\sample_points_map_update.cpp" startLineNumber="55" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="543" endLineNumber="563"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\plotter.h" startLineNumber="180" endLineNumber="188"/>
            <text>
<![CDATA[    ColourWheel colour_wheel;
    Colour colour_bg;
    Colour colour_tk;
    Colour colour_ax;

    GlSlProgram prog_lines;
    GlSlProgram prog_text;

    std::vector<PlotSeries> plotseries;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="e664be4efb3d0b3093951e89355aa3df">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="433" endLineNumber="440"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="447" endLineNumber="454"/>
            <text>
<![CDATA[        for (i2 = 0; i2 < n; i2++)
        {
          if (i2 == p)
            X2[i1][p] = X1[i1][p] * cs - X1[i1][q] * sn;
          else if (i2 == q)
            X2[i1][q] = X1[i1][q] * cs + X1[i1][p] * sn;
          else
            X2[i1][i2] = X1[i1][i2];
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="254819c26743f5dc246cc19b4dde3cc4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="745" endLineNumber="753"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1398" endLineNumber="1406"/>
            <text>
<![CDATA[    caliblidarspoints.erase(caliblidarspoints.begin()+id);

    QTableWidget * tmplidartable=(QTableWidget *)(caliblidarpointstab->widget(id));
    caliblidarpointstab->removeTab(id);
    delete tmplidartable;

    PointsExtractor * pointsextraction=(PointsExtractor *)(caliblidarsshow->widget(id));
    caliblidarsshow->removeTab(id);
    delete pointsextraction;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="a1eb84fc74439432738da39175342419">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_d_viewer\image_d_viewer.cpp" startLineNumber="248" endLineNumber="292"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\camera_lidar2d_offline_calib.cpp" startLineNumber="334" endLineNumber="343"/>
            <text>
<![CDATA[    cvWaitKey(2);
    cvReleaseImage (&image_lrf);
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "camera_lidar2d_offline_calib");
    ros::NodeHandle n;
    ros::NodeHandle private_nh("~");
    std::string image_topic_name;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="1d2b82232cf6beff1078bbd88aa8ce64">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="113" endLineNumber="121"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="174" endLineNumber="183"/>
            <text>
<![CDATA[	if(res != CUDA_SUCCESS){
		printf("cuMemcpyHtoD(B_dev) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
	}

	/* upload error condition to GPU */
	res = cuMemcpyHtoD(fconvs_error_array_dev[pt->pid], pt->error_array, pt->error_array_num*sizeof(int));
	if(res != CUDA_SUCCESS) {
		printf("cuMemcpyHtoD(part_error_array_dev) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="7c108378cc55cd5792a02358fe984ed0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_seven_dof_expmap.cpp" startLineNumber="98" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_seven_dof_expmap.cpp" startLineNumber="173" endLineNumber="182"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_seven_dof_expmap.cpp" startLineNumber="137" endLineNumber="146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.cpp" startLineNumber="80" endLineNumber="89"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.cpp" startLineNumber="243" endLineNumber="252"/>
            <text>
<![CDATA[  for (int i=0; i<2; i++)
    for (int j=i; j<2; j++) {
      is >> information()(i,j);
      if (i!=j)
        information()(j,i)=information()(i,j);
    }
  return true;
}

bool EdgeSE3ProjectXYZOnlyPose::write(std::ostream& os) const {
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="f40b0223e1e4dc26382052a560c27c6a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="196" endLineNumber="206"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="184" endLineNumber="193"/>
            <text>
<![CDATA[  double x;
  double y;
  double z;
}Point;

/*point*/
typedef struct postuer_type *PosturePtr;

typedef struct postuer_type{
  double x;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="4ce644386bbc07748f5519e1ee4e47b0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="811" endLineNumber="817"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="821" endLineNumber="827"/>
            <text>
<![CDATA[		int ***PIDX_array = (int ***)malloc((L_MAX-interval)*sizeof(int **));
		int **sub_dst_PIDX = (int **)malloc(NoC*(L_MAX-interval)*sizeof(int*));
		int *dst_PIDX;
		res = cuMemHostAlloc((void **)&dst_PIDX, tmp_array_size, CU_MEMHOSTALLOC_DEVICEMAP);
		if(res != CUDA_SUCCESS) {
			printf("cuMemHostAlloc(dst_PIDX) failed: res = %s\n", cuda_response_to_string(res));
			exit(1);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="7bd376641fcff2732743031538366021">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_viewer\points_image_viewer.cpp" startLineNumber="142" endLineNumber="152"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="375" endLineNumber="386"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_d_viewer\vscan_image_d_viewer.cpp" startLineNumber="262" endLineNumber="274"/>
            <text>
<![CDATA[	ros::Subscriber scriber_ped = n.subscribe(pedestrian_node, 1,
						ped_updater_callback);
	ros::Subscriber scriber_points = n.subscribe(points_node, 1,
						points_cb);

	cv::Mat grayscale(256,1,CV_8UC1);
	for(int i=0;i<256;i++)
	{
		grayscale.at<uchar>(i)=i;
	}
	cv::applyColorMap(grayscale,colormap,cv::COLORMAP_JET);

	ros::spin();
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="083a42d5396c4812045cb9b028a72dae">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="63" endLineNumber="73"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="183" endLineNumber="193"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="299" endLineNumber="309"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="129" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="241" endLineNumber="251"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\resizeimg_gpu.cpp" startLineNumber="115" endLineNumber="125"/>
            <text>
<![CDATA[    if (tW % thread_num_x != 0)
        block_num_x++;
    if (tH % thread_num_y != 0)
        block_num_y++;

    sharedMemBytes = 0;

    res = cuLaunchKernel(BilinearKernelTex32F_func[0], block_num_x, block_num_y,
            block_num_z, thread_num_x, thread_num_y, thread_num_z,
            sharedMemBytes, stream, kernel_arg, NULL);
    CUDA_CHECK(res, "cuLaunchKernel(BilinearKernelTex32F)");
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="011f4bf5416490173b5c292bda5b8e02">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\range.h" startLineNumber="245" endLineNumber="254"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\range.h" startLineNumber="244" endLineNumber="253"/>
            <text>
<![CDATA[    Range<T> x;
    Range<T> y;
};

typedef Range<int> Rangei;
typedef Range<float> Rangef;
typedef Range<double> Ranged;

typedef XYRange<int> XYRangei;
typedef XYRange<float> XYRangef;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="7b47aab7ffff0e016d39e509cca97f7d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="61" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="60" endLineNumber="66"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="59" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="58" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="57" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="56" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="55" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="54" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_uploader\pos_uploader.cpp" startLineNumber="70" endLineNumber="78"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="91" endLineNumber="97"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="90" endLineNumber="96"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="89" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="88" endLineNumber="94"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="87" endLineNumber="93"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="86" endLineNumber="92"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="85" endLineNumber="91"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="84" endLineNumber="90"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="83" endLineNumber="89"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="82" endLineNumber="88"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="81" endLineNumber="87"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="71" endLineNumber="77"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="70" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="69" endLineNumber="75"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="68" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="21" endLineNumber="27"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="20" endLineNumber="26"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="19" endLineNumber="25"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="18" endLineNumber="24"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="2" endLineNumber="23"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="1" endLineNumber="22"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="252" endLineNumber="272"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="249" endLineNumber="269"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="246" endLineNumber="265"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="243" endLineNumber="261"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="240" endLineNumber="258"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="222" endLineNumber="230"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="221" endLineNumber="228"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="220" endLineNumber="227"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="219" endLineNumber="226"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="217" endLineNumber="224"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="216" endLineNumber="223"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="215" endLineNumber="222"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="213" endLineNumber="221"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="211" endLineNumber="220"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="210" endLineNumber="219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\LocalMapping.h" startLineNumber="21" endLineNumber="40"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\LoopClosing.h" startLineNumber="21" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Map.h" startLineNumber="21" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\System.h" startLineNumber="47" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\System.h" startLineNumber="44" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="46" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="43" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="23" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="22" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Viewer.h" startLineNumber="23" endLineNumber="40"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Viewer.h" startLineNumber="22" endLineNumber="38"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="61" endLineNumber="70"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="60" endLineNumber="69"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="59" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="58" endLineNumber="67"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="57" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="56" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="53" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="51" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="50" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="49" endLineNumber="58"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="48" endLineNumber="57"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="44" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="43" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="42" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="41" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_levenberg.h" startLineNumber="72" endLineNumber="79"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\view.h" startLineNumber="201" endLineNumber="217"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\view.h" startLineNumber="200" endLineNumber="213"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\colour.h" startLineNumber="100" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\colour.h" startLineNumber="99" endLineNumber="107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glplatform.h" startLineNumber="37" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glplatform.h" startLineNumber="29" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glplatform.h" startLineNumber="28" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\trans.cpp" startLineNumber="35" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="14" endLineNumber="22"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="13" endLineNumber="20"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="12" endLineNumber="19"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="11" endLineNumber="18"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="10" endLineNumber="17"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="9" endLineNumber="15"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="8" endLineNumber="14"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="7" endLineNumber="13"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="6" endLineNumber="12"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="5" endLineNumber="11"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="4" endLineNumber="10"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\include\astar_util.h" startLineNumber="37" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="43" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="42" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="319" endLineNumber="325"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="318" endLineNumber="324"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="317" endLineNumber="323"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="316" endLineNumber="322"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="315" endLineNumber="321"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="314" endLineNumber="320"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="313" endLineNumber="319"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="312" endLineNumber="318"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="311" endLineNumber="317"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="310" endLineNumber="316"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_sender\tablet_sender.cpp" startLineNumber="89" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="53" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="52" endLineNumber="58"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="51" endLineNumber="57"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="108" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="107" endLineNumber="114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="106" endLineNumber="113"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="105" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="104" endLineNumber="111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="103" endLineNumber="109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="102" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="101" endLineNumber="107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="100" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="99" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="98" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="24" endLineNumber="32"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="23" endLineNumber="31"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="22" endLineNumber="29"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="21" endLineNumber="28"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="13" endLineNumber="21"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="12" endLineNumber="20"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="11" endLineNumber="18"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="10" endLineNumber="17"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\dpm_ocv\dpm_ocv.cpp" startLineNumber="44" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="506" endLineNumber="512"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="505" endLineNumber="511"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="504" endLineNumber="510"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="503" endLineNumber="509"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="344" endLineNumber="350"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="343" endLineNumber="349"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="342" endLineNumber="348"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="341" endLineNumber="347"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="569" endLineNumber="575"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="568" endLineNumber="574"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="567" endLineNumber="573"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="566" endLineNumber="572"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="565" endLineNumber="571"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="564" endLineNumber="570"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="563" endLineNumber="569"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="562" endLineNumber="568"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="561" endLineNumber="567"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="560" endLineNumber="566"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="559" endLineNumber="565"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="16" endLineNumber="22"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="15" endLineNumber="21"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="14" endLineNumber="20"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="13" endLineNumber="19"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\CalObjLoc.h" startLineNumber="73" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_rejection.h" startLineNumber="379" endLineNumber="397"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="47" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="46" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="45" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapPoint.h" startLineNumber="121" endLineNumber="129"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="136" endLineNumber="142"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="72" endLineNumber="79"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="71" endLineNumber="78"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="70" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="40" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="39" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="38" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="37" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="36" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="35" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="34" endLineNumber="40"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="33" endLineNumber="39"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="32" endLineNumber="38"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="31" endLineNumber="37"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="30" endLineNumber="36"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="29" endLineNumber="35"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="537" endLineNumber="560"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="532" endLineNumber="557"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="526" endLineNumber="554"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="521" endLineNumber="551"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="518" endLineNumber="546"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="515" endLineNumber="543"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="512" endLineNumber="537"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="509" endLineNumber="532"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="506" endLineNumber="526"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="501" endLineNumber="521"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="498" endLineNumber="518"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="495" endLineNumber="515"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="28" endLineNumber="34"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="27" endLineNumber="33"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="26" endLineNumber="32"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="100" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="98" endLineNumber="107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="97" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="95" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="93" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="92" endLineNumber="101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="91" endLineNumber="100"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="90" endLineNumber="98"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="89" endLineNumber="97"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="88" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\vectacam\nodes\vectacam\VectaCam.h" startLineNumber="56" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="242" endLineNumber="248"/>
            <text>
<![CDATA[  int layer;
  int x;
  int y;
  int z;
  int to_x;
  int to_y;
  double size;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="92713be0f68fa2b9e533808307cb4f89">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="1181" endLineNumber="1197"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="1172" endLineNumber="1193"/>
            <text>
<![CDATA[  MY_CUDA_CHECK(res, "cuTexRefSetAddress(feat_ptr_incrementer_dev)");

  /* texture memory configuration */
  // //  res = cuTexRefSetFlags(resized_image_texref, CU_TRSF_NORMALIZED_COORDINATES);
  // res = cuTexRefSetFlags(resized_image_texref, CU_TRSF_READ_AS_INTEGER);
  // MY_CUDA_CHECK(res, "cuTexRefSetFlags(resized_image_texref)");

  //  res = cuTexRefSetFlags(resized_image_size_texref, CU_TRSF_NORMALIZED_COORDINATES);
  res = cuTexRefSetFlags(resized_image_size_texref, CU_TRSF_READ_AS_INTEGER);
  MY_CUDA_CHECK(res, "cuTexRefSetFlags(resized_image_size_texref)");

  // //  res = cuTexRefSetFlags(image_idx_incrementer_texref, CU_TRSF_NORMALIZED_COORDINATES);
  // res = cuTexRefSetFlags(image_idx_incrementer_texref, CU_TRSF_READ_AS_INTEGER);
  // MY_CUDA_CHECK(res, "cuTexRefSetFlags(image_idx_incrementer_texref)");

  //  res = cuTexRefSetFlags(hist_ptr_incrementer_texref, CU_TRSF_NORMALIZED_COORDINATES);
  res = cuTexRefSetFlags(hist_ptr_incrementer_texref, CU_TRSF_READ_AS_INTEGER);
  MY_CUDA_CHECK(res, "cuTexRefSetFlags(hist_ptr_incrementer_texref)");

  //  res = cuTexRefSetFlags(norm_ptr_incrementer_texref, CU_TRSF_NORMALIZED_COORDINATES);
  res = cuTexRefSetFlags(norm_ptr_incrementer_texref, CU_TRSF_READ_AS_INTEGER);
  MY_CUDA_CHECK(res, "cuTexRefSetFlags(norm_ptr_incrementer_texref)");
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="0e9d51bc021627699d399e681b4dca05">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_d_viewer\vscan_image_d_viewer.cpp" startLineNumber="175" endLineNumber="190"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_uploader\obj_uploader.cpp" startLineNumber="186" endLineNumber="199"/>
            <text>
<![CDATA[static void car_locate_cb(const geometry_msgs::PoseArray& car_locate)
{
  car_position_array = car_locate;
}

static void pedestrian_locate_cb(const geometry_msgs::PoseArray& pedestrian_locate)
{
  pedestrian_position_array = pedestrian_locate;
}

static void ndt_pose_cb(const geometry_msgs::PoseStamped &pose)
{
  my_location = pose;
  is_subscribed_ndt_pose = true;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="c003406e266a61cf8eb2612a01a79428">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_driver\src\driver\driver.h" startLineNumber="15" endLineNumber="34"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\src\conversions\convert.h" startLineNumber="17" endLineNumber="35"/>
            <text>
<![CDATA[#ifndef _VELODYNE_POINTCLOUD_CONVERT_H_
#define _VELODYNE_POINTCLOUD_CONVERT_H_ 1

#include <ros/ros.h>

#include <sensor_msgs/PointCloud2.h>
#include <velodyne_pointcloud/rawdata.h>

#include <dynamic_reconfigure/server.h>
#include <velodyne_pointcloud/VelodyneConfigConfig.h>

namespace velodyne_pointcloud
{
  class Convert
  {
  public:

    Convert(ros::NodeHandle node, ros::NodeHandle private_nh);
    ~Convert() {}
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="23a8d056744c21243c02f68db9122e8c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_viz.cpp" startLineNumber="39" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_viz.cpp" startLineNumber="61" endLineNumber="67"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_trajectory_gen\lattice_trajectory_gen.cpp" startLineNumber="219" endLineNumber="225"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_viz.cpp" startLineNumber="156" endLineNumber="162"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_viz.cpp" startLineNumber="191" endLineNumber="197"/>
            <text>
<![CDATA[  visualization_msgs::Marker marker;
  marker.header.frame_id = MAP_FRAME;
  marker.header.stamp = ros::Time();
  marker.ns = "search_radius_marker";
  marker.id = 0;
  marker.type = visualization_msgs::Marker::SPHERE;
  marker.action = visualization_msgs::Marker::ADD;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="2402d0c8671bb9a57bec5d40987b9581">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="219" endLineNumber="226"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\resizeimg_gpu.cpp" startLineNumber="87" endLineNumber="94"/>
            <text>
<![CDATA[    int widthStepIn, widthStepOut;
    int thread_num_x, thread_num_y, thread_num_z;
    int block_num_x, block_num_y, block_num_z;
    int sharedMemBytes;
    CUresult res;

    W = img->width;
    H = img->height;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="edf188ed19502b601176654dceb9bca9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="356" endLineNumber="365"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="264" endLineNumber="272"/>
            <text>
<![CDATA[	if(res != CUDA_SUCCESS) {
		printf("cuLaunchKernel(calc_a_score) failed : res = %s\n", cuda_response_to_string(res));
		exit(1);
	}

	res = cuCtxSynchronize();
	if(res != CUDA_SUCCESS) {
		printf("cuCtxSynchronize(calc_a_score) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="c1e95731a61a926c296abef6e30f96ed">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\filter.h" startLineNumber="112" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\filter.h" startLineNumber="218" endLineNumber="233"/>
            <text>
<![CDATA[      virtual ~Filter () {}

      /** \brief Get the point indices being removed */
      inline IndicesConstPtr const
      getRemovedIndices ()
      {
        return (removed_indices_);
      }

      /** \brief Get the point indices being removed 
        * \param[out] pi the resultant point indices that have been removed
        */
      inline void
      getRemovedIndices (PointIndices &pi)
      {
        pi.indices = *removed_indices_;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="e83e57eff31381ec19af901e325b6a2b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="86" endLineNumber="93"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="141" endLineNumber="148"/>
            <text>
<![CDATA[                cloud2.width = points_size;
                cloud2.row_step = cloud2.point_step * cloud2.width;
                pubPc2.publish(cloud2);

                field = range_header.field;
                frame = range_header.frame;
                points_size = 0;
                cloud2.data.clear();
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="6af3d7b5cbcf8c25c63bd136c98a791b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="529" endLineNumber="535"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="528" endLineNumber="534"/>
            <text>
<![CDATA[        MAP('"', "\\\"");
        MAP('\\', "\\\\");
        MAP('/', "\\/");
        MAP('\b', "\\b");
        MAP('\f', "\\f");
        MAP('\n', "\\n");
        MAP('\r', "\\r");
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="8236d28732d7dedaab3e720c32eb17f5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\map_tools\nodes\pcd_binarizer\pcd_binarizer.cpp" startLineNumber="23" endLineNumber="31"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\map_tools\nodes\pcd_filter\pcd_filter.cpp" startLineNumber="26" endLineNumber="34"/>
            <text>
<![CDATA[  for(i = 3; i < argc; i++){
    // Loading input_cloud.
    std::string input = argv[i];

    if(point_type == "PointXYZ"){
      pcl::PointCloud<pcl::PointXYZ>::Ptr input_cloud (new pcl::PointCloud<pcl::PointXYZ>);
      if (pcl::io::loadPCDFile<pcl::PointXYZ> (input, *input_cloud) == -1){
        std::cout << "Couldn't find " << input << "." << std::endl;
        break;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="c2cb712be3bde3a19cd6b98eefb12d61">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\search_info_ros.h" startLineNumber="42" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\src\__nodes\mt\DebugMT.h" startLineNumber="47" endLineNumber="57"/>
            <text>
<![CDATA[	image_transport::Publisher visualDebugView;
	ros::Publisher debugMsgPublisher;

	cv::Mat framebufferDebug;
	uint32_t lastKeyframeId;
	double cputimeDebug;
	double lastImageTimestamp;

};

#endif /* _DEBUGMT_H_ */
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="8858e6e6e8c95c6ef67b8b2ccf768506">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="855" endLineNumber="864"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="863" endLineNumber="872"/>
            <text>
<![CDATA[   STBTT_UNICODE_EID_UNICODE_1_1    =1,
   STBTT_UNICODE_EID_ISO_10646      =2,
   STBTT_UNICODE_EID_UNICODE_2_0_BMP=3,
   STBTT_UNICODE_EID_UNICODE_2_0_FULL=4
};

enum { // encodingID for STBTT_PLATFORM_ID_MICROSOFT
   STBTT_MS_EID_SYMBOL        =0,
   STBTT_MS_EID_UNICODE_BMP   =1,
   STBTT_MS_EID_SHIFTJIS      =2,
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="a192d2157ba3b1b8c5cc371b7230c888">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="172" endLineNumber="181"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_viewer\points_image_viewer.cpp" startLineNumber="52" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_d_viewer\vscan_image_d_viewer.cpp" startLineNumber="142" endLineNumber="151"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_viewer\vscan_image_viewer.cpp" startLineNumber="51" endLineNumber="60"/>
            <text>
<![CDATA[static void show(void)
{
	if(!existImage || !existPoints){
		return;
	}
	const auto& encoding = sensor_msgs::image_encodings::BGR8;
	cv_bridge::CvImagePtr cv_image = cv_bridge::toCvCopy(image_msg, encoding);
	IplImage frame = cv_image->image;

	cv::Mat matImage(&frame, false);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="cd45852b280f5a001c2975e80b7f0622">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\LocalMapping.h" startLineNumber="80" endLineNumber="89"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="144" endLineNumber="158"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="67" endLineNumber="73"/>
            <text>
<![CDATA[signals:
    void calibDataGrabbedSignal();
    void calibDataGrabbedErrorSignal();
    void calibDataRemovedSignal();
    void calibDataRemovedErrorSignal();
    void sensorCalibratedSignal();
    void sensorCalibratedErrorSignal();
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="15388652fdf228a760516e347dea0165">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="322" endLineNumber="328"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="321" endLineNumber="327"/>
            <text>
<![CDATA[			tmp.color = kstates[i].color;
			tmp.id = kstates[i].id;
			tmp.score = kstates[i].score;
			tmp.lifespan = kstates[i].lifespan;
			tmp.real_data = kstates[i].real_data;
			tmp.range = kstates[i].range;
			tmp.min_height = kstates[i].min_height;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="9e5a357b5a4a935a31c588c05e395c79">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="55" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="121" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="175" endLineNumber="181"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="233" endLineNumber="239"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="291" endLineNumber="297"/>
            <text>
<![CDATA[    thread_num_x =
            (sizeX < std::sqrt(max_threads_num)) ? sizeX : std::sqrt(max_threads_num);
    thread_num_y =
            (sizeY < std::sqrt(max_threads_num)) ? sizeY : std::sqrt(max_threads_num);
    thread_num_z = 1;
    block_num_x = sizeX / thread_num_x;
    block_num_y = sizeY / thread_num_y;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="3d5bbb334c766aedeca0be73572e5ea3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="1212" endLineNumber="1224"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="1197" endLineNumber="1221"/>
            <text>
<![CDATA[  MY_CUDA_CHECK(res, "cuTexRefSetFlags(feat_ptr_incrementer_texref)");

// #ifdef USE_FLOAT_AS_DECIMAL
//   {
//     res = cuTexRefSetFormat(resized_image_texref, CU_AD_FORMAT_FLOAT, 1);
//     MY_CUDA_CHECK(res, "cuTexRefSetFormat(resized_image_texref)");
//   }
// #else
//   {
//     res = cuTexRefSetFormat(resized_image_texref, CU_AD_FORMAT_UNSIGNED_INT32, 2);
//     MY_CUDA_CHECK(res, "cuTexRefSetFormat(resized_image_texref)");
//   }
// #endif

  res = cuTexRefSetFormat(resized_image_size_texref, CU_AD_FORMAT_SIGNED_INT32, 1);
  MY_CUDA_CHECK(res, "cuTexRefSetFormat(resized_image_size_texref)");

  // res = cuTexRefSetFormat(image_idx_incrementer_texref, CU_AD_FORMAT_SIGNED_INT32, 1);
  // MY_CUDA_CHECK(res, "cuTexRefSetFormat(image_idx_incrementer_texref)");

  res = cuTexRefSetFormat(hist_ptr_incrementer_texref, CU_AD_FORMAT_UNSIGNED_INT32, 2);
  MY_CUDA_CHECK(res, "cuTexRefSetFormat(hist_ptr_incrementer_texref)");

  res = cuTexRefSetFormat(norm_ptr_incrementer_texref, CU_AD_FORMAT_UNSIGNED_INT32, 2);
  MY_CUDA_CHECK(res, "cuTexRefSetFormat(norm_ptr_incrementer_texref)");
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="db419ee47402b2c77c5e1eed8c7f61e7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\stuff\color_macros.h" startLineNumber="46" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\stuff\color_macros.h" startLineNumber="45" endLineNumber="51"/>
            <text>
<![CDATA[#define CL_BLACK(s)     "\033[30m" << s << "\033[0m"
#define CL_RED(s)       "\033[31m" << s << "\033[0m"
#define CL_GREEN(s)     "\033[32m" << s << "\033[0m"
#define CL_YELLOW(s)    "\033[33m" << s << "\033[0m"
#define CL_LIGHTBLUE(s) "\033[34m" << s << "\033[0m"
#define CL_MAGENTA(s)   "\033[35m" << s << "\033[0m"
#define CL_BLUE(s)      "\033[36m" << s << "\033[0m"
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="f4b515dc2e411fc8962bf9fe621d705d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\gnss\src\geo_pos_conv.cpp" startLineNumber="157" endLineNumber="163"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\gnss\src\geo_pos_conv.cpp" startLineNumber="156" endLineNumber="162"/>
            <text>
<![CDATA[	PB2 = (double) AW * (1.0 - pow(Pe,2)) * PB/-2.0;
	PB3 = (double) AW * (1.0 - pow(Pe,2)) * PC/4.0;
	PB4 = (double) AW * (1.0 - pow(Pe,2)) * PD/-6.0;
	PB5 = (double) AW * (1.0 - pow(Pe,2)) * PE/8.0;
	PB6 = (double) AW * (1.0 - pow(Pe,2)) * PF/-10.0;
	PB7 = (double) AW * (1.0 - pow(Pe,2)) * PG/12.0;
	PB8 = (double) AW * (1.0 - pow(Pe,2)) * PH/-14.0;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="575f6f1efd438fecaaf4837abcc2e6c5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="218" endLineNumber="226"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="224" endLineNumber="232"/>
            <text>
<![CDATA[			FLOAT dy2 = *(s+1) - *(s-1);
			FLOAT dx2 = *(s+dims[0]) - *(s-dims[0]);
			FLOAT v2  = dx2*dx2 + dy2*dy2;

			/* third color channel */
			s += dims[0]*dims[1];
			FLOAT dy3 = *(s+1) - *(s-1);
			FLOAT dx3 = *(s+dims[0]) - *(s-dims[0]);
			FLOAT v3  = dx3*dx3 + dy3*dy3;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="17b6bfc49c56c0cbd22dfa611d95d729">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.h" startLineNumber="349" endLineNumber="356"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\view.h" startLineNumber="202" endLineNumber="220"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="215" endLineNumber="233"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="44" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="25" endLineNumber="35"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="14" endLineNumber="24"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\vectacam\nodes\vectacam\VectaCam.h" startLineNumber="57" endLineNumber="63"/>
            <text>
<![CDATA[	long 	 		frame_counter_;
	long 	 		frame_number_;
	double 			fps_;
	int 			payload_offset_;
	int				image_width_;
	int				image_height_;
	char			*image_buffer_;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="3e5fd1e37337a89b2f3b170232eb524b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\for_use_GPU.h" startLineNumber="52" endLineNumber="58"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="183" endLineNumber="197"/>
            <text>
<![CDATA[    LoopClosing* mpLoopClosing;

    //ORB
    ORBextractor* mpORBextractorLeft, *mpORBextractorRight;
    ORBextractor* mpIniORBextractor;

    //BoW
    ORBVocabulary* mpORBVocabulary;
    KeyFrameDatabase* mpKeyFrameDB;

    // Initalization (only for monocular)
    Initializer* mpInitializer;

    //Local Map
    KeyFrame* mpReferenceKF;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="fab9a6050a61f81b1a099f1408d810c6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="31" endLineNumber="39"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="20" endLineNumber="28"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\resize_GPU.cpp" startLineNumber="43" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\common_2d_calib.h" startLineNumber="31" endLineNumber="40"/>
            <text>
<![CDATA[#ifndef _common_2d_common_
#define _common_2d_common_

#include <opencv/cv.h>

extern CvMat *v_g2l;
extern CvMat *v_g2c;
extern CvMat *v_rotation;
extern CvMat *m_rotation;
extern CvMat *m_intrinsic;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="1574b128c42edf95e9f7636de3b03603">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.h" startLineNumber="348" endLineNumber="354"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="241" endLineNumber="247"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\plotter.h" startLineNumber="178" endLineNumber="186"/>
            <text>
<![CDATA[    DataLog* log;

    ColourWheel colour_wheel;
    Colour colour_bg;
    Colour colour_tk;
    Colour colour_ax;

    GlSlProgram prog_lines;
    GlSlProgram prog_text;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="8649bad3b50b805d5535739deef5c36b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\lib\pos_db\SendData.cpp" startLineNumber="285" endLineNumber="291"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\lib\pos_db\SendData.cpp" startLineNumber="314" endLineNumber="320"/>
            <text>
<![CDATA[#else /* USE_LIBSSH2 */
		timeout.tv_sec = TIMEOUT_SEC; timeout.tv_usec = 0;
		FD_ZERO(&readfds);
		FD_ZERO(&writefds);
		FD_SET(sock, &readfds);
		select(maxfd+1, &readfds, NULL, NULL, &timeout);
		if(FD_ISSET(sock, &readfds)) {
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="90d311c2b0a995c4016ac1ef54c18927">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="412" endLineNumber="422"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="449" endLineNumber="459"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="486" endLineNumber="496"/>
            <text>
<![CDATA[    marker.points.push_back(em.pose.pose.position);

  return marker;
}

visualization_msgs::Marker LaneSelectNode::createChangeLaneMarker()
{
  visualization_msgs::Marker marker;
  marker.header.frame_id = "map";
  marker.header.stamp = ros::Time();
  marker.ns = "change_lane_marker";
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="3ebe270f9eb3169bd63a4e1229f3ea28">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="149" endLineNumber="159"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="39" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="109" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="100" endLineNumber="107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="88" endLineNumber="98"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="76" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="64" endLineNumber="73"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="51" endLineNumber="61"/>
            <text>
<![CDATA[#define MAP_CENTER_Z 33
#define MAP_ROTATION 0.0
//map size
#define MAP_X 2200
#define MAP_Y 2600
#define MAP_Z 200

#endif

//moriyama_map
#if 0
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="7d9e51ba427ab756d1eda79f18917104">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1145" endLineNumber="1152"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1150" endLineNumber="1157"/>
            <text>
<![CDATA[	free(dst_Ix);
	free(sub_dst_Ix);
	free(Ix_array);

	free(Iy_array[0][0][0]);
	free(dst_Iy);
	free(sub_dst_Iy);
	free(Iy_array);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="e385452f28b42595129223f8799fa909">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="269" endLineNumber="277"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="267" endLineNumber="275"/>
            <text>
<![CDATA[  dst[0][0] = (mat[1][1] * mat[2][2] - mat[1][2] * mat[2][1]) / d;
  dst[1][0] = -(mat[1][0] * mat[2][2] - mat[1][2] * mat[2][0]) / d;
  dst[2][0] = (mat[1][0] * mat[2][1] - mat[1][1] * mat[2][0]) / d;

  dst[0][1] = -(mat[0][1] * mat[2][2] - mat[0][2] * mat[2][1]) / d;
  dst[1][1] = (mat[0][0] * mat[2][2] - mat[0][2] * mat[2][0]) / d;
  dst[2][1] = -(mat[0][0] * mat[2][1] - mat[0][1] * mat[2][0]) / d;

  dst[0][2] = (mat[0][1] * mat[1][2] - mat[0][2] * mat[1][1]) / d;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="6dff534b990b2d46765bf97434d7a114">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_stop\lane_stop.cpp" startLineNumber="78" endLineNumber="90"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="382" endLineNumber="394"/>
            <text>
<![CDATA[void receiveAutoDetection(const runtime_manager::traffic_lightConstPtr& msg)
{
  if (!g_config_manual_detection)
    lightCallback(msg);
}

void receiveManualDetection(const runtime_manager::traffic_lightConstPtr& msg)
{
  if (g_config_manual_detection)
    lightCallback(msg);
}

void configParameter(const runtime_manager::ConfigLaneStopConstPtr& msg)
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="5271d4db4bf0a7a2b8e6c74833446b6d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="67" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\TrafficLightDetector.h" startLineNumber="38" endLineNumber="44"/>
            <text>
<![CDATA[enum daytime_Hue_threshold {
    DAYTIME_RED_LOWER    = 340,
    DAYTIME_RED_UPPER    = 50,
    DAYTIME_YELLOW_LOWER = 50,
    DAYTIME_YELLOW_UPPER = 70,
    DAYTIME_GREEN_LOWER  = 80,//120,//140,
    DAYTIME_GREEN_UPPER  = 190,//180,
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="436daf8941a483a1bb9bc17b290fbd69">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\device\display_glut.h" startLineNumber="64" endLineNumber="78"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\display.h" startLineNumber="95" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\display.h" startLineNumber="91" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\display.h" startLineNumber="87" endLineNumber="99"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\display.h" startLineNumber="83" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\display.h" startLineNumber="79" endLineNumber="91"/>
            <text>
<![CDATA[  PANGOLIN_EXPORT
  void FinishFrame();

  /// Request that the program exit.
  PANGOLIN_EXPORT
  void Quit();

  /// Returns true if user has requested to close OpenGL window.
  PANGOLIN_EXPORT
  bool ShouldQuit();

  /// Returns true if user has interacted with the window since this was last called.
  PANGOLIN_EXPORT
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="06e280560e8c68bab953f1a6af1477ed">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\icp.h" startLineNumber="182" endLineNumber="189"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\icp.h" startLineNumber="217" endLineNumber="224"/>
            <text>
<![CDATA[      virtual void
      setInputTarget (const PointCloudTargetConstPtr &cloud)
      {
        Registration<PointSource, PointTarget, Scalar>::setInputTarget (cloud);
        std::vector<pcl::PCLPointField> fields;
        pcl::getFields (*cloud, fields);
        target_has_normals_ = false;
        for (size_t i = 0; i < fields.size (); ++i)
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="b69fcb9691cd1b6f65448762107043c3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="824" endLineNumber="830"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="433" endLineNumber="445"/>
            <text>
<![CDATA[  ros::Subscriber light_sub = nh.subscribe("light_color", 10, receiveAutoDetection);
  ros::Subscriber light_managed_sub = nh.subscribe("light_color_managed", 10, receiveManualDetection);

  //subscribe global waypoints
  ros::Subscriber lane_array_sub = nh.subscribe("lane_waypoints_array", 10, laneArrayCallback);
  ros::Subscriber traffic_array_sub = nh.subscribe("traffic_waypoints_array", 10, laneArrayCallback);

  //subscribe local waypoints
  ros::Subscriber temporal_sub = nh.subscribe("temporal_waypoints", 10, temporalCallback);
  ros::Subscriber closest_sub = nh.subscribe("closest_waypoint", 10, closestCallback);

  //subscribe config
  ros::Subscriber config_sub = nh.subscribe("config/lane_stop", 10, configParameter);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="5d699757a7025d4bd3421ca0f86279da">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\tf_mapping\tf_mapping.cpp" startLineNumber="148" endLineNumber="155"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping_tku\ndt_mapping_tku.cpp" startLineNumber="1092" endLineNumber="1100"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching_tku\ndt_matching_tku.cpp" startLineNumber="1091" endLineNumber="1099"/>
            <text>
<![CDATA[  ros::init(argc, argv, "ndt_matching_tku");

  ros::NodeHandle nh;
  ros::NodeHandle private_nh("~");

  private_nh.getParam("downsampler", _downsampler);
  private_nh.getParam("init_x", g_ini_x);
  private_nh.getParam("init_y", g_ini_y);
  private_nh.getParam("init_z", g_ini_z);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="210ee48b3d52b0f74055acd6d12c37fe">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="504" endLineNumber="510"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="508" endLineNumber="514"/>
            <text>
<![CDATA[              case 2:           /* GREEN */
                ctx.greenCenter   = cv::Point( img_x, img_y );
                ctx.greenCenter3d = cv::Point3d( map_x, map_y, map_z );
                break;
              case 3:           /* YELLOW */
                ctx.yellowCenter   = cv::Point( img_x, img_y );
                ctx.yellowCenter3d = cv::Point3d( map_x, map_y, map_z );
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="69147ad25ff95af16c59fc866bb7e6df">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\opengl_render_state.cpp" startLineNumber="44" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\opengl_render_state.cpp" startLineNumber="54" endLineNumber="61"/>
            <text>
<![CDATA[OpenGlMatrix OpenGlMatrix::Scale(GLprecision x, GLprecision y, GLprecision z)
{
    OpenGlMatrix mat;
    mat.SetIdentity();
    mat(0, 0) = x;
    mat(1, 1) = y;
    mat(2, 2) = z;
    return mat;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="493f154299f05449dce091733b01c398">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="255" endLineNumber="274"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\FrameDrawer.h" startLineNumber="21" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\KeyFrame.h" startLineNumber="53" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\LocalMapping.h" startLineNumber="22" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\LoopClosing.h" startLineNumber="22" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\System.h" startLineNumber="48" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="47" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Viewer.h" startLineNumber="32" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_factory.h" startLineNumber="27" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gl.h" startLineNumber="197" endLineNumber="204"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\include\fastvirtualscan\fastvirtualscan.h" startLineNumber="11" endLineNumber="20"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="43" endLineNumber="54"/>
            <text>
<![CDATA[    float cos_rot_correction;              ///< cached cosine of rot_correction
    float sin_rot_correction;              ///< cached sine of rot_correction
    float cos_vert_correction;             ///< cached cosine of vert_correction
    float sin_vert_correction;             ///< cached sine of vert_correction

    int laser_ring;                        ///< ring number for this laser
  };

  /** \brief Calibration class storing entire configuration for the Velodyne */
  class Calibration {

  public:
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="befa3b90b54551b47b7ae5f0c59b398b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\integrated_viewer\node\image_viewer_plugin\draw_points.h" startLineNumber="1" endLineNumber="12"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\integrated_viewer\node\image_viewer_plugin\draw_rects.h" startLineNumber="1" endLineNumber="14"/>
            <text>
<![CDATA[#ifndef DRAW_RECTS_H
#define DRAW_RECTS_H

#include <opencv/cv.h>
#include <cv_tracker/image_obj.h>
#include <cv_tracker/image_obj_ranged.h>
#include <cv_tracker/image_obj_tracked.h>

namespace integrated_viewer {
  // helper class to draw detection result rectangle
  class DrawRects{
  public:
    explicit DrawRects(void);
    void DrawImageObj(const cv_tracker::image_obj::ConstPtr& rect_data, cv::Mat& image);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="2cbef3531f776ed105a22d996979e2d8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_points_map_update\sample_points_map_update.cpp" startLineNumber="74" endLineNumber="82"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="49" endLineNumber="57"/>
            <text>
<![CDATA[  while (std::getline(ifs, line)) {
    std::istringstream ss(line);

    std::vector<std::string> columns;
    std::string column;
    while (std::getline(ss, column, ',')) {
      columns.push_back(column);
    }
    tbl.push_back(columns);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="d85123c2df93222ddc60f86a8f6e8f63">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\selectionwidget.h" startLineNumber="70" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lane_detector\nodes\lane_detector\utils.h" startLineNumber="31" endLineNumber="38"/>
            <text>
<![CDATA[#pragma once

class ExpMovingAverage {
private:
        double alpha; // [0;1] less = more stable, more = less stable
	double oldValue;
        bool unset;
public:
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="e411d66d558c7623d89c3ab9fb5695f2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\dpm_ocv_gpu.cpp" startLineNumber="309" endLineNumber="315"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\dpm_ocv_gpu.cpp" startLineNumber="431" endLineNumber="438"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="742" endLineNumber="749"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\dpm_ocv_gpu.cpp" startLineNumber="360" endLineNumber="366"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\matching_gpu.cpp" startLineNumber="990" endLineNumber="997"/>
            <text>
<![CDATA[    free(tmpPoints);
    free(tmpScore);
    free(tmpKPoints);
    free(tmpPartsDisplacement);
    free(dev_score);
    free(disposition);

#ifdef PROFILE
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="2ab2450de92bf9482830e8382e645194">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="392" endLineNumber="399"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="391" endLineNumber="398"/>
            <text>
<![CDATA[	KF.statePre.at<float>(0) = object.rect.x;
	KF.statePre.at<float>(1) = object.rect.y;
	KF.statePre.at<float>(2) = object.rect.width;//XY Only
	KF.statePre.at<float>(3) = object.rect.height;//XY Only
	//init post
	KF.statePost.at<float>(0) = object.rect.x;
	KF.statePost.at<float>(1) = object.rect.y;
	KF.statePost.at<float>(2) = object.rect.width;//XY Only
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="2a718d051069fa022b87634dc583cf6f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="475" endLineNumber="487"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\klt_track\klt_track.cpp" startLineNumber="89" endLineNumber="101"/>
            <text>
<![CDATA[	void Sort(const std::vector<float> in_scores, std::vector<unsigned int>& in_out_indices)
	{
		for (unsigned int i = 0; i < in_scores.size(); i++)
			for (unsigned int j = i + 1; j < in_scores.size(); j++)
			{
				if (in_scores[in_out_indices[j]] > in_scores[in_out_indices[i]])
				{
					//float x_tmp = x[i];
					int index_tmp = in_out_indices[i];
					//x[i] = x[j];
					in_out_indices[i] = in_out_indices[j];
					//x[j] = x_tmp;
					in_out_indices[j] = index_tmp;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="aa5a89040298fc6a8af5f1a9884c1c4b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\plot\plotter.cpp" startLineNumber="90" endLineNumber="96"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="58" endLineNumber="64"/>
            <text>
<![CDATA[        #ifdef HAVE_GLES_2
            "precision mediump float;\n"
        #endif // HAVE_GLES_2
            "varying vec4 v_frontColor;\n"
            "varying vec2 v_texcoord;\n"
            "uniform sampler2D u_texture;\n"
            "uniform bool u_textureEnable;\n"
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="7f517c778e05a58f6fb7b92378dc6ec2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="328" endLineNumber="342"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="431" endLineNumber="458"/>
            <text>
<![CDATA[      inline const std::string&
      getClassName () const { return (reg_name_); }
        
      /** \brief Internal computation initalization. */
      bool
      initCompute ();

      /** \brief Internal computation when reciprocal lookup is needed */
      bool
      initComputeReciprocal ();

      /** \brief Add a new correspondence rejector to the list
        * \param[in] rejector the new correspondence rejector to concatenate
        *
        * Code example:
        *
        * \code
        * CorrespondenceRejectorDistance rej;
        * rej.setInputCloud<PointXYZ> (keypoints_src);
        * rej.setInputTarget<PointXYZ> (keypoints_tgt);
        * rej.setMaximumDistance (1);
        * rej.setInputCorrespondences (all_correspondences);
        * 
        * // or...
        *
        * \endcode
        */
      inline void
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="93d4473672919289c98f1e827bbb563e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="238" endLineNumber="244"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="161" endLineNumber="167"/>
            <text>
<![CDATA[		&numpart_dev[pt->pid],
		(void*)&(pt->NoC),
		(void*)&(pt->max_numpart),
		(void*)&(pt->interval),
		(void*)&(pt->L_MAX),
		(void*)&(pt->pid),
		(void*)&(device_num)
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="c45f531322d131c87bcde716bd24c90b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="385" endLineNumber="391"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="449" endLineNumber="455"/>
            <text>
<![CDATA[	int C_dims0 = 0;
	int C_dims1 = 0;
	int C_x = 0;
	size_t x_size = 0;
	int error_flag = 0;
	unsigned long long int pointer_C = (unsigned long long int)pt->dst_C;
	unsigned long long int root_pointer_dev = (unsigned long long int)fconvs_C_dev[pt->pid];
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="193e4bf6d6977af519d42e0a24b46d3f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_mapping\orb_mapping.cpp" startLineNumber="51" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_matching\orb_matching.cpp" startLineNumber="51" endLineNumber="61"/>
            <text>
<![CDATA[	    if ((int)SLAMSystem.fsSettings["Camera.compressed"]==0) {
	    	th = image_transport::TransportHints ("raw");
	    }
	    else if ((int)SLAMSystem.fsSettings["Camera.compressed"]==1) {
	    	th = image_transport::TransportHints ("compressed");
	    }
		imageBuf = new image_transport::ImageTransport(rosnode);

		// Result Publishers
		string poseTopic;
		rosnode.getParam("pose_topic", poseTopic);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="d7000abc9c9ff5ebcadf7c3ba40e0f81">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\TemplatedVocabulary.h" startLineNumber="1068" endLineNumber="1081"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\TemplatedVocabulary.h" startLineNumber="1131" endLineNumber="1144"/>
            <text>
<![CDATA[  fv.clear();
  
  if(empty()) // safe for subclasses
  {
    return;
  }
  
  // normalize 
  LNorm norm;
  bool must = m_scoring_object->mustNormalize(norm);
  
  typename vector<TDescriptor>::const_iterator fit;
  
  if(m_weighting == TF || m_weighting == TF_IDF)
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="adc748ef476b99dad78abb635c5f8567">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\featurepyramid.cpp" startLineNumber="430" endLineNumber="436"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="845" endLineNumber="852"/>
            <text>
<![CDATA[  const int   max_scale = MI->max_scale;
  const int   interval  = MI->interval;
  const int   sbin      = MI->sbin;                     // for part filter
  const int   sbin2     = (int)floor((double)sbin/2.0); // for root filter
  const int   LEN       = max_scale + interval;
  const FLOAT sc        = pow(2, (1.0/(double)interval));

  int org_image_size[3]  = {Image->height, Image->width, Image->nChannels}; // original image size // (鍏僆NSIZE)
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="7f9fed3545a90f387ffff320174eb35f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="409" endLineNumber="416"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1212" endLineNumber="1219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1693" endLineNumber="1700"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="539" endLineNumber="546"/>
            <text>
<![CDATA[    if(tmpimage.type()==CV_8UC3)
    {
        QImage img(tmpimage.data, tmpimage.cols, tmpimage.rows, tmpimage.step, QImage::Format_RGB888);
        img=img.rgbSwapped();
        QLabel * tmpcalibimageshow=new QLabel;
        tmpcalibimageshow->setPixmap(QPixmap::fromImage(img));
        QScrollArea * scrollarea=new QScrollArea;
        scrollarea->setWidget(tmpcalibimageshow);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="79577bf4bf8b089df7019ae71dd4c4dd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="119" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="125" endLineNumber="133"/>
            <text>
<![CDATA[	if(res != CUDA_SUCCESS) {
		printf("cuMemcpyHtoD(PIDX_array) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
	}

	res = cuMemcpyHtoD(DID_4_array_dev[pt->pid], pt->dst_DID_4, pt->tmp_array_size);
	if(res != CUDA_SUCCESS) {
		printf("cuMemcpyHtoD(DID_4__array) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="c67c0f8292c811cdb1b992d0825e0cf7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="223" endLineNumber="233"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="227" endLineNumber="237"/>
            <text>
<![CDATA[    map += *transformed_scan_ptr;
    initial_scan_loaded = 1;
  }

  // Apply voxelgrid filter
  pcl::VoxelGrid<pcl::PointXYZI> voxel_grid_filter;
  voxel_grid_filter.setLeafSize(voxel_leaf_size, voxel_leaf_size, voxel_leaf_size);
  voxel_grid_filter.setInputCloud(scan_ptr);
  voxel_grid_filter.filter(*filtered_scan_ptr);

  pcl::PointCloud<pcl::PointXYZI>::Ptr map_ptr(new pcl::PointCloud<pcl::PointXYZI>(map));
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="4570976ea941f04b8eb7dd465bf62d1f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\resize_GPU.cpp" startLineNumber="89" endLineNumber="98"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\featurepyramid.cpp" startLineNumber="392" endLineNumber="400"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="748" endLineNumber="756"/>
            <text>
<![CDATA[			int pp = WS*y + XT;
			*(B++) = (FLOAT)(unsigned char)IDATA[pp];	//B
			pp++;
			*(G++) = (FLOAT)(unsigned char)IDATA[pp];	//G
			pp++;
			*(R++) = (FLOAT)(unsigned char)IDATA[pp];	//R
		}
	}
	return(Output);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="3bc15288ca3086d27f905b9a70d18690">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="39" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\resizeimg_gpu.cpp" startLineNumber="88" endLineNumber="96"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="162" endLineNumber="169"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="278" endLineNumber="285"/>
            <text>
<![CDATA[    int thread_num_x, thread_num_y, thread_num_z;
    int block_num_x, block_num_y, block_num_z;
    int sharedMemBytes;
    CUresult res;

    sizeX = dev_map_in->sizeX;
    sizeY = dev_map_in->sizeY;
    p = dev_map_in->numFeatures;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="c9086351ffbd905364e97962072cabc5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="58" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glplatform.h" startLineNumber="47" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="437" endLineNumber="445"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\display_internal.h" startLineNumber="28" endLineNumber="49"/>
            <text>
<![CDATA[#ifndef PANGOLIN_DISPLAY_INTERNAL_H
#define PANGOLIN_DISPLAY_INTERNAL_H

#include <pangolin/platform.h>

#ifdef HAVE_PYTHON
#include <pangolin/console/ConsoleView.h>
#endif // HAVE_PYTHON

#include <pangolin/display/view.h>
#include <pangolin/compat/function.h>
#include <pangolin/display/user_app.h>

#include <map>
#include <queue>

#ifdef BUILD_PANGOLIN_VIDEO
#include <pangolin/video/video_output.h>
#endif // BUILD_PANGOLIN_VIDEO


namespace pangolin
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="3504fad26be10f970d72537911cae781">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\cvmat_serialization.h" startLineNumber="64" endLineNumber="70"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\cvmat_serialization.h" startLineNumber="78" endLineNumber="84"/>
            <text>
<![CDATA[			ar & kx;
			ar & ky;
			ar & kp.size;
			ar & kp.angle;
			ar & kp.response;
			ar & kp.octave;
			ar & kp.class_id;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="0fcfeece82fa5aacfe7d1df07c1e3187">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2image\points2image.cpp" startLineNumber="148" endLineNumber="159"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\range_fusion\range_fusion.cpp" startLineNumber="119" endLineNumber="132"/>
            <text>
<![CDATA[	if (private_nh.getParam("points_node", points_topic))
	{
		ROS_INFO("Setting points node to %s", points_topic.c_str());
	}
	else
	{
		ROS_INFO("No points node received, defaulting to vscan_image, you can use _points_node:=YOUR_TOPIC");
		points_topic = "/vscan_image";
	}

//	ros::Subscriber image_obj_sub = n.subscribe("/obj_car/image_obj", 1, DetectedObjectsCallback);
	ros::Subscriber image_obj_sub = n.subscribe(image_topic, 1, DetectedObjectsCallback);
	//ros::Subscriber scan_image_sub = n.subscribe("scan_image", 1, ScanImageCallback);
	ros::Subscriber points_image_sub =n.subscribe(points_topic, 1, PointsImageCallback);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="f8911c5df86fd1741ecf87603638c333">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\lib\map_file\get_file.cpp" startLineNumber="93" endLineNumber="99"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\lib\map_file\get_file.cpp" startLineNumber="103" endLineNumber="109"/>
            <text>
<![CDATA[	if (res != CURLE_OK) {
		std::cerr << "curl_easy_getinfo failed: " <<
			curl_easy_strerror(res) << std::endl;
		curl_easy_cleanup(curl);
		ofs.close();
		unlink(filepath.c_str());
		return -4;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="0800ad9bdc0e19e8d9d4ffc2743cb353">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="79" endLineNumber="89"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_d_viewer\scan_image_d_viewer.cpp" startLineNumber="149" endLineNumber="161"/>
            <text>
<![CDATA[static void drawRects(IplImage *Image,
                      std::vector<cv_tracker::image_rect_ranged> objects,
                      CvScalar color,
                      int threshold_height)
{
    unsigned int object_num = objects.size();
    for(unsigned int i = 0; i < object_num; i++)
    {
        if (objects.at(i).rect.y > threshold_height && !isNearlyNODATA(objects.at(i).range)) // temporal way to avoid drawing detections in the sky
        {
            CvPoint p1=cvPoint(objects.at(i).rect.x, objects.at(i).rect.y);
            CvPoint p2=cvPoint(objects.at(i).rect.x + objects.at(i).rect.width, objects.at(i).rect.y + objects.at(i).rect.height);
            cvRectangle(Image,p1,p2,color,OBJ_RECT_THICKNESS);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="f9319ec219fa21fff396e28885594a63">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\libvelocity_set.h" startLineNumber="39" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\libvelocity_set.h" startLineNumber="41" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\CalObjLoc.h" startLineNumber="72" endLineNumber="80"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_rejection.h" startLineNumber="377" endLineNumber="394"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapDrawer.h" startLineNumber="48" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="43" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\include\fastvirtualscan\fastvirtualscan.h" startLineNumber="22" endLineNumber="28"/>
            <text>
<![CDATA[public:
    int beamnum;
    double step;
    double minfloor;
    double maxceiling;
    double rotation;
    double minrange;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="df8882e5b1cedd30f2cc7dce3959e7c8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="823" endLineNumber="830"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\tracking.cpp" startLineNumber="29" endLineNumber="36"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\tracking.cpp" startLineNumber="27" endLineNumber="33"/>
            <text>
<![CDATA[		result->point = nullptr;
		result->type = nullptr;
		result->score = nullptr;
		result->scale = nullptr;
		result->IM = nullptr;
		result->OR_point = nullptr;
	} else {
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="868fa4eb2be9aff2a66ff83bf92a76e3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\wf_simulator\wf_simulator.cpp" startLineNumber="244" endLineNumber="253"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\model_publisher\nodes\model_publisher.cpp" startLineNumber="7" endLineNumber="15"/>
            <text>
<![CDATA[int main(int argc, char **argv)
{
  ros::init(argc, argv, "mode_publisher") ;
  ros::NodeHandle nh;
  ros::NodeHandle private_nh("~");

  std::string base_frame;
  private_nh.getParam("base_frame", base_frame);
  ROS_INFO_STREAM("base_frame : " << base_frame);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="4cc7fbef62c605b4a3eba200fdb8f9e1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_saver\waypoint_saver.cpp" startLineNumber="174" endLineNumber="180"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="141" endLineNumber="147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_mobility\sample_mobility.cpp" startLineNumber="98" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="754" endLineNumber="760"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_trajectory_gen\lattice_trajectory_gen.cpp" startLineNumber="228" endLineNumber="234"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_viz.cpp" startLineNumber="47" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\model_publisher\nodes\model_publisher.cpp" startLineNumber="67" endLineNumber="73"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_downloader\pos_downloader.cpp" startLineNumber="158" endLineNumber="164"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_downloader\pos_downloader.cpp" startLineNumber="228" endLineNumber="234"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set.cpp" startLineNumber="143" endLineNumber="149"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="475" endLineNumber="481"/>
            <text>
<![CDATA[  stop_line.scale.x = 0.1;
  stop_line.scale.y = 15.0;
  stop_line.scale.z = 2.0;
  stop_line.color.a = 0.3;
  stop_line.color.r = 1.0;
  stop_line.color.g = 0.0;
  stop_line.color.b = 0.0;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="e75598d6ea2db85c1f8f349ccebc33b8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_d_viewer\scan_image_d_viewer.cpp" startLineNumber="255" endLineNumber="264"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_viewer\scan_image_viewer.cpp" startLineNumber="112" endLineNumber="121"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_viewer\points_image_viewer.cpp" startLineNumber="109" endLineNumber="119"/>
            <text>
<![CDATA[	existPoints = true;
	show();
}

int main(int argc, char **argv)
{
	ros::init(argc, argv, "points_image_viewer");
	ros::NodeHandle n;
	ros::NodeHandle private_nh("~");

	std::string points_topic;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="b07e07f1125ec9d19b2504a5b7f5f4a9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\can\packages\kvaser\nodes\can_draw\can_draw.cpp" startLineNumber="111" endLineNumber="117"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="207" endLineNumber="213"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="195" endLineNumber="201"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="183" endLineNumber="189"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="171" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="159" endLineNumber="165"/>
            <text>
<![CDATA[	waypoint_marker.id = 0;
	waypoint_marker.type = visualization_msgs::Marker::SPHERE_LIST;
	waypoint_marker.scale.x = 0.2;
	waypoint_marker.scale.y = 0.2;
	waypoint_marker.color.r = 1;
	waypoint_marker.color.g = 1;
	waypoint_marker.color.b = 0;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="40a151f93f830b13230597682c4d6c3f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\factory.h" startLineNumber="123" endLineNumber="133"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\robust_kernel_factory.h" startLineNumber="107" endLineNumber="117"/>
            <text>
<![CDATA[      CreatorMap _creator;     ///< look-up map for the existing creators

    private:
      static RobustKernelFactory* factoryInstance;
  };

  template<typename T>
  class RegisterRobustKernelProxy
  {
    public:
      RegisterRobustKernelProxy(const std::string& name) : _name(name)
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="2a4221f4a1e6770380a481d84194ad6b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\libvelocity_set.h" startLineNumber="47" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\libvelocity_set.h" startLineNumber="49" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.h" startLineNumber="103" endLineNumber="111"/>
            <text>
<![CDATA[  geometry_msgs::PoseStamped current_pose_;
  geometry_msgs::TwistStamped current_velocity_;
  std::string current_state_;

  // callbacks
  void callbackFromLaneArray(const waypoint_follower::LaneArrayConstPtr &msg);
  void callbackFromPoseStamped(const geometry_msgs::PoseStampedConstPtr &msg);
  void callbackFromTwistStamped(const geometry_msgs::TwistStampedConstPtr &msg);
  void callbackFromState(const std_msgs::StringConstPtr &msg);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="5bb757273c87e48a7e1306484676d0ae">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="66" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="194" endLineNumber="202"/>
            <text>
<![CDATA[  double y;
  double z;
  double theta;
  double theta2;
  double theta3;
}Posture;

/*Normal Distribution  data type*/
typedef struct Normaldistribution *NDPtr;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="8492cb65c5ec1e3e8f242e7187d6595f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\load_model.cpp" startLineNumber="285" endLineNumber="294"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\load_model.cpp" startLineNumber="204" endLineNumber="211"/>
            <text>
<![CDATA[	FLOAT t1,t2,t3;
	fscanf(file,FLOAT_SCAN_FMT,&t1);
	PF->NoP=(int)t1;						//number of part filter

	PF->part_size=(int**)malloc(sizeof(int*)*PF->NoP);		//size of part filter
	PF->partfilter=(FLOAT**)malloc(sizeof(FLOAT*)*PF->NoP);	//weight of part filter
	PF->part_partner=(int*)malloc(sizeof(int)*PF->NoP);		//symmetric information of part
	PF->part_sym=(int*)malloc(sizeof(int)*PF->NoP);		//symmetric information of part
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="3ae04d84800fb8ebfdf243afc6a549dd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="96" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_downloader\pos_downloader.cpp" startLineNumber="116" endLineNumber="125"/>
            <text>
<![CDATA[static std::vector<std::string> split(const string& input, char delimiter)
{
    std::istringstream stream(input);

    std::string field;
    std::vector<std::string> result;
    while (std::getline(stream, field, delimiter)) {
        result.push_back(field);
    }
    return result;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="913bb7813af7df20f558e821c6978c61">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\stuff\property.h" startLineNumber="97" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\stuff\property.h" startLineNumber="105" endLineNumber="117"/>
            <text>
<![CDATA[      template <typename P> 
      const P* getProperty(const std::string& name_) const
      {
        PropertyMapConstIterator it=find(name_);
        if (it==end())
          return 0;
        return dynamic_cast<P*>(it->second);
      }

      /**
       * create a property and insert it
       */
      template <typename P> 
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="eeda1d8915ca40cff3605a51c092feee">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lane_detector\nodes\lane_detector\lane_detector.cpp" startLineNumber="214" endLineNumber="224"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lane_detector\nodes\lane_detector\lane_detector.cpp" startLineNumber="233" endLineNumber="243"/>
            <text>
<![CDATA[      if (hasVertResponse(edges, xx, y, bmin.y, bmax.y))
        {
          left++;
          gap = maxHorzGap;     // reset
        }
      else
        {
          gap--;
          if (gap <= 0)
            {
              break;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="b7b0e187feb1132e154a9016164603c0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_viewer\image_viewer.cpp" startLineNumber="46" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_viewer\image_viewer.cpp" startLineNumber="55" endLineNumber="63"/>
            <text>
<![CDATA[static std::vector<cv::Rect> peds;
static std::vector<float> peds_score;
//KF related
static std::vector<cv::Rect> peds_tracked;
static std::vector<int> peds_tracked_lifespan;
static std::vector<int> peds_tracked_id;
static std::vector<int> peds_tracked_real_data;

static std::vector<cv::Scalar> _colors;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="18f58598f143b9e0be66a307b1237183">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="62" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Viewer.h" startLineNumber="54" endLineNumber="66"/>
            <text>
<![CDATA[    void RequestFinish();

    void RequestStop();

    bool isFinished();

    bool isStopped();

    void Release();

private:

    bool Stop();
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="b3dd409100c5b08b1d59d0719c6cd99e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="72" endLineNumber="78"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\vscan_lidar_track\mainwindow.h" startLineNumber="118" endLineNumber="124"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Viewer.h" startLineNumber="52" endLineNumber="64"/>
            <text>
<![CDATA[    void Run();

    void RequestFinish();

    void RequestStop();

    bool isFinished();

    bool isStopped();

    void Release();

private:
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="a3da5d8e4cfd5767878947c6ee248fa5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\ScoringObject.cpp" startLineNumber="249" endLineNumber="266"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\ScoringObject.cpp" startLineNumber="294" endLineNumber="311"/>
            <text>
<![CDATA[      ++v1_it;
      ++v2_it;
    }
    else if(v1_it->first < v2_it->first)
    {
      // move v1 forward
      v1_it = v1.lower_bound(v2_it->first);
      // v1_it = (first element >= v2_it.id)
    }
    else
    {
      // move v2 forward
      v2_it = v2.lower_bound(v1_it->first);
      // v2_it = (first element >= v1_it.id)
    }
  }

  return score; // cannot scale
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="06e489926dc5bb127e97eb7a3835ab53">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="209" endLineNumber="216"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="271" endLineNumber="278"/>
            <text>
<![CDATA[    double calibrationerror;
    QLabel * calibrationerrorshow;

    QSplitter * lidarsplitter;
    QTabWidget * lidartab;
    QTime lidartimestamp;
    sensor_msgs::LaserScanConstPtr caliblidar;
    PointsExtractor * caliblidarviewer;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="55bf9933833ecf13f3443df2a421b8c5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_viewer\image_viewer.cpp" startLineNumber="289" endLineNumber="298"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="362" endLineNumber="371"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_d_viewer\vscan_image_d_viewer.cpp" startLineNumber="246" endLineNumber="258"/>
            <text>
<![CDATA[	if (private_nh.getParam("points_node", points_node))
	{
		ROS_INFO("Setting pedestrian positions node to %s", points_node.c_str());
	}
	else
	{
		ROS_INFO("No points node received, defaulting to points_image, you can use _points_node:=YOUR_TOPIC");
		points_node = "/vscan_image";
	}

	cv::generateColors(_colors, 25);

	ros::Subscriber scriber = n.subscribe(image_topic_name, 1,
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="1366fe296d61ece3c4000a66400a7870">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="190" endLineNumber="197"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="230" endLineNumber="237"/>
            <text>
<![CDATA[  if (_use_gnss == 0 && init_pos_set == 0)
  {
    initial_pose.x = input->x;
    initial_pose.y = input->y;
    initial_pose.z = input->z;
    initial_pose.roll = input->roll;
    initial_pose.pitch = input->pitch;
    initial_pose.yaw = input->yaw;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="d182106d4cbea02e7259d546dc72aa8d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\console\ConsoleView.cpp" startLineNumber="144" endLineNumber="151"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\widgets\widgets.cpp" startLineNumber="192" endLineNumber="199"/>
            <text>
<![CDATA[    glDisable(GL_DEPTH_TEST);
    glDisable(GL_LIGHTING);
    glDisable(GL_SCISSOR_TEST);
    glDisable(GL_LINE_SMOOTH);
    glDisable( GL_COLOR_MATERIAL );
    glLineWidth(1.0);
    
    glColor4fv(colour_bg);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="b5160aaee95834bfd053aad09c435aae">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.h" startLineNumber="36" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\include\pos_db.h" startLineNumber="56" endLineNumber="62"/>
            <text>
<![CDATA[	int port_;
#ifdef USE_LIBSSH2
	std::string sshuser_;
	std::string sshtunnelhost_;
	std::string sshpubkey_;
	std::string sshprivatekey_;
	int sshport_;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="740ea75d271fbca9201eeaffb309251b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\fusion\fusion.cpp" startLineNumber="53" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\ORBextractor.h" startLineNumber="99" endLineNumber="108"/>
            <text>
<![CDATA[    int nlevels;
    int iniThFAST;
    int minThFAST;

    std::vector<int> mnFeaturesPerLevel;

    std::vector<int> umax;

    std::vector<float> mvScaleFactor;
    std::vector<float> mvInvScaleFactor;    
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="2ff1e4ad40dd0c7be660839c9f093f45">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\newton.cpp" startLineNumber="269" endLineNumber="275"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\newton.cpp" startLineNumber="293" endLineNumber="299"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="849" endLineNumber="855"/>
            <text>
<![CDATA[      b = 1;
      break;
    case 3:
      r = 1;
      g = 1;
      break;
    case 4:
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="6664a496cd19b32cef8c0a35d2eaf4b6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_viewer\image_viewer.cpp" startLineNumber="210" endLineNumber="220"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_viewer\image_viewer.cpp" startLineNumber="239" endLineNumber="249"/>
            <text>
<![CDATA[		pedestrian_image_obj_ready = true;
	}
}

static void image_obj_updater_cb_tracked(const cv_tracker::image_obj_tracked& image_objs_tracked_msg)
{
	if(_drawing)
		return;
	bool is_car = (image_objs_tracked_msg.type == "car");
	std::vector<cv::Rect>& objs_tracked = is_car ? cars_tracked : peds_tracked;
	std::vector<int>& objs_tracked_lifespan = is_car ? cars_tracked_lifespan : peds_tracked_lifespan;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="3453e568ace924c24972b9f080dbc15e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="38" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="27" endLineNumber="37"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="50" endLineNumber="56"/>
            <text>
<![CDATA[	FLOAT *dst_M;
	int *dst_tmpIx;
	int *dst_tmpIy;
	int ***PIDX_array;
	int **size_array;
	const int *numpart;
	int *FSIZE;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="c9b67515d88ab3418ebd2f50c5bfda94">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="78" endLineNumber="86"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="65" endLineNumber="73"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="52" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\include\astar_util.h" startLineNumber="35" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="41" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\obj_reproj.cpp" startLineNumber="85" endLineNumber="91"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="65" endLineNumber="71"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="308" endLineNumber="315"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_sender\tablet_sender.cpp" startLineNumber="88" endLineNumber="94"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="50" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="93" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="18" endLineNumber="27"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="7" endLineNumber="16"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\include\fastvirtualscan\fastvirtualscan.h" startLineNumber="9" endLineNumber="18"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\dpm_ocv\dpm_ocv.cpp" startLineNumber="43" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="502" endLineNumber="508"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="472" endLineNumber="478"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="340" endLineNumber="346"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="558" endLineNumber="564"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="140" endLineNumber="146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="112" endLineNumber="118"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="164" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="132" endLineNumber="141"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="192" endLineNumber="198"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="26" endLineNumber="34"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="77" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="82" endLineNumber="89"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="71" endLineNumber="77"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="70" endLineNumber="77"/>
            <text>
<![CDATA[struct pose
{
  double x;
  double y;
  double z;
  double roll;
  double pitch;
  double yaw;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="945ab3851c292440a9b258fec6771392">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_uploader\pos_uploader.cpp" startLineNumber="71" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="48" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="305" endLineNumber="325"/>
            <text>
<![CDATA[        KdTreePtr tree_;

        /** \brief A pointer to the spatial search object used for the source dataset. */
        KdTreeReciprocalPtr tree_reciprocal_;


        
        /** \brief The input point cloud dataset target. */
        PointCloudTargetConstPtr target_;

        /** \brief The target point cloud dataset indices. */
        IndicesPtr target_indices_;

        /** \brief The point representation used (internal). */
        PointRepresentationConstPtr point_representation_;

        /** \brief The transformed input source point cloud dataset. */
        PointCloudTargetPtr input_transformed_;

        /** \brief The types of input point fields available. */
        std::vector<pcl::PCLPointField> input_fields_;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="dfcb8bc0f3c9fd7ecc0362ae56356317">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.cpp" startLineNumber="9" endLineNumber="15"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.cpp" startLineNumber="15" endLineNumber="21"/>
            <text>
<![CDATA[  private_nh_.param<double>("robot_length", robot_length_, 4.5);
  private_nh_.param<double>("robot_width", robot_width_, 1.75);
  private_nh_.param<double>("base2back", base2back_, 0.8);
  private_nh_.param<double>("curve_weight", curve_weight_, 1.05);
  private_nh_.param<double>("reverse_weight", reverse_weight_, 2.00);
  private_nh_.param<bool>("use_wavefront_heuristic", use_wavefront_heuristic_, true);
  private_nh_.param<double>("reverse_weight", reverse_weight_, 2.00);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="84bb241509515486390d3f9630b82575">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\handler\handler.cpp" startLineNumber="251" endLineNumber="257"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\handler\handler.cpp" startLineNumber="279" endLineNumber="285"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\handler\handler.cpp" startLineNumber="345" endLineNumber="351"/>
            <text>
<![CDATA[        GLprecision mrotc[3];
        MatMul<3,1>(mrotc, rot_center, (GLprecision)-1.0);
        LieApplySO3<>(T_2c+(3*3),T_2c,mrotc);
        GLprecision T_n2[3*4];
        LieSetIdentity<>(T_n2);
        LieSetTranslation<>(T_n2,rot_center);
        LieMulSE3(T_nc, T_n2, T_2c );
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="3b471691beda047fdf02524ec06996fd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_dogleg.cpp" startLineNumber="80" endLineNumber="88"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_levenberg.cpp" startLineNumber="73" endLineNumber="81"/>
            <text>
<![CDATA[    double t=get_monotonic_time();
    _optimizer->computeActiveErrors();
    G2OBatchStatistics* globalStats = G2OBatchStatistics::globalStats();
    if (globalStats) {
      globalStats->timeResiduals = get_monotonic_time()-t;
      t=get_monotonic_time();
    }

    double currentChi = _optimizer->activeRobustChi2();
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="f245085a73154a1d598d9cb3939a649f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="533" endLineNumber="539"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="206" endLineNumber="212"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="237" endLineNumber="243"/>
            <text>
<![CDATA[  lane_waypoint_marker.header.frame_id = "map";
  lane_waypoint_marker.header.stamp = ros::Time();
  lane_waypoint_marker.ns = "global_lane_array_marker";
  lane_waypoint_marker.type = visualization_msgs::Marker::LINE_STRIP;
  lane_waypoint_marker.action = visualization_msgs::Marker::ADD;
  lane_waypoint_marker.scale.x = 1.0;
  lane_waypoint_marker.color = color;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="8fcf245c4ca1c68560e44bbc9352e6ce">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl_es_compat.h" startLineNumber="46" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gldraw.h" startLineNumber="138" endLineNumber="147"/>
            <text>
<![CDATA[inline void glDrawRect( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 )
{
    GLfloat verts[] = { x1,y1,  x2,y1,  x2,y2,  x1,y2 };    
    glEnableClientState(GL_VERTEX_ARRAY);
    glVertexPointer(2, GL_FLOAT, 0, verts);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
    glDisableClientState(GL_VERTEX_ARRAY);
}

inline void glDrawRectPerimeter( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 )
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="24cb33630669e68ca08cd852b7e3b3b2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\glviewer\GLViewer\glviewer.cpp" startLineNumber="494" endLineNumber="505"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\glviewer\GLViewer\glviewer.cpp" startLineNumber="520" endLineNumber="531"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\glviewer\GLViewer\glviewer.cpp" startLineNumber="546" endLineNumber="557"/>
            <text>
<![CDATA[    return;
}

void GLViewer::setDisplayListTranslation(GLuint listid, double tx, double ty, double tz, bool islistid)
{
    if(islistid)
    {
        int i;
        int n=displaylist.size();
        for(i=0;i<n;i++)
        {
            if(displaylist[i].listid==listid)
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="1586bdaf69e65b4b2142d5d47ef3eff3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set.cpp" startLineNumber="49" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="391" endLineNumber="397"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="299" endLineNumber="305"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="322" endLineNumber="328"/>
            <text>
<![CDATA[  visualization_msgs::Marker lane_waypoint_marker;
  lane_waypoint_marker.header.frame_id = "map";
  lane_waypoint_marker.header.stamp = ros::Time();
  lane_waypoint_marker.ns = "local_point_marker";
  lane_waypoint_marker.id = 0;
  lane_waypoint_marker.type = visualization_msgs::Marker::CUBE_LIST;
  lane_waypoint_marker.action = visualization_msgs::Marker::ADD;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="653530bfdefac408d0e890e5e7c9ac5a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\get_boxes.cpp" startLineNumber="434" endLineNumber="442"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1110" endLineNumber="1125"/>
            <text>
<![CDATA[			b_nums[count]=GMN;
			count++;
			detected_boxes+=GMN;			//number of detected box

			/* release */
			s_free(GMPC);
		}
		////numcom
        }
	////level

	/* free temporary arrays */
	free(dst_RL);
	free(RL_array);

	free(dst_RI);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="85df7b99e646eeb5b10f2af42a5fa712">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.cpp" startLineNumber="142" endLineNumber="148"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.cpp" startLineNumber="151" endLineNumber="157"/>
            <text>
<![CDATA[  const OptimizableGraph* OptimizableGraph::Edge::graph() const{
    if (! _vertices.size())
      return 0;
    const OptimizableGraph::Vertex* v=(const OptimizableGraph::Vertex*) _vertices[0];
    if (!v)
      return 0;
    return v->graph();
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="ab46d14de0da045caaef5330dcb2a953">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.h" startLineNumber="108" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="66" endLineNumber="74"/>
            <text>
<![CDATA[  void configCallback(const runtime_manager::ConfigVelocitySetConstPtr &msg);
  void pointsCallback(const sensor_msgs::PointCloud2ConstPtr &msg);
  void controlPoseCallback(const geometry_msgs::PoseStampedConstPtr &msg);
  void localizerPoseCallback(const geometry_msgs::PoseStampedConstPtr &msg);
  void closestWaypointCallback(const std_msgs::Int32ConstPtr &msg);

  void clearPoints();

  double getStopRange() const
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="49f9bb429ba005fe9e10d0029f7628bd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\rawdata.h" startLineNumber="63" endLineNumber="79"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\laserscan2costmap\laserscan2costmap.cpp" startLineNumber="50" endLineNumber="58"/>
            <text>
<![CDATA[double g_resolution = 0.1;                 // [m]
int g_scan_size_x = 1000;                  // actual scanning size
int g_scan_size_y = 1000;
int g_map_size_x = 500;  // publishing occupancy grid map size
int g_map_size_y = 500;

struct Grid
{
  int index;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="f81479434ba73836722325d462ae9c95">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\log\packetstream.cpp" startLineNumber="458" endLineNumber="464"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\log\packetstream.cpp" startLineNumber="457" endLineNumber="463"/>
            <text>
<![CDATA[    json::value src_driver  = json[json_src_driver];
    json::value src_id      = json[json_src_id];
    json::value src_info    = json[json_src_info];
    json::value src_version = json[json_src_version];
    json::value src_packet  = json[json_src_packet];
    json::value data_size   = src_packet[json_pkt_size_bytes];
    json::value data_defs   = src_packet[json_pkt_definitions];
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="b67f487caad2a34d951438d18bbdd895">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\plot\plotter.cpp" startLineNumber="76" endLineNumber="83"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\plot\plotter.cpp" startLineNumber="146" endLineNumber="153"/>
            <text>
<![CDATA[            "varying float y;\n"
            "void main() {\n"
            "    gl_Position = vec4(u_scale * (a_position + u_offset),0,1);\n"
            "    x = a_position.x;"
            "    y = a_position.y;"
            "}\n";

    static const std::string fs1 =
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="5900331af7e7971a19eb3ee7777f38b6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glstate.h" startLineNumber="196" endLineNumber="204"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glstate.h" startLineNumber="207" endLineNumber="215"/>
            <text>
<![CDATA[    bool m_ViewportCalled;
    GLint m_OriginalViewport[4];
    inline void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
    {
        if(!m_ViewportCalled) {
            m_ViewportCalled = true;
            glGetIntegerv(GL_VIEWPORT, m_OriginalViewport);
        }
        ::glViewport(x, y, width, height);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="504b2f9b2679275dbbee0b130af12b73">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="462" endLineNumber="473"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="919" endLineNumber="930"/>
            <text>
<![CDATA[int main(int argc, char **argv)
{
  ros::init(argc, argv, "vector_map_loader");
  ros::NodeHandle nh;

  if (argc < 2)
  {
    printUsage();
    return EXIT_FAILURE;
  }

  std::string mode(argv[1]);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="c72fd89d8fec8a6b29791a924a814a04">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_downloader\pos_downloader.cpp" startLineNumber="139" endLineNumber="149"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_downloader\pos_downloader.cpp" startLineNumber="255" endLineNumber="264"/>
            <text>
<![CDATA[#endif /* ! CURRENT_CAR_DIRECTLY */

static void publish_pedestrian(int id, int is_pedestrian, ros::Time now,
			      geometry_msgs::Pose& pose, int diffmsec)
{
  visualization_msgs::Marker marker;
  marker.header.frame_id = "/map";
  marker.header.stamp = now;
  marker.ns = MARKERNAME;
  marker.action = visualization_msgs::Marker::ADD;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="9012eb59f10dfbd6f884da2ae5aff1d1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="392" endLineNumber="400"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\kf_track\sync_track.cpp" startLineNumber="263" endLineNumber="271"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="361" endLineNumber="370"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\dpm_sync_2.cpp" startLineNumber="233" endLineNumber="241"/>
            <text>
<![CDATA[    if(!publish()) {
        /* when to publish is failure, republish */
        struct timespec sleep_time;
        sleep_time.tv_sec = 0;
        sleep_time.tv_nsec = 200000000; //5Hz
        while (!publish() || ros::ok())
            nanosleep(&sleep_time, NULL);
    }
    pthread_mutex_unlock(&flag_mutex);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="8c0180212ef62cba685b2c604382edff">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="289" endLineNumber="301"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="145" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="435" endLineNumber="446"/>
            <text>
<![CDATA[		gettimeofday(&tv_kernel_end, NULL);
		tvsub(&tv_kernel_end, &tv_kernel_start, &tv);
		time_kernel += tv.tv_sec * 1000.0 + (float)tv.tv_usec / 1000.0;
	}


	/* download C from GPU */
	if(pt->pid == 0){
		gettimeofday(&tv_memcpy_start, NULL);
	}
	if(pt->pid == 0 && pt->calc_flag == PART){
		gettimeofday(&tv_fconv_memcpyDtoH_start, NULL);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="994eabdf53bd0655a2e74641a6b6a9a5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\cpu\dpm_ocv_cpu.cpp" startLineNumber="25" endLineNumber="32"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\dpm_ocv_gpu.cpp" startLineNumber="15" endLineNumber="22"/>
            <text>
<![CDATA[extern IplImage * resize_opencv(IplImage * img, float scale);
extern int computeBorderSize(int maxXBorder, int maxYBorder, int *bx, int *by);
extern int addNullableBorder(CvLSVMFeatureMap *map, int bx, int by);

extern "C" {
extern int allocFeaturePyramidObject(CvLSVMFeaturePyramid **obj, const int countLevel);
extern int freeFeaturePyramidObject(CvLSVMFeaturePyramid **obj);
extern int getMaxFilterDims(const CvLSVMFilterObject **filters, int kComponents,
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="602a0a26fe2df72c1b4fd3cb0f927168">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_viewer\vscan_image_viewer.cpp" startLineNumber="122" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2image\points2image.cpp" startLineNumber="147" endLineNumber="158"/>
            <text>
<![CDATA[	std::string projection_matrix_topic;
	if (private_nh.getParam("projection_matrix_topic", projection_matrix_topic))
	{
		ROS_INFO("Setting projection_matrix topic to %s", projection_matrix_topic.c_str());
	}
	else
	{
		ROS_INFO("No projection matrix topic received, defaulting to /projection_matrix, you can use _projection_matrix_topic:=YOUR_TOPIC");
		projection_matrix_topic = "/projection_matrix";
	}

	ros::Subscriber sub = n.subscribe(points_topic, 1, callback);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="84c154a5d346ba7d6da78d35855a34e7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="718" endLineNumber="730"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\selectionwidget.cpp" startLineNumber="43" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\selectionwidget.cpp" startLineNumber="95" endLineNumber="104"/>
            <text>
<![CDATA[    glColorPointer(3,GL_FLOAT,3*sizeof(float),colors.data());

    glNewList(pointsdisplaylist,GL_COMPILE);
    glDrawArrays(GL_POINTS,0,n);
    glEndList();

    glDisableClientState(GL_VERTEX_ARRAY);
    glDisableClientState(GL_COLOR_ARRAY);

    this->update();
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="50be2ca834228eb16d23915e78972351">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="94" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.h" startLineNumber="23" endLineNumber="32"/>
            <text>
<![CDATA[    value_set hue;
    value_set sat;
    value_set val;
    bool isUpdated;
} thresholds_set;

class TunerBody
{

private:
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="008c05dc6c1a432c305651225d3bf274">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\load_model.cpp" startLineNumber="175" endLineNumber="184"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\load_model.cpp" startLineNumber="278" endLineNumber="287"/>
            <text>
<![CDATA[	FILE *file = fopen(filename, "r");
	if (file == nullptr) {
		std::cerr << std::strerror(errno) << std::endl;
		std::exit(-1);
	}

	FLOAT t1,t2,t3;
	FLOAT dummy_t1, dummy_t2, dummy_t3;  // variable for dummy scan in order to adjust the location of file-pointer

	fscanf(file,FLOAT_SCAN_FMT,&t1);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="c4894c7724b106334df5a7e02611c315">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit.h" startLineNumber="95" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\LocalMapping.h" startLineNumber="120" endLineNumber="128"/>
            <text>
<![CDATA[    bool mbAbortBA;

    bool mbStopped;
    bool mbStopRequested;
    bool mbNotStop;
    std::mutex mMutexStop;

    bool mbAcceptKeyFrames;
    std::mutex mMutexAccept;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="c56944f0d3e03ae34244eb4ba959e32e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="971" endLineNumber="977"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="996" endLineNumber="1002"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1515" endLineNumber="1521"/>
            <text>
<![CDATA[        nlopt::opt opt(nlopt::LN_COBYLA,6);
        opt.set_lower_bounds(lb.toStdVector());
        opt.set_upper_bounds(ub.toStdVector());
        opt.set_xtol_rel(1e-4);
        opt.set_min_objective(calibrationCameraLidarChessboardObjectiveFunc,(void *)&calibrationdata);
        result=opt.optimize(x,calibrationerror);
        if (result < nlopt::SUCCESS) {
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="058ae6d289d28db3ffce8690c9e649be">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="979" endLineNumber="989"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="1069" endLineNumber="1080"/>
            <text>
<![CDATA[    publish_marker(&marker, pub, rate);
  }


  // road_surface_mark
  for (i=0; i<roadmarks.size(); i++) {
    if (roadmarks[i].id <= 0) {
      continue;
    }
    int aid = roadmarks[i].aid;
    int slid = areaclasses[aid].slid;
    int elid = areaclasses[aid].elid;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="1efd4a5c44582be82a99e93106a64373">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\matching_gpu.cpp" startLineNumber="551" endLineNumber="557"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\matching_gpu.cpp" startLineNumber="559" endLineNumber="565"/>
            <text>
<![CDATA[    CUtexref image_texFi;
    cu_res = cuModuleGetTexRef(&image_texFi, module[0], "texFi");
    CUDA_CHECK(cu_res, "cuModuleGetTexRef(&image_texFi)");
    cu_res = cuTexRefSetFlags(image_texFi, CU_TRSF_READ_AS_INTEGER);
    CUDA_CHECK(cu_res, "cuTexRefSetFlags(image_texFi)");
    cu_res = cuTexRefSetFormat(image_texFi, CU_AD_FORMAT_FLOAT, 1);
    CUDA_CHECK(cu_res, "cuTexRefSetFormat(image_texFi)");
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="a8b1490615864389dd12066281fc03c2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="732" endLineNumber="744"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1386" endLineNumber="1398"/>
            <text>
<![CDATA[    return 1;
}

bool CalibrateCameraLidarChessboardBase::removeCalibData()
{
    int id=calibimagesshow->currentIndex();
    if(id<0)
    {
        return 0;
    }
    CalibrateCameraChessboardBase::removeCalibData();

    caliblidarspoints.erase(caliblidarspoints.begin()+id);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="d632e01b8a52275892abf11d9aa87478">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="222" endLineNumber="228"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="129" endLineNumber="135"/>
            <text>
<![CDATA[  oss << command_data.modeValue << ",";
  oss << command_data.gearValue << ",";
  oss << command_data.accellValue << ",";
  oss << command_data.brakeValue << ",";
  oss << command_data.steerValue << ",";
  oss << command_data.linear_velocity << ",";
  oss << command_data.steering_angle;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="ea61862986298d060b2889d1144f7b8d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\voxel_grid_covariance.h" startLineNumber="169" endLineNumber="189"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="43" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="116" endLineNumber="128"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\integrated_viewer\node\image_viewer_plugin\image_viewer_plugin.h" startLineNumber="64" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\Math.h" startLineNumber="9" endLineNumber="20"/>
            <text>
<![CDATA[#define SRC_MATH_H_

#include <Eigen/Eigen>
#include <math.h>


typedef Eigen::Vector2f Point2;
typedef Eigen::Vector3f Point3;
typedef Eigen::Vector3f Vector3;
typedef Eigen::Vector4f Point4;
typedef Eigen::Vector4f Vector4;
typedef Eigen::Vector2f Vector2;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="44618d6cecf22f576343361bbf436db7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="86" endLineNumber="96"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="85" endLineNumber="95"/>
            <text>
<![CDATA[static pcl::PointCloud<pcl::PointXYZI> map;

static pcl::NormalDistributionsTransform<pcl::PointXYZI, pcl::PointXYZI> ndt;
// Default values
static int max_iter = 30;            // Maximum iterations
static float ndt_res = 1.0;      // Resolution
static double step_size = 0.1;   // Step size
static double trans_eps = 0.01;  // Transformation epsilon

// Leaf size of VoxelGrid filter.
static double voxel_leaf_size = 2.0;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="d340a44310a99bcb8f0296eb8cae62fa">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1426" endLineNumber="1433"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="452" endLineNumber="459"/>
            <text>
<![CDATA[  if (area.aid == 0)
    return null_polygon;

  Line line = vmap.findByKey(Key<Line>(area.slid));
  if (line.lid == 0)
    return null_polygon;
  if (line.blid != 0)
    return null_polygon;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="41977a2e120ddd0d3dad09da54a491b5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="768" endLineNumber="776"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="778" endLineNumber="786"/>
            <text>
<![CDATA[			case PART:
				td[L][jj].C_dims[0]=height;
				td[L][jj].C_dims[1]=width;

				SUM_SIZE_C += td[L][jj].C_dims[0]*td[L][jj].C_dims[1]*sizeof(FLOAT);

				M_size_array[L][jj*2]=height;
				M_size_array[L][jj*2+1]=width;
				break;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="c52af444607f9c7cd51e5c11daa80ae6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="550" endLineNumber="559"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="627" endLineNumber="636"/>
            <text>
<![CDATA[    (void *)&blocks[0],
    (void *)&blocks[1],
    (void *)&level
  };

  /* decide CUDA block shape */
  thread_num_x = (out[1] < sqrt(max_thread_num)) ?
    out[1] : sqrt(max_thread_num);
  thread_num_y = (out[0] < sqrt(max_thread_num)) ?
    out[0] : sqrt(max_thread_num);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="a72616b3516b0f0c17dced6343476563">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="248" endLineNumber="259"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\view.h" startLineNumber="43" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\file_extension.h" startLineNumber="43" endLineNumber="51"/>
            <text>
<![CDATA[    ImageFileTypeTiff,
    ImageFileTypeGif,
    ImageFileTypeExr,
    ImageFileTypePango,
    ImageFileTypePvn,
    ImageFileTypeUnknown
};

PANGOLIN_EXPORT
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="6b3e4fa1639c280f507fdb336fb1355f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glvbo.h" startLineNumber="167" endLineNumber="175"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glvbo.h" startLineNumber="207" endLineNumber="214"/>
            <text>
<![CDATA[    vbo.Bind();
    glVertexPointer(vbo.count_per_element, vbo.datatype, 0, 0);
    glEnableClientState(GL_VERTEX_ARRAY);

    if(draw_normals) {
        nbo.Bind();
        glNormalPointer(nbo.datatype, (GLsizei)(nbo.count_per_element * GlDataTypeBytes(nbo.datatype)), 0);
        glEnableClientState(GL_NORMAL_ARRAY);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="df07c3fd01860d918080c2800192db0c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\ground_filter\ground_filter.cpp" startLineNumber="124" endLineNumber="135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\space_filter\space_filter.cpp" startLineNumber="138" endLineNumber="149"/>
            <text>
<![CDATA[	cloud_msg.header=in_sensor_cloud_ptr->header;
	cloud_pub_.publish(cloud_msg);
}

int main(int argc, char **argv)
{

	ros::init(argc, argv, "space_filter");
	SpaceFilter node;
	ros::spin();

	return 0;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="31da1f624b1b68b725d4bfc4368a16d1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.h" startLineNumber="347" endLineNumber="353"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="64" endLineNumber="70"/>
            <text>
<![CDATA[	int *error_array;
	int *B_dimension;
	int interval;
	int L_MAX;
	int pid;
	int max_height;
	int max_width;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="d55ffacdd127200b0c75eca54e4f0c78">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="221" endLineNumber="227"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="186" endLineNumber="192"/>
            <text>
<![CDATA[  oss << fixed << setprecision(6) << can.speed << ",";
  oss << can.driveshift << ",";
  oss << can.targetshift << ",";
  oss << can.inputshift << ",";
  oss << can.strmode << ",";
  oss << can.strcontmode << ",";
  oss << can.stroverridemode << ",";
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="9d6bbff0382822b7d4796184e24571b3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_trajectory_gen\lattice_trajectory_gen.cpp" startLineNumber="514" endLineNumber="526"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping_tku\ndt_mapping_tku.cpp" startLineNumber="1090" endLineNumber="1099"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching_tku\ndt_matching_tku.cpp" startLineNumber="1089" endLineNumber="1098"/>
            <text>
<![CDATA[  printf("----------------------\n");

  ros::init(argc, argv, "ndt_matching_tku");

  ros::NodeHandle nh;
  ros::NodeHandle private_nh("~");

  private_nh.getParam("downsampler", _downsampler);
  private_nh.getParam("init_x", g_ini_x);
  private_nh.getParam("init_y", g_ini_y);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="01b3f1d1451c57cfd458eb8000f0a22a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\base_edge.h" startLineNumber="27" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\base_vertex.h" startLineNumber="27" endLineNumber="54"/>
            <text>
<![CDATA[#ifndef G2O_BASE_VERTEX_H
#define G2O_BASE_VERTEX_H

#include "g2o/stuff/macros.h"

#include <Eigen/Core>
#include <Eigen/Dense>
#include <Eigen/Cholesky>
#include <Eigen/StdVector>
#include <stack>
#include "g2o/core/creators.h"
#include "g2o/core/optimizable_graph.h"

namespace g2o {

  using namespace Eigen;


/**
 * \brief Templatized BaseVertex
 *
 * Templatized BaseVertex
 * D  : minimal dimension of the vertex, e.g., 3 for rotation in 3D
 * T  : internal type to represent the estimate, e.g., Quaternion for rotation in 3D
 */
  template <int D, typename T>
  class BaseVertex : public OptimizableGraph::Vertex {
    public:
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="0b4ae331961cf41f0ec154cbcd11db8f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.cpp" startLineNumber="377" endLineNumber="384"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\parameter_container.cpp" startLineNumber="104" endLineNumber="110"/>
            <text>
<![CDATA[    while (1) {
      int bytesRead = readLine(is, currentLine);
      if (bytesRead == -1)
        break;
      currentLine >> token;
      if (bytesRead == 0 || token.size() == 0 || token[0] == '#')
        continue;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="c60df104573d51db83d0b1214da38f6e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glcuda.h" startLineNumber="74" endLineNumber="82"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glcuda.h" startLineNumber="85" endLineNumber="93"/>
            <text>
<![CDATA[struct CudaScopedMappedArray
{
    CudaScopedMappedArray(GlTextureCudaArray& tex);
    ~CudaScopedMappedArray();
    cudaArray* operator*();
    cudaGraphicsResource* res;
    
private:
    CudaScopedMappedArray(const CudaScopedMappedArray&) {}
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="d5ebca5f0e2a6f4bd0259aaf2234901d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="205" endLineNumber="214"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="131" endLineNumber="140"/>
            <text>
<![CDATA[void publishCloudClusters(const ros::Publisher* in_publisher, const lidar_tracker::CloudClusterArray& in_clusters, const std::string& in_target_frame, const std_msgs::Header& in_header)
{
	if (in_target_frame!=in_header.frame_id)
	{
		lidar_tracker::CloudClusterArray clusters_transformed;
		clusters_transformed.header = in_header;
		clusters_transformed.header.frame_id = in_target_frame;
		for (auto i=clusters_transformed.clusters.begin(); i!= clusters_transformed.clusters.end(); i++)
		{
			lidar_tracker::CloudCluster cluster_transformed;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="70e7accd096288fbb49a05eaad6cc300">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\voxel_grid_covariance.h" startLineNumber="334" endLineNumber="349"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\voxel_grid_covariance.h" startLineNumber="308" endLineNumber="322"/>
            <text>
<![CDATA[        typename std::map<size_t, Leaf>::iterator leaf_iter = leaves_.find (index);
        if (leaf_iter != leaves_.end ())
        {
          LeafConstPtr ret (&(leaf_iter->second));
          return ret;
        }
        else
          return NULL;
      }

      /** \brief Get the voxel containing point p.
       * \param[in] p the point to get the leaf structure at
       * \return const pointer to leaf structure
       */
      inline LeafConstPtr
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="0d087ff304b26d39884d3c20cfc7bb9b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="295" endLineNumber="304"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="301" endLineNumber="310"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="369" endLineNumber="378"/>
            <text>
<![CDATA[  tf::StampedTransform transform;
  try
  {
    ros::Time now = ros::Time(0);
    listener.waitForTransform("/map", "/world", now, ros::Duration(10.0));
    listener.lookupTransform("/map", "world", now, transform);
  }
  catch (tf::TransformException& ex)
  {
    ROS_ERROR("%s", ex.what());
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="ac1e8bbe70882490460b725035dfdfac">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\voxel_grid_covariance.h" startLineNumber="172" endLineNumber="194"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\ssd_node.cpp" startLineNumber="47" endLineNumber="56"/>
            <text>
<![CDATA[	ros::Subscriber subscriber_image_raw_;
	ros::Subscriber subscriber_ssd_config_;
	ros::Publisher publisher_car_objects_;
	ros::Publisher publisher_person_objects_;
	ros::NodeHandle node_handle_;

	cv::Scalar pixel_mean_;

	//Caffe based Object Detection ConvNet
	SsdDetector* ssd_detector_;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="9abbe393a1c7098a35ebe35d4e9539aa">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\lib\udon_socket\udon.cpp" startLineNumber="78" endLineNumber="93"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\lib\udon_socket\udon.cpp" startLineNumber="73" endLineNumber="88"/>
            <text>
<![CDATA[	std::memcpy(buf + OFFSET_LENGTH, &length, sizeof(length));
}

void set_location_x(std::uint8_t *buf, double x)
{
	std::memcpy(buf + OFFSET_LOCATION_X, &x, sizeof(x));
}

void set_location_y(std::uint8_t *buf, double y)
{
	std::memcpy(buf + OFFSET_LOCATION_Y, &y, sizeof(y));
}

void set_location_z(std::uint8_t *buf, double z)
{
	std::memcpy(buf + OFFSET_LOCATION_Z, &z, sizeof(z));
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="b339cc032f4be9fcff16e2070c4fb5f4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="780" endLineNumber="786"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="779" endLineNumber="785"/>
            <text>
<![CDATA[            MAP('"', '\"');
            MAP('\\', '\\');
            MAP('/', '/');
            MAP('b', '\b');
            MAP('f', '\f');
            MAP('n', '\n');
            MAP('r', '\r');
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="3e3f6f4e2016c60975915090eeeb09c0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lane_detector\nodes\lane_detector\lane_detector.cpp" startLineNumber="108" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lane_detector\nodes\lane_detector\lane_detector.cpp" startLineNumber="107" endLineNumber="115"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lane_detector\nodes\lane_detector\lane_detector.cpp" startLineNumber="106" endLineNumber="113"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="69" endLineNumber="75"/>
            <text>
<![CDATA[    MouseButtonLeft = 1,
    MouseButtonMiddle = 2,
    MouseButtonRight = 4,
    MouseWheelUp = 8,
    MouseWheelDown = 16,
    MouseWheelRight = 32,
    MouseWheelLeft = 64,
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="265222a2c53a60b8c41026207bb23732">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\for_use_gpu.h" startLineNumber="28" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="36" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.h" startLineNumber="20" endLineNumber="29"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="427" endLineNumber="442"/>
            <text>
<![CDATA[#endif

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
////
////   INTERFACE
////
////

#ifndef __STB_INCLUDE_STB_TRUETYPE_H__
#define __STB_INCLUDE_STB_TRUETYPE_H__

#ifdef STBTT_STATIC
#define STBTT_DEF static
#else
#define STBTT_DEF extern
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="e128035e18d35adc6e132e65529a03fd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_d_viewer\scan_image_d_viewer.cpp" startLineNumber="166" endLineNumber="176"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_viewer\scan_image_viewer.cpp" startLineNumber="54" endLineNumber="64"/>
            <text>
<![CDATA[static void show()
{
    if(!exist_image || !exist_scan){
        return;
    }

    IplImage* image_view = cvCreateImage(cvGetSize(&image), image.depth, image.nChannels);
    cvCopy(&image, image_view);

    float min_d, max_d;
    min_d = max_d = scan_image.distance.at(0);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="59da772a0b7e337c4d63c31d1bc4b77a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\widgets\widgets.h" startLineNumber="69" endLineNumber="77"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\widgets\widgets.h" startLineNumber="97" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\widgets\widgets.h" startLineNumber="83" endLineNumber="91"/>
            <text>
<![CDATA[    FunctionButton(std::string title, VarValueGeneric& tv);
    void Mouse(View&, MouseButton button, int x, int y, bool pressed, int mouse_state);
    void Render();

    //Cache params on resize
    void ResizeChildren();
    GlText gltext;
    GLfloat raster[2];
    bool down;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="783aa8454083e567916f8e4d152623e6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="838" endLineNumber="845"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\klt_track\klt_track.cpp" startLineNumber="291" endLineNumber="298"/>
            <text>
<![CDATA[		cv_tracker::image_obj_tracked tmp_objects_msg;

		tmp_objects_msg.type = tracked_type_;
		tmp_objects_msg.total_num = num;
		copy(rect_ranged_array.begin(), rect_ranged_array.end(), back_inserter(tmp_objects_msg.rect_ranged)); // copy vector
		copy(real_data.begin(), real_data.end(), back_inserter(tmp_objects_msg.real_data)); // copy vector
		copy(obj_id.begin(), obj_id.end(), back_inserter(tmp_objects_msg.obj_id)); // copy vector
		copy(lifespan.begin(), lifespan.end(), back_inserter(tmp_objects_msg.lifespan)); // copy vector
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="da03cee64be6da954ebe6cfc489b3e67">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="98" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_mobility\sample_mobility.cpp" startLineNumber="70" endLineNumber="79"/>
            <text>
<![CDATA[  std::istringstream stream(input);
  std::string field;
  std::vector<std::string> result;
  while (std::getline(stream, field, delimiter)) {
    result.push_back(field);
  }
  return result;
}

static void publish_markers(const visualization_msgs::Marker& markers)
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="38ddaa8ba85f29a48a7b695aa9cf2fad">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="305" endLineNumber="313"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\search_info_ros.h" startLineNumber="40" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\klt_track\klt_track.cpp" startLineNumber="67" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\scan2image\nodes\scan2image\scan2image.cpp" startLineNumber="26" endLineNumber="33"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\KeyFrame.h" startLineNumber="192" endLineNumber="204"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\ground_filter\ground_filter.cpp" startLineNumber="24" endLineNumber="33"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\space_filter\space_filter.cpp" startLineNumber="22" endLineNumber="31"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.h" startLineNumber="38" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="22" endLineNumber="28"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_publisher\calibration_publisher.cpp" startLineNumber="12" endLineNumber="20"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\gazebo\catvehicle\src\distanceEstimator.cpp" startLineNumber="22" endLineNumber="28"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\gnss_localizer\nodes\nmea2tfpose\nmea2tfpose_core.h" startLineNumber="62" endLineNumber="74"/>
            <text>
<![CDATA[  ros::Publisher pub1_;

  // subscriber
  ros::Subscriber sub1_;

  // constants
  const std::string MAP_FRAME_;
  const std::string GPS_FRAME_;

  // variables
  int32_t plane_number_;
  geo_pos_conv geo_;
  geo_pos_conv last_geo_;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="c648d51032e2844181d39069eb448fd1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_client\vector_map_client.cpp" startLineNumber="261" endLineNumber="274"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="584" endLineNumber="594"/>
            <text>
<![CDATA[            marker_array_buffer.markers.push_back(marker);
        }
      }
      if (!marker_array_.markers.empty())
      {
        for (auto& marker : marker_array_.markers)
          marker.action = visualization_msgs::Marker::DELETE;
        marker_array_pub_.publish(marker_array_); // clear previous marker
      }
      marker_array_ = marker_array_buffer;
      marker_array_pub_.publish(marker_array_);
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="4e374ea5234b2d1b4c40f456c454849b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="165" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="163" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="161" endLineNumber="170"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="160" endLineNumber="169"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="159" endLineNumber="167"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="158" endLineNumber="166"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="156" endLineNumber="165"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="155" endLineNumber="163"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="152" endLineNumber="161"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="150" endLineNumber="160"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="147" endLineNumber="159"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="71" endLineNumber="77"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="70" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="69" endLineNumber="75"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="68" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\mainwindow.h" startLineNumber="22" endLineNumber="28"/>
            <text>
<![CDATA[        void on_radioButton_green_clicked();
        void on_radioButton_yellow_clicked();
        void on_radioButton_red_clicked();
        void on_pushButton_reloadImage_clicked();
        void on_pushButton_save_clicked();
        void on_pushButton_loadSetting_clicked();
        void on_pushButton_exit_clicked();
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="9b1156207868923a94f72b23a1bc250e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_loader\waypoint_loader_core.cpp" startLineNumber="150" endLineNumber="161"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_loader\waypoint_loader_core.cpp" startLineNumber="181" endLineNumber="192"/>
            <text>
<![CDATA[  wp->twist.twist.linear.x = kmph2mps(std::stod(columns[4]));
}

void WaypointLoaderNode::loadWaypoints(const char *filename, std::vector<waypoint_follower::waypoint> *wps)
{
  std::ifstream ifs(filename);

  if (!ifs)
    return;

  std::string line;
  std::getline(ifs, line);  // get first line
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="42218b456057dfc2cce9bad4be66bc96">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="602" endLineNumber="614"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1291" endLineNumber="1303"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="17" endLineNumber="29"/>
            <text>
<![CDATA[    splitter->addWidget(calibsplitter);
    splitter->setStretchFactor(splitter->indexOf(calibsplitter),1);
}

void CalibrationToolkitBase::grabCalibDataSlot()
{
    if(grabCalibData())
    {
        emit calibDataGrabbedSignal();
    }
    else
    {
        emit calibDataGrabbedErrorSignal();
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="680b75968d0c1fed30abd177c0de0fc4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="98" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="96" endLineNumber="102"/>
            <text>
<![CDATA[    QTabWidget * cameracalibtab;
    cv::Mat cameraextrinsicmat;
    QTableWidget * cameraextrinsicshow;
    cv::Mat cameramat;
    QTableWidget * cameramatshow;
    cv::Mat distcoeff;
    QTableWidget * distcoeffshow;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="a40146dcdb7c9ea8e84ad60563cb0c7f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="43" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="28" endLineNumber="36"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="256" endLineNumber="262"/>
            <text>
<![CDATA[typedef struct nd_data{
  NormalDistribution nd;
  int x;
  int y;
  int z;
  int layer;
}NDData;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="de34fd1d9ae5ccff1817b06461258b36">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\FastVirtualScan\fastvirtualscan.cpp" startLineNumber="237" endLineNumber="248"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\FastVirtualScan\fastvirtualscan.cpp" startLineNumber="282" endLineNumber="293"/>
            <text>
<![CDATA[                                roadfilterflag=0;
                            }
                        }
                        else
                        {
                            if(svs[i][j].height-svs[i][candid].height<=passHeight)
                            {
                                if(svs[i][j].rotlength-svs[i][candid].rotlength<=deltaminheight)
                                {
                                    virtualScan[i]=svsback[i][startrotid].length;
                                    minheights[i]=svsback[i][startrotid].height;
                                    roadfilterflag=0;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="3e543fe1aec5ff3715e212c76174f684">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_image.h" startLineNumber="54" endLineNumber="69"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_image.h" startLineNumber="49" endLineNumber="64"/>
            <text>
<![CDATA[        return use_nn;
    }

    pangolin::XYRangef& GetViewToRender()
    {
        return rview;
    }

    pangolin::XYRangef& GetView()
    {
        return target;
    }

    pangolin::XYRangef& GetDefaultView()
    {
        return rview_default;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="f62e706bfd57f9e04f12806843b77bc2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\sparse_block_matrix_ccs.h" startLineNumber="43" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\sparse_block_matrix_diagonal.h" startLineNumber="37" endLineNumber="56"/>
            <text>
<![CDATA[namespace g2o {

  /**
   * \brief Sparse matrix which uses blocks on the diagonal
   *
   * This class is used as a const view on a SparseBlockMatrix
   * which allows a faster iteration over the elements of the
   * matrix.
   */
  template <class MatrixType>
  class SparseBlockMatrixDiagonal
  {
    public:
      //! this is the type of the elementary block, it is an Eigen::Matrix.
      typedef MatrixType SparseMatrixBlock;

      //! columns of the matrix
      int cols() const {return _blockIndices.size() ? _blockIndices.back() : 0;}
      //! rows of the matrix
      int rows() const {return _blockIndices.size() ? _blockIndices.back() : 0;}
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="b7ed3d570c1ce76f28176381168886ce">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="753" endLineNumber="759"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="208" endLineNumber="214"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="196" endLineNumber="202"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="184" endLineNumber="190"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="172" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="160" endLineNumber="166"/>
            <text>
<![CDATA[	waypoint_marker.type = visualization_msgs::Marker::SPHERE_LIST;
	waypoint_marker.scale.x = 0.2;
	waypoint_marker.scale.y = 0.2;
	waypoint_marker.color.r = 1;
	waypoint_marker.color.g = 1;
	waypoint_marker.color.b = 0;
	waypoint_marker.color.a = 1;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="f8f2618b4c442b7f964fc47657b38e48">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\selectionwidget.h" startLineNumber="69" endLineNumber="75"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="31" endLineNumber="47"/>
            <text>
<![CDATA[#ifndef VELOCITY_SET_INFO_H
#define VELOCITY_SET_INFO_H

#include <ros/ros.h>
#include <pcl_conversions/pcl_conversions.h>
#include <geometry_msgs/PoseStamped.h>
#include <std_msgs/Int32.h>

#include "runtime_manager/ConfigVelocitySet.h"

class VelocitySetInfo
{
 private:
  // parameters
  double stop_range_;               // if obstacle is in this range, stop
  double deceleration_range_;       // if obstacle is in this range, decelerate
  int points_threshold_;            // points threshold to find obstacles
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="cdf8045415cfc87e9049bba7828decbd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="181" endLineNumber="189"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="311" endLineNumber="319"/>
            <text>
<![CDATA[	if(res != CUDA_SUCCESS){
		printf("cuMemcpyHtoD(B_dims) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
	}

	if(pt->pid == 0 && pt->calc_flag == PART){
		gettimeofday(&tv_fconv_memcpyHtoD_end, NULL);
		tvsub(&tv_fconv_memcpyHtoD_end, &tv_fconv_memcpyHtoD_start, &tv);
		time_fconv_memcpyHtoD += tv.tv_sec * 1000.0 + (float)tv.tv_usec / 1000.0;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="7ca444f3e775f0584baadacfd4daf9cb">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\transformation_estimation_lm.h" startLineNumber="109" endLineNumber="144"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\transformation_estimation_point_to_plane_lls.h" startLineNumber="74" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\transformation_estimation_svd.h" startLineNumber="73" endLineNumber="107"/>
            <text>
<![CDATA[        virtual ~TransformationEstimationSVD () {};

        /** \brief Estimate a rigid rotation transformation between a source and a target point cloud using SVD.
          * \param[in] cloud_src the source point cloud dataset
          * \param[in] cloud_tgt the target point cloud dataset
          * \param[out] transformation_matrix the resultant transformation matrix
          */
        inline void
        estimateRigidTransformation (
            const pcl::PointCloud<PointSource> &cloud_src,
            const pcl::PointCloud<PointTarget> &cloud_tgt,
            Matrix4 &transformation_matrix) const;

        /** \brief Estimate a rigid rotation transformation between a source and a target point cloud using SVD.
          * \param[in] cloud_src the source point cloud dataset
          * \param[in] indices_src the vector of indices describing the points of interest in \a cloud_src
          * \param[in] cloud_tgt the target point cloud dataset
          * \param[out] transformation_matrix the resultant transformation matrix
          */
        inline void
        estimateRigidTransformation (
            const pcl::PointCloud<PointSource> &cloud_src,
            const std::vector<int> &indices_src,
            const pcl::PointCloud<PointTarget> &cloud_tgt,
            Matrix4 &transformation_matrix) const;

        /** \brief Estimate a rigid rotation transformation between a source and a target point cloud using SVD.
          * \param[in] cloud_src the source point cloud dataset
          * \param[in] indices_src the vector of indices describing the points of interest in \a cloud_src
          * \param[in] cloud_tgt the target point cloud dataset
          * \param[in] indices_tgt the vector of indices describing the correspondences of the interst points from \a indices_src
          * \param[out] transformation_matrix the resultant transformation matrix
          */
        inline void
        estimateRigidTransformation (
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="db9e1f3844a1112eaf8025010977e3bd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\opengl_render_state.cpp" startLineNumber="373" endLineNumber="380"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\opengl_render_state.cpp" startLineNumber="379" endLineNumber="386"/>
            <text>
<![CDATA[    P.m[5] = 2/(t-b);
    P.m[6] = 0;
    P.m[7] = 0;
    
    P.m[8] = 0;
    P.m[9] = 0;
    P.m[10] = -2/(f-n);
    P.m[11] = 0;
]]>
            </text>
        </set>
        <set lineCount="7" fingerprint="85e575a71aa0f49569918d354e16420b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="304" endLineNumber="312"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="137" endLineNumber="145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\search_info_ros.h" startLineNumber="39" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\klt_track\klt_track.cpp" startLineNumber="66" endLineNumber="75"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\scan2image\nodes\scan2image\scan2image.cpp" startLineNumber="25" endLineNumber="32"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\ground_filter\ground_filter.cpp" startLineNumber="23" endLineNumber="32"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="21" endLineNumber="27"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_publisher\calibration_publisher.cpp" startLineNumber="11" endLineNumber="19"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\gazebo\catvehicle\src\distanceEstimator.cpp" startLineNumber="21" endLineNumber="27"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="129" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\gnss_localizer\nodes\nmea2tfpose\nmea2tfpose_core.h" startLineNumber="59" endLineNumber="73"/>
            <text>
<![CDATA[  ros::NodeHandle private_nh_;

  // publisher
  ros::Publisher pub1_;

  // subscriber
  ros::Subscriber sub1_;

  // constants
  const std::string MAP_FRAME_;
  const std::string GPS_FRAME_;

  // variables
  int32_t plane_number_;
  geo_pos_conv geo_;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="f716f319cde55d43fb9494786229a50c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="937" endLineNumber="953"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="877" endLineNumber="890"/>
            <text>
<![CDATA[  MY_CUDA_CHECK(res, "cuCtxCurrent(ctx[0])");


  /*****************************************************************/
  // for time measurement
  /*****************************************************************/
  CUevent resize_start, resize_end;
  res = cuEventCreate(&resize_start, CU_EVENT_DEFAULT);
  MY_CUDA_CHECK(res, "cuEventCreate(resize_start)");
  res = cuEventCreate(&resize_end, CU_EVENT_DEFAULT);
  MY_CUDA_CHECK(res, "cuEventCreate(resize_end)");

  cuEventRecord(resize_start, NULL);
  MY_CUDA_CHECK(res, "cuEventRecord(resize_start)");
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="35914324a6306fd4d800b303feaaeb08">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\scan2image\nodes\scan2image\scan2image.h" startLineNumber="38" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\data_struct.h" startLineNumber="36" endLineNumber="47"/>
            <text>
<![CDATA[struct Three_dimensional_vector{
    std::vector<float> x;
    std::vector<float> y;
    std::vector<float> z;
};

struct Two_dimensional_vector{
    std::vector<float> x;
    std::vector<float> y;
};

#endif
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="e0e39f9b2683e919d974c7e822cb1f69">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_d_viewer\image_d_viewer.cpp" startLineNumber="292" endLineNumber="300"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_d_viewer\vscan_image_d_viewer.cpp" startLineNumber="212" endLineNumber="223"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="337" endLineNumber="345"/>
            <text>
<![CDATA[  std::string car_node;
  std::string pedestrian_node;
  std::string points_node;

  if (private_nh.getParam("image_raw_topic", image_topic_name)) {
    ROS_INFO("Setting image topic to %s", image_topic_name.c_str());
  } else {
    ROS_INFO("No image topic received, defaulting to image_raw, you can use _image_raw_topic:=YOUR_NODE");
    image_topic_name = "/image_raw";
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="cf0873195df2af7459ad6a787836c05c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\resize_GPU.cpp" startLineNumber="42" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="18" endLineNumber="28"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="29" endLineNumber="39"/>
            <text>
<![CDATA[	int max_scale;
	//image size information
	int IM_WIDTH;
	int IM_HEIGHT;

	//per root
	int *ridx;	//root index information
	int *oidx;	//offsetindex information
	FLOAT *offw;	//offset weight
	int *rsize;	//root size
	int *numpart;	//number of part filter per component
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="16639c2d62ad544ac797096aacd3ea73">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="633" endLineNumber="643"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="630" endLineNumber="640"/>
            <text>
<![CDATA[		RL_array[L] = (int *)pointer_RL;
		pointer_RL += (uintptr_t)NoC*sizeof(int);

		RI_array[L] = (int *)pointer_RI;
		pointer_RI += (uintptr_t)NoC*sizeof(int);

		OI_array[L] = (int *)pointer_OI;
		pointer_OI += (uintptr_t)NoC*sizeof(int);

		RL_S_array[L] = (int *)pointer_RL_S;
		pointer_RL_S += (uintptr_t)NoC*sizeof(int);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="0b9edc2332641027d839a568f7466893">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="983" endLineNumber="992"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="927" endLineNumber="937"/>
            <text>
<![CDATA[  for (i=0; i<crosswalks.size(); i++) {
    if (crosswalks[i].id <= 0) {
      continue;
    }
    int aid = crosswalks[i].aid;
    int slid = areaclasses[aid].slid;
    int elid = areaclasses[aid].elid;

    marker.type = visualization_msgs::Marker::LINE_STRIP;

    set_marker_data(&marker,
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="354c1b04bbcf27ffddf4b9fbb8a0ad36">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_receiver\vehicle_receiver.cpp" startLineNumber="48" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_downloader\pos_downloader.cpp" startLineNumber="62" endLineNumber="71"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_downloader\pos_downloader.cpp" startLineNumber="61" endLineNumber="69"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_downloader\pos_downloader.cpp" startLineNumber="60" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="99" endLineNumber="118"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="97" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="95" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="93" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="91" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="86" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="84" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="82" endLineNumber="99"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="80" endLineNumber="97"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="78" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="75" endLineNumber="93"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="73" endLineNumber="91"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="71" endLineNumber="86"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="69" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="67" endLineNumber="82"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="65" endLineNumber="80"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="63" endLineNumber="78"/>
            <text>
<![CDATA[#define kmax (0.1900)
// Minimum curvature (radians)
#define kmin (-0.1900)
// Maximum rate of curvature (radians/second)
#define dkmax (0.1021)
// Minimum rate of curvature (radians/second)
#define dkmin (-0.1021)
// Maximum acceleration (meters/second^2)
#define dvmax (2.000)
// Maximum deceleration (meters/second^2)
#define dvmin (-6.000)
// Control latency (seconds)
#define tdelay (0.0800)
 //#define tdelay (0.03)
// Speed control logic a coefficient
#define ascl (0.1681)
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="d35d47e083e19be0c9f730f7f3caaa39">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\space_filter\space_filter.cpp" startLineNumber="15" endLineNumber="26"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\ground_filter\ground_filter.cpp" startLineNumber="16" endLineNumber="26"/>
            <text>
<![CDATA[class GroundFilter
{
public:
	GroundFilter();

private:

	ros::NodeHandle node_handle_;
	ros::Subscriber cloud_sub_;
	ros::Publisher 	cloud_lanes_pub_;
	ros::Publisher 	cloud_ground_pub_;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="42995a21051374a722a3aea0aea2b3f1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_viewer\scan_image_viewer.cpp" startLineNumber="94" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_d_viewer\scan_image_d_viewer.cpp" startLineNumber="227" endLineNumber="239"/>
            <text>
<![CDATA[    cvShowImage(window_name, image_view);
    cvWaitKey(2);
    cvReleaseImage(&image_view);
}

static void scan_image_callback(const scan2image::ScanImage& scan_image_msg)
{
    scan_image = scan_image_msg;
    exist_scan = true;
    show();
}

static void car_fusion_callback(const cv_tracker::image_obj_ranged& fused_car_msg)
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="0cd3c8ee84e24e54d11ad477711855d3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="92" endLineNumber="101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="72" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\obj_reproj.cpp" startLineNumber="86" endLineNumber="94"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\include\astar_util.h" startLineNumber="38" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\rawdata.h" startLineNumber="150" endLineNumber="158"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="17" endLineNumber="27"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glplatform.h" startLineNumber="39" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="55" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="22" endLineNumber="31"/>
            <text>
<![CDATA[  double b;
  double l;
  int ref;
  int mcode1;
  int mcode2;
  int mcode3;
}Point;

typedef struct{
  int lid;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="4f958dfb4e9843c3ecc52e3d4c90b60b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\newton.cpp" startLineNumber="240" endLineNumber="249"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\newton.cpp" startLineNumber="239" endLineNumber="248"/>
            <text>
<![CDATA[  qd3[0][0] = 1;
  qd3[0][1] = 0;
  qd3[0][2] = 0;

  qd3[1][0] = 0;
  qd3[1][1] = 1;
  qd3[1][2] = 0;

  qd3[2][0] = 0;
  qd3[2][1] = 0;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="f2f6d0b5f0f36c4ccc84db6873b54d56">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="135" endLineNumber="144"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="87" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\search_info_ros.h" startLineNumber="37" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\gazebo\catvehicle\src\distanceEstimator.cpp" startLineNumber="19" endLineNumber="26"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\threadedfilebuf.h" startLineNumber="64" endLineNumber="73"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="302" endLineNumber="311"/>
            <text>
<![CDATA[    ros::Publisher pubMag;
    vssp::vsspDriver driver;
    sensor_msgs::PointCloud2 cloud2;
    sensor_msgs::Imu imu;
    sensor_msgs::MagneticField mag;

    ros::Time timePing;
    ros::Time timestampBase;

    int field;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="1676e30d241ec6dc1f389d18fe6e64b8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_sorting.h" startLineNumber="113" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_sorting.h" startLineNumber="96" endLineNumber="105"/>
            <text>
<![CDATA[    struct sortCorrespondencesByQueryIndexAndDistance : public std::binary_function<pcl::Correspondence, pcl::Correspondence, bool>
    {
      inline bool 
      operator()( pcl::Correspondence a, pcl::Correspondence b)
      {
        if (a.index_query < b.index_query)
          return (true);
        else if ( (a.index_query == b.index_query) && (a.distance < b.distance) )
          return (true);
        return (false);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="36503e4ffe186fd70d08bd7b54dddd4d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\rawdata.h" startLineNumber="145" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="490" endLineNumber="512"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="300" endLineNumber="322"/>
            <text>
<![CDATA[      protected:
        /** \brief The correspondence estimation method name. */
        std::string corr_name_;

        /** \brief A pointer to the spatial search object used for the target dataset. */
        KdTreePtr tree_;

        /** \brief A pointer to the spatial search object used for the source dataset. */
        KdTreeReciprocalPtr tree_reciprocal_;


        
        /** \brief The input point cloud dataset target. */
        PointCloudTargetConstPtr target_;

        /** \brief The target point cloud dataset indices. */
        IndicesPtr target_indices_;

        /** \brief The point representation used (internal). */
        PointRepresentationConstPtr point_representation_;

        /** \brief The transformed input source point cloud dataset. */
        PointCloudTargetPtr input_transformed_;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="90bf3f7e10f984f895aad470df02caa1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\load_model.cpp" startLineNumber="24" endLineNumber="32"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\load_model.cpp" startLineNumber="18" endLineNumber="26"/>
            <text>
<![CDATA[#ifdef FLOAT_IS_float
#define FLOAT_SCAN_FMT	"%f,"
#else
#define FLOAT_SCAN_FMT	"%lf,"
#endif

#define FLOAT_SCAN_FMT2	FLOAT_SCAN_FMT FLOAT_SCAN_FMT
#define FLOAT_SCAN_FMT3	FLOAT_SCAN_FMT2 FLOAT_SCAN_FMT
#define FLOAT_SCAN_FMT4	FLOAT_SCAN_FMT3 FLOAT_SCAN_FMT
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="58837affabffcc1c3d347e3ec12531fc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="990" endLineNumber="1000"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="982" endLineNumber="991"/>
            <text>
<![CDATA[		free(sub_dst_DIDX);
		free(DIDX_array);

		res = cuMemFreeHost(dst_DID_4);
		if(res != CUDA_SUCCESS) {
			printf("cuMemFreeHost(dst_DID_4) failed: res = %s\n", cuda_response_to_string(res));
			exit(1);
		}
		free(sub_dst_DID_4);
		free(DID_4_array);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="83d80199be77a33c46c780c4e34bb4ff">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\plotter.h" startLineNumber="148" endLineNumber="157"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="554" endLineNumber="579"/>
            <text>
<![CDATA[      CorrespondencesPtr correspondences_;

      /** \brief A TransformationEstimation object, used to calculate the 4x4 rigid transformation. */
      TransformationEstimationPtr transformation_estimation_;

      /** \brief A CorrespondenceEstimation object, used to estimate correspondences between the source and the target cloud. */
      CorrespondenceEstimationPtr correspondence_estimation_;

      /** \brief The list of correspondence rejectors to use. */
      std::vector<CorrespondenceRejectorPtr> correspondence_rejectors_;

      /** \brief Variable that stores whether we have a new target cloud, meaning we need to pre-process it again.
       * This way, we avoid rebuilding the kd-tree for the target cloud every time the determineCorrespondences () method
       * is called. */
      bool target_cloud_updated_;
      /** \brief Variable that stores whether we have a new source cloud, meaning we need to pre-process it again.
       * This way, we avoid rebuilding the reciprocal kd-tree for the source cloud every time the determineCorrespondences () method
       * is called. */
      bool source_cloud_updated_;
      /** \brief A flag which, if set, means the tree operating on the target cloud 
       * will never be recomputed*/
      bool force_no_recompute_;
      
      /** \brief A flag which, if set, means the tree operating on the source cloud 
       * will never be recomputed*/
      bool force_no_recompute_reciprocal_;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="f27b1a019c6e5035209b4760b2661544">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\CarPositionXYZ.h" startLineNumber="254" endLineNumber="264"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\CarPositionXYZ.h" startLineNumber="248" endLineNumber="258"/>
            <text>
<![CDATA[    s << indent << "car_type[]" << std::endl;
    for (size_t i = 0; i < v.car_type.size(); ++i)
    {
      s << indent << "  car_type[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.car_type[i]);
    }
    s << indent << "corner_point[]" << std::endl;
    for (size_t i = 0; i < v.corner_point.size(); ++i)
    {
      s << indent << "  corner_point[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.corner_point[i]);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="59b55dca160eaee34f43c07db43fdb08">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="808" endLineNumber="818"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="741" endLineNumber="751"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="713" endLineNumber="723"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="685" endLineNumber="695"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="657" endLineNumber="667"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="629" endLineNumber="639"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="898" endLineNumber="908"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="870" endLineNumber="880"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="842" endLineNumber="852"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="470" endLineNumber="481"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="432" endLineNumber="442"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="404" endLineNumber="414"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="376" endLineNumber="386"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="348" endLineNumber="358"/>
            <text>
<![CDATA[    if (area.aid == 0)
    {
      ROS_ERROR_STREAM("[createZebraZoneMarkerArray] invalid area: " << area);
      continue;
    }

    visualization_msgs::Marker marker = createAreaMarker("zebra_zone", id++, color, vmap, area);
    if (isValidMarker(marker))
      marker_array.markers.push_back(marker);
    else
      ROS_ERROR_STREAM("[createZebraZoneMarkerArray] failed createAreaMarker: " << area);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="f4d33170b4e46eac7ce615974f607124">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="74" endLineNumber="83"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.h" startLineNumber="27" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="126" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\include\astar_util.h" startLineNumber="40" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="19" endLineNumber="29"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="48" endLineNumber="57"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="39" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="32" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="24" endLineNumber="33"/>
            <text>
<![CDATA[  int ref;
  int mcode1;
  int mcode2;
  int mcode3;
}Point;

typedef struct{
  int lid;
  int bpid;
  int fpid;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="6d3b7f8a9a8fb0a07e6d5e5ef61131c9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\openmp_mutex.h" startLineNumber="27" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\structure.h" startLineNumber="37" endLineNumber="45"/>
            <text>
<![CDATA[    double Y;
    double Z;
    double W;
}LOCATION;

typedef struct _ANGLE{
    double thiX;
    double thiY;
    double thiZ;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="bf68379ef7075fc4da410ce01224a154">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_matching\orb_matching.cpp" startLineNumber="496" endLineNumber="506"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_mapping\orb_mapping.cpp" startLineNumber="213" endLineNumber="224"/>
            <text>
<![CDATA[	string externalFrameFixed;
	string externalFrameMoving;

	double lastImageTimestamp;
	bool gotFirstFrame;

public:
//	volatile bool doStop;

	image_transport::TransportHints th;
	image_transport::ImageTransport *imageBuf;
	image_transport::Subscriber imageSub;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="026f5016c7d6d9c9cc26520200a31cf0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\sparse_optimizer.cpp" startLineNumber="539" endLineNumber="550"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\sparse_optimizer.cpp" startLineNumber="528" endLineNumber="539"/>
            <text>
<![CDATA[  void SparseOptimizer::push(HyperGraph::VertexSet& vlist)
  {
    for (HyperGraph::VertexSet::iterator it = vlist.begin(); it != vlist.end(); ++it) {
      OptimizableGraph::Vertex* v = dynamic_cast<OptimizableGraph::Vertex*>(*it);
      if (v)
	v->push();
      else 
	cerr << __FUNCTION__ << ": FATAL PUSH SET" << endl;
    }
  }

  void SparseOptimizer::pop(HyperGraph::VertexSet& vlist)
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="2d86b5d388694949b20d0bbcdc980128">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2image\points2image.cpp" startLineNumber="123" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\ssd_node.cpp" startLineNumber="143" endLineNumber="158"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\rcnn\rcnn_node.cpp" startLineNumber="160" endLineNumber="175"/>
            <text>
<![CDATA[		ros::NodeHandle private_node_handle("~");//to receive args

		//RECEIVE IMAGE TOPIC NAME
		std::string image_raw_topic_str;
		if (private_node_handle.getParam("image_raw_node", image_raw_topic_str))
		{
			ROS_INFO("Setting image node to %s", image_raw_topic_str.c_str());
		}
		else
		{
			ROS_INFO("No image node received, defaulting to /image_raw, you can use _image_raw_node:=YOUR_TOPIC");
			image_raw_topic_str = "/image_raw";
		}

		//RECEIVE CONVNET FILENAMES
		std::string network_definition_file;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="d05e90bd9ca6dd63566040e94b1362f9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="980" endLineNumber="987"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="503" endLineNumber="510"/>
            <text>
<![CDATA[			std::string host_name;
			n.param<std::string>("points_map_loader/host_name", host_name, HTTP_HOSTNAME);
			int port;
			n.param<int>("points_map_loader/port", port, HTTP_PORT);
			std::string user;
			n.param<std::string>("points_map_loader/user", user, HTTP_USER);
			std::string password;
			n.param<std::string>("points_map_loader/password", password, HTTP_PASSWORD);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="e784d85ec3d4b18cdee6fc0b908facdf">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\plotter.h" startLineNumber="181" endLineNumber="190"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\ORBextractor.h" startLineNumber="97" endLineNumber="107"/>
            <text>
<![CDATA[    int nfeatures;
    double scaleFactor;
    int nlevels;
    int iniThFAST;
    int minThFAST;

    std::vector<int> mnFeaturesPerLevel;

    std::vector<int> umax;

    std::vector<float> mvScaleFactor;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="82a35fce4acba867c51fd79713f73e02">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\eigen_types.h" startLineNumber="55" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\eigen_types.h" startLineNumber="50" endLineNumber="58"/>
            <text>
<![CDATA[  typedef Eigen::Matrix<int,2,2,Eigen::ColMajor>                                  Matrix2I;
  typedef Eigen::Matrix<int,3,3,Eigen::ColMajor>                                  Matrix3I;
  typedef Eigen::Matrix<int,4,4,Eigen::ColMajor>                                  Matrix4I;
  typedef Eigen::Matrix<int,Eigen::Dynamic,Eigen::Dynamic,Eigen::ColMajor>        MatrixXI;

  typedef Eigen::Matrix<float,2,2,Eigen::ColMajor>                                Matrix2F;
  typedef Eigen::Matrix<float,3,3,Eigen::ColMajor>                                Matrix3F;
  typedef Eigen::Matrix<float,4,4,Eigen::ColMajor>                                Matrix4F;
  typedef Eigen::Matrix<float,Eigen::Dynamic,Eigen::Dynamic,Eigen::ColMajor>      MatrixXF;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="1459c8f956ed8df2878014f29f57bab9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="72" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_trajectory_gen\lattice_trajectory_gen.cpp" startLineNumber="91" endLineNumber="101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="29" endLineNumber="45"/>
            <text>
<![CDATA[#define PANGOLIN_HANDLER_ENUMS_H

namespace pangolin
{

// Supported Key modifiers for GlobalKeyPressCallback.
// e.g. PANGO_CTRL + 'r', PANGO_SPECIAL + GLUT_KEY_RIGHT, etc.
const int PANGO_SPECIAL = 128;
const int PANGO_CTRL = -96;
const int PANGO_OPTN = 132;

// Ordinary keys
const int PANGO_KEY_TAB       = 9;
const int PANGO_KEY_ESCAPE    = 27;

// Special Keys (same as GLUT_ defines)
const int PANGO_KEY_F1        = 1;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="ba6c2a64d10e10bc1fb4040bb0b8d028">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="543" endLineNumber="550"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="542" endLineNumber="549"/>
            <text>
<![CDATA[		pcl::PointCloud<pcl::PointXYZ>::Ptr current_sensor_cloud_ptr (new pcl::PointCloud<pcl::PointXYZ>);
		pcl::PointCloud<pcl::PointXYZ>::Ptr removed_points_cloud_ptr (new pcl::PointCloud<pcl::PointXYZ>);
		pcl::PointCloud<pcl::PointXYZ>::Ptr downsampled_cloud_ptr (new pcl::PointCloud<pcl::PointXYZ>);
		pcl::PointCloud<pcl::PointXYZ>::Ptr inlanes_cloud_ptr (new pcl::PointCloud<pcl::PointXYZ>);
		pcl::PointCloud<pcl::PointXYZ>::Ptr nofloor_cloud_ptr (new pcl::PointCloud<pcl::PointXYZ>);
		pcl::PointCloud<pcl::PointXYZ>::Ptr onlyfloor_cloud_ptr (new pcl::PointCloud<pcl::PointXYZ>);
		pcl::PointCloud<pcl::PointXYZ>::Ptr diffnormals_cloud_ptr (new pcl::PointCloud<pcl::PointXYZ>);
		pcl::PointCloud<pcl::PointXYZ>::Ptr clipped_cloud_ptr (new pcl::PointCloud<pcl::PointXYZ>);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="30c335ed0a29d5a918b1932dee46ebea">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_matching\orb_matching.cpp" startLineNumber="488" endLineNumber="501"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="85" endLineNumber="93"/>
            <text>
<![CDATA[tf::TransformListener* _transform_listener;

std::string _output_frame;
static bool _velodyne_transform_available;
static bool _downsample_cloud;
static bool _pose_estimation;
static double _leaf_size;
static int _cluster_size_min;
static int _cluster_size_max;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="89d02e15d0c9c0b021e29e3c28782af1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="742" endLineNumber="754"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="730" endLineNumber="742"/>
            <text>
<![CDATA[	return fine_vmap;
}

std::vector<vector_map::Point> create_branching_points(const VectorMap& vmap)
{
	std::vector<vector_map::Point> branching_points;
	for (const vector_map::Point& p : vmap.points) {
		if (!is_branching_point(vmap, p))
			continue;
		branching_points.push_back(p);
	}

	return branching_points;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="b8d3acfb7bc8231186313751c1fde510">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\state\state_machine\nodes\state_machine\state_machine_core.h" startLineNumber="31" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\cg.h" startLineNumber="70" endLineNumber="82"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\gnss_localizer\nodes\nmea2tfpose\nmea2tfpose_core.h" startLineNumber="31" endLineNumber="54"/>
            <text>
<![CDATA[#ifndef NMEA2TFPOSE_CORE_H
#define NMEA2TFPOSE_CORE_H

// C++ includes
#include <string>
#include <memory>

// ROS includes
#include <ros/ros.h>
#include <geometry_msgs/PoseStamped.h>
#include <nmea_msgs/Sentence.h>
#include <tf/transform_broadcaster.h>

#include "geo_pos_conv.hh"

namespace gnss_localizer
{
class Nmea2TFPoseNode
{
public:
  Nmea2TFPoseNode();
  ~Nmea2TFPoseNode();

  void run();
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="97eb7130da01f906e882d1667224e791">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="472" endLineNumber="482"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\get_boxes.cpp" startLineNumber="57" endLineNumber="67"/>
            <text>
<![CDATA[	for(int ii=0;ii<size[2];ii++)	//31
	{
		P+=L; //row-all
		for(int jj=0;jj<size[1];jj++)
		{
			P+=pady;
			memcpy(P, S,M_S);
			S+=size[0];
			P+=SPL;
		}
		P+=L; //row-all
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="65e0c5fd0acbb7452de8f92fde7bf647">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_viewer\vscan_image_viewer.cpp" startLineNumber="40" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_viewer\points_image_viewer.cpp" startLineNumber="40" endLineNumber="49"/>
            <text>
<![CDATA[#define IMAGE_WIDTH 800
#define IMAGE_HEIGHT 640

static bool existImage = false;
static bool existPoints = false;
static sensor_msgs::Image image_msg;
static points2image::PointsImageConstPtr points_msg;
static cv::Mat colormap;

static const char window_name_base[] = "points_image_viewer";
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="8f3df61660e6e77247de3c1a87a83da2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="69" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapPoint.h" startLineNumber="120" endLineNumber="129"/>
            <text>
<![CDATA[    long int mnFirstFrame;
    int nObs;

    // Variables used by the tracking
    float mTrackProjX;
    float mTrackProjY;
    float mTrackProjXR;
    bool mbTrackInView;
    int mnTrackScaleLevel;
    float mTrackViewCos;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="6bbd3c37d4d7238dd2e2a29f18942a9f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\src\voxel_grid.cpp" startLineNumber="318" endLineNumber="334"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\src\voxel_grid.cpp" startLineNumber="151" endLineNumber="166"/>
            <text>
<![CDATA[        xyz_offset += cloud->point_step;
        continue;
      }
    }

    // Unoptimized memcpys: assume fields x, y, z are in random order
    memcpy (&pt[0], &cloud->data[xyz_offset[0]], sizeof (float));
    memcpy (&pt[1], &cloud->data[xyz_offset[1]], sizeof (float));
    memcpy (&pt[2], &cloud->data[xyz_offset[2]], sizeof (float));
    // Check if the point is invalid
    if (!pcl_isfinite (pt[0]) || 
        !pcl_isfinite (pt[1]) || 
        !pcl_isfinite (pt[2]))
    {
      xyz_offset += cloud->point_step;
      continue;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="4f0133b5cd642a9150afe947080ec1c8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="229" endLineNumber="236"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="305" endLineNumber="312"/>
            <text>
<![CDATA[		&tmpM_dev[pt->pid],                    // FLOAT *src_start
		&M_dev[pt->pid],                       // FLOAT *dst_start
		&tmpIx_dev[pt->pid],                   // int *ptr_start
		&DID_4_array_dev[pt->pid],             // int *DID_4_array,
		&def_array_dev[pt->pid],               // FLOAT *def_array,
		(void*)&(pt->NoP),                  // int NoP
		&pm_size_array_dev[pt->pid],           // int *size_array
		&numpart_dev[pt->pid],                 // int *numpart,
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="49bb66b4b79859bfc2fd3adf9d684cd4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\lib\libwaypoint_follower.cpp" startLineNumber="137" endLineNumber="145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="684" endLineNumber="693"/>
            <text>
<![CDATA[  tf::Transform inverse;
  tf::poseMsgToTF(pose, inverse);

  tf::Point p;
  pointMsgToTF(input_point, p);
  tf::Point tf_p = inverse * p;

  geometry_msgs::Point tf_point_msg;
  pointTFToMsg(tf_p, tf_point_msg);
  return tf_point_msg;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="9c0960b687035edc5cee71651165b897">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\widgets\widgets.cpp" startLineNumber="285" endLineNumber="299"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\widgets\widgets.cpp" startLineNumber="247" endLineNumber="261"/>
            <text>
<![CDATA[            GuiVarChanged(*this);
        }
    }
}

void Button::Render()
{
    glColor4fv(colour_fg );
    glRect(v);
    glColor4fv(colour_tx);
    gltext.DrawWindow(raster[0],raster[1]-down);
    DrawShadowRect(v, down);
}

void Button::ResizeChildren()
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="1c61b42721fd0c9c107f84c767b6360d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="292" endLineNumber="299"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="291" endLineNumber="298"/>
            <text>
<![CDATA[      mk_red.scale.x    = (double)0.3;
      mk_red.scale.y    = (double)0.3;
      mk_red.scale.z    = (double)0.3;
      mk_yellow.scale.x = (double)0.3;
      mk_yellow.scale.y = (double)0.3;
      mk_yellow.scale.z = (double)0.3;
      mk_green.scale.x  = (double)0.3;
      mk_green.scale.y  = (double)0.3;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="76f2cec5ef4b53c363ab8e8f314e56d3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1404" endLineNumber="1415"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="328" endLineNumber="338"/>
            <text>
<![CDATA[    QLabel * tmpcalibimageshow=(QLabel *)(calibimagesshow->widget(id));
    calibimagesshow->removeTab(id);
    delete tmpcalibimageshow;
    int i,n=calibimagesshow->count();
    for(i=id;i<n;i++)
    {
        chessboardposeshow->setTabText(i,QString("Chessboard_%1").arg(i));
        calibimagesshow->setTabText(i,QString("Image_%1").arg(i));
    }

    return 1;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="bda7c0abdc328febc71c4a38377ba7ca">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\FastVirtualScan\fastvirtualscan.cpp" startLineNumber="167" endLineNumber="174"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\FastVirtualScan\fastvirtualscan.cpp" startLineNumber="104" endLineNumber="111"/>
            <text>
<![CDATA[#ifdef USEOMP
#ifndef QT_DEBUG
#pragma omp parallel for \
    default(shared) \
    schedule(static)
#endif
#endif
        for(int i=0;i<beamnum;i++)
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="6ae22fe8fbf90cb2893c058589be7958">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\can\packages\kvaser\nodes\can_converter\can_converter.cpp" startLineNumber="51" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\can\packages\kvaser\nodes\can_converter\can_converter.cpp" startLineNumber="46" endLineNumber="55"/>
            <text>
<![CDATA[    w=msg->dat[6]*256+msg->dat[7];
    wheel4=w;
    changed=1;
  }
  if(msg->id==0xb4){
    w=msg->dat[5]*256+msg->dat[6];
    speed3=w;
    changed=1;
  }
  if(msg->id==0x224){
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="4b8fb42f67f52f25a54e95c6c0658e48">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="75" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="127" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\include\astar_util.h" startLineNumber="41" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="12" endLineNumber="32"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\autoware_connector\nodes\can_info_translator\can_info_translator_core.h" startLineNumber="31" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="20" endLineNumber="30"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="49" endLineNumber="58"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="40" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="33" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="25" endLineNumber="34"/>
            <text>
<![CDATA[  int mcode1;
  int mcode2;
  int mcode3;
}Point;

typedef struct{
  int lid;
  int bpid;
  int fpid;
  int blid;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="6bd66e970a1440cf60583aadf934d0dd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\matching_gpu.cpp" startLineNumber="772" endLineNumber="779"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\matching_gpu.cpp" startLineNumber="770" endLineNumber="777"/>
            <text>
<![CDATA[        CUDA_CHECK(res, "cuStreamSynchronize(ditTransStreams[%d])", i);
        res = cuStreamDestroy(ditTransStreams[i]);
        CUDA_CHECK(res, "cuStreamDestroy(ditTransStreams[%d])", i);
        res = cuMemFree(dev_distTransWork[i]);
        CUDA_CHECK(res, "cuMemFree(dev_distTransWork[%d])", i);
        res = cuMemFree(dev_distTransScore[i]);
        CUDA_CHECK(res, "cuMemFree(dev_distTransScore[%d])", i);
        res = cuMemFree(dev_x[i]);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="b7510236d4897deac267b48e19d3fc02">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="188" endLineNumber="206"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="172" endLineNumber="188"/>
            <text>
<![CDATA[static std::ofstream ofs;
static std::string filename;

static void param_callback(const runtime_manager::ConfigICP::ConstPtr& input)
{
  if (_use_gnss != input->init_pos_gnss)
  {
    init_pos_set = 0;
  }
  else if (_use_gnss == 0 &&
           (initial_pose.x != input->x || initial_pose.y != input->y || initial_pose.z != input->z ||
            initial_pose.roll != input->roll || initial_pose.pitch != input->pitch || initial_pose.yaw != input->yaw))
  {
    init_pos_set = 0;
  }

  _use_gnss = input->init_pos_gnss;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="d5ec8df3defd24628963d0accd736fb4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="654" endLineNumber="665"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="643" endLineNumber="654"/>
            <text>
<![CDATA[		fine_vmap.points.push_back(point);

		// last is equal to previous dtlane
		vector_map::DTLane dtlane;
		dtlane.did = -1;
		for (const vector_map::DTLane& d : lane_vmap.dtlanes) {
			if (d.did == lane.did) {
				dtlane = d;
				break;
			}
		}
		fine_vmap.dtlanes.push_back(dtlane);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="1d5adc98ca6a89bfa5f8b14f658ec0c7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="377" endLineNumber="384"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="375" endLineNumber="382"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\get_boxes.cpp" startLineNumber="231" endLineNumber="238"/>
            <text>
<![CDATA[	struct timeval tv_root_score_start, tv_root_score_end;
	float time_root_score = 0;
	struct timeval tv_part_score_start, tv_part_score_end;
	float time_part_score = 0;
	struct timeval tv_dt_start, tv_dt_end;
	float time_dt = 0;
	struct timeval tv_calc_a_score_start, tv_calc_a_score_end;
	float time_calc_a_score = 0;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="c2f9eda7a9e78e26d91beedd70733918">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="92" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="79" endLineNumber="94"/>
            <text>
<![CDATA[  return 1;
}

int add_matrix3d(double s1[3][3], double s2[3][3], double dst[3][3])
{
  int i, j;
  for (i = 0; i < 3; i++)
  {
    for (j = 0; j < 3; j++)
    {
      dst[i][j] = s1[i][j] + s2[i][j];
    }
  }
  return 1;
}
int add_matrix6d(double s1[6][6], double s2[6][6], double dst[6][6])
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="f582b64388847697bc74612093d96abd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="333" endLineNumber="341"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="310" endLineNumber="318"/>
            <text>
<![CDATA[  for (const auto& lane : lanes)
  {
    Point start_point = findStartPoint(vmap, lane);
    if (start_point.pid == 0)
      continue;
    Point end_point = findEndPoint(vmap, lane);
    if (end_point.pid == 0)
      continue;
    Point median_point = createMedianPoint(start_point, end_point);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="efd4aad52785a77c298da86fa4a5061e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="904" endLineNumber="911"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_mobility\sample_mobility.cpp" startLineNumber="58" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="78" endLineNumber="85"/>
            <text>
<![CDATA[  std::cout << "gps_id: " << gps_id << std::endl;
  std::cout << "lat: " << lat << std::endl;
  std::cout << "lon: " << lon << std::endl;
  std::cout << "ele: " << ele << std::endl;
  std::cout << "timestamp: " << timestamp << std::endl;
  std::cout << "x: " << x << std::endl;
  std::cout << "y: " << y << std::endl;
  std::cout << "z: " << z << std::endl;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="3e87db8514474b16c61c8179bebbddf0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\view.h" startLineNumber="41" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="246" endLineNumber="259"/>
            <text>
<![CDATA[    int
		// Working resolution
		imageWorkWidth,
		imageWorkHeight,
		// ROI
		ROIx0,
		ROIy0,
		ROIwidth,
		ROIheight;
};

} //namespace ORB_SLAM

#endif // TRACKING_H
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="f9a0d5f251344fdd83d9d5418e446206">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glformattraits.h" startLineNumber="61" endLineNumber="73"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glformattraits.h" startLineNumber="51" endLineNumber="63"/>
            <text>
<![CDATA[    static const GLint glinternalformat = GL_LUMINANCE32F_ARB;
    static const GLenum glformat = GL_LUMINANCE;
    static const GLenum gltype = GL_FLOAT;
};

//////////////////////////////////////////////////////////////////

template<>
struct GlFormatTraits<unsigned char>
{
    static const GLint glinternalformat = GL_LUMINANCE;
    static const GLenum glformat = GL_LUMINANCE;
    static const GLenum gltype = GL_UNSIGNED_BYTE;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="09594a8e1215a5dc272933480b2b0b34">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="101" endLineNumber="109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="89" endLineNumber="100"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="77" endLineNumber="87"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="65" endLineNumber="75"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="52" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="128" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="151" endLineNumber="161"/>
            <text>
<![CDATA[#define INITIAL_Z 87
#define INITIAL_ROLL  0
#define INITIAL_PITCH 0
#define INITIAL_YAW 0      //matsu
//#define INITIAL_YAW 3.14   //zmp
#endif

//no map
#if 0
#define INITIAL_X 0
#define INITIAL_Y 0
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="54fea811796b4cb479a2fd2ddc76165d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="150" endLineNumber="163"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_receiver\vehicle_receiver.cpp" startLineNumber="159" endLineNumber="172"/>
            <text>
<![CDATA[  return nullptr;
}

static void* receiverCaller(void *unused)
{
  constexpr int listen_port = 10000;

  int sock = socket(AF_INET, SOCK_STREAM, 0);
  if(sock == -1){
    std::perror("socket");
    return nullptr;
  }

  sockaddr_in client;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="d49c190313f8ec26ffe37d746d3a0d56">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="171" endLineNumber="181"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="165" endLineNumber="175"/>
            <text>
<![CDATA[    value(short v) : type_(int64_type) {
        u_.int64_ = static_cast<int64_t>(v);
    }
    value(unsigned short v) : type_(int64_type) {
        u_.int64_ = static_cast<int64_t>(v);
    }
    value(int v) : type_(int64_type) {
        u_.int64_ = static_cast<int64_t>(v);
    }
    value(unsigned int v) : type_(int64_type) {
        u_.int64_ = static_cast<int64_t>(v);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="a7fea35df175f8c6a66149a4055affa5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="397" endLineNumber="407"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="463" endLineNumber="473"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="426" endLineNumber="436"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="500" endLineNumber="510"/>
            <text>
<![CDATA[    marker.action = visualization_msgs::Marker::DELETE;
    return marker;
  }

  marker.type = visualization_msgs::Marker::LINE_STRIP;
  marker.action = visualization_msgs::Marker::ADD;
  marker.scale.x = 0.05;

  std_msgs::ColorRGBA color;
  color.r = 1.0;
  color.a = 1.0;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="c384af2b99cc15225f170337d26f37c9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\load_model.cpp" startLineNumber="44" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\load_model.cpp" startLineNumber="42" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\load_model.cpp" startLineNumber="54" endLineNumber="61"/>
            <text>
<![CDATA[	fscanf(file,FLOAT_SCAN_FMT,&t1);
	MI->sbin=(int)t1;           //sbin
	fscanf(file,FLOAT_SCAN_FMT,&t1);
	MI->interval=(int)t1;       //interval
	fscanf(file,FLOAT_SCAN_FMT,&t1);
	MI->max_Y=(int)t1;          //max_Y
	fscanf(file,FLOAT_SCAN_FMT,&t1);
	MI->max_X=(int)t1;          //max_X
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="02e166da8d363ca68a63c9886e57e679">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="334" endLineNumber="348"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="308" endLineNumber="322"/>
            <text>
<![CDATA[  lane_waypoint_marker.frame_locked = true;

  for (unsigned int i = 0; i < lane_waypoint.waypoints.size(); i++)
  {
    geometry_msgs::Point point;
    point = lane_waypoint.waypoints[i].pose.pose.position;
    lane_waypoint_marker.points.push_back(point);

  }
  g_local_waypoints_marker_array.markers.push_back(lane_waypoint_marker);
}

void createLocalPointMarker(const waypoint_follower::lane &lane_waypoint)
{
  visualization_msgs::Marker lane_waypoint_marker;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="38bbadb984cfaa9f2dd479ac7427796d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\stuff\property.cpp" startLineNumber="90" endLineNumber="98"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.cpp" startLineNumber="716" endLineNumber="724"/>
            <text>
<![CDATA[  vector<string> typesMap = strSplit(types, ",");
  for (size_t i = 0; i < typesMap.size(); ++i) {
    vector<string> m = strSplit(typesMap[i], "=");
    if (m.size() != 2) {
      cerr << __PRETTY_FUNCTION__ << ": unable to extract type map from " << typesMap[i] << endl;
      continue;
    }
    string typeInFile = trim(m[0]);
    string loadedType = trim(m[1]);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="3004e044e2b1a6f8a33cdfe5ad90f151">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="53" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_levenberg.h" startLineNumber="72" endLineNumber="85"/>
            <text>
<![CDATA[      double _currentLambda;
      double _tau;
      double _goodStepLowerScale; ///< lower bound for lambda decrease if a good LM step
      double _goodStepUpperScale; ///< upper bound for lambda decrease if a good LM step
      double _ni;
      int _levenbergIterations;   ///< the numer of levenberg iterations performed to accept the last step
      //RAUL
      int _nBad;

      /**
       * helper for Levenberg, this function computes the initial damping factor, if the user did not
       * specify an own value, see setUserLambdaInit()
       */
      double computeLambdaInit() const;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="0da96cc73c6cc9951dd18e6a91be315c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="136" endLineNumber="145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="242" endLineNumber="249"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\colour.h" startLineNumber="100" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="222" endLineNumber="232"/>
            <text>
<![CDATA[  double c_xy;
  double c_yz;
  double c_zx;

  double x;
  double y;
  double z;

  double w;

  double l[3];/*eigen value*/
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="fb3cf3d82da07b1103ba73a3220262dc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\autoware_rviz_plugins\src\state_panel\state_panel.h" startLineNumber="31" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\integrated_viewer\node\traffic_light_plugin\traffic_light_plugin.h" startLineNumber="1" endLineNumber="20"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\integrated_viewer\node\image_viewer_plugin\image_viewer_plugin.h" startLineNumber="1" endLineNumber="35"/>
            <text>
<![CDATA[#ifndef IMAGE_VIEWER_PLUGIN_H
#define IMAGE_VIEWER_PLUGIN_H

#ifndef Q_MOC_RUN
#include <ros/ros.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <rviz/panel.h>
#include <cv_tracker/image_obj.h>
#include <cv_tracker/image_obj_ranged.h>
#include <cv_tracker/image_obj_tracked.h>
#include <points2image/PointsImage.h>

#include <string>
#include <map>

#include <opencv/cv.h>
#include <opencv/highgui.h>

#include <QStringList>
#include <QWidget>
#include <QEvent>

#include "convert_image.h"
#include "ui_image_viewer_form.h"
#include "draw_rects.h"
#include "draw_points.h"
#endif

namespace integrated_viewer
{

  class ImageViewerPlugin: public rviz::Panel {
  Q_OBJECT
  public:
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="3c7128bf396a26a3d397998083a34bdd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1437" endLineNumber="1446"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1453" endLineNumber="1462"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1402" endLineNumber="1411"/>
            <text>
<![CDATA[  Point bp = vmap.findByKey(Key<Point>(line.bpid));
  if (bp.pid == 0)
    return marker;

  Point fp = vmap.findByKey(Key<Point>(line.fpid));
  if (fp.pid == 0)
    return marker;

  marker.points.push_back(convertPointToGeomPoint(bp));
  marker.points.push_back(convertPointToGeomPoint(fp));
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="f5c3b56e08c1ced8bf867b29d1102195">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\timer.h" startLineNumber="28" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\TrafficLight.h" startLineNumber="35" endLineNumber="48"/>
            <text>
<![CDATA[    valueSet Hue;
    valueSet Sat;
    valueSet Val;
};

struct thresholdSet {
    hsvSet Red;
    hsvSet Yellow;
    hsvSet Green;
};

//#define SHOW_DEBUG_INFO

#endif
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="afd2952744e5e01185386f2d58c1b247">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping_tku\mapping.cpp" startLineNumber="71" endLineNumber="78"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\tf_mapping\tf_mapping.cpp" startLineNumber="97" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\tf_mapping\tf_mapping.cpp" startLineNumber="80" endLineNumber="87"/>
            <text>
<![CDATA[        tf::Point pt_world = transform * pt;
        pcl::PointXYZI wp;
        double distance = pt.x() * pt.x() + pt.y() * pt.y() + pt.z() * pt.z();
        if (distance < 3 * 3)
          continue;
        wp.x = pt_world.x();
        wp.y = pt_world.y();
        wp.z = pt_world.z();
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="c181dbba4de73ee0fcfda3592253f4be">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_matching\orb_matching.cpp" startLineNumber="263" endLineNumber="270"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\common.cpp" startLineNumber="58" endLineNumber="65"/>
            <text>
<![CDATA[	float fdirx = pose.getRotation().x(),
		fdiry = pose.getRotation().y(),
		fdirz = pose.getRotation().z(),
		fdirnorm;
	fdirnorm = sqrtf(fdirx*fdirx + fdiry*fdiry + fdirz*fdirz);
	fdirx /= fdirnorm;
	fdiry /= fdirnorm;
	fdirz /= fdirnorm;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="2920c7d3880a3789421046c9fe97b16a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="436" endLineNumber="445"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glplatform.h" startLineNumber="43" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="57" endLineNumber="68"/>
            <text>
<![CDATA[  double width;
  char color;
  int type;
  int linkid;
}WhiteLine;

typedef struct{
  int lid;
}Mark;

typedef struct{
  int did;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="44bba62c5ebbee5f343a8db44c0d3fe7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\scan2image\nodes\scan2image\scan2image.cpp" startLineNumber="25" endLineNumber="33"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\search_info_ros.h" startLineNumber="39" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\gazebo\catvehicle\src\distanceEstimator.cpp" startLineNumber="21" endLineNumber="28"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="304" endLineNumber="313"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\gnss_localizer\nodes\nmea2tfpose\nmea2tfpose_core.h" startLineNumber="59" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="21" endLineNumber="28"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\ground_filter\ground_filter.cpp" startLineNumber="23" endLineNumber="33"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_publisher\calibration_publisher.cpp" startLineNumber="11" endLineNumber="20"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\klt_track\klt_track.cpp" startLineNumber="66" endLineNumber="76"/>
            <text>
<![CDATA[	ros::Subscriber 	subscriber_image_obj_;
	ros::Subscriber 	subscriber_klt_config_;
	ros::Publisher 		publisher_tracked_objects_;//ROS
	ros::NodeHandle 	node_handle_;

	std::string 		tracked_type_;

	bool 				ready_;

	bool				track_ready_;
	bool				detect_ready_;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="923d6ae487657f93a8aa3d9ca1a87e36">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="127" endLineNumber="134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="188" endLineNumber="195"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="187" endLineNumber="194"/>
            <text>
<![CDATA[  oss << can.driveshift << ",";
  oss << can.targetshift << ",";
  oss << can.inputshift << ",";
  oss << can.strmode << ",";
  oss << can.strcontmode << ",";
  oss << can.stroverridemode << ",";
  oss << can.strservo << ",";
  oss << can.targettorque << ",";
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="26791176ed55055914966e7985870b1a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.cpp" startLineNumber="36" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.cpp" startLineNumber="35" endLineNumber="42"/>
            <text>
<![CDATA[    deceleration_range_(0),
    points_threshold_(10),
    detection_height_top_(0.2),
    detection_height_bottom_(-1.7),
    stop_distance_(10),
    decel_(0.8),
    velocity_change_limit_(2.77),
    temporal_waypoints_size_(100),
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="022f209aaee96021eaf6ff95383a0493">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\FastVirtualScan\fastvirtualscan.cpp" startLineNumber="293" endLineNumber="306"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\FastVirtualScan\fastvirtualscan.cpp" startLineNumber="249" endLineNumber="262"/>
            <text>
<![CDATA[                                roadfilterflag=0;
                            }
                            else
                            {
                                virtualScan[i]=svs[i][j].length;
                                for(int k=startrotid+1;k<endrotid;k++)
                                {
                                    if(virtualScan[i]>svsback[i][k].length)
                                    {
                                        virtualScan[i]=svsback[i][k].length;
                                    }
                                }
                                minheights[i]=svsback[i][startrotid+1].height;
                                denoiseflag=0;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="55b20b7f63ba149d54405878c9f5f42e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="149" endLineNumber="160"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="140" endLineNumber="151"/>
            <text>
<![CDATA[Point findStartPoint(const VectorMap& vmap, const Lane& lane)
{
  Point start_point;
  Node node = vmap.findByKey(Key<Node>(lane.bnid));
  if (node.nid == 0)
    return start_point;
  return vmap.findByKey(Key<Point>(node.pid));
}

Point findEndPoint(const VectorMap& vmap, const Lane& lane)
{
  Point end_point;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="ea2294457efb494eed07878072f271e0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="116" endLineNumber="132"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="115" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="113" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="112" endLineNumber="128"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="134" endLineNumber="142"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="133" endLineNumber="140"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="132" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="131" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="130" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="129" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="128" endLineNumber="135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="127" endLineNumber="134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="126" endLineNumber="133"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="125" endLineNumber="132"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="124" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="122" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="45" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="44" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="116" endLineNumber="126"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="115" endLineNumber="125"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="113" endLineNumber="124"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="112" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="110" endLineNumber="121"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="109" endLineNumber="119"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\search_info_ros.h" startLineNumber="36" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="67" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="66" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="76" endLineNumber="90"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\threadedfilebuf.h" startLineNumber="63" endLineNumber="71"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="301" endLineNumber="309"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="300" endLineNumber="308"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="299" endLineNumber="306"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="298" endLineNumber="305"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\Math.h" startLineNumber="16" endLineNumber="23"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\Math.h" startLineNumber="15" endLineNumber="22"/>
            <text>
<![CDATA[typedef Eigen::Vector2f Point2;
typedef Eigen::Vector3f Point3;
typedef Eigen::Vector3f Vector3;
typedef Eigen::Vector4f Point4;
typedef Eigen::Vector4f Vector4;
typedef Eigen::Vector2f Vector2;
typedef Eigen::Quaternionf Quaternion;
typedef Eigen::Matrix4f Matrix4;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="c15bdb488ce83f36bee1ac98415fbb8f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="327" endLineNumber="334"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="270" endLineNumber="277"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="148" endLineNumber="155"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="106" endLineNumber="113"/>
            <text>
<![CDATA[  velocity_marker.type = visualization_msgs::Marker::TEXT_VIEW_FACING;
  velocity_marker.action = visualization_msgs::Marker::ADD;
  velocity_marker.scale.z = 0.4;
  velocity_marker.color.a = 1.0;
  velocity_marker.color.r = 1;
  velocity_marker.color.g = 1;
  velocity_marker.color.b = 1;
  velocity_marker.frame_locked = true;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="7941db9cc8c351851f39d4bd54df316f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_viewer\scan_image_viewer.cpp" startLineNumber="133" endLineNumber="143"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_d_viewer\scan_image_d_viewer.cpp" startLineNumber="277" endLineNumber="287"/>
            <text>
<![CDATA[    cv::Mat grayscale(256,1,CV_8UC1);
    for(int i = 0; i < 256; i++) {
        grayscale.at<uchar>(i)=i;
    }
    cv::applyColorMap(grayscale, colormap, cv::COLORMAP_JET);
    cvNamedWindow(window_name, 2);

    ros::spin();

    cvDestroyWindow(window_name);
    return 0;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="496605837c4bcb137f10c5c37cd7f140">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="250" endLineNumber="267"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\Cluster.cpp" startLineNumber="24" endLineNumber="41"/>
            <text>
<![CDATA[pcl::PointXYZ Cluster::GetMinPoint()
{
	return min_point_;
}

pcl::PointXYZ Cluster::GetMaxPoint()
{
	return max_point_;
}

pcl::PointXYZ Cluster::GetCentroid()
{
	return centroid_;
}

pcl::PointXYZ Cluster::GetAveragePoint()
{
	return average_point_;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="1244a25f2a6f97a370c1563e11f3b437">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\search_info_ros.cpp" startLineNumber="76" endLineNumber="88"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\search_info_ros.cpp" startLineNumber="19" endLineNumber="30"/>
            <text>
<![CDATA[  std::string map_frame = "map";
  std::string ogm_frame = msg->header.frame_id;
  // Set transform
  tf::StampedTransform map2ogm_frame;
  try
  {
    tf_listener_.lookupTransform(map_frame, ogm_frame, ros::Time(0), map2ogm_frame);
  }
  catch (tf::TransformException ex)
  {
    ROS_ERROR("%s", ex.what());
    return;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="b7930de8cdd3ee4fbc64d94957371b92">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\utils\file_extension.cpp" startLineNumber="54" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\utils\file_extension.cpp" startLineNumber="53" endLineNumber="60"/>
            <text>
<![CDATA[        const unsigned char magic_png[]  = "\211PNG\r\n\032\n";
        const unsigned char magic_jpg1[] = "\xFF\xD8";
        const unsigned char magic_jpg2[] = "\xFF\xD9";
        const unsigned char magic_gif1[] = "GIF87a";
        const unsigned char magic_gif2[] = "GIF89a";
        const unsigned char magic_tiff1[] = "\x49\x49\x2A\x00";
        const unsigned char magic_tiff2[] = "\x4D\x4D\x00\x2A";
        const unsigned char magic_exr[]   = "\x76\x2F\x31\x01";
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="4b83bab0eb6fb81f77b111d363cb43d5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1538" endLineNumber="1551"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1020" endLineNumber="1032"/>
            <text>
<![CDATA[    setResultShow(cameraextrinsicmat,cameraextrinsicshow);
    return 1;
}

bool CalibrateCameraVelodyneChessboardBase::loadCalibResult(cv::FileStorage &fs)
{
    CalibrateCameraChessboardBase::loadCalibResult(fs);

    QMessageBox::StandardButton button=QMessageBox::question(this,"Load Option","Load Velodyne Calibration Data?");
    if(button==QMessageBox::Yes)
    {
        int i,n=(int)fs[CHESSBOARDVIEWNUM];
        calibvelodynespoints.resize(n);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="e04c6df4293e2a18fdb41d7c1ed13915">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\sync_car_dpm.cpp" startLineNumber="329" endLineNumber="337"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\sync_car_dpm.cpp" startLineNumber="307" endLineNumber="315"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\car_dpm_sync.cpp" startLineNumber="329" endLineNumber="337"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\car_dpm_sync.cpp" startLineNumber="307" endLineNumber="315"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="359" endLineNumber="367"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\dpm_sync_2.cpp" startLineNumber="196" endLineNumber="204"/>
            <text>
<![CDATA[        if (flag) {
            ROS_INFO("timeout");
            if(!publish()) {
                /* when to publish is failure, republish */
                struct timespec sleep_time;
                sleep_time.tv_sec = 0;
                sleep_time.tv_nsec = 200000000; //5Hz
                while (!publish() || ros::ok())
                    nanosleep(&sleep_time, NULL);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="b5316bf708c4a8e517cec4d11002072f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\plot\datalog.h" startLineNumber="28" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gldraw.h" startLineNumber="28" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gl.h" startLineNumber="28" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\opengl_render_state.h" startLineNumber="28" endLineNumber="44"/>
            <text>
<![CDATA[#ifndef PANGOLIN_OPENGLRENDERSTATE_H
#define PANGOLIN_OPENGLRENDERSTATE_H

#include <pangolin/platform.h>
#include <pangolin/utils/simple_math.h>

#include <vector>

#if defined(HAVE_EIGEN) && !defined(__CUDACC__) //prevent including Eigen in cuda files
#define USE_EIGEN
#endif

#ifdef USE_EIGEN
#include <Eigen/Eigen>
#endif

#ifdef HAVE_TOON
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="101ce9bae652efdf9a830c27961febc9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set.cpp" startLineNumber="301" endLineNumber="314"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set.cpp" startLineNumber="251" endLineNumber="266"/>
            <text>
<![CDATA[        break;
      }
    }

    // waypoint seen by localizer
    geometry_msgs::Point waypoint = calcRelativeCoordinate(lane.waypoints[i].pose.pose.position, localizer_pose.pose);
    tf::Vector3 tf_waypoint = point2vector(waypoint);
    tf_waypoint.setZ(0);

    int stop_point_count = 0;
    for (const auto& p : points)
    {
      tf::Vector3 point_vector(p.x, p.y, 0);

      // 2D distance between waypoint and points (obstacle)
      double dt = tf::tfDistance(point_vector, tf_waypoint);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="93a16cda7d6ea727fb1fe87b11716a8f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_lidar_track\euclidean_lidar_track.cpp" startLineNumber="72" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\pf_lidar_track\pf_lidar_track.cpp" startLineNumber="47" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\kf_lidar_track\kf_lidar_track.cpp" startLineNumber="47" endLineNumber="56"/>
            <text>
<![CDATA[		lidar_tracker::DetectedObject detected_object;
		detected_object.header 		= i->header;
		detected_object.id 			= i->id;
		detected_object.label 		= i->label;
		detected_object.dimensions 	= i->bounding_box.dimensions;
		detected_object.pose 		= i->bounding_box.pose;

		detected_objects.objects.push_back(detected_object);
	}
	detected_objects_pub_.publish(detected_objects);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="ef6c6dfab47b48704ccb5c58f8d574a4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_sender\tablet_sender.cpp" startLineNumber="46" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_sender\tablet_sender.cpp" startLineNumber="45" endLineNumber="53"/>
            <text>
<![CDATA[static constexpr int DEFAULT_PORT = 5777;
static constexpr int LISTEN_BACKLOG = 10;
static constexpr uint32_t QUEUE_SIZE = 1;
static constexpr double SUBSCRIBE_HZ = 1;

static constexpr int32_t ERROR_INFO_TYPE = 1;
static constexpr int32_t CAN_INFO_TYPE = 2;
static constexpr int32_t MODE_INFO_TYPE = 3;
static constexpr int32_t NDT_STAT_TYPE = 4;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="2941f006bdf079646a90347767e631f4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\handler\handler.cpp" startLineNumber="279" endLineNumber="286"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\handler\handler.cpp" startLineNumber="251" endLineNumber="258"/>
            <text>
<![CDATA[            GLprecision mrotc[3];
            MatMul<3,1>(mrotc, rot_center, (GLprecision)-1.0);
            LieApplySO3<>(T_2c+(3*3),T_2c,mrotc);
            GLprecision T_n2[3*4];
            LieSetIdentity<>(T_n2);
            LieSetTranslation<>(T_n2,rot_center);
            LieMulSE3(T_nc, T_n2, T_2c );
            rotation_changed = true;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="b935e71a0b058e6de91c8cc45293ba3f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="47" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_uploader\pos_uploader.cpp" startLineNumber="70" endLineNumber="81"/>
            <text>
<![CDATA[static string db_host_name;
static int db_port;
static string sshpubkey;
static string sshprivatekey;
static int ssh_port;
static string sshtunnelhost;

//send to server class
static SendData sd;

//store own position and direction now.updated by position_getter
static std::vector <geometry_msgs::PoseStamped> current_pose_position;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="ece0f1c56e825297795726bf7fe297d5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="214" endLineNumber="223"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="200" endLineNumber="209"/>
            <text>
<![CDATA[		res = cuModuleGetTexRef(&featp2_texref, module[pt->pid], "A");
		if(res != CUDA_SUCCESS) {
			printf("cuModuleGetTexRef(featp2) failed: res = %d\n->%s\n", res, getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuModuleGetTexRef(&B_texref, module[pt->pid], "B");
		if(res != CUDA_SUCCESS) {
			printf("cuModuleGetTexRef(B) failed: res = %d\n->%s\n", res, getCudaDrvErrorString(res));
			exit(1);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="d49b163d4cffa0e454cf75f2387e69eb">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="754" endLineNumber="762"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\model_publisher\nodes\model_publisher.cpp" startLineNumber="67" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_viz.cpp" startLineNumber="47" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_trajectory_gen\lattice_trajectory_gen.cpp" startLineNumber="228" endLineNumber="235"/>
            <text>
<![CDATA[  marker.scale.x = 1.0;
  marker.scale.y = 1.0;
  marker.scale.z = 1.0;
  marker.color.a = 1.0;
  marker.color.r = 0.0;
  marker.color.g = 0.0;
  marker.color.b = 1.0;
  marker.frame_locked = true;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="94ebb167775d09ec232b841af2383639">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="1090" endLineNumber="1100"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="944" endLineNumber="954"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="997" endLineNumber="1007"/>
            <text>
<![CDATA[    for(int lid = slid; ; lid = lines[lid].flid) {
      int pid = lines[lid].bpid;
      add_marker_points_pointclass(&marker, pointclasses[pid]);
      if (lid == elid) {
	pid = lines[lid].fpid;
	add_marker_points_pointclass(&marker, pointclasses[pid]);
	break;
      }
    }

    publish_marker(&marker, pub, rate);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="3dc4baa4a02ffb2413470b6a371dae76">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\libvelocity_set.cpp" startLineNumber="309" endLineNumber="319"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\libvelocity_set.cpp" startLineNumber="295" endLineNumber="305"/>
            <text>
<![CDATA[    for (const auto &p : stop_points_)
    {
      point.x += p.x;
      point.y += p.y;
      point.z += p.z;
    }
    point.x /= stop_points_.size();
    point.y /= stop_points_.size();
    point.z /= stop_points_.size();

    return point;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="4677698b88f2504c38738634b7e9d95f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\matching_gpu.cpp" startLineNumber="988" endLineNumber="997"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\dpm_ocv_gpu.cpp" startLineNumber="358" endLineNumber="366"/>
            <text>
<![CDATA[        free(partsDisplacementArr[i]);
    }
    free(pointsArr);
    free(oppPointsArr);
    free(scoreArr);
    free(kPointsArr);
    free(levelsArr);
    free(partsDisplacementArr);
    return LATENT_SVM_OK;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="4e7fc9977544aed445ada2bf2908ad3d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_viewer\scan_image_viewer.cpp" startLineNumber="44" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_d_viewer\scan_image_d_viewer.cpp" startLineNumber="52" endLineNumber="61"/>
            <text>
<![CDATA[char window_name[] = "SCAN_IMAGE_VIEWER";
//for imageCallback
cv_bridge::CvImagePtr cv_image;
IplImage image;
scan2image::ScanImage scan_image;
bool exist_image = false;
bool exist_scan = false;
cv::Mat colormap;

cv_tracker::image_obj_ranged car_fused_objects;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="a10703200aefbae8304bc2b519c9064c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="315" endLineNumber="322"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="310" endLineNumber="317"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="305" endLineNumber="312"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1272" endLineNumber="1279"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1267" endLineNumber="1274"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1262" endLineNumber="1269"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1257" endLineNumber="1264"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1252" endLineNumber="1259"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1247" endLineNumber="1254"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1298" endLineNumber="1305"/>
            <text>
<![CDATA[    color_rgba.r = COLOR_VALUE_MAX;
    color_rgba.b = COLOR_VALUE_MAX;
    break;
  case WHITE:
    color_rgba.r = COLOR_VALUE_MAX;
    color_rgba.g = COLOR_VALUE_MAX;
    color_rgba.b = COLOR_VALUE_MAX;
    break;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="8490028053ab77b52890fb1b3a36ea9c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\dpm_ocv\dpm_ocv.cpp" startLineNumber="42" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="190" endLineNumber="198"/>
            <text>
<![CDATA[typedef struct postuer_type *PosturePtr;

typedef struct postuer_type{
  double x;
  double y;
  double z;
  double theta;
  double theta2;
  double theta3;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="ea9c92a458903a88019aaaa7e8baabc4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="852" endLineNumber="862"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="762" endLineNumber="773"/>
            <text>
<![CDATA[	pointer_ay = (uintptr_t)dst_ay;
	pointer_Ix = (uintptr_t)dst_Ix;
	pointer_Iy = (uintptr_t)dst_Iy;
	for(int level=interval; level<L_MAX; level++) {
		int L = level - interval;

		if(feature_size[level*2]+2*pady<MO->MI->max_Y ||(feature_size[level*2+1]+2*padx<MO->MI->max_X))
		{
			continue;
		}

		for(int j=0; j<NoC; j++) {
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="d38a4640ff83e8c9e83bc5b4526b9cd7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gldraw.h" startLineNumber="261" endLineNumber="270"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gldraw.h" startLineNumber="239" endLineNumber="248"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\display.cpp" startLineNumber="503" endLineNumber="512"/>
            <text>
<![CDATA[    glBindTexture(GL_TEXTURE_2D, texid);
    glEnable(GL_TEXTURE_2D);
    
    GLfloat sq_vert[] = { -1,-1,  1,-1,  1, 1,  -1, 1 };
    glVertexPointer(2, GL_FLOAT, 0, sq_vert);
    glEnableClientState(GL_VERTEX_ARRAY);   

    GLfloat sq_tex[]  = { 0,0,  1,0,  1,1,  0,1  };
    glTexCoordPointer(2, GL_FLOAT, 0, sq_tex);
    glEnableClientState(GL_TEXTURE_COORD_ARRAY);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="8d9041c8c0085bc7ba663785647325be">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\log\packetstream.cpp" startLineNumber="42" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\log\packetstream.cpp" startLineNumber="41" endLineNumber="48"/>
            <text>
<![CDATA[const char* json_src_driver          = "driver";
const char* json_src_id              = "id";
const char* json_src_info            = "info";
const char* json_src_uri             = "uri";
const char* json_src_packet          = "packet";
const char* json_src_version         = "version";
const char* json_pkt_alignment_bytes = "alignment_bytes";
const char* json_pkt_definitions     = "definitions";
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="e02abaf9e578a121b00cabc3cf036b36">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\vectacam\nodes\vectacam\VectaCam.h" startLineNumber="54" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Frame.h" startLineNumber="111" endLineNumber="120"/>
            <text>
<![CDATA[    double mTimeStamp;

    // Calibration matrix and OpenCV distortion parameters.
    cv::Mat mK;
    static float fx;
    static float fy;
    static float cx;
    static float cy;
    static float invfx;
    static float invfy;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="ba56962399ebca7cb5fd1a7dbb5a1c92">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="112" endLineNumber="126"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="124" endLineNumber="133"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\integrated_viewer\node\image_viewer_plugin\image_viewer_plugin.h" startLineNumber="59" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.h" startLineNumber="34" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\libvelocity_set.h" startLineNumber="44" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\libvelocity_set.h" startLineNumber="42" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="53" endLineNumber="61"/>
            <text>
<![CDATA[double search_radius; // meter
double curve_weight;
double crossroad_weight;
double clothoid_weight;
std::string frame_id;

ros::Publisher traffic_pub;
ros::Publisher red_pub;
ros::Publisher green_pub;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="266c22c37e139ab30793f415e4b07e26">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="639" endLineNumber="648"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="615" endLineNumber="624"/>
            <text>
<![CDATA[  A[0][1] = 0;
  A[1][0] = 0;
  A[1][1] = l2;

  if (!inverse_matrix2d(V, IV))
    return 0;

  mux_matrix2d(V, A, B);
  mux_matrix2d(B, IV, dst);
  return 1;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="788eaf0629f68d7e568927509e41e858">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\space_filter\space_filter.cpp" startLineNumber="24" endLineNumber="34"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="213" endLineNumber="230"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="24" endLineNumber="31"/>
            <text>
<![CDATA[  ros::Subscriber vscan_subscriber_;
  ros::Subscriber obj_subscriber_;
  bool use_target_waypoint_;
  bool use_obstacle_box_;
  bool use_vscan_points_;
  double map_x_size_;
  double map_y_size_;
  double map_resolution_;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="4b07ccc88206bc1da07c3407cc167a7f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\newton.cpp" startLineNumber="181" endLineNumber="190"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\newton.cpp" startLineNumber="131" endLineNumber="140"/>
            <text>
<![CDATA[  set_sincos2(pose->theta, pose->theta2, pose->theta3, sc);
  for (i = 0; i < num; i++)
  {
    x = scan[i].x;
    y = scan[i].y;
    z = scan[i].z;

    p.x = x * sc[0][0] + y * sc[0][1] + z * sc[0][2] + pose->x;
    p.y = x * sc[1][0] + y * sc[1][1] + z * sc[1][2] + pose->y;
    p.z = x * sc[2][0] + y * sc[2][1] + z * sc[2][2] + pose->z;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="bb408c77a80c0a5913e0ae05e4163806">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="2078" endLineNumber="2085"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="1774" endLineNumber="1781"/>
            <text>
<![CDATA[         while (*step) {
            stbtt__active_edge * z = *step;
            if (z->ey <= scan_y) {
               *step = z->next; // delete from list
               STBTT_assert(z->direction);
               z->direction = 0;
               stbtt__hheap_free(&hh, z);
            } else {
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="b8c2e59a6c81f147da26b7548623575e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="299" endLineNumber="311"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="183" endLineNumber="195"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="63" endLineNumber="75"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="241" endLineNumber="253"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="129" endLineNumber="141"/>
            <text>
<![CDATA[    if (sizeX % thread_num_x != 0)
        block_num_x++;
    if (sizeY % thread_num_y != 0)
        block_num_y++;

    sharedMemBytes = 0;

    res = cuLaunchKernel(getFeatureMaps_func[0], block_num_x, block_num_y,
            block_num_z, thread_num_x, thread_num_y, thread_num_z,
            sharedMemBytes, stream, get_feature_maps_kernel_arg, NULL);
    CUDA_CHECK(res, "cuLaunchKernel(getFeatureMaps)");

    return LATENT_SVM_OK;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="4ab88c335d888719fe064c2b961497ab">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="1351" endLineNumber="1360"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="1317" endLineNumber="1326"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="1284" endLineNumber="1293"/>
            <text>
<![CDATA[#endif

#ifdef ORIGINAL
      if( pthread_create(&ts[t_count], NULL, feat_calc, (void*)&td[t_count]))
#else
        if( pthread_create(&ts[t_count], NULL, feat_calc_forGPU, (void*)&td[t_count]))
#endif
          {printf("Error thread\n"); exit(0);}
      //      feat_calc((void *)&td[t_count]);
      t_count++;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="3b40e68fb07ccc81cd0257fc559db3bc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\robust_kernel.h" startLineNumber="27" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\marginal_covariance_cholesky.h" startLineNumber="27" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\hyper_graph.h" startLineNumber="27" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\estimate_propagator.h" startLineNumber="27" endLineNumber="50"/>
            <text>
<![CDATA[#ifndef G2O_ESTIMATE_PROPAGATOR_H
#define G2O_ESTIMATE_PROPAGATOR_H

#include <map>
#include <set>
#include <limits>
#include "g2o/core/optimizable_graph.h"
#include "g2o/core/sparse_optimizer.h"

#ifdef _MSC_VER
#include <unordered_map>
#else
#include <tr1/unordered_map>
#endif

namespace g2o {

  /**
   * \brief cost for traversing along active edges in the optimizer
   *
   * You may derive an own one, if necessary. The default is to return initialEstimatePossible(from, to) for the edge.
   */
  class  EstimatePropagatorCost {
    public:
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="99c70ce5960c071197c60b294a66f603">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="53" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\vectacam\nodes\vectacam\VectaCam.h" startLineNumber="55" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="492" endLineNumber="515"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="25" endLineNumber="32"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="87" endLineNumber="95"/>
            <text>
<![CDATA[std::string _output_frame;
static bool _velodyne_transform_available;
static bool _downsample_cloud;
static bool _pose_estimation;
static double _leaf_size;
static int _cluster_size_min;
static int _cluster_size_max;

static bool _remove_ground;	//only ground
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="3ca64e02950972c5765aeca181b21f59">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="733" endLineNumber="769"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_trajectory\sample_trajectory.cpp" startLineNumber="141" endLineNumber="162"/>
            <text>
<![CDATA[int main(int argc, char **argv)
{

/*

#!/bin/sh
rosrun sample_data sample_trajectory gnss.log <swap_x_y_off|swap_x_y_on>

# EOF

*/

  ros::init(argc, argv, "sample_trajectory");
  ros::NodeHandle n;
  //  ros::Publisher pub = n.advertise<visualization_msgs::Marker>("/vector_map", 10, true);
  ros::Publisher pub = n.advertise<visualization_msgs::Marker>("/sample_trajectory", 10, true);


  if (argc < 3) {
    std::cerr << "Usage: " << argv[0] << " csv_file"
              << std::endl;
    std::exit(1);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="c66e214e09989a6ef97d6c94f2907a39">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="148" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="143" endLineNumber="151"/>
            <text>
<![CDATA[    cameraextrinsicmat=cv::Mat::eye(4,4,CV_64F);
    cameraextrinsicshow=new QTableWidget;
    cameracalibtab->addTab(cameraextrinsicshow,CAMERAEXTRINSICMAT);
    setResultShow(cameraextrinsicmat,cameraextrinsicshow);

    cameramat=cv::Mat::zeros(3,3,CV_64F);
    cameramatshow=new QTableWidget;
    cameracalibtab->addTab(cameramatshow,CAMERAMAT);
    setResultShow(cameramat,cameramatshow);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="ca5ad10183f7908489128511ed95128e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\vectacam\nodes\vectacam\VectaCam.h" startLineNumber="52" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Frame.h" startLineNumber="118" endLineNumber="134"/>
            <text>
<![CDATA[    static float cy;
    static float invfx;
    static float invfy;
    cv::Mat mDistCoef;

    // Stereo baseline multiplied by fx.
    float mbf;

    // Stereo baseline in meters.
    float mb;

    // Threshold close/far points. Close points are inserted from 1 view.
    // Far points are inserted as in the monocular case from 2 views.
    float mThDepth;

    // Number of KeyPoints.
    int N;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="9266ed6af1ed6c758a9e4b8acb6f1e56">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\klt_track\klt_track.cpp" startLineNumber="133" endLineNumber="143"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="515" endLineNumber="525"/>
            <text>
<![CDATA[		is_suppresed[i] = false;
		scores[i] = tmp.score;
		x1[i] = tmp.pos.x;
		y1[i] = tmp.pos.y;
		x2[i] = tmp.pos.width + tmp.pos.x;
		y2[i] = tmp.pos.height + tmp.pos.y;
	}

	Sort(scores, indices);//returns indices ordered based on scores

	for(unsigned int i=0; i< size; i++)
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="ba701c91967bdaca57bcd0b7dadf0241">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.cpp" startLineNumber="183" endLineNumber="193"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.cpp" startLineNumber="97" endLineNumber="108"/>
            <text>
<![CDATA[      os << " " <<  information()(i,j);
    }
  return os.good();
}


void EdgeSE3ProjectXYZ::linearizeOplus() {
  VertexSE3Expmap * vj = static_cast<VertexSE3Expmap *>(_vertices[1]);
  SE3Quat T(vj->estimate());
  VertexSBAPointXYZ* vi = static_cast<VertexSBAPointXYZ*>(_vertices[0]);
  Vector3d xyz = vi->estimate();
  Vector3d xyz_trans = T.map(xyz);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="7cd4b18ab912627d9d26c6c9eac1ce89">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_viz.cpp" startLineNumber="61" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_viz.cpp" startLineNumber="39" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_viz.cpp" startLineNumber="191" endLineNumber="198"/>
            <text>
<![CDATA[  visualization_msgs::Marker marker;
  marker.header.frame_id = MAP_FRAME;
  marker.header.stamp = ros::Time();
  marker.ns = "search_radius_marker";
  marker.id = 0;
  marker.type = visualization_msgs::Marker::SPHERE;
  marker.action = visualization_msgs::Marker::ADD;
  marker.pose.position = current_pose;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="3dd68c3d2618d17775819c2f4c6039c5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="402" endLineNumber="425"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="399" endLineNumber="422"/>
            <text>
<![CDATA[        time_monitor_msg.vscan_points = time_diff(points_raw_.find(obj_pose_timestamp_msg->data),
                                                  vscan_points_.find(obj_pose_timestamp_msg->data));
        // ROS_INFO("vscan_image");
        time_monitor_msg.vscan_image = time_diff(vscan_points_.find(obj_pose_timestamp_msg->data),
        vscan_image_.find(obj_pose_timestamp_msg->data));
    }

    // ROS_INFO("image_obj");
    time_monitor_msg.image_obj = time_diff(image_raw_.find(obj_pose_timestamp_msg->data),
                                           image_obj_.find(obj_pose_timestamp_msg->data));
    // ROS_INFO("image_obj_ranged");
    time_monitor_msg.image_obj_ranged = time_diff(sync_image_obj_ranged_.find(obj_pose_timestamp_msg->data),
                                                  image_obj_ranged_.find(obj_pose_timestamp_msg->data));
    // ROS_INFO("image_obj_tracked");
    time_monitor_msg.image_obj_tracked = time_diff(sync_image_obj_tracked_.find(obj_pose_timestamp_msg->data),
                                                   image_obj_tracked_.find(obj_pose_timestamp_msg->data));
    // ROS_INFO("current_pose");
    time_monitor_msg.current_pose = time_diff(points_raw_.find(obj_pose_timestamp_msg->data),
                                              current_pose_.find(obj_pose_timestamp_msg->data));
    // ROS_INFO("obj_label");
    time_monitor_msg.obj_label = time_diff(sync_obj_label_.find(obj_pose_timestamp_msg->data),
                                           obj_label_.find(obj_pose_timestamp_msg->data));
    // ROS_INFO("cluster_centroids");
    time_monitor_msg.cluster_centroids = time_diff(points_raw_.find(obj_pose_timestamp_msg->data),
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="21cc70266e85fd2c9a6036a476edc57d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="316" endLineNumber="324"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="569" endLineNumber="578"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="282" endLineNumber="291"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="428" endLineNumber="437"/>
            <text>
<![CDATA[	if(pt->pid == 0 && pt->calc_flag == PART){
		gettimeofday(&tv_fconv_kernel_end, NULL);
		tvsub(&tv_fconv_kernel_end, &tv_fconv_kernel_start, &tv);
		time_fconv_kernel += tv.tv_sec * 1000.0 + (float)tv.tv_usec / 1000.0;
	}

	if(pt->pid == 0){
		gettimeofday(&tv_kernel_end, NULL);
		tvsub(&tv_kernel_end, &tv_kernel_start, &tv);
		time_kernel += tv.tv_sec * 1000.0 + (float)tv.tv_usec / 1000.0;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="18ab2e93da802ceb30a2a82289b341ef">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\opengl_render_state.cpp" startLineNumber="182" endLineNumber="195"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\opengl_render_state.cpp" startLineNumber="166" endLineNumber="179"/>
            <text>
<![CDATA[OpenGlMatrix& OpenGlRenderState::GetProjectionMatrix(unsigned int view)
{
    if( projection.size() <= view ) {
        projection.resize(view+1);
    }
    return projection[view];
}

OpenGlMatrix OpenGlRenderState::GetProjectionMatrix(unsigned int view) const
{
    if( projection.size() <= view ) {
        return IdentityMatrix();
    }
    return projection[view];
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="6aba3bc761ed2598190df7a2aa28e496">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="247" endLineNumber="257"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_receiver\udon_receiver.cpp" startLineNumber="155" endLineNumber="165"/>
            <text>
<![CDATA[			receiver.detach();
		} catch (std::exception &ex) {
			ROS_ERROR_STREAM("std::thread::thread: " << ex.what());
			goto close_connect_fd;
		}
	}

close_connect_fd:
	close(connect_fd);
close_listen_fd:
	close(listen_fd);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="abf0ed53b87880be83fbbcd61716479b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lane_detector\nodes\lane_detector\lane_detector.cpp" startLineNumber="107" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lane_detector\nodes\lane_detector\lane_detector.cpp" startLineNumber="106" endLineNumber="115"/>
            <text>
<![CDATA[  SCAN_STEP           = 5,      // in pixels
  LINE_REJECT_DEGREES = 10,     // in degrees
  BW_TRESHOLD         = 250,    // edge response strength to recognize for 'WHITE'
  BORDERX             = 10,     // px, skip this much from left & right borders
  MAX_RESPONSE_DIST   = 5,      // px

  CANNY_MIN_TRESHOLD = 1,       // edge detector minimum hysteresis threshold
  CANNY_MAX_TRESHOLD = 100,     // edge detector maximum hysteresis threshold

  HOUGH_TRESHOLD        = 50,   // line approval vote threshold
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="7a8cce8da379e56d9da9184a8bb728f3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="96" endLineNumber="114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="91" endLineNumber="109"/>
            <text>
<![CDATA[  command_data.modeValue = mode.mode;
}

static void gearCMDCallback(const tablet_socket::gear_cmd& gear)
{
  command_data.gearValue = gear.gear;
}

static void accellCMDCallback(const runtime_manager::accel_cmd& accell)
{
  command_data.accellValue = accell.accel;
}

static void steerCMDCallback(const runtime_manager::steer_cmd& steer)
{
  command_data.steerValue = steer.steer;
}

static void brakeCMDCallback(const runtime_manager::brake_cmd &brake)
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="70d63e69e2c237ccff6152c0ee7fb1b0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="43" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\vectacam\nodes\vectacam\VectaCam.h" startLineNumber="56" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\view.h" startLineNumber="201" endLineNumber="220"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="13" endLineNumber="24"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="24" endLineNumber="35"/>
            <text>
<![CDATA[	int max_X;
	int max_Y;
	//from calculation
	int padx;	//pad information
	int pady;
	int max_scale;
	//image size information
	int IM_WIDTH;
	int IM_HEIGHT;

	//per root
	int *ridx;	//root index information
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="aee7f20f0add2bd9ae42c3f7539b15a8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\camera_lidar2d_offline_calib.cpp" startLineNumber="99" endLineNumber="107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\camera_lidar2d_offline_calib.cpp" startLineNumber="88" endLineNumber="96"/>
            <text>
<![CDATA[        g_on_calib_flag = true;
        g_on_save_flag = false;
        switch(event) {
        case CV_EVENT_LBUTTONDOWN:
            g_calib_flag = true;
            break;

        default:
            break;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="efc6cdc6ef42b383b0698cacb10952e3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="43" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_rejection.h" startLineNumber="377" endLineNumber="397"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\CalObjLoc.h" startLineNumber="72" endLineNumber="81"/>
            <text>
<![CDATA[private:
    double U;//X from camera picture
    double V;//Y from camera picture
    double distance;

    //camera parameter
    double fkx;
    double fky;
    double Ox;
    double Oy;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="7c523bb117e2d66069eb2332821b651a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="86" endLineNumber="94"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="74" endLineNumber="82"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="62" endLineNumber="70"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\compat\glconsole.h" startLineNumber="67" endLineNumber="75"/>
            <text>
<![CDATA[#define GLUT_KEY_DOWN 4
#define GLUT_KEY_LEFT 5
#define GLUT_KEY_RIGHT 6
#define GLUT_KEY_PAGE_UP 7
#define GLUT_KEY_PAGE_DOWN 8
#define GLUT_KEY_HOME 9
#define GLUT_KEY_END 10

#endif // HAVE_GLES
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="15ad90922101c75f515f47ec9f2873ae">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\opengl_render_state.cpp" startLineNumber="603" endLineNumber="613"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\opengl_render_state.cpp" startLineNumber="594" endLineNumber="604"/>
            <text>
<![CDATA[    std::fill_n(P.m,4*4,0);
    for( int i=0; i<4; ++i ) P.m[i*4+i] = 1;
    return P;
}

OpenGlMatrixSpec IdentityMatrix(OpenGlStack type)
{
    OpenGlMatrixSpec P;
    P.type = type;
    std::fill_n(P.m,4*4,0);
    for( int i=0; i<4; ++i ) P.m[i*4+i] = 1;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="d0a253859237e3e3652506280ab47684">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.h" startLineNumber="120" endLineNumber="129"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\includes\Cluster.h" startLineNumber="90" endLineNumber="104"/>
            <text>
<![CDATA[	pcl::PointXYZ 						GetMinPoint();
	/* \brief Returns the maximum point in the cluster*/
	pcl::PointXYZ 						GetMaxPoint();
	/* \brief Returns the average point in the cluster*/
	pcl::PointXYZ 						GetAveragePoint();
	/* \brief Returns the centroid point in the cluster */
	pcl::PointXYZ 						GetCentroid();
	/* \brief Returns the calculated BoundingBox of the object */
	jsk_recognition_msgs::BoundingBox	GetBoundingBox();
	/* \brief Returns the angle in radians of the BoundingBox. 0 if pose estimation was not enabled. */
	double								GetOrientationAngle();
	/* \brief Returns the Length of the Cluster */
	float								GetLenght();
	/* \brief Returns the Width of the Cluster */
	float								GetWidth();
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="ca358685e983ef243fddce49c6753428">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\vectacam\nodes\vectacam\VectaCam.cpp" startLineNumber="114" endLineNumber="123"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\vectacam\nodes\vectacam\VectaCam.cpp" startLineNumber="54" endLineNumber="63"/>
            <text>
<![CDATA[	int socket_descriptor;
	struct sockaddr_in socket_address;
	if ((socket_descriptor=socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) < 0)
	{
		std::cout << "Problem creating socket\n";
		return;
	}
	memset((char *) &socket_address, 0, sizeof(socket_address));
	socket_address.sin_family = AF_INET;
	socket_address.sin_port = htons(in_port);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="202a85d31e2316afda8e8ba11a7a0093">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="690" endLineNumber="702"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="647" endLineNumber="656"/>
            <text>
<![CDATA[        stop_point_count++;
        geometry_msgs::Point vscan_temp;
        vscan_temp.x = item->x;
        vscan_temp.y = item->y;
        vscan_temp.z = item->z;
	g_obstacle.setStopPoint(calcAbsoluteCoordinate(vscan_temp, g_localizer_pose.pose));
      }
      if (stop_point_count > g_threshold_points)
      {
        g_obstacle_waypoint = i;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="72459998cbf4717cd58ccd2f6c59da9e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\lidar_tracker\nodes\obj_fusion\sync_obj_fusion.cpp" startLineNumber="403" endLineNumber="413"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="376" endLineNumber="386"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\dpm_sync_2.cpp" startLineNumber="216" endLineNumber="226"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\range_fusion\sync_range_fusion.cpp" startLineNumber="246" endLineNumber="256"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\sync_obj_reproj.cpp" startLineNumber="246" endLineNumber="256"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\kf_track\sync_track.cpp" startLineNumber="246" endLineNumber="256"/>
            <text>
<![CDATA[    ros::init(argc, argv, "sync_tracking");
    ros::NodeHandle nh;

    /* create server thread */
    pthread_t th;
    pthread_create(&th, NULL, thread, (void *)NULL );

    ros::Subscriber image_obj_ranged_sub = nh.subscribe("/image_obj_ranged", 1, image_obj_ranged_callback);
    ros::Subscriber image_raw_sub = nh.subscribe("/sync_drivers/image_raw", 1, image_raw_callback);
    image_obj_ranged__pub = nh.advertise<cv_tracker::image_obj_ranged>("/sync_tracking/image_obj_ranged", 5);
    image_raw__pub = nh.advertise<sensor_msgs::Image>("/sync_tracking/image_raw", 5);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="0f6264b2e8b6bff22be9c21fbb42e953">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="40" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Viewer.h" startLineNumber="23" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="46" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\System.h" startLineNumber="47" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\LoopClosing.h" startLineNumber="21" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\LocalMapping.h" startLineNumber="21" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="252" endLineNumber="274"/>
            <text>
<![CDATA[        double rotation_threshold_;

        /** \brief The translation threshold is the relative translation between two iterations (0 if no translation). */
        double translation_threshold_;

        /** \brief The relative change from the previous MSE for the current set of correspondences, e.g. .1 means 10% change. */
        double mse_threshold_relative_;

        /** \brief The absolute change from the previous MSE for the current set of correspondences. */
        double mse_threshold_absolute_;

        /** \brief Internal counter for the number of iterations that the internal 
          * rotation, translation, and MSE differences are allowed to be similar. */
        int iterations_similar_transforms_;

        /** \brief The maximum number of iterations that the internal rotation, 
          * translation, and MSE differences are allowed to be similar. */
        int max_iterations_similar_transforms_;

        /** \brief The state of the convergence (e.g., why did the registration converge). */
        ConvergenceState convergence_state_;

      public:
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="629824694ac52a4f193e5e03b9cd350c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.cpp" startLineNumber="584" endLineNumber="591"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.cpp" startLineNumber="567" endLineNumber="574"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.cpp" startLineNumber="552" endLineNumber="559"/>
            <text>
<![CDATA[        next_node->status = STATUS::OPEN;
        next_node->x      = next_x;
        next_node->y      = next_y;
        next_node->theta  = next_theta;
        next_node->gc     = current_node->gc + move_cost;
        next_node->hc     = next_hc;
        next_node->back   = state.back;
        next_node->parent = current_node;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="cdf46609e2428322aed0057887d02006">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\image_window.cpp" startLineNumber="75" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\image_window.cpp" startLineNumber="61" endLineNumber="70"/>
            <text>
<![CDATA[    cvInitMatHeader(&m_rotation_x, 3, 3, CV_64FC1, init_m_rotation_x, CV_AUTOSTEP);
    cvCopy(m_rotation, m_rotation_temp);
    cvmMul(m_rotation_temp, &m_rotation_x, m_rotation);
    previous_val_x = val;
}
void rad_y_bar(int val)
{
    static int previous_val_y = 180;
    CvMat m_rotation_y;
    double init_m_rotation_y[9] ={
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="82f1290edd77483d2c8d0f25d286b7e6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\vscan2linelist\vscan2linelist.cpp" startLineNumber="51" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\vscan_filling\vscan_filling.cpp" startLineNumber="53" endLineNumber="63"/>
            <text>
<![CDATA[	for (pcl::PointCloud<pcl::PointXYZ>::const_iterator item = vscan.begin(); item != vscan.end(); item++) {
		if ((item->x == 0 && item->y == 0))
			continue;

		pcl::PointXYZ p;

		//push back bottom pointcloud
    p.x = item->x;
		p.y = item->y;
		p.z = item->z;
    filling_cloud.points.push_back(p);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="1d5a9f94ff18eaa507eaaa7ac16eaefb">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="133" endLineNumber="140"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="138" endLineNumber="145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="903" endLineNumber="910"/>
            <text>
<![CDATA[  std::cout << "-----------------------------------------------------------------" << std::endl;
  std::cout << "Log file: " << filename << std::endl;
  std::cout << "use_gnss: " << _use_gnss << std::endl;
  std::cout << "queue_size: " << _queue_size << std::endl;
  std::cout << "offset: " << _offset << std::endl;
  std::cout << "use_openmp: " << _use_openmp << std::endl;
  std::cout << "get_height: " << _get_height << std::endl;
  std::cout << "use_local_transform: " << _use_local_transform << std::endl;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="f7a03de58d93a38475c24d18650c46d6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\block_solver.h" startLineNumber="104" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\block_solver.h" startLineNumber="103" endLineNumber="111"/>
            <text>
<![CDATA[      typedef typename Traits::PoseMatrixType PoseMatrixType;
      typedef typename Traits::LandmarkMatrixType LandmarkMatrixType; 
      typedef typename Traits::PoseLandmarkMatrixType PoseLandmarkMatrixType;
      typedef typename Traits::PoseVectorType PoseVectorType;
      typedef typename Traits::LandmarkVectorType LandmarkVectorType;

      typedef typename Traits::PoseHessianType PoseHessianType;
      typedef typename Traits::LandmarkHessianType LandmarkHessianType;
      typedef typename Traits::PoseLandmarkHessianType PoseLandmarkHessianType;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="19583a8752aecff3183187ecabb6a33d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="101" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="98" endLineNumber="107"/>
            <text>
<![CDATA[static int map_loaded = 0;
static int use_gnss = 1;
static int init_pos_set = 1;

static pcl::NormalDistributionsTransform<pcl::PointXYZI, pcl::PointXYZI> ndt;
// Default values
static int iter = 100; // Maximum iterations
static float ndt_res = 1.0; // Resolution
static double step_size = 0.1; // Step size
static double trans_eps = 0.01; // Transformation epsilon
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="7b1cd1c05201701aaadbe5025ba87711">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="362" endLineNumber="369"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="356" endLineNumber="363"/>
            <text>
<![CDATA[    case TRAFFIC_LIGHT_RED:
      global_color.r = 1.0;
      _global_color = global_color;
      local_color.r = 1.0;
      g_local_color = local_color;
      break;
    case TRAFFIC_LIGHT_GREEN:
      global_color.g = 1.0;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="3095dc5c7049f77c214b22f64fde59c3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="258" endLineNumber="283"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\base_binary_edge.h" startLineNumber="105" endLineNumber="119"/>
            <text>
<![CDATA[      bool _hessianRowMajor;
      HessianBlockType _hessian;
      HessianBlockTransposedType _hessianTransposed;
      JacobianXiOplusType _jacobianOplusXi;
      JacobianXjOplusType _jacobianOplusXj;

    public:
      EIGEN_MAKE_ALIGNED_OPERATOR_NEW
  };

#include "g2o/core/base_binary_edge.hpp"

} // end namespace g2o

#endif
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="e8ce9e765c260fe970a2a5302afa8d41">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapDrawer.h" startLineNumber="51" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Sim3Solver.h" startLineNumber="113" endLineNumber="133"/>
            <text>
<![CDATA[    double mRansacProb;

    // RANSAC min inliers
    int mRansacMinInliers;

    // RANSAC max iterations
    int mRansacMaxIts;

    // Threshold inlier/outlier. e = dist(Pi,T_ij*Pj)^2 < 5.991*mSigma2
    float mTh;
    float mSigma2;

    // Calibration
    cv::Mat mK1;
    cv::Mat mK2;

};

} //namespace ORB_SLAM

#endif // SIM3SOLVER_H
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="2a43ad22eb75ad73ca530454bd93de61">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\widgets\widgets.h" startLineNumber="95" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\widgets\widgets.h" startLineNumber="67" endLineNumber="77"/>
            <text>
<![CDATA[struct PANGOLIN_EXPORT Button : public Widget<bool>
{
    Button(std::string title, VarValueGeneric& tv);
    void Mouse(View&, MouseButton button, int x, int y, bool pressed, int mouse_state);
    void Render();
    
    //Cache params on resize
    void ResizeChildren();
    GlText gltext;
    GLfloat raster[2];
    bool down;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="cd707fe2e9db9e3ca7a5b3e50382c2cd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="309" endLineNumber="316"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="301" endLineNumber="308"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="291" endLineNumber="298"/>
            <text>
<![CDATA[      send_data_type = NORMAL;
      break;
    case DB1:
      std::cout << "fixed range access" << std::endl;
      positionRange[0] = 35.2038955;
      positionRange[1] = 35.2711311;
      positionRange[2] = 136.9813925;
      positionRange[3] = 137.055852;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="dd9f860b00cbb881115a7d04a9723b92">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="93" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="78" endLineNumber="87"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="65" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="558" endLineNumber="565"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="132" endLineNumber="142"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="50" endLineNumber="57"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_sender\tablet_sender.cpp" startLineNumber="88" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="308" endLineNumber="316"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="41" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\include\astar_util.h" startLineNumber="35" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="502" endLineNumber="509"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="340" endLineNumber="347"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="26" endLineNumber="35"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\dpm_ocv\dpm_ocv.cpp" startLineNumber="43" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="7" endLineNumber="17"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="18" endLineNumber="28"/>
            <text>
<![CDATA[struct Model_info {
	//basic information
	//from xxxcomp.csv
	int numcomponent;	//number of component
	int sbin;		//cell size
	int interval;	//interval (for hierachical detection)
	int max_X;
	int max_Y;
	//from calculation
	int padx;	//pad information
	int pady;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="b22d372f1f92a7d6c4836550b4d0ae90">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\se3quat.h" startLineNumber="154" endLineNumber="161"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\se3quat.h" startLineNumber="137" endLineNumber="144"/>
            <text>
<![CDATA[      inline Vector7d toVector() const{
        Vector7d v;
        v[0]=_t(0);
        v[1]=_t(1);
        v[2]=_t(2);
        v[3]=_r.x();
        v[4]=_r.y();
        v[5]=_r.z();
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="767177547b21556c6c8d14b7eb12eb7f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="108" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_rejection.h" startLineNumber="379" endLineNumber="400"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="72" endLineNumber="80"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\dpm_ocv\dpm_ocv.cpp" startLineNumber="44" endLineNumber="51"/>
            <text>
<![CDATA[	double score_threshold_;
	double overlap_threshold_;
	double val_of_truncate_;
	int num_threads_;
	int lambda_;
	int num_cells_;
	int num_bins_;
	std::string model_file_;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="09550c10473e8e0b752b842300b76c24">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="322" endLineNumber="329"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="299" endLineNumber="306"/>
            <text>
<![CDATA[  visualization_msgs::Marker lane_waypoint_marker;
  lane_waypoint_marker.header.frame_id = "map";
  lane_waypoint_marker.header.stamp = ros::Time();
  lane_waypoint_marker.ns = "local_path_marker";
  lane_waypoint_marker.id = 0;
  lane_waypoint_marker.type = visualization_msgs::Marker::LINE_STRIP;
  lane_waypoint_marker.action = visualization_msgs::Marker::ADD;
  lane_waypoint_marker.scale.x = 0.2;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="32d4f446a17ae05a8ecc5b59c8e3d7a3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="91" endLineNumber="98"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="71" endLineNumber="78"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\include\astar_util.h" startLineNumber="37" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\CalObjLoc.h" startLineNumber="73" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="16" endLineNumber="23"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glplatform.h" startLineNumber="37" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Map.h" startLineNumber="21" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="21" endLineNumber="28"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="28" endLineNumber="35"/>
            <text>
<![CDATA[  bool use_vscan_points_;
  double map_x_size_;
  double map_y_size_;
  double map_resolution_;
  double tf_x_;
  double tf_z_;
  GridMap map_;
  class ObstacleFieldParameter {
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="2deac26b1c72bdd76c0aaabf3b83ef84">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\warp_point_rigid.h" startLineNumber="41" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\transformation_estimation.h" startLineNumber="40" endLineNumber="66"/>
            <text>
<![CDATA[#ifndef FAST_PCL_REGISTRATION_TRANSFORMATION_ESTIMATION_H_
#define FAST_PCL_REGISTRATION_TRANSFORMATION_ESTIMATION_H_

#include <pcl/correspondence.h>
#include <pcl/common/transforms.h>
//#include <pcl/registration/correspondence_types.h>
#include "fast_pcl/registration/correspondence_types.h"

namespace pcl
{
  namespace registration
  {
    /** \brief TransformationEstimation represents the base class for methods for transformation estimation based on:
      *   - correspondence vectors
      *   - two point clouds (source and target) of the same size
      *   - a point cloud with a set of indices (source), and another point cloud (target)
      *   - two point clouds with two sets of indices (source and target) of the same size
      *
      * \note The class is templated on the source and target point types as well as on the output scalar of the transformation matrix (i.e., float or double). Default: float.
      * \author Dirk Holz, Radu B. Rusu
      * \ingroup registration
      */
    template <typename PointSource, typename PointTarget, typename Scalar = float>
    class TransformationEstimation
    {
      public:
        typedef Eigen::Matrix<Scalar, 4, 4> Matrix4;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="e28df788ae78d98b26713a39e4bf8c8d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="107" endLineNumber="115"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="31" endLineNumber="38"/>
            <text>
<![CDATA[static void* process(void *thread_arg) {
	thread_data *args = (thread_data *)thread_arg;
	FLOAT *A = args->A;	//feature
	FLOAT *B = args->B;	//filter
	FLOAT *C = args->C;	//output
	int *A_dims = args->A_dims;
	int *B_dims = args->B_dims;
	int *C_dims = args->C_dims;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="2ba3521a21e757a127e0612a4886a297">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="76" endLineNumber="85"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="128" endLineNumber="140"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="13" endLineNumber="33"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="50" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="41" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="26" endLineNumber="35"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\include\fastvirtualscan\fastvirtualscan.h" startLineNumber="1" endLineNumber="15"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="1" endLineNumber="14"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="7" endLineNumber="25"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\fusion\include\fusion_func.h" startLineNumber="59" endLineNumber="69"/>
            <text>
<![CDATA[	int max_y;
	int min_y;
};

struct Point5
{
	int x;
	int y;
	double distance;
	float min_h;
	float max_h;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="3ec7054a79761eed9b32a9f6ebf47e37">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.cpp" startLineNumber="454" endLineNumber="466"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.cpp" startLineNumber="424" endLineNumber="435"/>
            <text>
<![CDATA[bool AstarSearch::setStartNode()
{
  // Get index of start pose
  int index_x;
  int index_y;
  int index_theta;
  poseToIndex(start_pose_local_.pose, &index_x, &index_y, &index_theta);
  SimpleNode start_sn(index_x, index_y, index_theta, 0, 0);

  // Check if start is valid
  if (isOutOfRange(index_x, index_y) || detectCollision(start_sn))
    return false;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="6adc8ca967044caa2a17da3cbd61a147">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="232" endLineNumber="245"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="221" endLineNumber="234"/>
            <text>
<![CDATA[      near_points.push_back(point);
  }
  return near_points;
}

std::vector<Lane> findLanesByStartPoint(const VectorMap& vmap, const Point& start_point)
{
  std::vector<Lane> lanes;
  for (const auto& node : vmap.findByFilter([&start_point](const Node& node){return node.pid == start_point.pid;}))
  {
    for (const auto& lane : vmap.findByFilter([&node](const Lane& lane){return lane.bnid == node.nid;}))
      lanes.push_back(lane);
  }
  return lanes;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="174b6aa8a7fd1b5ab906d56a21408372">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\CalObjLoc.h" startLineNumber="31" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\calcoordinates.h" startLineNumber="31" endLineNumber="45"/>
            <text>
<![CDATA[#ifndef CALCOORDINATES
#define CALCOORDINATES

#include <math.h>
#include <stdio.h>
#include "structure.h"

//this calculation refer to http://vldb.gsi.go.jp/sokuchi/surveycalc/surveycalc/algorithm/xy2bl/xy2bl.htm
class calcoordinates{
public:
    calcoordinates(){};

    RESULT cal(double x0,double y0 ,double phizero, double lamzero){
        x = x0;
        y = y0;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="2679fc61ebb642bf89ceb35ea3730fa3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\sync_car_dpm.cpp" startLineNumber="339" endLineNumber="350"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\car_dpm_sync.cpp" startLineNumber="339" endLineNumber="350"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\copy.cpp" startLineNumber="389" endLineNumber="400"/>
            <text>
<![CDATA[        points_image_flag = false;
        vscan_image_flag = false;
    }
}

void* thread(void* args)
{
    ros::NodeHandle nh_rcv;
    ros::CallbackQueue rcv_callbackqueue;
    nh_rcv.setCallbackQueue(&rcv_callbackqueue);
    ros::Subscriber obj_person__image_obj_sub = nh_rcv.subscribe("/obj_person/image_obj", 5, obj_person__image_obj_callback);
    ros::Subscriber obj_car__image_obj_sub = nh_rcv.subscribe("/obj_car/image_obj", 5, obj_car__image_obj_callback);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="ed3a868cd4b4730e81943d0098ba08ce">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_glut.cpp" startLineNumber="48" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_glut.cpp" startLineNumber="47" endLineNumber="54"/>
            <text>
<![CDATA[    glutKeyboardFunc(&process::Keyboard);
    glutKeyboardUpFunc(&process::KeyboardUp);
    glutReshapeFunc(&process::Resize);
    glutDisplayFunc(&process::Display);
    glutMouseFunc(&process::Mouse);
    glutMotionFunc(&process::MouseMotion);
    glutPassiveMotionFunc(&process::PassiveMouseMotion);
    glutSpecialFunc(&process::SpecialFunc);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="41f85c5d386cd85d0b5514bf18b45332">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="321" endLineNumber="339"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="296" endLineNumber="307"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="219" endLineNumber="230"/>
            <text>
<![CDATA[	if(pt->pid == 0){
		gettimeofday(&tv_kernel_end, NULL);
		tvsub(&tv_kernel_end, &tv_kernel_start, &tv);
		time_kernel += tv.tv_sec * 1000.0 + (float)tv.tv_usec / 1000.0;
	}


	/* prepare for launch dt1d_x */
	void* kernel_args_x[] = {
		&part_C_dev[pt->pid],                  // FLOAT *src_start
		&tmpM_dev[pt->pid],                    // FLOTA *dst
		&tmpIy_dev[pt->pid],                   // int *ptr
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="445415a491bb5f7278ce46623b92f653">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\search_info_ros.h" startLineNumber="33" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\gnss_localizer\nodes\nmea2tfpose\nmea2tfpose_core.h" startLineNumber="54" endLineNumber="69"/>
            <text>
<![CDATA[  void run();

private:
  // handle
  ros::NodeHandle nh_;
  ros::NodeHandle private_nh_;

  // publisher
  ros::Publisher pub1_;

  // subscriber
  ros::Subscriber sub1_;

  // constants
  const std::string MAP_FRAME_;
  const std::string GPS_FRAME_;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="06896a433e05c20314889302ea97cc1f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\vectacam\nodes\vectacam\vectacam_node.cpp" startLineNumber="46" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\klt_track\klt_track.cpp" startLineNumber="376" endLineNumber="389"/>
            <text>
<![CDATA[	void Run()
	{
		std::string image_raw_topic_str;
		std::string image_obj_topic_str;

		ros::NodeHandle private_node_handle("~");//to receive args

		if (private_node_handle.getParam("image_raw_node", image_raw_topic_str))
			{
				ROS_INFO("Setting image node to %s", image_raw_topic_str.c_str());
			}
		else
		{
			ROS_INFO("No image node received, defaulting to /image_raw, you can use _image_raw_node:=YOUR_TOPIC");
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="dc6f18232b6f79c30cd0caaca047ea8c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="270" endLineNumber="279"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="256" endLineNumber="265"/>
            <text>
<![CDATA[		res = cuTexRefSetFormat(featp2_texref, CU_AD_FORMAT_FLOAT, 1);
		if (res != CUDA_SUCCESS) {
			printf("cuTexRefSetFormat(featp2_texref) failed: res = %d\n->%s\n", res, getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuTexRefSetFormat(B_texref, CU_AD_FORMAT_FLOAT, 1);
		if (res != CUDA_SUCCESS) {
			printf("cuTexRefSetFormat(B_texref) failed: res = %d\n->%s\n", res, getCudaDrvErrorString(res));
			exit(1);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="ec2939b02d59818dc695e59208992215">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\obj_reproj.cpp" startLineNumber="85" endLineNumber="92"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="52" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="192" endLineNumber="199"/>
            <text>
<![CDATA[typedef struct postuer_type{
  double x;
  double y;
  double z;
  double theta;
  double theta2;
  double theta3;
}Posture;
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="84148e1d8d73b36f06d6ecabd933ea26">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_core.cpp" startLineNumber="72" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="66" endLineNumber="75"/>
            <text>
<![CDATA[  sub2_ = nh_.subscribe("current_pose", 1, &LaneSelectNode::callbackFromPoseStamped, this);
  sub3_ = nh_.subscribe("current_velocity", 1, &LaneSelectNode::callbackFromTwistStamped, this);
  sub4_ = nh_.subscribe("state", 1, &LaneSelectNode::callbackFromState, this);
  sub5_ = nh_.subscribe("/config/lane_select", 1, &LaneSelectNode::callbackFromConfig, this);

  // setup publisher
  pub1_ = nh_.advertise<waypoint_follower::lane>("base_waypoints", 1);
  pub2_ = nh_.advertise<std_msgs::Int32>("closest_waypoint", 1);
  pub3_ = nh_.advertise<std_msgs::Int32>("change_flag", 1);
  vis_pub1_ = nh_.advertise<visualization_msgs::MarkerArray>("lane_select_marker", 1);
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="e7d95ce843b8476fd1fb26624d3883f4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.cpp" startLineNumber="306" endLineNumber="318"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.cpp" startLineNumber="298" endLineNumber="310"/>
            <text>
<![CDATA[void OptimizableGraph::push()
{
  for (OptimizableGraph::VertexIDMap::iterator it=_vertices.begin(); it!=_vertices.end(); ++it) {
    OptimizableGraph::Vertex* v = static_cast<OptimizableGraph::Vertex*>(it->second);
    v->push();
  }
}

void OptimizableGraph::pop()
{
  for (OptimizableGraph::VertexIDMap::iterator it=_vertices.begin(); it!=_vertices.end(); ++it) {
    OptimizableGraph::Vertex* v= static_cast<OptimizableGraph::Vertex*>(it->second);
    v->pop();
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="0cd4b90db2ba5c9ee371316435a4b199">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="403" endLineNumber="414"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="82" endLineNumber="93"/>
            <text>
<![CDATA[        typedef pcl::PointCloud<PointSource> PointCloudSource;
        typedef typename PointCloudSource::Ptr PointCloudSourcePtr;
        typedef typename PointCloudSource::ConstPtr PointCloudSourceConstPtr;

        typedef pcl::PointCloud<PointTarget> PointCloudTarget;
        typedef typename PointCloudTarget::Ptr PointCloudTargetPtr;
        typedef typename PointCloudTarget::ConstPtr PointCloudTargetConstPtr;

        typedef typename KdTree::PointRepresentationConstPtr PointRepresentationConstPtr;

        /** \brief Empty constructor. */
        CorrespondenceEstimationBase () 
]]>
            </text>
        </set>
        <set lineCount="8" fingerprint="dc7c96e136688e271aa64374866dd7ae">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_receiver\tablet_receiver.cpp" startLineNumber="307" endLineNumber="316"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_receiver\tablet_receiver.cpp" startLineNumber="300" endLineNumber="309"/>
            <text>
<![CDATA[		break;
	}
	case 4: { // S1
		if (info[1] >= 0)
			s1.start();
		else
			s1.stop();
		break;
	}
	case 5: { // S2
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="d7bbaac03fc0c2a843c5f3a5d1777fbd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="457" endLineNumber="465"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="456" endLineNumber="464"/>
            <text>
<![CDATA[      tmp.signalId = extractedPos->Signals.at(i).signalId;
      tmp.u        = extractedPos->Signals.at(i).u;
      tmp.v        = extractedPos->Signals.at(i).v;
      tmp.radius   = extractedPos->Signals.at(i).radius;
      tmp.x        = extractedPos->Signals.at(i).x;
      tmp.y        = extractedPos->Signals.at(i).y;
      tmp.z        = extractedPos->Signals.at(i).z;
      tmp.type     = extractedPos->Signals.at(i).type;
      tmp.linkId   = extractedPos->Signals.at(i).linkId;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="efe0de3febce50ff4639bf96e9e3192c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="545" endLineNumber="555"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="529" endLineNumber="539"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="518" endLineNumber="527"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="576" endLineNumber="586"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="565" endLineNumber="574"/>
            <text>
<![CDATA[        l[0] = L[1][1];
        v[0][0] = V[0][1];
        v[1][0] = V[1][1];
        v[2][0] = V[2][1];
        l[1] = L[2][2];
        v[0][1] = V[0][2];
        v[1][1] = V[1][2];
        v[2][1] = V[2][2];
      }
      else
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="6693f36b3139b3baf2d54ca1520b419e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_d_viewer\scan_image_d_viewer.cpp" startLineNumber="192" endLineNumber="200"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_viewer\scan_image_viewer.cpp" startLineNumber="80" endLineNumber="88"/>
            <text>
<![CDATA[        if(scan_image.distance.at(i) != 0.0) {
            pt.x = width;
            pt.y = height;
			int colorid= wid_d ? ( (scan_image.distance.at(i) - min_d) * 255 / wid_d ) : 128;
			cv::Vec3b color=colormap.at<cv::Vec3b>(colorid);
			int g = color[1];
			int b = color[2];
			int r = color[0];
            cvCircle(image_view, pt, 2, CV_RGB (r, g, b), CV_FILLED, 8, 0);
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="b5fc05d8f71c22cfd0c07e7031b9718f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\view.h" startLineNumber="28" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\file_extension.h" startLineNumber="28" endLineNumber="43"/>
            <text>
<![CDATA[#ifndef PANGOLIN_FILE_EXTENSION_H
#define PANGOLIN_FILE_EXTENSION_H

#include <pangolin/platform.h>
#include <string>

namespace pangolin
{

enum ImageFileType
{
    ImageFileTypePpm,
    ImageFileTypeTga,
    ImageFileTypePng,
    ImageFileTypeJpg,
    ImageFileTypeTiff,
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="b0159897c12d8bd0daa65e345b33afec">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\libvelocity_set.h" startLineNumber="39" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\libvelocity_set.h" startLineNumber="41" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapDrawer.h" startLineNumber="48" endLineNumber="59"/>
            <text>
<![CDATA[private:

    float mKeyFrameSize;
    float mKeyFrameLineWidth;
    float mGraphLineWidth;
    float mPointSize;
    float mCameraSize;
    float mCameraLineWidth;

    cv::Mat mCameraPose;

    std::mutex mMutexCamera;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="fc27a97e959ab91adc5b170a743da720">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="776" endLineNumber="787"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="804" endLineNumber="817"/>
            <text>
<![CDATA[	pointer_M = (unsigned long long int)dst_M;
	pointer_tmpM = (unsigned long long int)dst_tmpM;
	pointer_tmpIx = (unsigned long long int)dst_tmpIx;
	pointer_tmpIy = (unsigned long long int)dst_tmpIy;

	for(int level=interval; level<L_MAX; level++) {
		int L = level - interval;

		if( (FSIZE[level*2]+2*pady < max_Y) || (FSIZE[level*2+1]+2*padx < max_X) )
		{
			continue;
		}

		for(int jj=0; jj<NoC; jj++) {
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="4e3416acefd1c82a59eecd9be16b5afe">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set.cpp" startLineNumber="76" endLineNumber="87"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="408" endLineNumber="419"/>
            <text>
<![CDATA[    marker.color.r = 1.0;
    marker.color.g = 0.0;
    marker.color.b = 0.0;
  }
  else
  {
    marker.color.r = 1.0;
    marker.color.g = 1.0;
    marker.color.b = 0.0;
  }
  marker.lifetime = ros::Duration(0.1);
  marker.frame_locked = true;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="a43d1ba8959edee42c53da2ce0aab711">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\robust_kernel_impl.h" startLineNumber="121" endLineNumber="149"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\robust_kernel_impl.h" startLineNumber="135" endLineNumber="162"/>
            <text>
<![CDATA[  class  RobustKernelCauchy : public RobustKernel
  {
    public:
      virtual void robustify(double e2, Eigen::Vector3d& rho) const;
  };

  /**
   * \brief Saturated cost function.
   *
   * The error is at most delta^2
   */
  class  RobustKernelSaturated : public RobustKernel
  {
    public:
      virtual void robustify(double e2, Eigen::Vector3d& rho) const;
  };

  /**
   * \brief Dynamic covariance scaling - DCS
   *  
   * See paper Robust Map Optimization from Agarwal et al.  ICRA 2013
   *
   * delta is used as $phi$
   */
  class  RobustKernelDCS : public RobustKernel
  {
    public:
      virtual void robustify(double e2, Eigen::Vector3d& rho) const;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="ff2188ee5a64cc2844e7e4c64d1a902a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="134" endLineNumber="144"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="301" endLineNumber="311"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\threadedfilebuf.h" startLineNumber="63" endLineNumber="73"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\search_info_ros.h" startLineNumber="36" endLineNumber="47"/>
            <text>
<![CDATA[  nav_msgs::OccupancyGrid map_;
  geometry_msgs::PoseStamped start_pose_global_;
  geometry_msgs::PoseStamped goal_pose_global_;
  geometry_msgs::PoseStamped start_pose_local_;
  geometry_msgs::PoseStamped goal_pose_local_;
  // Transform which converts global frame (/map in Autoware) to OccupancyGrid frame
  tf::Transform ogm2map_;
  tf::TransformListener tf_listener_;
  geometry_msgs::Pose current_pose_;

  // set data flag
  bool map_set_;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="a8623b233595b7b98ca6c4516efe3eaf">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="249" endLineNumber="274"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\System.h" startLineNumber="44" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="43" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Viewer.h" startLineNumber="22" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="39" endLineNumber="54"/>
            <text>
<![CDATA[    float focal_distance;
    float focal_slope;

    /** cached values calculated when the calibration file is read */
    float cos_rot_correction;              ///< cached cosine of rot_correction
    float sin_rot_correction;              ///< cached sine of rot_correction
    float cos_vert_correction;             ///< cached cosine of vert_correction
    float sin_vert_correction;             ///< cached sine of vert_correction

    int laser_ring;                        ///< ring number for this laser
  };

  /** \brief Calibration class storing entire configuration for the Velodyne */
  class Calibration {

  public:
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="f1b8d0c6daa4346180ec4c772a90e016">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="112" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\integrated_viewer\node\image_viewer_plugin\image_viewer_plugin.h" startLineNumber="59" endLineNumber="75"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="124" endLineNumber="134"/>
            <text>
<![CDATA[int update_rate;
int fallback_rate;
double margin;
bool can_download;

ros::Time gnss_time;
ros::Time current_time;

ros::Publisher pcd_pub;
ros::Publisher stat_pub;
std_msgs::Bool stat_msg;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="0a35eec1576cb7776716011021776b93">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_driver\include\velodyne_driver\ring_sequence.h" startLineNumber="27" endLineNumber="36"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_driver\include\velodyne_driver\ring_sequence.h" startLineNumber="40" endLineNumber="49"/>
            <text>
<![CDATA[  const int LASER_RING[N_LASERS] =
    {
       4,  5, 26, 27,  6,  7,  0,  1,
       8,  9,  2,  3, 16, 17, 10, 11,
      18, 19, 12, 13, 20, 21, 14, 15,
      28, 29, 22, 23, 30, 31, 24, 25,
      36, 37, 58, 59, 38, 39, 32, 33,
      40, 41, 34, 35, 48, 49, 42, 43,
      50, 51, 44, 45, 52, 53, 46, 47,
      60, 61, 54, 55, 62, 63, 56, 57
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="fe706f6f486422f6869716512b53cda9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\widgets\widgets.cpp" startLineNumber="233" endLineNumber="245"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\widgets\widgets.cpp" startLineNumber="271" endLineNumber="283"/>
            <text>
<![CDATA[    top = 1.0; bottom = Attach::Pix(-tab_h);
    left = 0.0; right = 1.0;
    hlock = LockLeft;
    vlock = LockBottom;
    gltext = font.Text(title);
}

void FunctionButton::Mouse(View&, MouseButton button, int x, int y, bool pressed, int mouse_state)
{
    if (button == MouseButtonLeft)
    {
        down = pressed;
        if (!pressed) {
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="da2fa9ccc90e85be224aa449c7ea9419">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\stuff\color_macros.h" startLineNumber="54" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\stuff\color_macros.h" startLineNumber="32" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\stuff\color_macros.h" startLineNumber="31" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="43" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="42" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="41" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="40" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="39" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="38" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="37" endLineNumber="45"/>
            <text>
<![CDATA[#define CAMERAEXTRINSICMAT "CameraExtrinsicMat"
#define CAMERAMAT "CameraMat"
#define DISTCOEFF "DistCoeff"
#define IMAGESIZE "ImageSize"
#define CHESSBOARDPOSE "ChessboardPose"
#define CHESSBOARDIMAGE "ChessboardImage"
#define CHESSBOARDVIEWNUM "ChessboardViewNUM"
#define GRID3DPOINTS "Grid3DPoints"
#define GRID2DPOINTS "Grid2DPoints"
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="3325a39296466e1a6c6d0b6474e2615c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\file_extension.h" startLineNumber="29" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\console\ConsoleInterpreter.h" startLineNumber="28" endLineNumber="43"/>
            <text>
<![CDATA[#pragma once

#include <vector>
#include <string>

namespace pangolin
{

enum ConsoleLineType
{
    ConsoleLineTypeCmd,
    ConsoleLineTypeCmdOptions,
    ConsoleLineTypeStdout,
    ConsoleLineTypeStderr,
    ConsoleLineTypeOutput,
    ConsoleLineTypeHelp,
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="7ef3b0b9bc1a2b8f1f228dc90c019596">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="209" endLineNumber="222"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="214" endLineNumber="227"/>
            <text>
<![CDATA[  if (input->step_size != step_size)
  {
    step_size = input->step_size;
    ndt.setStepSize(step_size);
  }
  if (input->trans_epsilon != trans_eps)
  {
    trans_eps = input->trans_epsilon;
    ndt.setTransformationEpsilon(trans_eps);
  }
  if (input->max_iterations != max_iter)
  {
    max_iter = input->max_iterations;
    ndt.setMaximumIterations(max_iter);
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="1627a14b904f4bc2cf620e6b4a50a5dd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\view.cpp" startLineNumber="368" endLineNumber="378"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\handler\handler.cpp" startLineNumber="137" endLineNumber="146"/>
            <text>
<![CDATA[    const int zsize = zl*zl;
    GLfloat zs[zsize];
    
#ifndef HAVE_GLES    
    glReadBuffer(GL_FRONT);
    glReadPixels(x-hwin,y-hwin,zl,zl,GL_DEPTH_COMPONENT,GL_FLOAT,zs);
#else
    std::fill(zs,zs+zsize, 1);
#endif
    GLfloat mindepth = *(std::min_element(zs,zs+zsize));
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="6303a57b8bd8b176a7f332aabeeedb22">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_receiver\tablet_receiver.cpp" startLineNumber="257" endLineNumber="267"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_receiver\tablet_receiver.cpp" startLineNumber="314" endLineNumber="324"/>
            <text>
<![CDATA[		break;
	}
	case 6: { // POSE
		size = info[1];
		if (!size)
			break;

		double *buf = (double *)malloc(size);
		if (buf == NULL) {
			perror("malloc");
			return -1;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="b3fb144dd3a4fc075316b46ea23c1156">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_viz.cpp" startLineNumber="109" endLineNumber="124"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_viz.cpp" startLineNumber="133" endLineNumber="148"/>
            <text>
<![CDATA[    geometry_msgs::Point p;
    p.x = radius * cos(i);
    p.y = radius * sin(i);

    // transform to (radius,0)
    geometry_msgs::Point relative_p;
    relative_p.x = p.x - radius;
    relative_p.y = p.y;

    // rotate -90掳
    geometry_msgs::Point rotate_p = rotatePoint(relative_p, -90);

    // transform to vehicle plane
    geometry_msgs::Point tf_p = calcAbsoluteCoordinate(rotate_p, current_pose);

    traj_circle_array.push_back(tf_p);
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="2816342f9aceef3161b5e22528324601">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\obj_reproj.cpp" startLineNumber="85" endLineNumber="94"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="52" endLineNumber="64"/>
            <text>
<![CDATA[}Signal;

typedef struct{
  int id;
  int lid;
  double width;
  char color;
  int type;
  int linkid;
}WhiteLine;

typedef struct{
  int lid;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="be01c93705c19f2b0f36f7dd1d97bdd8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="669" endLineNumber="678"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\lib\libwaypoint_follower.cpp" startLineNumber="121" endLineNumber="131"/>
            <text>
<![CDATA[  tf::Transform inverse;
  tf::poseMsgToTF(current_pose, inverse);
  tf::Transform transform = inverse.inverse();

  tf::Point p;
  pointMsgToTF(point_msg, p);
  tf::Point tf_p = transform * p;
  geometry_msgs::Point tf_point_msg;
  pointTFToMsg(tf_p, tf_point_msg);

  return tf_point_msg;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="67ea55f6853529dc5e60a55a4f4f5d53">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\load_model.cpp" startLineNumber="223" endLineNumber="235"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\load_model.cpp" startLineNumber="327" endLineNumber="338"/>
            <text>
<![CDATA[		fscanf(file,FLOAT_SCAN_FMT,&dummy_t1); // this is dummy scan
	}

#ifndef ORIGINAL
#ifndef SEPARETE_MEM
	/* allocate memory region for part in a lump */
	FLOAT *dst_part;
	res = cuMemHostAlloc((void **)&dst_part, SUM_SIZE_PART, CU_MEMHOSTALLOC_DEVICEMAP);
	if(res != CUDA_SUCCESS){
		std::cerr << "Failed: cuMemHostAlloc(dst_part): "
			  << cuda_response_to_string(res) << std::endl;
		std::exit(1);
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="475ec22ef55cc8243ea181a30bfd4ffe">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\opengl_render_state.cpp" startLineNumber="59" endLineNumber="70"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\opengl_render_state.cpp" startLineNumber="72" endLineNumber="83"/>
            <text>
<![CDATA[    mat(2, 1) = sinth;
    mat(2, 2) = costh;
    return mat;
}

OpenGlMatrix OpenGlMatrix::RotateY(GLprecision theta_rad)
{
    OpenGlMatrix mat;
    mat.SetIdentity();
    const GLprecision costh = cos(theta_rad);
    const GLprecision sinth = sin(theta_rad);
    mat(0, 0) = costh;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="144d2868466e24d16c7dfa1c43b78d0d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="267" endLineNumber="275"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="280" endLineNumber="289"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="279" endLineNumber="288"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="278" endLineNumber="287"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="277" endLineNumber="286"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="275" endLineNumber="285"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="274" endLineNumber="284"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="273" endLineNumber="282"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="272" endLineNumber="281"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="271" endLineNumber="280"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="270" endLineNumber="279"/>
            <text>
<![CDATA[      res.Red.Hue.center = Red_set.hue.center;
      res.Red.Hue.range  = Red_set.hue.range;
      res.Red.Sat.center = Red_set.sat.center;
      res.Red.Sat.range  = Red_set.sat.range;
      res.Red.Val.center = Red_set.val.center;
      res.Red.Val.range  = Red_set.val.range;

      res.Yellow.Hue.center = Yellow_set.hue.center;
      res.Yellow.Hue.range  = Yellow_set.hue.range;
      res.Yellow.Sat.center = Yellow_set.sat.center;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="019a2e24c41c4158cea500678c257916">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\marginal_covariance_cholesky.cpp" startLineNumber="175" endLineNumber="183"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\marginal_covariance_cholesky.cpp" startLineNumber="205" endLineNumber="213"/>
            <text>
<![CDATA[    assert(block);
    for (int iRow=0; iRow<block->rows(); ++iRow)
      for (int iCol=0; iCol<block->cols(); ++iCol){
  int rr=rowBase+iRow;
  int cc=colBase+iCol;
        int r = _perm ? _perm[rr] : rr; // apply permutation
        int c = _perm ? _perm[cc] : cc;
        if (r > c)
          swap(r, c);
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="96f9e424c3d99634e207cb006ae73842">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\ground_filter\ground_filter.cpp" startLineNumber="21" endLineNumber="33"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="20" endLineNumber="28"/>
            <text>
<![CDATA[private:
  ros::NodeHandle nh_;
  ros::Publisher publisher_;
  ros::Subscriber waypoint_subscriber_;
  ros::Subscriber vscan_subscriber_;
  ros::Subscriber obj_subscriber_;
  bool use_target_waypoint_;
  bool use_obstacle_box_;
  bool use_vscan_points_;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="fd98d21cb4cde995c1872ea21d68fae2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.cpp" startLineNumber="326" endLineNumber="342"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.cpp" startLineNumber="318" endLineNumber="334"/>
            <text>
<![CDATA[    v->discardTop();
  }
}

void OptimizableGraph::push(HyperGraph::VertexSet& vset)
{
  for (HyperGraph::VertexSet::iterator it=vset.begin(); it!=vset.end(); ++it) {
    OptimizableGraph::Vertex* v = static_cast<OptimizableGraph::Vertex*>(*it);
    v->push();
  }
}

void OptimizableGraph::pop(HyperGraph::VertexSet& vset)
{
  for (HyperGraph::VertexSet::iterator it=vset.begin(); it!=vset.end(); ++it) {
    OptimizableGraph::Vertex* v = static_cast<OptimizableGraph::Vertex*>(*it);
    v->pop();
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="3c157161d97f40306ba112d88ab78a9e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="7" endLineNumber="27"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="1" endLineNumber="16"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\fastvirtualscan\include\fastvirtualscan\fastvirtualscan.h" startLineNumber="1" endLineNumber="18"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="128" endLineNumber="141"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="76" endLineNumber="86"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="13" endLineNumber="34"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="50" endLineNumber="60"/>
            <text>
<![CDATA[  int type;
  int linkid;
}Signal;

typedef struct{
  int id;
  int lid;
  double width;
  char color;
  int type;
  int linkid;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="2da4741430055e0c33842a15841c682f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\autoware_connector\nodes\can_info_translator\can_info_translator_core.h" startLineNumber="115" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.h" startLineNumber="70" endLineNumber="84"/>
            <text>
<![CDATA[class LaneSelectNode
{
public:
  LaneSelectNode();
  ~LaneSelectNode();

  void run();

private:
  // handle
  ros::NodeHandle nh_;
  ros::NodeHandle private_nh_;

  // publisher
  ros::Publisher pub1_, pub2_, pub3_;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="a2020327a4f7e30cd20ab835cde2f49d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1004" endLineNumber="1017"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1522" endLineNumber="1535"/>
            <text>
<![CDATA[            return false;
        }
    }

    Eigen::Matrix3d rotation;
    rotation=Eigen::AngleAxisd(x[2],Eigen::Vector3d::UnitZ())
            *Eigen::AngleAxisd(x[1],Eigen::Vector3d::UnitY())
            *Eigen::AngleAxisd(x[0],Eigen::Vector3d::UnitX());

    cameraextrinsicmat.at<double>(0,0)=rotation(0,0);cameraextrinsicmat.at<double>(0,1)=rotation(0,1);cameraextrinsicmat.at<double>(0,2)=rotation(0,2);
    cameraextrinsicmat.at<double>(1,0)=rotation(1,0);cameraextrinsicmat.at<double>(1,1)=rotation(1,1);cameraextrinsicmat.at<double>(1,2)=rotation(1,2);
    cameraextrinsicmat.at<double>(2,0)=rotation(2,0);cameraextrinsicmat.at<double>(2,1)=rotation(2,1);cameraextrinsicmat.at<double>(2,2)=rotation(2,2);

    cameraextrinsicmat.at<double>(0,3)=x[3];cameraextrinsicmat.at<double>(1,3)=x[4];cameraextrinsicmat.at<double>(2,3)=x[5];
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="946fffded08e1053f561b148f40bef33">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\car_dpm_sync.cpp" startLineNumber="26" endLineNumber="38"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\copy.cpp" startLineNumber="11" endLineNumber="23"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\sync_car_dpm.cpp" startLineNumber="26" endLineNumber="38"/>
            <text>
<![CDATA[#define _REQ_PUB 1

/* ----var---- */
/* common var */
bool buf_flag;
pthread_mutex_t mutex;
/* user var */
boost::circular_buffer<sensor_msgs::Image> image_raw_ringbuf(3);
boost::circular_buffer<sensor_msgs::PointCloud2> points_raw_ringbuf(3);
ros::Publisher image_raw_pub;
ros::Publisher points_raw_pub;
bool image_obj_flag;
bool points_image_flag;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="8a387e7cd4403bf28a68d88f9b435a6f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="205" endLineNumber="213"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="236" endLineNumber="244"/>
            <text>
<![CDATA[  visualization_msgs::Marker lane_waypoint_marker;
  lane_waypoint_marker.header.frame_id = "map";
  lane_waypoint_marker.header.stamp = ros::Time();
  lane_waypoint_marker.ns = "global_lane_array_marker";
  lane_waypoint_marker.type = visualization_msgs::Marker::LINE_STRIP;
  lane_waypoint_marker.action = visualization_msgs::Marker::ADD;
  lane_waypoint_marker.scale.x = 1.0;
  lane_waypoint_marker.color = color;
  lane_waypoint_marker.frame_locked = true;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="4256a7930b3f62140f5027ea393a3f43">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_trajectory_gen\lattice_trajectory_gen.cpp" startLineNumber="228" endLineNumber="236"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\model_publisher\nodes\model_publisher.cpp" startLineNumber="67" endLineNumber="76"/>
            <text>
<![CDATA[  marker.color.r = 0.0;
  marker.color.g = 0.0;
  marker.color.b = 0.0;
  marker.color.a = 0.0;
  marker.scale.x = 1.0;
  marker.scale.y = 1.0;
  marker.scale.z = 1.0;
  marker.frame_locked = true;

  pub.publish(marker);
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="71082c099a09dad5394c414e15f3af67">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.h" startLineNumber="143" endLineNumber="155"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.h" startLineNumber="174" endLineNumber="186"/>
            <text>
<![CDATA[class  EdgeStereoSE3ProjectXYZOnlyPose: public  BaseUnaryEdge<3, Vector3d, VertexSE3Expmap>{
public:
  EIGEN_MAKE_ALIGNED_OPERATOR_NEW

  EdgeStereoSE3ProjectXYZOnlyPose(){}

  bool read(std::istream& is);

  bool write(std::ostream& os) const;

  void computeError()  {
    const VertexSE3Expmap* v1 = static_cast<const VertexSE3Expmap*>(_vertices[0]);
    Vector3d obs(_measurement);
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="278205cfb14988bfd0e96efeedc10382">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.h" startLineNumber="55" endLineNumber="70"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\state\state_machine\nodes\state_machine\state_machine.h" startLineNumber="58" endLineNumber="74"/>
            <text>
<![CDATA[enum class ChangeFlag : int32_t
{
  straight,
  right,
  left,

  unknown = -1,
};

template <class T>
typename std::underlying_type<T>::type enumToInteger(T t)
{
  return static_cast<typename std::underlying_type<T>::type>(t);
}

// Forward Decralation
class StateContext;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="eb7a74aa548ff9c6d62d9e13701e1b81">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glstate.h" startLineNumber="92" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glstate.h" startLineNumber="88" endLineNumber="104"/>
            <text>
<![CDATA[        if (m_DepthMaskCalled) {
            ::glDepthMask(m_OriginalDepthMask);
        }

        if (m_ShadeModelCalled) {
            ::glShadeModel(m_OriginalShadeModel);
        }

        if (m_CullFaceCalled) {
            ::glCullFace(m_OriginalCullFace);
        }
        
        if(m_PointSizeCalled) {
            ::glPointSize(m_OriginalPointSize);
        }
        
        if(m_LineWidthCalled) {
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="de34e5492c5f50ee67299cc2fcfe422f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="1135" endLineNumber="1149"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="1143" endLineNumber="1153"/>
            <text>
<![CDATA[  CUtexref hist_ptr_incrementer_texref;
  res = cuModuleGetTexRef(&hist_ptr_incrementer_texref, module[0], "hist_ptr_incrementer");
  MY_CUDA_CHECK(res, "cuModuleGetTexRef(hist_ptr_incrementer)");

  CUtexref norm_ptr_incrementer_texref;
  res = cuModuleGetTexRef(&norm_ptr_incrementer_texref, module[0], "norm_ptr_incrementer");
  MY_CUDA_CHECK(res, "cuModuleGetTexRef(norm_ptr_incrementer)");

  CUtexref feat_ptr_incrementer_texref;
  res = cuModuleGetTexRef(&feat_ptr_incrementer_texref, module[0], "feat_ptr_incrementer");
  MY_CUDA_CHECK(res, "cuModuleGetTexRef(feat_ptr_incrementer)");
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="efa6399688b05d9f900d7b9dc80e3b29">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="363" endLineNumber="381"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="131" endLineNumber="146"/>
            <text>
<![CDATA[	if(res != CUDA_SUCCESS) {
		printf("cuMemcpyHtoD(DID_4__array) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
	}


	if(pt->pid == 0){
		gettimeofday(&tv_memcpy_end, NULL);
		tvsub(&tv_memcpy_end, &tv_memcpy_start, &tv);
		time_memcpy += tv.tv_sec * 1000.0 + (float)tv.tv_usec / 1000.0;
	}

	int sharedMemBytes = 0;

	/* get max thread num per block */
	int max_threads_num = 0;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="abed8990f9e405df1eb1931d00f78060">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\for_use_gpu.h" startLineNumber="15" endLineNumber="28"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\cpu\dpm_ocv_cpu.cpp" startLineNumber="7" endLineNumber="20"/>
            <text>
<![CDATA[#define LATENT_SVM_OK 0

// Data structures in OpenCV private header files
typedef struct{
    int sizeX;
    int sizeY;
    int numFeatures;
    float *map;
} CvLSVMFeatureMap;

typedef struct{
    int numLevels;
    CvLSVMFeatureMap **pyramid;
} CvLSVMFeaturePyramid;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="fe3d97483635e765adc2d1b208b42de1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\copy.cpp" startLineNumber="420" endLineNumber="434"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\car_dpm_sync.cpp" startLineNumber="362" endLineNumber="376"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\sync_car_dpm.cpp" startLineNumber="362" endLineNumber="376"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\dpm_sync_2.cpp" startLineNumber="197" endLineNumber="212"/>
            <text>
<![CDATA[            ROS_INFO("timeout");
            if(!publish()) {
                /* when to publish is failure, republish */
                struct timespec sleep_time;
                sleep_time.tv_sec = 0;
                sleep_time.tv_nsec = 200000000; //5Hz
                while (!publish() || ros::ok())
                    nanosleep(&sleep_time, NULL);
            }
        }

    }
    return NULL;
}

int main(int argc, char **argv) {
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="7ac4db1f2e51491aec31b857d3a6f74d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="11" endLineNumber="21"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="111" endLineNumber="121"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="49" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="129" endLineNumber="139"/>
            <text>
<![CDATA[void VectorMap::load_dtlanes(const vector_map::DTLaneArray& msg)
{
  for (const auto& dtlane : msg.data)
    {
      DTLane tmp;
      tmp.did   = dtlane.did;
      tmp.dist  = dtlane.dist;
      tmp.pid   = dtlane.pid;
      tmp.dir   = dtlane.dir;
      tmp.apara = dtlane.apara;
      tmp.r     = dtlane.r;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="5e580b43e860b32488c8ef193f2803c6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="186" endLineNumber="197"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="251" endLineNumber="261"/>
            <text>
<![CDATA[  NDMapPtr next;
}NDMap;

typedef struct nd_data *NDDatPtr;

typedef struct nd_data{
  NormalDistribution nd;
  int x;
  int y;
  int z;
  int layer;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="5430f87b7d7f6103b7dbf1c7035db274">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="115" endLineNumber="126"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="113" endLineNumber="125"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="112" endLineNumber="124"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="110" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="109" endLineNumber="121"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="133" endLineNumber="142"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="132" endLineNumber="140"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="131" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="130" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="129" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="128" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="127" endLineNumber="135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="126" endLineNumber="134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="125" endLineNumber="133"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="124" endLineNumber="132"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="122" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="300" endLineNumber="309"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="299" endLineNumber="308"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="298" endLineNumber="306"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="66" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="115" endLineNumber="132"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="113" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="112" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\Math.h" startLineNumber="15" endLineNumber="23"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="44" endLineNumber="53"/>
            <text>
<![CDATA[std::string frame_id;
std::string output_file;

visualization_msgs::Marker waypoint_marker;
visualization_msgs::Marker branching_marker;
visualization_msgs::Marker merging_marker;
visualization_msgs::Marker selection_marker;
visualization_msgs::Marker route_marker;
ros::Publisher marker_pub;
tf::StampedTransform transform;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="fbe48996e01b731a7f7708d8a4bd4887">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_receiver\vehicle_receiver.cpp" startLineNumber="214" endLineNumber="229"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="204" endLineNumber="219"/>
            <text>
<![CDATA[      std::perror("pthread_detach");
      break;
    }
  }

error:
  close(sock);
  return nullptr;
}

int main(int argc, char **argv)
{
  ros::init(argc ,argv, "vehicle_sender") ;
  ros::NodeHandle nh;

  std::cout << "vehicle sender" << std::endl;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="4b4919e54722f2d42c759f53221f083d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\base_binary_edge.h" startLineNumber="95" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\base_unary_edge.h" startLineNumber="80" endLineNumber="90"/>
            <text>
<![CDATA[      using BaseEdge<D,E>::resize;
      using BaseEdge<D,E>::computeError;

    protected:
      using BaseEdge<D,E>::_measurement;
      using BaseEdge<D,E>::_information;
      using BaseEdge<D,E>::_error;
      using BaseEdge<D,E>::_vertices;
      using BaseEdge<D,E>::_dimension;

      JacobianXiOplusType _jacobianOplusXi;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="517386e7bd3a2ad9976831c859311d2d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\pointgrey\nodes\grasshopper3\grasshopper3.cpp" startLineNumber="312" endLineNumber="320"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\pointgrey\nodes\grasshopper3\grasshopper3.cpp" startLineNumber="315" endLineNumber="323"/>
            <text>
<![CDATA[			case FlyCapture2::GRBG:
			  encoding_pattern = "bayer_grbg8";
			  break;
			case FlyCapture2::GBRG:
			  encoding_pattern = "bayer_gbrg8";
			  break;
			case FlyCapture2::BGGR:
			  encoding_pattern = "bayer_bggr8";
			  break;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="383018dcbb37cba170adb3520f4a8545">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\state\state_machine\nodes\state_machine\state_machine_core.h" startLineNumber="45" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_core.h" startLineNumber="63" endLineNumber="77"/>
            <text>
<![CDATA[class PurePursuitNode
{
public:
  PurePursuitNode();
  ~PurePursuitNode();

  void run();

private:
  // handle
  ros::NodeHandle nh_;
  ros::NodeHandle private_nh_;

  // class
  PurePursuit pp_;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="fb279a22953a92f130987f344f2de15f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="163" endLineNumber="175"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="588" endLineNumber="601"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="238" endLineNumber="251"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="317" endLineNumber="329"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="769" endLineNumber="781"/>
            <text>
<![CDATA[    if (line.lid == 0)
    {
      ROS_ERROR_STREAM("[createSideStripMarkerArray] invalid line: " << line);
      continue;
    }

    if (line.blid == 0) // if beginning line
    {
      visualization_msgs::Marker marker = createLinkedLineMarker("side_strip", id++, color, vmap, line);
      if (isValidMarker(marker))
        marker_array.markers.push_back(marker);
      else
        ROS_ERROR_STREAM("[createSideStripMarkerArray] failed createLinkedLineMarker: " << line);
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="7c1cef6a89614c4916597e2666e76cfe">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\integrated_viewer\node\image_viewer_plugin\image_viewer_plugin.h" startLineNumber="1" endLineNumber="36"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\integrated_viewer\node\traffic_light_plugin\traffic_light_plugin.h" startLineNumber="1" endLineNumber="21"/>
            <text>
<![CDATA[#ifndef TRAFFIC_LIGHT_PLUGIN_H
#define TRAFFIC_LIGHT_PLUGIN_H

#ifndef Q_MOC_RUN
#include <ros/ros.h>
#include <opencv/cv.h>
#include <opencv/highgui.h>
#include <rviz/panel.h>
#include <runtime_manager/traffic_light.h>

#include "convert_image.h"
#include "ui_form.h"
#endif

namespace integrated_viewer
{

  class TrafficLightPlugin: public rviz::Panel {
  Q_OBJECT
  public:
    explicit TrafficLightPlugin(QWidget* parent = 0);
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="a5b2113ef6c09bb789fe30e912f2f9d1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glsl.h" startLineNumber="248" endLineNumber="256"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glsl.h" startLineNumber="268" endLineNumber="276"/>
            <text>
<![CDATA[    GLint status;
    glGetShaderiv(shader, GL_COMPILE_STATUS, &status);
    if(status != GL_TRUE) {
        pango_print_error("GLSL Shader compilation failed: ");
        const int SHADER_LOG_MAX_LEN = 10240;
        char infolog[SHADER_LOG_MAX_LEN];
        GLsizei len;
        glGetShaderInfoLog(shader, SHADER_LOG_MAX_LEN, &len, infolog);
        if(len) {
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="e0d4c15b78a07d45e81972abc8d09f0d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\pointgrey\nodes\grasshopper3\grasshopper3.cpp" startLineNumber="137" endLineNumber="149"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\pointgrey\nodes\grasshopper3\grasshopper3.cpp" startLineNumber="153" endLineNumber="166"/>
            <text>
<![CDATA[		error = camera->SetEmbeddedImageInfo(&image_info);
		if (error != FlyCapture2::PGRERROR_OK)
		{
			error.PrintErrorTrace();
			std::exit(-1);
		}

		// Get the camera information
		FlyCapture2::CameraInfo camera_info;
		error = camera->GetCameraInfo(&camera_info);
		if (error != FlyCapture2::PGRERROR_OK)
		{
			error.PrintErrorTrace();
			std::exit(-1);
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="5c40ec861b219669fd09298e6bb042e9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="750" endLineNumber="758"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="325" endLineNumber="333"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\vscan2linelist\vscan2linelist.cpp" startLineNumber="84" endLineNumber="92"/>
            <text>
<![CDATA[    _linelist.ns = "vscan_linelist";
    _linelist.id = 0;
    _linelist.type = visualization_msgs::Marker::LINE_LIST;
    _linelist.action = visualization_msgs::Marker::ADD;
    _linelist.scale.x = 0.15;
    _linelist.color.a = 0.5;
    _linelist.color.r = 0.0;
    _linelist.color.g = 1.0;
    _linelist.color.b = 0.0;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="8303bddd265e7fe3a85be6e1741777fa">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_d_viewer\scan_image_d_viewer.cpp" startLineNumber="261" endLineNumber="269"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_viewer\scan_image_viewer.cpp" startLineNumber="118" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_viewer\image_viewer.cpp" startLineNumber="283" endLineNumber="293"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_viewer\vscan_image_viewer.cpp" startLineNumber="118" endLineNumber="127"/>
            <text>
<![CDATA[	ros::init(argc, argv, "vscan_image_viewer");
	ros::NodeHandle n;
	ros::NodeHandle private_nh("~");

	std::string image_topic_name;
	if (private_nh.getParam("image_raw_topic", image_topic_name)) {
		ROS_INFO("Setting image topic to %s", image_topic_name.c_str());
	} else {
		ROS_INFO("No image topic received, defaulting to image_raw, you can use _image_raw_topic:=YOUR_NODE");
		image_topic_name = "/image_raw";
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="f89c4783f3c0136000341cea9749ff23">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="18" endLineNumber="26"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="73" endLineNumber="81"/>
            <text>
<![CDATA[struct thread_data {
	FLOAT *A;
	FLOAT *B;
	FLOAT *C;
	FLOAT *F;
	FLOAT *T;
	int A_dims[3];
	int B_dims[3];
	int C_dims[2];
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="bd29d2307880c8ff01cdaf03446e3311">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\load_model.cpp" startLineNumber="144" endLineNumber="155"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\load_model.cpp" startLineNumber="148" endLineNumber="160"/>
            <text>
<![CDATA[		for (int j = 0; j < GL; j++) {
			fscanf(file,FLOAT_SCAN_FMT,&t1);
			MI->y1[i][j] = t1;
		}

		for (int j = 0; j < GL; j++){
			fscanf(file,FLOAT_SCAN_FMT,&t1);
			MI->x2[i][j] = t1;
		}

		for (int j = 0; j < GL; j++){
			fscanf(file,FLOAT_SCAN_FMT,&t1);
			MI->y2[i][j] = t1;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="8500c4998b6485ba73e0ce1429a48b91">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="58" endLineNumber="69"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\search_info_ros.h" startLineNumber="2" endLineNumber="22"/>
            <text>
<![CDATA[#define SEARCH_INFO_ROS_H

#include "astar_util.h"

#include <nav_msgs/OccupancyGrid.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseWithCovarianceStamped.h>
#include <tf/transform_listener.h>
#include <std_msgs/Int32.h>

class SearchInfo
{
 public:
  SearchInfo();
  ~SearchInfo();

  // ROS Callback
  void mapCallback(const nav_msgs::OccupancyGridConstPtr &msg);
  void startCallback(const geometry_msgs::PoseWithCovarianceStampedConstPtr &msg);
  void goalCallback(const geometry_msgs::PoseStampedConstPtr &msg);
  void currentPoseCallback(const geometry_msgs::PoseStampedConstPtr &msg);
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="84d1b60dd665aeda636f6d8ed238189f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\transformation_estimation_lm.h" startLineNumber="109" endLineNumber="158"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\transformation_estimation_point_to_plane_lls.h" startLineNumber="74" endLineNumber="122"/>
            <text>
<![CDATA[        virtual ~TransformationEstimationPointToPlaneLLS () {};

        /** \brief Estimate a rigid rotation transformation between a source and a target point cloud using SVD.
          * \param[in] cloud_src the source point cloud dataset
          * \param[in] cloud_tgt the target point cloud dataset
          * \param[out] transformation_matrix the resultant transformation matrix
          */
        inline void
        estimateRigidTransformation (
            const pcl::PointCloud<PointSource> &cloud_src,
            const pcl::PointCloud<PointTarget> &cloud_tgt,
            Matrix4 &transformation_matrix) const;

        /** \brief Estimate a rigid rotation transformation between a source and a target point cloud using SVD.
          * \param[in] cloud_src the source point cloud dataset
          * \param[in] indices_src the vector of indices describing the points of interest in \a cloud_src
          * \param[in] cloud_tgt the target point cloud dataset
          * \param[out] transformation_matrix the resultant transformation matrix
          */
        inline void
        estimateRigidTransformation (
            const pcl::PointCloud<PointSource> &cloud_src,
            const std::vector<int> &indices_src,
            const pcl::PointCloud<PointTarget> &cloud_tgt,
            Matrix4 &transformation_matrix) const;

        /** \brief Estimate a rigid rotation transformation between a source and a target point cloud using SVD.
          * \param[in] cloud_src the source point cloud dataset
          * \param[in] indices_src the vector of indices describing the points of interest in \a cloud_src
          * \param[in] cloud_tgt the target point cloud dataset
          * \param[in] indices_tgt the vector of indices describing the correspondences of the interst points from \a indices_src
          * \param[out] transformation_matrix the resultant transformation matrix
          */
        inline void
        estimateRigidTransformation (
            const pcl::PointCloud<PointSource> &cloud_src,
            const std::vector<int> &indices_src,
            const pcl::PointCloud<PointTarget> &cloud_tgt,
            const std::vector<int> &indices_tgt,
            Matrix4 &transformation_matrix) const;

        /** \brief Estimate a rigid rotation transformation between a source and a target point cloud using SVD.
          * \param[in] cloud_src the source point cloud dataset
          * \param[in] cloud_tgt the target point cloud dataset
          * \param[in] correspondences the vector of correspondences between source and target point cloud
          * \param[out] transformation_matrix the resultant transformation matrix
          */
        inline void
        estimateRigidTransformation (
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="e77e49f3e982f536eb6de8c005094354">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="599" endLineNumber="614"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1288" endLineNumber="1303"/>
            <text>
<![CDATA[    caliblidarviewer->update();

    caliblidarsshow=new QTabWidget;
    lidarsplitter->addWidget(caliblidarsshow);
    lidarsplitter->setStretchFactor(lidarsplitter->indexOf(caliblidarsshow),1);
}

void CalibrateCameraLidarChessboardBase::refreshLidarSlot()
{
    if(refreshLidar())
    {
        emit lidarRefreshedSignal();
    }
    else
    {
        emit lidarRefreshedErrorSignal();
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="cabe1b3de0aff51a2a8e46506ecd96d9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.cpp" startLineNumber="72" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="350" endLineNumber="360"/>
            <text>
<![CDATA[  pcl::PointCloud<pcl::PointXYZ> vscan_raw;
  pcl::fromROSMsg(*msg, vscan_raw);

  g_vscan.clear();
  for (const auto &v : vscan_raw)
  {
    if (v.x == 0 && v.y == 0)
      continue;
    if (v.z > g_detection_height_top || v.z < g_detection_height_bottom)
      continue;
    g_vscan.push_back(v);
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="8b64c57674a27c3c778d26c6611e7249">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_viz.cpp" startLineNumber="37" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_viz.cpp" startLineNumber="59" endLineNumber="68"/>
            <text>
<![CDATA[visualization_msgs::Marker displayNextTarget(geometry_msgs::Point target)
{
  visualization_msgs::Marker marker;
  marker.header.frame_id = MAP_FRAME;
  marker.header.stamp = ros::Time();
  marker.ns = "next_target_marker";
  marker.id = 0;
  marker.type = visualization_msgs::Marker::SPHERE;
  marker.action = visualization_msgs::Marker::ADD;
  marker.pose.position = target;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="cf13e703b96e76b103e00867270cd72e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="66" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="580" endLineNumber="588"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="571" endLineNumber="587"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="570" endLineNumber="586"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="569" endLineNumber="585"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="481" endLineNumber="489"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="472" endLineNumber="488"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="471" endLineNumber="487"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="470" endLineNumber="486"/>
            <text>
<![CDATA[			part_size = 0;
			pointer_size = 0;
			move_size = 0;

		}

	}


	/* downloads tmpIx from GPU */

	sum_part_size = 0;
	sum_pointer_size = 0;
	part_size = 0;
	pointer_size = 0;
	part_y = 0;
	move_size = 0;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="3896dd3193118ae932f8310cc6982bee">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_receiver\udon_receiver.cpp" startLineNumber="88" endLineNumber="96"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="274" endLineNumber="282"/>
            <text>
<![CDATA[	int port;
	n.param<int>("/udon_sender/port", port, 5999);
	int sub_mode_queue_size;
	n.param<int>("/udon_sender/sub_mode_queue_size", sub_mode_queue_size, 1);
	int sub_pose_queue_size;
	n.param<int>("/udon_sender/sub_pose_queue_size", sub_pose_queue_size, 1);
	ROS_INFO_STREAM("backlog = " << backlog);
	ROS_INFO_STREAM("bufsize = " << bufsize);
	ROS_INFO_STREAM("period = " << period);
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="1371ed9c137a73b4c70e3c70d28f8370">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\klt_track\klt_track.cpp" startLineNumber="65" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_publisher\calibration_publisher.cpp" startLineNumber="10" endLineNumber="20"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\gnss_localizer\nodes\nmea2tfpose\nmea2tfpose_core.h" startLineNumber="58" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="303" endLineNumber="313"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\search_info_ros.h" startLineNumber="38" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\gazebo\catvehicle\src\distanceEstimator.cpp" startLineNumber="20" endLineNumber="28"/>
            <text>
<![CDATA[std_msgs::Float32 dist;
std_msgs::Float32 dist_1;
std_msgs::Float32 vel;
std_msgs::Float32 vel_1;
std_msgs::Float32 accel;
ros::Time lastUpdate;
bool newMessage;
double angle_min;
double angle_max;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="4da66ca396fd3970956411f7a866989a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="342" endLineNumber="383"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\transformation_estimation_point_to_plane_lls.h" startLineNumber="40" endLineNumber="69"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\transformation_estimation_svd.h" startLineNumber="40" endLineNumber="63"/>
            <text>
<![CDATA[#ifndef FAST_PCL_REGISTRATION_TRANSFORMATION_ESTIMATION_SVD_H_
#define FAST_PCL_REGISTRATION_TRANSFORMATION_ESTIMATION_SVD_H_

//#include <pcl/registration/transformation_estimation.h>
#include "fast_pcl/registration/transformation_estimation.h"
#include <pcl/cloud_iterator.h>

namespace pcl
{
  namespace registration
  {
    /** @b TransformationEstimationSVD implements SVD-based estimation of
      * the transformation aligning the given correspondences.
      *
      * \note The class is templated on the source and target point types as well as on the output scalar of the transformation matrix (i.e., float or double). Default: float.
      * \author Dirk Holz, Radu B. Rusu
      * \ingroup registration
      */
    template <typename PointSource, typename PointTarget, typename Scalar = float>
    class TransformationEstimationSVD : public TransformationEstimation<PointSource, PointTarget, Scalar>
    {
      public:
        typedef boost::shared_ptr<TransformationEstimationSVD<PointSource, PointTarget, Scalar> > Ptr;
        typedef boost::shared_ptr<const TransformationEstimationSVD<PointSource, PointTarget, Scalar> > ConstPtr;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="553440aa1573333dcb84bdcee0b53909">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="971" endLineNumber="979"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="996" endLineNumber="1004"/>
            <text>
<![CDATA[        nlopt::opt localopt(nlopt::LN_COBYLA,6);
        localopt.set_lower_bounds(lb.toStdVector());
        localopt.set_upper_bounds(ub.toStdVector());
        localopt.set_xtol_rel(1e-4);
        localopt.set_min_objective(calibrationCameraVelodyneChessboardObjectiveFunc,(void *)&calibrationdata);
        localresult=localopt.optimize(xx,calibrationtranslationalerror);
        if (localresult < nlopt::SUCCESS) {
            qDebug()<<"Calibration error:"<<localresult;
            return false;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="bd6e2a003fcdbff7148442b63deed4ae">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="57" endLineNumber="71"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="75" endLineNumber="89"/>
            <text>
<![CDATA[void CalibrationToolkitBase::saveCalibResultSlot()
{
    QString filename=QFileDialog::getSaveFileName(this,"Save Calib",QString(),"YML (*.yml)");
    if(!filename.isEmpty())
    {
        cv::FileStorage fs(filename.toStdString(),cv::FileStorage::WRITE);
        if(saveCalibResult(fs))
        {
            emit calibResultSavedSignal();
        }
        else
        {
            emit calibResultSavedErrorSignal();
        }
        fs.release();
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="b83da430afdb1956c09dc8cdbc026f3c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="943" endLineNumber="954"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="1089" endLineNumber="1100"/>
            <text>
<![CDATA[    marker.points.clear();
    for(int lid = slid; ; lid = lines[lid].flid) {
      int pid = lines[lid].bpid;
      add_marker_points_pointclass(&marker, pointclasses[pid]);
      if (lid == elid) {
	pid = lines[lid].fpid;
	add_marker_points_pointclass(&marker, pointclasses[pid]);
	break;
      }
    }

    publish_marker(&marker, pub, rate);
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="1d8870a926c5e47a87f97404d242c040">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.cpp" startLineNumber="93" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.cpp" startLineNumber="110" endLineNumber="127"/>
            <text>
<![CDATA[    return -1;
  }

  bool OptimizableGraph::Vertex::setMinimalEstimateData(const double* v)
  {
    bool ret = setMinimalEstimateDataImpl(v);
    updateCache();
    return ret;
  }

  bool OptimizableGraph::Vertex::getMinimalEstimateData(double *) const
  {
    return false;
  }

  int OptimizableGraph::Vertex::minimalEstimateDimension() const
  {
    return -1;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="a1cc76410eb226d39d8701f0b90863d6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\lib\obj_db\SendData.cpp" startLineNumber="88" endLineNumber="109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\lib\pos_db\SendData.cpp" startLineNumber="103" endLineNumber="124"/>
            <text>
<![CDATA[			return -1;
		}

		addrptr = (unsigned int **)host->h_addr_list;

		while (*addrptr != nullptr) {
			server.sin_addr.s_addr = *(*addrptr);

			// if connect() is succeed , exit loop
			if (connect(sock,
				    (struct sockaddr *)&server,
				    sizeof(server)) == 0) {
				break;
			}

			addrptr++;
			// if connect is failed, try next address
		}

		// the case of connection failed
		if (*addrptr == nullptr) {
			perror("connect");
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="f28ce0d72354d82092b35ba5396fcff0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="18" endLineNumber="29"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="7" endLineNumber="18"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="41" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="308" endLineNumber="317"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="50" endLineNumber="58"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="78" endLineNumber="88"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="65" endLineNumber="75"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="93" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="502" endLineNumber="510"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="340" endLineNumber="348"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="26" endLineNumber="36"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="558" endLineNumber="566"/>
            <text>
<![CDATA[struct LaneData {
  int lnid;
  int did;
  int blid;
  int flid;
  int bnid;
  int fnid;
  int jct;
  int blid2;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="55e756fb5025a73b467a433db86aca2f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_gauss_newton.h" startLineNumber="27" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_levenberg.h" startLineNumber="27" endLineNumber="49"/>
            <text>
<![CDATA[#ifndef G2O_SOLVER_LEVENBERG_H
#define G2O_SOLVER_LEVENBERG_H

#include "g2o/core/optimization_algorithm_with_hessian.h"

namespace g2o {

  /**
   * \brief Implementation of the Levenberg Algorithm
   */
  class  OptimizationAlgorithmLevenberg : public OptimizationAlgorithmWithHessian
  {
    public:
      /**
       * construct the Levenberg algorithm, which will use the given Solver for solving the
       * linearized system.
       */
      explicit OptimizationAlgorithmLevenberg(Solver* solver);
      virtual ~OptimizationAlgorithmLevenberg();

      virtual SolverResult solve(int iteration, bool online = false);

      virtual void printVerbose(std::ostream& os) const;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="631aabb80df1a83ddefb1a0ce2c4b54e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\integrated_viewer\node\image_viewer_plugin\draw_points.cpp" startLineNumber="40" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_viewer\points_image_viewer.cpp" startLineNumber="78" endLineNumber="87"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_viewer\vscan_image_viewer.cpp" startLineNumber="77" endLineNumber="86"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="241" endLineNumber="250"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_d_viewer\vscan_image_d_viewer.cpp" startLineNumber="126" endLineNumber="136"/>
            <text>
<![CDATA[			int i = y * w + x;
			double distance = points_msg->distance[i];

			if(distance == 0){
				continue;
			}
			int colorid= wid_d ? ( (distance - min_d) * 255 / wid_d ) : 128;
			cv::Vec3b color=colormap.at<cv::Vec3b>(colorid);
			int g = color[1];
			int b = color[2];
			int r = color[0];
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="802cbc01bc55d39cb96989cc7b020b05">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\rosinterface\ROSInterface\rosinterface.cpp" startLineNumber="91" endLineNumber="102"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\rosinterface\ROSInterface\rosinterface.cpp" startLineNumber="193" endLineNumber="204"/>
            <text>
<![CDATA[    lastflag=0;
    emit stopReceiveSignal();
    disconnect(timer,SIGNAL(timeout()),this,SLOT(receiveTFSlot()));
    disconnect(this,SIGNAL(startReceiveSignal()),timer,SLOT(start()));
    disconnect(this,SIGNAL(stopReceiveSignal()),timer,SLOT(stop()));
    delete timer;
}

void ROSTFSub::startReceiveSlot()
{
    lock.lockForWrite();
    receiveflag=1;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="e669bac86f00e4a14d1c19728b5c53d5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="79" endLineNumber="90"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="83" endLineNumber="94"/>
            <text>
<![CDATA[      typedef pcl::search::KdTree<PointSource> KdTreeReciprocal;
      typedef typename KdTreeReciprocal::Ptr KdTreeReciprocalPtr;
     
      typedef pcl::PointCloud<PointSource> PointCloudSource;
      typedef typename PointCloudSource::Ptr PointCloudSourcePtr;
      typedef typename PointCloudSource::ConstPtr PointCloudSourceConstPtr;

      typedef pcl::PointCloud<PointTarget> PointCloudTarget;
      typedef typename PointCloudTarget::Ptr PointCloudTargetPtr;
      typedef typename PointCloudTarget::ConstPtr PointCloudTargetConstPtr;

      typedef typename KdTree::PointRepresentationConstPtr PointRepresentationConstPtr;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="bc42fae5eca7d5017482f8696ee3db6b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\TemplatedVocabulary.h" startLineNumber="1146" endLineNumber="1159"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\TemplatedVocabulary.h" startLineNumber="1174" endLineNumber="1187"/>
            <text>
<![CDATA[    unsigned int i_feature = 0;
    for(fit = features.begin(); fit < features.end(); ++fit, ++i_feature)
    {
      WordId id;
      NodeId nid;
      WordValue w;
      // w is idf if IDF, or 1 if BINARY
      
      transform(*fit, id, w, &nid, levelsup);
      
      if(w > 0) // not stopped
      {
        v.addIfNotExist(id, w);
        fv.addFeature(nid, i_feature);
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="a6b296697e680c9e44a80d9dd26568ce">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glsl.h" startLineNumber="474" endLineNumber="494"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glsl.h" startLineNumber="494" endLineNumber="514"/>
            <text>
<![CDATA[inline void GlSlProgram::SetUniform(const std::string& name, float f)
{
    glUniform1f( GetUniformHandle(name), f);
}

inline void GlSlProgram::SetUniform(const std::string& name, float f1, float f2)
{
    glUniform2f( GetUniformHandle(name), f1,f2);
}

inline void GlSlProgram::SetUniform(const std::string& name, float f1, float f2, float f3)
{
    glUniform3f( GetUniformHandle(name), f1,f2,f3);
}

inline void GlSlProgram::SetUniform(const std::string& name, float f1, float f2, float f3, float f4)
{
    glUniform4f( GetUniformHandle(name), f1,f2,f3,f4);
}

inline void GlSlProgram::SetUniform(const std::string& name, Colour c)
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="d9cf033c74aadf6cdbcb1f22a97b7ea5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="566" endLineNumber="602"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="646" endLineNumber="682"/>
            <text>
<![CDATA[  sharedMemBytes = 0;

  /* execute GPU function */
#ifdef USE_STREAM
  res = cuLaunchKernel(
                       func_calc_feat[0], // call function
                       block_num_x,       // gridDimX
                       block_num_y,       // gridDimY
                       1,                 // gridDimZ
                       thread_num_x,      // blockDimX
                       thread_num_y,      // blockDimY
                       1,                 // blockDimZ
                       sharedMemBytes,    // sharedMemBytes
                       stream,            // hStream
                       kernel_args_feat,  // kernel Parameter
                       NULL               // extra
                       );
#else
  res = cuLaunchKernel(
                       func_calc_feat[0], // call function
                       block_num_x,       // gridDimX
                       block_num_y,       // gridDimY
                       1,                 // gridDimZ
                       thread_num_x,      // blockDimX
                       thread_num_y,      // blockDimY
                       1,                 // blockDimZ
                       sharedMemBytes,    // sharedMemBytes
                       NULL,              // hStream
                       kernel_args_feat,  // kernel Parameter
                       NULL               // extra
                       );
#endif
  MY_CUDA_CHECK(res, "cuLaunchKernel(calc_feat)");

#ifdef USE_STREAM
  /* p-thread barrier in order to enqueue Launch command in breadth first order */
  pthread_barrier_wait(&barrier);
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="7c3a0fce17443212c024445b12365a29">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="22" endLineNumber="32"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="21" endLineNumber="31"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="11" endLineNumber="21"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="10" endLineNumber="20"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="317" endLineNumber="325"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="316" endLineNumber="324"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="315" endLineNumber="323"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="314" endLineNumber="322"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="313" endLineNumber="321"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="312" endLineNumber="320"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="311" endLineNumber="319"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="310" endLineNumber="318"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="51" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="45" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="89" endLineNumber="97"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="88" endLineNumber="96"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="87" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="86" endLineNumber="94"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="85" endLineNumber="93"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="84" endLineNumber="92"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="83" endLineNumber="91"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="82" endLineNumber="90"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="81" endLineNumber="89"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="69" endLineNumber="77"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="68" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="106" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="105" endLineNumber="114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="104" endLineNumber="113"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="103" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="102" endLineNumber="111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="101" endLineNumber="109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="100" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="99" endLineNumber="107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="98" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="59" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="58" endLineNumber="66"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="57" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="56" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="55" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="54" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="504" endLineNumber="512"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="503" endLineNumber="511"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="342" endLineNumber="350"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="341" endLineNumber="349"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="19" endLineNumber="27"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="18" endLineNumber="26"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="2" endLineNumber="25"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="1" endLineNumber="24"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="246" endLineNumber="272"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="243" endLineNumber="269"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="240" endLineNumber="265"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="220" endLineNumber="230"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="219" endLineNumber="228"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="217" endLineNumber="227"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="216" endLineNumber="226"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="215" endLineNumber="224"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="213" endLineNumber="223"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="211" endLineNumber="222"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="210" endLineNumber="221"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="23" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="22" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="59" endLineNumber="70"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="58" endLineNumber="69"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="57" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="56" endLineNumber="67"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="53" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="51" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="50" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="49" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="48" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="44" endLineNumber="58"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="43" endLineNumber="57"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="42" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="41" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glplatform.h" startLineNumber="28" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="12" endLineNumber="22"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="11" endLineNumber="20"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="10" endLineNumber="19"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="9" endLineNumber="18"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="8" endLineNumber="17"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="7" endLineNumber="15"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="6" endLineNumber="14"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="5" endLineNumber="13"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="4" endLineNumber="12"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="14" endLineNumber="22"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="13" endLineNumber="21"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="38" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="37" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="36" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="35" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="34" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="33" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="32" endLineNumber="40"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="31" endLineNumber="39"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="30" endLineNumber="38"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="29" endLineNumber="37"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="70" endLineNumber="79"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="97" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="95" endLineNumber="107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="93" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="92" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="91" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="90" endLineNumber="101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="89" endLineNumber="100"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="88" endLineNumber="98"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="26" endLineNumber="34"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="526" endLineNumber="560"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="521" endLineNumber="557"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="518" endLineNumber="554"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="515" endLineNumber="551"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="512" endLineNumber="546"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="509" endLineNumber="543"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="506" endLineNumber="537"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="501" endLineNumber="532"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="498" endLineNumber="526"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="495" endLineNumber="521"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="567" endLineNumber="575"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="566" endLineNumber="574"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="565" endLineNumber="573"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="564" endLineNumber="572"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="563" endLineNumber="571"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="562" endLineNumber="570"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="561" endLineNumber="569"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="560" endLineNumber="568"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="559" endLineNumber="567"/>
            <text>
<![CDATA[  int lnid;
  int did;
  int blid;
  int flid;
  int bnid;
  int fnid;
  int jct;
  int blid2;
  int blid3;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="894469cc606f240432b99137e2fd6d96">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="23" endLineNumber="35"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="12" endLineNumber="24"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="42" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\view.h" startLineNumber="200" endLineNumber="220"/>
            <text>
<![CDATA[    Lock hlock;
    Lock vlock;
    Layout layout;
    
    int scroll_offset;
    
    // Cached client area (space allocated from parent)
    Viewport vp;
    
    // Cached absolute viewport (recomputed on resize - respects aspect)
    Viewport v;
    
    // Should this view be displayed?
    bool show;

    // Child views are rendered in order of low to high z-order
    // Views default to 0 z-order
    int zorder;
    
    // Input event handler (if any)
    Handler* handler;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="645885c4d64e835fec230cd7a9bf2667">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="34" endLineNumber="47"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.h" startLineNumber="18" endLineNumber="29"/>
            <text>
<![CDATA[    int center;
    int range;
} value_set;

typedef struct {
    value_set hue;
    value_set sat;
    value_set val;
    bool isUpdated;
} thresholds_set;

class TunerBody
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="7ac6574f33570e17d9f4a80d85c44700">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\resizeimg_gpu.cpp" startLineNumber="24" endLineNumber="32"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\resizeimg_gpu.cpp" startLineNumber="27" endLineNumber="35"/>
            <text>
<![CDATA[    case 1:
        widthStep += 3;
        break;
    case 2:
        widthStep += 2;
        break;
    case 3:
        widthStep += 1;
        break;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="83f52c19318a7d88741becca62447dec">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\rcnn\rcnn_node.cpp" startLineNumber="226" endLineNumber="242"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\ssd_node.cpp" startLineNumber="209" endLineNumber="228"/>
            <text>
<![CDATA[		subscriber_image_raw_ = node_handle_.subscribe(image_raw_topic_str, 1, &RosSsdApp::image_callback, this);

		/*std::string config_topic("/config");	config_topic += ros::this_node::getNamespace() + "/ssd";
		subscriber_ssd_config_ =node_handle_.subscribe(config_topic, 1, &RosSsdApp::config_cb, this);*/

		ros::spin();
		ROS_INFO("END Ssd");

	}

	~RosSsdApp()
	{
		if (NULL != ssd_detector_)
			delete ssd_detector_;
	}

	RosSsdApp()
	{
		ssd_detector_ 	= NULL;
		score_threshold_= 0.5;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="233cb7b7da0f1ce03a1f99d47b3de311">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\libvelocity_set.cpp" startLineNumber="258" endLineNumber="269"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\libvelocity_set.cpp" startLineNumber="273" endLineNumber="284"/>
            <text>
<![CDATA[    for (const auto &p : decelerate_points_)
    {
      point.x += p.x;
      point.y += p.y;
      point.z += p.z;
    }
    point.x /= decelerate_points_.size();
    point.y /= decelerate_points_.size();
    point.z /= decelerate_points_.size();

    previous_detection_ = point;
    return point;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="d4fab234452bc356a6795783d0c54f17">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\ground_filter\ground_filter.cpp" startLineNumber="23" endLineNumber="36"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\gazebo\catvehicle\src\distanceEstimator.cpp" startLineNumber="21" endLineNumber="32"/>
            <text>
<![CDATA[std_msgs::Float32 dist_1;
std_msgs::Float32 vel;
std_msgs::Float32 vel_1;
std_msgs::Float32 accel;
ros::Time lastUpdate;
bool newMessage;
double angle_min;
double angle_max;

// This very simple callback looks through the data array, and then
// returns the value (not the index) of that distance
void scanCallback( const sensor_msgs::LaserScan::ConstPtr& scan )
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="214e1961b0620ecc9a54f2ec4f0f43e5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="101" endLineNumber="113"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="102" endLineNumber="114"/>
            <text>
<![CDATA[static ros::Publisher reference_map_pub;
static ros::Publisher current_pose_pub;
static geometry_msgs::PoseStamped current_pose_msg;

static ros::Publisher ndt_stat_pub;
static std_msgs::Bool ndt_stat_msg;

static int initial_scan_loaded = 0;

static Eigen::Matrix4f gnss_transform = Eigen::Matrix4f::Identity();

static double min_scan_range = 5.0;
static double min_add_scan_shift = 1.0;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="ae84da71d75ec51c61d0694d90136ebe">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimization_algorithm_dogleg.h" startLineNumber="76" endLineNumber="89"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="306" endLineNumber="316"/>
            <text>
<![CDATA[    sensor_msgs::MagneticField mag;

    ros::Time timePing;
    ros::Time timestampBase;

    int field;
    int frame;
    int points_size;
#if _INVALID_RANGE
    double invalid_range;
#endif
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="42c195b513a2b64fdc3d2e6e96e46f02">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\range_fusion\range_fusion.cpp" startLineNumber="43" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\range_fusion\range_fusion.cpp" startLineNumber="65" endLineNumber="75"/>
            <text>
<![CDATA[static void PointsImageCallback(const points2image::PointsImage& points_image)
{
    sensor_header = points_image.header;
    setPointsImage(points_image);
    if (ready_) {
		fuse();
		publishTopic();
        ready_ = false;
        return;
    }
    ready_ = true;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="6e20f6ab0addef9c70a3e4be432be60f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\structure.h" startLineNumber="43" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\point_types.h" startLineNumber="19" endLineNumber="33"/>
            <text>
<![CDATA[#ifndef __VELODYNE_POINTCLOUD_POINT_TYPES_H
#define __VELODYNE_POINTCLOUD_POINT_TYPES_H

#include <pcl/point_types.h>

namespace velodyne_pointcloud
{
  /** Euclidean Velodyne coordinate, including intensity and ring number. */
  struct PointXYZIR
  {
    PCL_ADD_POINT4D;                    // quad-word XYZ
    float    intensity;                 ///< laser intensity reading
    uint16_t ring;                      ///< laser ring number
    EIGEN_MAKE_ALIGNED_OPERATOR_NEW     // ensure proper alignment
  } EIGEN_ALIGN16;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="37f9be275b741dfb9005683adf3367f6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\vscan_lidar_track\mainwindow.cpp" startLineNumber="327" endLineNumber="341"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\vscan_lidar_track\mainwindow.cpp" startLineNumber="349" endLineNumber="363"/>
            <text>
<![CDATA[        detectionlist.push_back(QPair<QTime, VehicleState >(timestamp,state));
        if(ui->trigger->isChecked())
            {
                slotShowScan();
            }
    }
}

void MainWindow::slotReceiveBoxes()
{
	jsk_recognition_msgs::BoundingBoxArray::ConstPtr msg=boxessub->getMessage();
    for (const auto& box : msg->boxes) {
        int msec=(msg->header.stamp.sec)%(24*60*60)*1000+(msg->header.stamp.nsec)/1000000;
        QTime timestamp=QTime::fromMSecsSinceStartOfDay(msec);
        VehicleState vstate;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="5dcc4f797bb5f565be3c5d312737eae5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="138" endLineNumber="149"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="233" endLineNumber="243"/>
            <text>
<![CDATA[	for(int i = 0; i<device_num; i++) {
		res = cuCtxSetCurrent(ctx[i]);
		if(res != CUDA_SUCCESS) {
			printf("cuCtxSetCurrent(ctx[%d]) failed: res = %s\n", i, getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemAlloc(&featp2_dev[i], SIZE_FEATP2);
		if(res != CUDA_SUCCESS) {
			printf("cuMemAlloc(featp2_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="139462ea521fa1386b67067936b98fb9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="43" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_core.cpp" startLineNumber="40" endLineNumber="48"/>
            <text>
<![CDATA[  , is_waypoint_set_(false)
  , is_pose_set_(false)
  , is_velocity_set_(false)
  , is_config_set_(false)
  , current_linear_velocity_(0)
  , command_linear_velocity_(0)
  , param_flag_(-1)
  , const_lookahead_distance_(4.0)
  , const_velocity_(5.0)
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="1687baf8e613331399589ed1ad1d1edf">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="121" endLineNumber="141"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_path.h" startLineNumber="69" endLineNumber="89"/>
            <text>
<![CDATA[    return prev_waypoints_;
  }

  waypoint_follower::lane getNewWaypoints() const
  {
    return new_waypoints_;
  }

  waypoint_follower::lane getTemporalWaypoints() const
  {
    return temporal_waypoints_;
  }

  bool getSetPath() const
  {
    return set_path_;
  }

  double getCurrentVelocity() const
  {
    return current_vel_;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="1c2a68a752a2f60726c5245607e337e3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="1118" endLineNumber="1130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="1108" endLineNumber="1124"/>
            <text>
<![CDATA[  MY_CUDA_CHECK(res, "cuMemcpyHtoD(resized_image_size)");

  /* upload other data to GPU */
  res = cuMemcpyHtoD(hist_dev, &hist[0][0], sum_size_hist);
  MY_CUDA_CHECK(res, "cuMemcpyHtoD(hist_dev)");

  // res = cuMemcpyHtoD(image_idx_incrementer_dev, image_idx_incrementer, LEN*sizeof(int));
  // MY_CUDA_CHECK(res, "cuMemcpyHtoD(image_idx_incrementer_dev)");

  res = cuMemcpyHtoD(hist_ptr_incrementer_dev, hist_ptr_incrementer, LEN*sizeof(unsigned long long int));
  MY_CUDA_CHECK(res, "cuMemcpyHtoD(hist_ptr_incrementer_dev)");

  res = cuMemcpyHtoD(norm_dev, &norm[0][0], sum_size_norm);
  MY_CUDA_CHECK(res, "cuMemcpyHtoD(norm_dev)");

  res = cuMemcpyHtoD(norm_ptr_incrementer_dev, norm_ptr_incrementer, LEN*sizeof(unsigned long long int));
  MY_CUDA_CHECK(res, "cuMemcpyHtoD(norm_ptr_incrementer_dev)");
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="6e42ac14245a81ca46c3fa1d8b332580">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\get_boxes.cpp" startLineNumber="478" endLineNumber="495"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1221" endLineNumber="1236"/>
            <text>
<![CDATA[			memcpy(T1, T2,sizeof(FLOAT)*num_t);
			T1 += num_t;
		}
	}

	FLOAT abs_threshold = abs(thresh);

	/* accumulated score calculation */
	FLOAT max_score = 0.0;

	/* add offset to accumulated score */
	for(int i = 0; i < MO->MI->IM_HEIGHT*MO->MI->IM_WIDTH; i++) {
		if (acc_score[i] < thresh) {
			acc_score[i] = 0.0;
		} else {
			acc_score[i] += abs_threshold;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="53c295bac1e2aff847fc51ed4213ae73">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="21" endLineNumber="33"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\structure.h" startLineNumber="31" endLineNumber="42"/>
            <text>
<![CDATA[#ifndef STRUCTURE_H
#define STRUCTURE_H

//converted value to view from above
typedef struct _LOCATION{
    double X;
    double Y;
    double Z;
    double W;
}LOCATION;

typedef struct _ANGLE{
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="11d60dc6c3c62031985627d4a0a76602">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\car_dpm_sync.cpp" startLineNumber="57" endLineNumber="67"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\sync_car_dpm.cpp" startLineNumber="57" endLineNumber="67"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="144" endLineNumber="154"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\copy.cpp" startLineNumber="44" endLineNumber="54"/>
            <text>
<![CDATA[void image_raw_callback(const sensor_msgs::Image::ConstPtr& image_raw_msg) {
    pthread_mutex_lock(&mutex);
    image_raw_ringbuf.push_front(*image_raw_msg);
    //points_raw is empty
    if (points_raw_ringbuf.begin() == points_raw_ringbuf.end()) {
        pthread_mutex_unlock(&mutex);
        ROS_INFO("points_raw ring buffer is empty");
        return;
    }
    buf_flag = true;
    pthread_mutex_unlock(&mutex);
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="22a48ef602f6232a2024e8071cebc339">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_sorting.h" startLineNumber="70" endLineNumber="96"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_sorting.h" startLineNumber="57" endLineNumber="83"/>
            <text>
<![CDATA[    struct sortCorrespondencesByQueryIndex : public std::binary_function<pcl::Correspondence, pcl::Correspondence, bool>
    {
      bool
      operator()( pcl::Correspondence a, pcl::Correspondence b)
      {
        return (a.index_query < b.index_query);
      }
    };

    /** @b sortCorrespondencesByMatchIndex : a functor for sorting correspondences by match index
      * \author Dirk Holz
      * \ingroup registration
      */
    struct sortCorrespondencesByMatchIndex : public std::binary_function<pcl::Correspondence, pcl::Correspondence, bool>
    {
      bool 
      operator()( pcl::Correspondence a, pcl::Correspondence b)
      {
        return (a.index_match < b.index_match);
      }
    };

    /** @b sortCorrespondencesByDistance : a functor for sorting correspondences by distance
      * \author Dirk Holz
      * \ingroup registration
      */
    struct sortCorrespondencesByDistance : public std::binary_function<pcl::Correspondence, pcl::Correspondence, bool>
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="3a6028f42ace9b9bb1c7bdab316191e8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\matching_gpu.cpp" startLineNumber="602" endLineNumber="613"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\matching_gpu.cpp" startLineNumber="915" endLineNumber="926"/>
            <text>
<![CDATA[#ifdef PROFILE
    tm.stop();
    cout << "END dt time = " << tm.getTimeSec() << " sec" << endl;
    cout << "sum start" << endl;
    tm.reset();
    tm.start();
#endif

    // Computation displacements that its scores are higher than the threshold
    for (l = Lambda; l < H->numLevels; l++)
    {
        k = l - Lambda;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="8376bd441fe66eeb2bf120d2ef2f0a93">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\libvelocity_set.h" startLineNumber="41" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\libvelocity_set.h" startLineNumber="43" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="111" endLineNumber="126"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="52" endLineNumber="61"/>
            <text>
<![CDATA[int waypoint_max;
double search_radius; // meter
double curve_weight;
double crossroad_weight;
double clothoid_weight;
std::string frame_id;

ros::Publisher traffic_pub;
ros::Publisher red_pub;
ros::Publisher green_pub;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="3b55d31243aea8096df1e694ed595f9b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\lib\obj_db\util.cpp" startLineNumber="7" endLineNumber="18"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\lib\pos_db\util.cpp" startLineNumber="14" endLineNumber="25"/>
            <text>
<![CDATA[static constexpr const char *MAGIC = "MPWC";
static constexpr int MAJOR_VERSION = 1;
static constexpr int MINOR_VERSION = 0;

std::string make_header(int32_t sql_inst, int32_t sql_num)
{
  int16_t major = htons(MAJOR_VERSION);
  int16_t minor = htons(MINOR_VERSION);
  sql_inst = htonl(sql_inst);
  sql_num = htonl(sql_num);

  char header[32];
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="a1b9ce8aad8c7a30f7d7b2e9630eeb25">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="47" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_uploader\pos_uploader.cpp" startLineNumber="64" endLineNumber="74"/>
            <text>
<![CDATA[static size_t car_num = 0;
static size_t person_num = 0;

static int sleep_msec = 250;		// period
static int use_current_time = 0;

static string db_host_name;
static int db_port;
static string sshpubkey;
static string sshprivatekey;
static int ssh_port;
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="45e35eac05e6bcb7f66204ddf45a455b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="809" endLineNumber="822"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="707" endLineNumber="717"/>
            <text>
<![CDATA[	for(int level=interval; level<L_MAX; level++) {
		int L = level - interval;

		if( (FSIZE[level*2]+2*pady < max_Y) || (FSIZE[level*2+1]+2*padx < max_X) )
			continue;

		for(int jj=0; jj<NoC; jj++) {
			for(int kk=0; kk<numpart[jj]; kk++) {
				int PIDX = PIDX_array[L][jj][kk];
				int dims0 = size_array[L][PIDX*2];
				int dims1 = size_array[L][PIDX*2+1];
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="11461258a42a83c06113e0c4ac84faa1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\src\voxel_grid.cpp" startLineNumber="453" endLineNumber="467"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\src\voxel_grid.cpp" startLineNumber="483" endLineNumber="497"/>
            <text>
<![CDATA[      else
      {
        // ---[ RGB special case
        // fill extra r/g/b centroid field
        if (rgba_index >= 0)
        {
          pcl::RGB rgb;
          memcpy (&rgb, &input_->data[point_offset + input_->fields[rgba_index].offset], sizeof (RGB));
          temporary[centroid_size-3] = rgb.r;
          temporary[centroid_size-2] = rgb.g;
          temporary[centroid_size-1] = rgb.b;
        }
        // Copy all the fields
        for (size_t d = 0; d < input_->fields.size (); ++d)
          memcpy (&temporary[d], &input_->data[point_offset + input_->fields[d].offset], field_sizes_[d]);
]]>
            </text>
        </set>
        <set lineCount="9" fingerprint="3fca49e5425e6e197f5c8729babb02b3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\lidar_tracker\nodes\obj_fusion\sync_obj_fusion.cpp" startLineNumber="223" endLineNumber="238"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="199" endLineNumber="214"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="140" endLineNumber="153"/>
            <text>
<![CDATA[        return false;
    }
}

void obj_label_callback(const cv_tracker::obj_label::ConstPtr& obj_label_msg) {
    pthread_mutex_lock(&mutex);
    obj_label_ringbuf.push_front(*obj_label_msg);
    //cluster_centroids is empty
    if (cluster_centroids_ringbuf.begin() == cluster_centroids_ringbuf.end()) {
        pthread_mutex_unlock(&mutex);
        ROS_INFO("cluster_centroids ring buffer is empty");
        return;
    }
    buf_flag = true;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="d17e593b83a24ae359f26a6beed5b0a3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\timer.h" startLineNumber="29" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\TrafficLight.h" startLineNumber="30" endLineNumber="43"/>
            <text>
<![CDATA[    double upper;
    double lower;
};

struct hsvSet {
    valueSet Hue;
    valueSet Sat;
    valueSet Val;
};

struct thresholdSet {
    hsvSet Red;
    hsvSet Yellow;
    hsvSet Green;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="cf59a4d788203482794a66c299fcf6a4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="376" endLineNumber="387"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="333" endLineNumber="344"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="323" endLineNumber="334"/>
            <text>
<![CDATA[    offset_x = current_pose.x - previous_pose.x;
    offset_y = current_pose.y - previous_pose.y;
    offset_z = current_pose.z - previous_pose.z;
    offset_yaw = current_pose.yaw - previous_pose.yaw;
    
    // Update position and posture. current_pos -> previous_pos
    previous_pose.x = current_pose.x;
    previous_pose.y = current_pose.y;
    previous_pose.z = current_pose.z;
    previous_pose.roll = current_pose.roll;
    previous_pose.pitch = current_pose.pitch;
    previous_pose.yaw = current_pose.yaw;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="cc2e22161233541822152f342ed56d29">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_loader\waypoint_loader_core.h" startLineNumber="71" endLineNumber="90"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\gnss_localizer\nodes\nmea2tfpose\nmea2tfpose_core.h" startLineNumber="48" endLineNumber="65"/>
            <text>
<![CDATA[class Nmea2TFPoseNode
{
public:
  Nmea2TFPoseNode();
  ~Nmea2TFPoseNode();

  void run();

private:
  // handle
  ros::NodeHandle nh_;
  ros::NodeHandle private_nh_;

  // publisher
  ros::Publisher pub1_;

  // subscriber
  ros::Subscriber sub1_;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="5498050a283830aecc8f729d8a0ed14e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glvbo.h" startLineNumber="178" endLineNumber="188"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glvbo.h" startLineNumber="131" endLineNumber="141"/>
            <text>
<![CDATA[    vbo.Bind();
    glVertexPointer(vbo.count_per_element, vbo.datatype, 0, 0);
    glEnableClientState(GL_VERTEX_ARRAY);
    
    if(draw_mesh) {
        ibo.Bind();
        glDrawElements(GL_TRIANGLE_STRIP,ibo.num_elements, ibo.datatype, 0);
        ibo.Unbind();
    }else{
        glPointSize(2.0);
        glDrawArrays(GL_POINTS, 0, vbo.num_elements);
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="588633b68e0fadac99b7a96fa9c3d8e5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="247" endLineNumber="260"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="180" endLineNumber="193"/>
            <text>
<![CDATA[    bool refreshImage();
    bool grabCalibData();
};

class CalibrateCameraVelodyneChessboardBase : public CalibrateCameraChessboardBase
{
    Q_OBJECT
public:
    CalibrateCameraVelodyneChessboardBase(float maxRange, cv::Size2f patternSize, cv::Size2i patternNum, QWidget * parent=0);
public:
    struct CameraVelodyneCalibrationData
    {
        cv::Mat chessboardnormals;   //n*3
        cv::Mat chessboardpoints;    //n*3
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="b9a03e7c09b098cca29167c8de18e8b2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\plot\plotter.cpp" startLineNumber="789" endLineNumber="804"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\plot\plotter.cpp" startLineNumber="798" endLineNumber="813"/>
            <text>
<![CDATA[void Plotter::SetViewSmooth(const XYRangef &range)
{
    Plotter& px = linked_plotter_x ? *linked_plotter_x : *this;
    Plotter& py = linked_plotter_y ? *linked_plotter_y : *this;

    px.target.x = range.x;
    py.target.y = range.y;
}

void Plotter::SetDefaultView(const XYRangef &range)
{
    Plotter& px = linked_plotter_x ? *linked_plotter_x : *this;
    Plotter& py = linked_plotter_y ? *linked_plotter_y : *this;

    px.rview_default.x = range.x;
    py.rview_default.y = range.y;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="fe8fa938af0f30a48eb5c0fc5a0644a1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\axialMove.h" startLineNumber="52" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\axialMove.h" startLineNumber="58" endLineNumber="68"/>
            <text>
<![CDATA[        newloc.Y = 
            matrix[1][0]*loc.X + 
            matrix[1][1]*loc.Y + 
            matrix[1][2]*loc.Z + 
            matrix[1][3];

        newloc.Z = 
            matrix[2][0]*loc.X + 
            matrix[2][1]*loc.Y + 
            matrix[2][2]*loc.Z + 
            matrix[2][3];
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="7836472a7acb9fb1414f9ffb2516d5aa">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="106" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="70" endLineNumber="80"/>
            <text>
<![CDATA[static float		ORB_KNN_RATIO;
static float 		NOISE_COV;
static float 		MEAS_NOISE_COV;
static float 		ERROR_ESTIMATE_COV;
static float 		OVERLAPPING_PERC;
static bool 		SHOW_PREDICTIONS;
static bool 		USE_ORB;

static bool 		track_ready_;
static bool 		detect_ready_;
static cv_tracker::image_obj_tracked kf_objects_msg_;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="d3df2e7babb2f04a5fbf86f29ca91d7d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="37" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\featurepyramid.cpp" startLineNumber="30" endLineNumber="43"/>
            <text>
<![CDATA[#define eps 0.0001

//definition of sin and cos
static const FLOAT Hcos[9]={1.0000,0.9397,0.7660,0.5000,0.1736,-0.1736,-0.5000,-0.7660,-0.9397};
static const FLOAT Hsin[9]={0.0000,0.3420,0.6428,0.8660,0.9848,0.9848,0.8660,0.6428,0.3420};

//definition of structure
struct thread_data {
	FLOAT *IM;
	int ISIZE[3];
	int FSIZE[2];
	int F_C;
	int sbin;
	FLOAT *Out;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="f8a5c46a1b9d16e4f73ab765dac76bde">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="242" endLineNumber="251"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="241" endLineNumber="250"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="240" endLineNumber="249"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="239" endLineNumber="248"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="238" endLineNumber="247"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="237" endLineNumber="246"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="236" endLineNumber="245"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="235" endLineNumber="244"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\polygon\packages\points2polygon\nodes\points2polygon\points2polygon.cpp" startLineNumber="95" endLineNumber="108"/>
            <text>
<![CDATA[	gp3.setSearchRadius(config_search_radius);

	// Set typical values for the parameters
	gp3.setMu(config_mu);
	gp3.setMaximumNearestNeighbors(config_maximum_nearest_neighbors);
	gp3.setMaximumSurfaceAngle(config_maximum_surface_angle);
	gp3.setMinimumAngle(config_minimum_angle);
	gp3.setMaximumAngle(config_maximum_angle);
	gp3.setNormalConsistency(config_normal_consistency);

	// Get result
	gp3.setInputCloud(cloud_with_normals);
	gp3.setSearchMethod(tree2);
	gp3.reconstruct(triangles);
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="73885e4c1e4b326f7bdfb562a789625c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="195" endLineNumber="204"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\file_extension.h" startLineNumber="39" endLineNumber="48"/>
            <text>
<![CDATA[    ImageFileTypePpm,
    ImageFileTypeTga,
    ImageFileTypePng,
    ImageFileTypeJpg,
    ImageFileTypeTiff,
    ImageFileTypeGif,
    ImageFileTypeExr,
    ImageFileTypePango,
    ImageFileTypePvn,
    ImageFileTypeUnknown
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="0c22b173eb1313478631bd35c9498465">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1418" endLineNumber="1430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="770" endLineNumber="782"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="815" endLineNumber="827"/>
            <text>
<![CDATA[double calibrationCameraVelodyneChessboardRotationalObjectiveFunc(const std::vector<double> &x, std::vector<double> &grad, void *data)
{
    CalibrateCameraVelodyneChessboardBase::CameraVelodyneCalibrationData * calibdata=reinterpret_cast<CalibrateCameraVelodyneChessboardBase::CameraVelodyneCalibrationData *>(data);

    Eigen::Matrix3d rotation;
    rotation=Eigen::AngleAxisd(x[2],Eigen::Vector3d::UnitZ())
            *Eigen::AngleAxisd(x[1],Eigen::Vector3d::UnitY())
            *Eigen::AngleAxisd(x[0],Eigen::Vector3d::UnitX());

    cv::Mat rmat(3,3,CV_64F);
    rmat.at<double>(0,0)=rotation(0,0);rmat.at<double>(0,1)=rotation(0,1);rmat.at<double>(0,2)=rotation(0,2);
    rmat.at<double>(1,0)=rotation(1,0);rmat.at<double>(1,1)=rotation(1,1);rmat.at<double>(1,2)=rotation(1,2);
    rmat.at<double>(2,0)=rotation(2,0);rmat.at<double>(2,1)=rotation(2,1);rmat.at<double>(2,2)=rotation(2,2);
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="6ba42b5d3df5ffc17f23f16b70689de2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\klt_track\klt_track.cpp" startLineNumber="111" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="499" endLineNumber="510"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\librcnn\src\rcnn_detector.cpp" startLineNumber="316" endLineNumber="327"/>
            <text>
<![CDATA[	unsigned int size = in_source.size();

	std::vector<float> area(size);
	std::vector<float> scores(size);
	std::vector<int> x1(size);
	std::vector<int> y1(size);
	std::vector<int> x2(size);
	std::vector<int> y2(size);
	std::vector<unsigned int> indices(size);
	std::vector<bool> is_suppresed(size);

	for(unsigned int i = 0; i< in_source.size(); i++)
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="d588f7b9ddc82324d7535eca635c2889">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="270" endLineNumber="279"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="268" endLineNumber="277"/>
            <text>
<![CDATA[	int backlog;
	n.param<int>("/udon_sender/backlog", backlog, 128);
	int bufsize;
	n.param<int>("/udon_sender/bufsize", bufsize, 4096);
	int period;
	n.param<int>("/udon_sender/period", period, 200);
	int port;
	n.param<int>("/udon_sender/port", port, 5999);
	int sub_mode_queue_size;
	n.param<int>("/udon_sender/sub_mode_queue_size", sub_mode_queue_size, 1);
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="5d876bebf7a1641d8960a3b85bc5368a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\integrated_viewer\node\image_viewer_plugin\draw_rects.cpp" startLineNumber="53" endLineNumber="69"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\integrated_viewer\node\image_viewer_plugin\draw_rects.cpp" startLineNumber="19" endLineNumber="35"/>
            <text>
<![CDATA[  void DrawRects::DrawImageObj(const cv_tracker::image_obj::ConstPtr& rect_data,
                               cv::Mat &image) {
    if (rect_data == NULL) {
      return;
    }

    cv::Scalar rectangle_color;
    if (rect_data->type == "car") {
      rectangle_color = kBlue;
    } else {
      rectangle_color = kGreen;
    }
    
    // Draw rectangles for each objects
    for (const auto& rectangle : rect_data->obj) {
      // Make label shown on a rectangle
      std::ostringstream label;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="866074e3723f89068e23349f87a52410">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="309" endLineNumber="318"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="301" endLineNumber="310"/>
            <text>
<![CDATA[      send_data_type = DB1;
      break;
    case TEST:
      std::cout << "test access" << std::endl;
      positionRange[0] = 34.5;
      positionRange[1] = 35.4;
      positionRange[2] = 136.6;
      positionRange[3] = 137.8;
      send_data_type = TEST;
      break;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="5272cbc78681d8c6ab347a2491458be9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="502" endLineNumber="511"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="340" endLineNumber="349"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="26" endLineNumber="37"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="93" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="78" endLineNumber="89"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="65" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="50" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="308" endLineNumber="318"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="558" endLineNumber="567"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="7" endLineNumber="20"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="18" endLineNumber="31"/>
            <text>
<![CDATA[struct Model_info {
	//basic information
	//from xxxcomp.csv
	int numcomponent;	//number of component
	int sbin;		//cell size
	int interval;	//interval (for hierachical detection)
	int max_X;
	int max_Y;
	//from calculation
	int padx;	//pad information
	int pady;
	int max_scale;
	//image size information
	int IM_WIDTH;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="a8cd4924160cfca914d520c58ce57450">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1783" endLineNumber="1795"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1772" endLineNumber="1784"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1687" endLineNumber="1699"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1640" endLineNumber="1652"/>
            <text>
<![CDATA[     << obj.ly << ","
     << obj.ref << ","
     << obj.mcode1 << ","
     << obj.mcode2 << ","
     << obj.mcode3;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Vector& obj)
{
  os << obj.vid << ","
     << obj.pid << ","
     << obj.hang << ","
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="aa55932d21dec657f8e7f2a29ddaf3db">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="524" endLineNumber="534"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="362" endLineNumber="372"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="594" endLineNumber="604"/>
            <text>
<![CDATA[    ret[id].blid3 = std::stoi(tbl[i][8]);
    ret[id].blid4 = std::stoi(tbl[i][9]);
    ret[id].flid2 = std::stoi(tbl[i][10]);
    ret[id].flid3 = std::stoi(tbl[i][11]);
    ret[id].flid4 = std::stoi(tbl[i][12]);
    ret[id].clossid = std::stoi(tbl[i][13]);
    ret[id].span = std::stod(tbl[i][14]);
    ret[id].lcnt = std::stoi(tbl[i][15]);
    ret[id].lno = std::stoi(tbl[i][16]);
  }
  return ret;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="1bdffc94ba1ec74b2f4cd89c99b92040">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="304" endLineNumber="315"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="21" endLineNumber="30"/>
            <text>
<![CDATA[  ros::NodeHandle nh_;
  ros::Publisher publisher_;
  ros::Subscriber waypoint_subscriber_;
  ros::Subscriber vscan_subscriber_;
  ros::Subscriber obj_subscriber_;
  bool use_target_waypoint_;
  bool use_obstacle_box_;
  bool use_vscan_points_;
  double map_x_size_;
  double map_y_size_;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="8313bcb28f6820b1dc99deddbb5d4722">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="89" endLineNumber="98"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="69" endLineNumber="78"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="14" endLineNumber="23"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glplatform.h" startLineNumber="28" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="19" endLineNumber="28"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="26" endLineNumber="35"/>
            <text>
<![CDATA[  bool use_target_waypoint_;
  bool use_obstacle_box_;
  bool use_vscan_points_;
  double map_x_size_;
  double map_y_size_;
  double map_resolution_;
  double tf_x_;
  double tf_z_;
  GridMap map_;
  class ObstacleFieldParameter {
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="da931a792ab8570ab4a593b56be00d66">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1072" endLineNumber="1084"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\get_boxes.cpp" startLineNumber="400" endLineNumber="415"/>
            <text>
<![CDATA[			for(int kk=0;kk<GMN;kk++)
			{
				FLOAT *P_temp = t_boxes+GL*kk;
				int y = GMPC[2*kk];
				int x = GMPC[2*kk+1];

				//calculate root box coordinate
				FLOAT *RB =rootbox(x,y,scale,padx,pady,RSIZE);
				//memcpy_s(P_temp,sizeof(FLOAT)*4,RB,sizeof(FLOAT)*4);
				memcpy(P_temp, RB,sizeof(FLOAT)*4);
				s_free(RB);
				P_temp+=4;

				for(int pp=0;pp<numpart[jj];pp++)
				{
					int PBSIZE[2]={psize[jj][pp*2],psize[jj][pp*2+1]};
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="ad09cdf5d2b26e2af5550d65ff3af014">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2image\main.cpp" startLineNumber="89" endLineNumber="102"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\lib\points_image\points_image.cpp" startLineNumber="69" endLineNumber="81"/>
            <text>
<![CDATA[			cv::Mat point(1, 3, CV_64F);
			point.at<double>(0) = double(fp[0]);
			point.at<double>(1) = double(fp[1]);
			point.at<double>(2) = double(fp[2]);
			point = point * invR.t() + invT.t();

			if (point.at<double>(2) <= 2.5) {
				continue;
			}

			double tmpx = point.at<double>(0) / point.at<double>(2);
			double tmpy = point.at<double>(1)/point.at<double>(2);
			double r2 = tmpx * tmpx + tmpy * tmpy;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="878180d615b4ce54f518c0c04c5dcfe0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\integrated_viewer\node\traffic_light_plugin\traffic_light_plugin.cpp" startLineNumber="43" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\integrated_viewer\node\traffic_light_plugin\traffic_light_plugin.cpp" startLineNumber="49" endLineNumber="59"/>
            <text>
<![CDATA[    case StateNumber::GREEN: {
      info.label = "GREEN";
      info.label_color = "#00FF00"; // format = #RRGGBB
      info.view_color = CV_RGB(0, 255, 0);
      break;
    }
    case StateNumber::UNDEFINED: {
      info.label = "NO SIGNAL FOUND";
      info.label_color = "#FFFFFF"; // white
      info.view_color = CV_RGB(0, 0, 0); // black
      break;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="ccf85bdf4320d54174ff786a63865640">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\lib\libwaypoint_follower.cpp" startLineNumber="65" endLineNumber="79"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\lib\libwaypoint_follower.cpp" startLineNumber="55" endLineNumber="69"/>
            <text>
<![CDATA[geometry_msgs::Point WayPoints::getWaypointPosition(int waypoint) const
{
  geometry_msgs::Point p;
  if (waypoint > getSize() - 1 || waypoint < 0)
    return p;

  p = current_waypoints_.waypoints[waypoint].pose.pose.position;
  return p;
}

geometry_msgs::Quaternion WayPoints::getWaypointOrientation(int waypoint) const
{
  geometry_msgs::Quaternion q;
  if (waypoint > getSize() - 1 || waypoint < 0)
    return q;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="7e4348fa3d6562521ce4642f8e47133f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\sparse_block_matrix_ccs.h" startLineNumber="228" endLineNumber="252"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\sparse_block_matrix_ccs.h" startLineNumber="77" endLineNumber="101"/>
            <text>
<![CDATA[      SparseBlockMatrixCCS(const std::vector<int>& rowIndices, const std::vector<int>& colIndices) :
        _rowBlockIndices(rowIndices), _colBlockIndices(colIndices)
      {}

      //! how many rows does the block at block-row r has?
      int rowsOfBlock(int r) const { return r ? _rowBlockIndices[r] - _rowBlockIndices[r-1] : _rowBlockIndices[0] ; }

      //! how many cols does the block at block-col c has?
      int colsOfBlock(int c) const { return c ? _colBlockIndices[c] - _colBlockIndices[c-1] : _colBlockIndices[0]; }

      //! where does the row at block-row r start?
      int rowBaseOfBlock(int r) const { return r ? _rowBlockIndices[r-1] : 0 ; }

      //! where does the col at block-col r start?
      int colBaseOfBlock(int c) const { return c ? _colBlockIndices[c-1] : 0 ; }

      //! the block matrices per block-column
      const std::vector<SparseColumn>& blockCols() const { return _blockCols;}
      std::vector<SparseColumn>& blockCols() { return _blockCols;}

      //! indices of the row blocks
      const std::vector<int>& rowBlockIndices() const { return _rowBlockIndices;}

      //! indices of the column blocks
      const std::vector<int>& colBlockIndices() const { return _colBlockIndices;}
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="09f2c62de40b061042dbf7eb1885d9d7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_points_map_update\sample_points_map_update.cpp" startLineNumber="53" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\map_tools\nodes\pcd_arealist\pcd_arealist.cpp" startLineNumber="33" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\points_map_loader\points_map_loader.cpp" startLineNumber="105" endLineNumber="116"/>
            <text>
<![CDATA[struct Area {
	std::string path;
	double x_min;
	double y_min;
	double z_min;
	double x_max;
	double y_max;
	double z_max;
};

typedef std::vector<Area> AreaList;
typedef std::vector<std::vector<std::string>> Tbl;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="c434ee14f35bd6465988d16cdaa1a61a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="505" endLineNumber="521"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set.cpp" startLineNumber="174" endLineNumber="190"/>
            <text>
<![CDATA[    waypoint_marker_stop.points.push_back(point);

    if (i > DECELERATION_SEARCH_DISTANCE)
      continue;
    waypoint_marker_decelerate.points.push_back(point);
  }

  if (crosswalk_id > 0)
  {
    for (const auto &p : crosswalk.getDetectionPoints(crosswalk_id).points)
      crosswalk_marker.points.push_back(p);
  }

  // publish marker
  marker_array.markers.push_back(crosswalk_marker);
  marker_array.markers.push_back(waypoint_marker_stop);
  marker_array.markers.push_back(waypoint_marker_decelerate);
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="82556f6c4c54e40f57151f57ca0320ef">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="492" endLineNumber="521"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="25" endLineNumber="34"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="87" endLineNumber="98"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="53" endLineNumber="62"/>
            <text>
<![CDATA[  std::string path_frame_;        // publishing path frame
  int angle_size_;                // descritized angle size
  double minimum_turning_radius_; // varying by vehicles
  int obstacle_threshold_;        // more than this value is regarded as obstacles
  double goal_radius_;            // meter
  double goal_angle_;             // degree
  bool use_back_;                 // use backward driving
  double robot_length_;
  double robot_width_;
  double base2back_;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="45ae85e80789fadca8d3ece7a63de008">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="357" endLineNumber="371"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="286" endLineNumber="299"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="209" endLineNumber="222"/>
            <text>
<![CDATA[		printf("cuLaunchKernel(inverse_Q) failed : res = %s\n", cuda_response_to_string(res));
		exit(1);
	}

	res = cuCtxSynchronize();
	if(res != CUDA_SUCCESS) {
		printf("cuCtxSynchronize(inverse_Q) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
	}

	if(pt->pid == 0){
		gettimeofday(&tv_kernel_end, NULL);
		tvsub(&tv_kernel_end, &tv_kernel_start, &tv);
		time_kernel += tv.tv_sec * 1000.0 + (float)tv.tv_usec / 1000.0;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="d3ab1db2252c10a331951970ea26ce73">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_uploader\obj_uploader.cpp" startLineNumber="167" endLineNumber="186"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="98" endLineNumber="116"/>
            <text>
<![CDATA[static void* intervalCall(void *unused)
{
  while(1){
    //If angle and position data is not updated from prevous data send,
    //data is not sent
    if(!canGetFlag) {
      sleep(1);
      continue;
    }
    canGetFlag = false;

    send_sql();
    sleep(1);
  }

  return nullptr;
}

static void can_infoCallback(const vehicle_socket::CanInfo& can)
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="0bf650bf8c373f65b3c93c813bc4f3c9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="758" endLineNumber="772"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="730" endLineNumber="744"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="702" endLineNumber="716"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="674" endLineNumber="688"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="646" endLineNumber="660"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="618" endLineNumber="632"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="887" endLineNumber="901"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="859" endLineNumber="873"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="831" endLineNumber="845"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="421" endLineNumber="435"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="393" endLineNumber="407"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="365" endLineNumber="379"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="337" endLineNumber="351"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="567" endLineNumber="581"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="449" endLineNumber="463"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="306" endLineNumber="320"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="498" endLineNumber="512"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="184" endLineNumber="198"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="152" endLineNumber="166"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="227" endLineNumber="241"/>
            <text>
<![CDATA[  visualization_msgs::MarkerArray marker_array;
  int id = 0;
  for (const auto& curb : vmap.findByFilter([](const Curb& curb){return true;}))
  {
    if (curb.lid == 0)
    {
      ROS_ERROR_STREAM("[createCurbMarkerArray] invalid curb: " << curb);
      continue;
    }

    Line line = vmap.findByKey(Key<Line>(curb.lid));
    if (line.lid == 0)
    {
      ROS_ERROR_STREAM("[createCurbMarkerArray] invalid line: " << line);
      continue;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="eb015e6539e65f90ab2bf2f1c60d9e00">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_seven_dof_expmap.h" startLineNumber="152" endLineNumber="165"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_seven_dof_expmap.h" startLineNumber="130" endLineNumber="143"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_seven_dof_expmap.h" startLineNumber="99" endLineNumber="111"/>
            <text>
<![CDATA[  class EdgeSim3 : public BaseBinaryEdge<7, Sim3, VertexSim3Expmap, VertexSim3Expmap>
  {
  public:
    EIGEN_MAKE_ALIGNED_OPERATOR_NEW
    EdgeSim3();
    virtual bool read(std::istream& is);
    virtual bool write(std::ostream& os) const;
    void computeError()
    {
      const VertexSim3Expmap* v1 = static_cast<const VertexSim3Expmap*>(_vertices[0]);
      const VertexSim3Expmap* v2 = static_cast<const VertexSim3Expmap*>(_vertices[1]);

      Sim3 C(_measurement);
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="0cc83dec306295d818e482d69af34162">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\voxel_grid_filter\voxel_grid_filter.cpp" startLineNumber="47" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\random_filter\random_filter.cpp" startLineNumber="45" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\distance_filter\distance_filter.cpp" startLineNumber="46" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\ring_filter\ring_filter.cpp" startLineNumber="52" endLineNumber="67"/>
            <text>
<![CDATA[int ring_div = 3;

static ros::Publisher points_downsampler_info_pub;
static points_downsampler::PointsDownsamplerInfo points_downsampler_info_msg;

static std::chrono::time_point<std::chrono::system_clock> filter_start, filter_end;

static bool _output_log = false;
static std::ofstream ofs;
static std::string filename;

static std::string POINTS_TOPIC;

static void config_callback(const runtime_manager::ConfigRingFilter::ConstPtr& input)
{
  ring_div = input->ring_div;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="88fdf6087db73a5a920a8576009bc2f5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.h" startLineNumber="112" endLineNumber="125"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.h" startLineNumber="80" endLineNumber="93"/>
            <text>
<![CDATA[class  EdgeSE3ProjectXYZ: public  BaseBinaryEdge<2, Vector2d, VertexSBAPointXYZ, VertexSE3Expmap>{
public:
  EIGEN_MAKE_ALIGNED_OPERATOR_NEW

  EdgeSE3ProjectXYZ();

  bool read(std::istream& is);

  bool write(std::ostream& os) const;

  void computeError()  {
    const VertexSE3Expmap* v1 = static_cast<const VertexSE3Expmap*>(_vertices[1]);
    const VertexSBAPointXYZ* v2 = static_cast<const VertexSBAPointXYZ*>(_vertices[0]);
    Vector2d obs(_measurement);
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="d281c81c1a2ce2d9f613d7b246e23da8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="167" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="151" endLineNumber="161"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="133" endLineNumber="143"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="118" endLineNumber="128"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="104" endLineNumber="114"/>
            <text>
<![CDATA[			if (nbytes < 0) {
				ROS_ERROR_STREAM("udon_socket::udon::send_request: " << std::strerror(errno));
				goto delete_buf;
			}
			nbytes = recv(connect_fd, buf, bufsize, 0);
			if (nbytes < 0) {
				ROS_ERROR_STREAM("recv: " << std::strerror(errno));
				goto delete_buf;
			} else if (nbytes == 0) {
				ROS_INFO_STREAM("disconnect " << astr << ":" << ntohs(client_addr.sin_port));
				goto delete_buf;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="5da087212cabfb6686b943606c39e2a7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\transformation_estimation_lm.h" startLineNumber="324" endLineNumber="348"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\transformation_estimation_lm.h" startLineNumber="278" endLineNumber="302"/>
            <text>
<![CDATA[            *this = src;
          }

          /** Copy operator
            * \param[in] src the optimization functor to copy into this
            */
          inline OptimizationFunctor& 
          operator = (const OptimizationFunctor &src) 
          { 
            Functor<MatScalar>::operator=(src);
            estimator_ = src.estimator_; 
            return (*this); 
          }

          /** \brief Destructor. */
          virtual ~OptimizationFunctor () {}

          /** Fill fvec from x. For the current state vector x fill the f values
            * \param[in] x state vector
            * \param[out] fvec f values vector
            */
          int 
          operator () (const VectorX &x, VectorX &fvec) const;

          const TransformationEstimationLM<PointSource, PointTarget, MatScalar> *estimator_;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="01d69ba062efe1012c70be62a939de4a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapPoint.h" startLineNumber="125" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\KeyFrame.h" startLineNumber="152" endLineNumber="169"/>
            <text>
<![CDATA[    double mTimeStamp;

    // Grid (to speed up feature matching)
    int mnGridCols;
    int mnGridRows;
    float mfGridElementWidthInv;
    float mfGridElementHeightInv;

    // Variables used by the tracking
    long unsigned int mnTrackReferenceForFrame;
    long unsigned int mnFuseTargetForKF;

    // Variables used by the local mapping
    long unsigned int mnBALocalForKF;
    long unsigned int mnBAFixedForKF;

    // Variables used by the keyframe database
    long unsigned int mnLoopQuery;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="0c9310d87580d7fea906cb5c9b170fca">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="56" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="55" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="54" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="53" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="52" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="51" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="50" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="49" endLineNumber="58"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="48" endLineNumber="57"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="47" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="46" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="45" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="42" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="41" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="38" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="37" endLineNumber="50"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="36" endLineNumber="49"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="77" endLineNumber="88"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="380" endLineNumber="389"/>
            <text>
<![CDATA[	int sum_part_size = 0;
	int sum_pointer_size = 0;
	int sum_move_size = 0;
	int part_size = 0;
	int pointer_size = 0;
	int part_y = 0;
	int move_size = 0;
	int start_kk = 0;
	int end_kk = 0;
	int part_end_kk = 0;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="fcc5c60631fc78f15e24879f115fc020">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\lib\pos_db\SendData.cpp" startLineNumber="322" endLineNumber="332"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\lib\pos_db\SendData.cpp" startLineNumber="293" endLineNumber="303"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\lib\pos_db\SendData.cpp" startLineNumber="266" endLineNumber="276"/>
            <text>
<![CDATA[	} else {
		n = 0;
	}
#endif /* USE_LIBSSH2 */
	if (n < 0) {
		perror("write");
		DisconnectDB("tunnel failed");
		return -1-n;
	} else if (n == 0) {
		std::cerr << "write timed out" << std::endl;
		DisconnectDB("tunnel failed");
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="2867086f63e169261474b4f6e68e12cc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="109" endLineNumber="126"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\libvelocity_set.h" startLineNumber="42" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\libvelocity_set.h" startLineNumber="40" endLineNumber="49"/>
            <text>
<![CDATA[  bool loaded_crosswalk;
  bool loaded_area;
  bool loaded_line;
  bool loaded_point;
  bool loaded_all;
  bool set_points;
  vector_map::CrossWalkArray crosswalk_;
  vector_map::AreaArray area_;
  vector_map::LineArray line_;
  vector_map::PointArray point_;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="cf8583868eca7de0da436e0eb777a03e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\glfont.cpp" startLineNumber="182" endLineNumber="197"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\glfont.cpp" startLineNumber="155" endLineNumber="171"/>
            <text>
<![CDATA[            char c = text[i];
            if( !(FIRST_CHAR <= c /*&& c <FIRST_CHAR+NUM_CHARS*/) ) {
                c = ' ';
            }
            GlChar& ch = chardata[c-32];

            // Kerning
            if(i) {
                const GLfloat kern = kern_table[ (lc-32)*NUM_CHARS + (c-32) ];
                ret.AddSpace(kern);
            }

            ret.Add(c,ch);
            lc = c;
        }
    }
    return ret;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="c02d1cf4757e36b03493cecefff7d6c2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="32" endLineNumber="82"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapObjectSerialization.h" startLineNumber="8" endLineNumber="42"/>
            <text>
<![CDATA[#ifndef INCLUDE_MAPOBJECTSERIALIZATION_H_
#define INCLUDE_MAPOBJECTSERIALIZATION_H_


#include <set>
#include <vector>
#include <list>
#include <map>
#include <boost/serialization/split_free.hpp>
#include <boost/serialization/split_member.hpp>
#include <boost/serialization/vector.hpp>
#include <boost/serialization/set.hpp>
#include <boost/serialization/list.hpp>
#include <boost/serialization/map.hpp>
#include "cvmat_serialization.h"
#include <boost/serialization/base_object.hpp>
#include <boost/archive/binary_oarchive.hpp>
#include <boost/archive/binary_iarchive.hpp>



#include "KeyFrame.h"
#include "MapPoint.h"
#include "KeyFrameDatabase.h"



using std::set;
using std::vector;
using std::map;
using std::list;
using ORB_SLAM2::KeyFrame;
using ORB_SLAM2::MapPoint;
using ORB_SLAM2::KeyFrameDatabase;
using std::out_of_range;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="95f016c4ffe839c376413623eeb4fd5f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\glviewer\GLViewer\glviewer.cpp" startLineNumber="577" endLineNumber="594"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\glviewer\GLViewer\glviewer.cpp" startLineNumber="423" endLineNumber="440"/>
            <text>
<![CDATA[    if(islistid)
    {
        int i;
        int n=displaylist.size();
        for(i=0;i<n;i++)
        {
            if(displaylist[i].listid==listid)
            {
                displaylist[i].show=show;
                break;
            }
        }
    }
    else
    {
        displaylist[listid].show=show;
    }
    return;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="896dced1c2b03316152fedb9a09c4a8f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="554" endLineNumber="568"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="549" endLineNumber="562"/>
            <text>
<![CDATA[				continue;
			lane_vmap.nodes.push_back(n);

			for (const vector_map::Point& p : vmap.points) {
				if (p.pid != n.pid)
					continue;
				lane_vmap.points.push_back(p);
			}
		}

		for (const vector_map::StopLine& s : vmap.stoplines) {
			if (s.linkid != l.lnid)
				continue;
			lane_vmap.stoplines.push_back(s);
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="7396975a22a788f997aa9d1e639ef8eb">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1270" endLineNumber="1282"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="579" endLineNumber="591"/>
            <text>
<![CDATA[    calibvelodynenormalstab=new QTabWidget;
    calibvelodynetab->addTab(calibvelodynenormalstab,"Chessboard Normals");

    calibrationerrorshow=new QLabel;
    calibvelodynetab->addTab(calibrationerrorshow,CALIBRATIONERROR);

    velodynesplitter=new QSplitter(Qt::Vertical);
    splitter->addWidget(velodynesplitter);
    splitter->setStretchFactor(splitter->indexOf(velodynesplitter),2);

    velodynetab=new QTabWidget;
    velodynesplitter->addWidget(velodynetab);
    velodynesplitter->setStretchFactor(velodynesplitter->indexOf(velodynetab),1);
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="3d4c93c7881e39894d511690012d3d8d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\gazebo\catvehicle\src\distanceEstimator.cpp" startLineNumber="19" endLineNumber="28"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="302" endLineNumber="313"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\search_info_ros.h" startLineNumber="37" endLineNumber="49"/>
            <text>
<![CDATA[  geometry_msgs::PoseStamped start_pose_global_;
  geometry_msgs::PoseStamped goal_pose_global_;
  geometry_msgs::PoseStamped start_pose_local_;
  geometry_msgs::PoseStamped goal_pose_local_;
  // Transform which converts global frame (/map in Autoware) to OccupancyGrid frame
  tf::Transform ogm2map_;
  tf::TransformListener tf_listener_;
  geometry_msgs::Pose current_pose_;

  // set data flag
  bool map_set_;
  bool start_set_;
  bool goal_set_;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="c0e9a2d5d53e456514963d0c7aacbd48">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="312" endLineNumber="324"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="424" endLineNumber="437"/>
            <text>
<![CDATA[		printf("cuCtxSynchronize(process) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
	}

	if(pt->pid == 0 && pt->calc_flag == PART){
		gettimeofday(&tv_fconv_kernel_end, NULL);
		tvsub(&tv_fconv_kernel_end, &tv_fconv_kernel_start, &tv);
		time_fconv_kernel += tv.tv_sec * 1000.0 + (float)tv.tv_usec / 1000.0;
	}

	if(pt->pid == 0){
		gettimeofday(&tv_kernel_end, NULL);
		tvsub(&tv_kernel_end, &tv_kernel_start, &tv);
		time_kernel += tv.tv_sec * 1000.0 + (float)tv.tv_usec / 1000.0;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="3042dff29f2230252a693a1a41076202">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="908" endLineNumber="917"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="906" endLineNumber="915"/>
            <text>
<![CDATA[	if (param->initial_lifespan > 0)
		INITIAL_LIFESPAN	= param->initial_lifespan;
	if (param->default_lifespan > 0)
		DEFAULT_LIFESPAN	= param->default_lifespan;
	if(param->noise_covariance > 0)
		NOISE_COV			= param->noise_covariance;
	if(param->measurement_noise_covariance > 0)
		MEAS_NOISE_COV		= param->measurement_noise_covariance;
	if(param->error_estimate_covariance > 0)
		ERROR_ESTIMATE_COV	= param->error_estimate_covariance;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="ac8f342eff512a8199cbb1b92fd518f1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\lib\udon_socket\udon.cpp" startLineNumber="49" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\lib\udon_socket\udon.cpp" startLineNumber="48" endLineNumber="58"/>
            <text>
<![CDATA[constexpr std::size_t SIZE_REQUEST	= 0x08;
constexpr std::size_t SIZE_RESPONSE	= 0x04;
constexpr std::size_t SIZE_MODE		= 0x08;
constexpr std::size_t SIZE_LOCATION	= 0x28;

constexpr std::ptrdiff_t OFFSET_TYPE		= 0x00;
constexpr std::ptrdiff_t OFFSET_VALUE		= 0x04;
constexpr std::ptrdiff_t OFFSET_LENGTH		= 0x04;
constexpr std::ptrdiff_t OFFSET_LOCATION_X	= 0x08;
constexpr std::ptrdiff_t OFFSET_LOCATION_Y	= 0x10;
constexpr std::ptrdiff_t OFFSET_LOCATION_Z	= 0x18;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="03f58c99ac8de07b918eb7c9907dc87b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="512" endLineNumber="524"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="478" endLineNumber="490"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="452" endLineNumber="464"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="429" endLineNumber="441"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="405" endLineNumber="417"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="380" endLineNumber="392"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="350" endLineNumber="362"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="318" endLineNumber="330"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="293" endLineNumber="305"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="269" endLineNumber="281"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="221" endLineNumber="233"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="197" endLineNumber="209"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="173" endLineNumber="185"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="146" endLineNumber="158"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="118" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="92" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="69" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="575" endLineNumber="587"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="246" endLineNumber="258"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="540" endLineNumber="552"/>
            <text>
<![CDATA[	int pid;
};

std::vector<NodeData> read_nodedata(const char *filename)
{
  int max_id;
  Tbl tbl = read_csv(filename, &max_id);
  size_t i, n = tbl.size();
  std::vector<NodeData> ret(max_id + 1);
  for (i=0; i<n; i++) {
    int id = std::stoi(tbl[i][0]);
    ret[id].nid = id;
    ret[id].pid = std::stoi(tbl[i][1]);
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="b00c8d60db24208055acb288b756f18a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapObjectSerialization.h" startLineNumber="498" endLineNumber="508"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapObjectSerialization.h" startLineNumber="446" endLineNumber="456"/>
            <text>
<![CDATA[template <class Archive>
void save (Archive & ar, const MapPoint &mapPoint, const unsigned int version)
{
	ar &
		mapPoint.mnId &
		mapPoint.mnFirstKFid &
		mapPoint.mnFirstFrame &
		mapPoint.nObs &
		mapPoint.mTrackProjX &
		mapPoint.mTrackProjY &
		mapPoint.mTrackProjXR;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="cf09c3742ae7f5afd601386fc56c381c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\klt_track\klt_track.cpp" startLineNumber="65" endLineNumber="78"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="303" endLineNumber="314"/>
            <text>
<![CDATA[    vssp::vsspDriver driver;
    sensor_msgs::PointCloud2 cloud2;
    sensor_msgs::Imu imu;
    sensor_msgs::MagneticField mag;

    ros::Time timePing;
    ros::Time timestampBase;

    int field;
    int frame;
    int points_size;
#if _INVALID_RANGE
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="04198d4dddfe19e7622204bac1fe1010">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\colour.h" startLineNumber="99" endLineNumber="119"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="221" endLineNumber="234"/>
            <text>
<![CDATA[  double c_zz;
  double c_xy;
  double c_yz;
  double c_zx;

  double x;
  double y;
  double z;

  double w;

  double l[3];/*eigen value*/
  
  int   is_source;/**/
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="efe850c8b013c929a5cbf46b8ef95f1f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\vscan_lidar_track\mainwindow.cpp" startLineNumber="165" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\vscan_lidar_track\mainwindow.cpp" startLineNumber="19" endLineNumber="32"/>
            <text>
<![CDATA[    double density=2*PI/scan.beamnum;
    for(int i=0;i<scan.beamnum;i++)
    {
        double theta=i*density-PI;
        double x=scan.length[i]*cos(theta);
        double y=scan.length[i]*sin(theta);
        scene->addEllipse(-y-0.05,-x-0.05,0.1,0.1,QPen(Qt::blue,0.1))->setZValue(1);
    }
    for(int i=10;i<=100;i+=10)
    {
        scene->addEllipse(-i/2,-i/2,i,i,QPen(Qt::gray,0.2,Qt::DotLine))->setZValue(0);
    }
    scene->addLine(0,0,0,-5,QPen(Qt::red,0.2,Qt::DotLine))->setZValue(0);
    scene->addLine(0,0,-5,0,QPen(Qt::green,0.2,Qt::DotLine))->setZValue(0);
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="c09af9ea4c5c6507c746b54468a6cd85">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="112" endLineNumber="128"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\integrated_viewer\node\image_viewer_plugin\image_viewer_plugin.h" startLineNumber="59" endLineNumber="76"/>
            <text>
<![CDATA[    static const QString kImageDataType;
    static const QString kRectDataTypeBase;
    static const QString kPointDataType;

    // The blank topic name
    static const QString kBlankTopic;

    // The base topic name of detection result rectangles
    static const std::string  kRectDataTypeImageObjRanged;
    static const std::string  kRectDataTypeImageObjTracked;

    // The ROS node handle.
    ros::NodeHandle node_handle_;

    // The ROS subscriber
    ros::Subscriber image_sub_;
    ros::Subscriber rect_sub_;
    ros::Subscriber point_sub_;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="008846e7a44003e2ee75484d29ec2280">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glstate.h" startLineNumber="148" endLineNumber="163"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glstate.h" startLineNumber="136" endLineNumber="152"/>
            <text>
<![CDATA[           ::glDisable(cap);
        }
    }

    bool m_DepthMaskCalled;
    GLboolean m_OriginalDepthMask;
    inline void glDepthMask(GLboolean flag)
    {
        if(!m_DepthMaskCalled) {
            m_DepthMaskCalled = true;
            glGetBooleanv(GL_DEPTH_WRITEMASK, &m_OriginalDepthMask);
        }
        ::glDepthMask(flag);
    }

    bool m_ShadeModelCalled;
    GLint m_OriginalShadeModel;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="8cd3d85321318a6878c58e36cc3003d0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="249" endLineNumber="275"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\System.h" startLineNumber="44" endLineNumber="58"/>
            <text>
<![CDATA[namespace ORB_SLAM2
{

class Viewer;
class FrameDrawer;
class Map;
class Tracking;
class LocalMapping;
class LoopClosing;

class System
{
public:
    // Input sensor
    enum eSensor{
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="4ff4582dc6a9848149774b7e477e9f79">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="169" endLineNumber="189"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="137" endLineNumber="153"/>
            <text>
<![CDATA[        double sy;
        double theta; 
        double kappa;
        double v;
        double vdes;
        double timestamp;
    };

    double state_value[7];
};

union Parameters 
{
    struct 
    {
        double a;
        double b;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="ed5259a988698b7d5b77a73c7e2d9608">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="251" endLineNumber="262"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="248" endLineNumber="259"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="245" endLineNumber="256"/>
            <text>
<![CDATA[        guess_pos.x = previous_pos.x + offset_x;
        guess_pos.y = previous_pos.y + offset_y;
        guess_pos.z = previous_pos.z + offset_z;
        guess_pos.roll = previous_pos.roll;
        guess_pos.pitch = previous_pos.pitch;
        guess_pos.yaw = previous_pos.yaw + offset_yaw;

        Eigen::AngleAxisf init_rotation_x(guess_pos.roll, Eigen::Vector3f::UnitX());
        Eigen::AngleAxisf init_rotation_y(guess_pos.pitch, Eigen::Vector3f::UnitY());
        Eigen::AngleAxisf init_rotation_z(guess_pos.yaw, Eigen::Vector3f::UnitZ());

        Eigen::Translation3f init_translation(guess_pos.x, guess_pos.y, guess_pos.z);
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="c22f22a92e959204a8f70cb1c2798910">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="353" endLineNumber="364"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\featurepyramid.cpp" startLineNumber="312" endLineNumber="322"/>
            <text>
<![CDATA[			for(int kk=0;kk<18;kk++)
			{
				FLOAT h1=min_2(*src*n1);
				FLOAT h2=min_2(*src*n2);
				FLOAT h3=min_2(*src*n3);
				FLOAT h4=min_2(*src*n4);
				*dst=0.5*(h1+h2+h3+h4);
				t1+=h1;
				t2+=h2;
				t3+=h3;
				t4+=h4;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="d6bccc1c6a3cf21f629d29e726c24c78">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\resize_GPU.cpp" startLineNumber="383" endLineNumber="393"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\resize_GPU.cpp" startLineNumber="366" endLineNumber="376"/>
            <text>
<![CDATA[      args[thread_count].src_size = org_image_size;
      args[thread_count].dst_size = &resized_image_size[level*3];
      args[thread_count].stream   = stream_array[level];
      args[thread_count].level    = level;

#ifdef DEBUG
      bilinear_resizing((void *)&args[thread_count]);
#else
      pthread_create(&thread[thread_count], NULL, bilinear_resizing, (void *)&args[thread_count]);
#endif
      thread_count++;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="84706e9bce12aaedcbdbe844c13f8b85">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\var\var.h" startLineNumber="155" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\var\var.h" startLineNumber="132" endLineNumber="145"/>
            <text>
<![CDATA[        : ptr(0)
    {
        // Find name in VarStore
        VarValueGeneric*& v = VarState::I()[name];
        if(v && !v->Meta().generic) {
            InitialiseFromGeneric(v);
        }else{
            // new VarValue<T> (owned by VarStore)
            VarValue<T>* nv;
            if(v) {
                // Specialise generic variable
                nv = new VarValue<T>( Convert<T,std::string>::Do( v->str->Get() ) );
                delete v;
            }else{
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="5cb49f56b7476d36542335ce4c79d7c9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_viewer\vscan_image_viewer.cpp" startLineNumber="94" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_viewer\points_image_viewer.cpp" startLineNumber="95" endLineNumber="113"/>
            <text>
<![CDATA[		cvWaitKey(2);
	}
}

static void image_cb(const sensor_msgs::Image& msg)
{
	image_msg = msg;
	existImage = true;
	show();
}

static void points_cb(const points2image::PointsImageConstPtr& msg)
{
	points_msg = msg;
	existPoints = true;
	show();
}

int main(int argc, char **argv)
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="99c96eb79c2c367cd60ac3db3f7ad580">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_downloader\pos_downloader.cpp" startLineNumber="60" endLineNumber="71"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="95" endLineNumber="118"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="93" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="91" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="86" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="84" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="82" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="80" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="78" endLineNumber="99"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="75" endLineNumber="97"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="73" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="71" endLineNumber="93"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="69" endLineNumber="91"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="67" endLineNumber="86"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="65" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="63" endLineNumber="82"/>
            <text>
<![CDATA[#define kmax (0.1900)
// Minimum curvature (radians)
#define kmin (-0.1900)
// Maximum rate of curvature (radians/second)
#define dkmax (0.1021)
// Minimum rate of curvature (radians/second)
#define dkmin (-0.1021)
// Maximum acceleration (meters/second^2)
#define dvmax (2.000)
// Maximum deceleration (meters/second^2)
#define dvmin (-6.000)
// Control latency (seconds)
#define tdelay (0.0800)
 //#define tdelay (0.03)
// Speed control logic a coefficient
#define ascl (0.1681)
// Speed control logic b coefficient
#define bscl (-0.0049)
// Speed control logic threshold (meters/second)
#define vscl (4.000)
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="097e5a20647a934b917a4a23e8335c3d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="223" endLineNumber="233"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="120" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="55" endLineNumber="72"/>
            <text>
<![CDATA[    module = (CUmodule*) malloc(device_num * sizeof(CUmodule));

    ConvolutionKernel_func = (CUfunction*) malloc(
            device_num * sizeof(CUfunction));
    DistanceTransformTwoDimensionalProblem_func = (CUfunction*) malloc(
            device_num * sizeof(CUfunction));
    BilinearKernelTex32F_func = (CUfunction*) malloc(
            device_num * sizeof(CUfunction));
    calculateHistogram_func = (CUfunction*) malloc(
            device_num * sizeof(CUfunction));
    getFeatureMaps_func = (CUfunction*) malloc(device_num * sizeof(CUfunction));
    calculateNorm_func = (CUfunction*) malloc(device_num * sizeof(CUfunction));
    normalizeAndTruncate_func = (CUfunction*) malloc(
            device_num * sizeof(CUfunction));
    PCAFeatureMapsAddNullableBorder_func = (CUfunction*) malloc(
            device_num * sizeof(CUfunction));

    for (int i = 0; i < device_num; i++)
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="91c367b223b95ef32f831e046549f2fc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="208" endLineNumber="217"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="207" endLineNumber="216"/>
            <text>
<![CDATA[  oss << fixed << setprecision(6) << can.maxchgcurrent << ",";
  oss << fixed << setprecision(6) << can.maxdischgcurrent << ",";
  oss << fixed << setprecision(6) << can.sideacc << ",";
  oss << fixed << setprecision(6) << can.accellfromp << ",";
  oss << fixed << setprecision(6) << can.anglefromp << ",";
  oss << fixed << setprecision(6) << can.brakepedalfromp << ",";
  oss << fixed << setprecision(6) << can.speedfr << ",";
  oss << fixed << setprecision(6) << can.speedfl << ",";
  oss << fixed << setprecision(6) << can.speedrr << ",";
  oss << fixed << setprecision(6) << can.speedrl << ",";
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="68c4262a646a966505e13e0c25dd6ac7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="185" endLineNumber="203"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="117" endLineNumber="135"/>
            <text>
<![CDATA[        PCL_DEPRECATED ("[pcl::registration::CorrespondenceEstimationBase::setInputCloud] setInputCloud is deprecated. Please use setInputSource instead.")
        void
        setInputCloud (const PointCloudSourceConstPtr &cloud);

        /** \brief Get a pointer to the input point cloud dataset target. */
        PCL_DEPRECATED ("[pcl::registration::CorrespondenceEstimationBase::getInputCloud] getInputCloud is deprecated. Please use getInputSource instead.")
        PointCloudSourceConstPtr const
        getInputCloud ();

        /** \brief Provide a pointer to the input source 
          * (e.g., the point cloud that we want to align to the target)
          *
          * \param[in] cloud the input point cloud source
          */
        inline void 
        setInputSource (const PointCloudSourceConstPtr &cloud)
        {
          source_cloud_updated_ = true;
          PCLBase<PointSource>::setInputCloud (cloud);
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="5c3c69548c12aac6380e7e0a3c9401e4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1278" endLineNumber="1287"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1281" endLineNumber="1290"/>
            <text>
<![CDATA[    color_rgba.r = COLOR_VALUE_MAX;
    break;
  case GREEN:
    color_rgba.g = COLOR_VALUE_MAX;
    break;
  case BLUE:
    color_rgba.b = COLOR_VALUE_MAX;
    break;
  case YELLOW:
    color_rgba.r = COLOR_VALUE_MAX;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="8d0101407cc89223e8847793714c1fb3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="339" endLineNumber="360"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="692" endLineNumber="703"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="365" endLineNumber="375"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="371" endLineNumber="381"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="528" endLineNumber="538"/>
            <text>
<![CDATA[    localizer_pose_msg.header.frame_id = "/map";
    localizer_pose_msg.header.stamp = current_scan_time;
    localizer_pose_msg.pose.position.x = localizer_pose.x;
    localizer_pose_msg.pose.position.y = localizer_pose.y;
    localizer_pose_msg.pose.position.z = localizer_pose.z;
    localizer_pose_msg.pose.orientation.x = localizer_q.x();
    localizer_pose_msg.pose.orientation.y = localizer_q.y();
    localizer_pose_msg.pose.orientation.z = localizer_q.z();
    localizer_pose_msg.pose.orientation.w = localizer_q.w();

    predict_pose_pub.publish(predict_pose_msg);
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="e8c93aac9c618270b131034409bf6c33">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="594" endLineNumber="608"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="570" endLineNumber="583"/>
            <text>
<![CDATA[        break;
    case array_type: {
        *oi++ = '[';
        if (indent != -1) {
            ++indent;
        }
        for (array::const_iterator i = u_.array_->begin();
             i != u_.array_->end();
             ++i) {
            if (i != u_.array_->begin()) {
                *oi++ = ',';
            }
            if (indent != -1) {
                _indent(oi, indent);
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="952ee8adfa51f7ca9c0e1d4414e8b1d3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\space_filter\space_filter.cpp" startLineNumber="22" endLineNumber="34"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="22" endLineNumber="31"/>
            <text>
<![CDATA[  ros::Publisher publisher_;
  ros::Subscriber waypoint_subscriber_;
  ros::Subscriber vscan_subscriber_;
  ros::Subscriber obj_subscriber_;
  bool use_target_waypoint_;
  bool use_obstacle_box_;
  bool use_vscan_points_;
  double map_x_size_;
  double map_y_size_;
  double map_resolution_;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="4b53d452b17eb4fa6f3ee8bcfd082fd6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\copy.cpp" startLineNumber="54" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="159" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\sync_car_dpm.cpp" startLineNumber="67" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\car_dpm_sync.cpp" startLineNumber="67" endLineNumber="81"/>
            <text>
<![CDATA[    pthread_mutex_unlock(&mutex);
}

void points_raw_callback(const sensor_msgs::PointCloud2::ConstPtr& points_raw_msg) {
    pthread_mutex_lock(&mutex);
    points_raw_ringbuf.push_front(*points_raw_msg);
    //image_raw is empty
    if (image_raw_ringbuf.begin() == image_raw_ringbuf.end()) {
        ROS_INFO("image_raw ring buffer is empty");
        pthread_mutex_unlock(&mutex);
        return;
    }

    buf_flag = true;
    pthread_mutex_unlock(&mutex);
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="26cb22fb354ce14a6ffb73160b09278d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="474" endLineNumber="483"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set.cpp" startLineNumber="142" endLineNumber="151"/>
            <text>
<![CDATA[  stop_line.pose.position.z += 1.0;
  stop_line.scale.x = 0.1;
  stop_line.scale.y = 15.0;
  stop_line.scale.z = 2.0;
  stop_line.color.a = 0.3;
  stop_line.color.r = 1.0;
  stop_line.color.g = 0.0;
  stop_line.color.b = 0.0;
  stop_line.lifetime = ros::Duration(0.1);
  stop_line.frame_locked = true;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="77ec4d574f7eabd830c11324b669f789">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="213" endLineNumber="223"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="175" endLineNumber="185"/>
            <text>
<![CDATA[	vector_map::Point nearest_point = find_nearest_point(lane_vmap, coarse_p1);
	if (nearest_point.pid < 0)
		return nearest_point;

	std::vector<vector_map::Point> near_points = find_near_points(lane_vmap, coarse_p1, search_radius);
	double coarse_angle = compute_direction_angle(coarse_p1, coarse_p2);
	double score = 180 + search_radius; // XXX better way?
	for (const vector_map::Point& p1 : near_points) {
		vector_map::Lane l = find_lane(lane_vmap, lno, p1);
		if (l.lnid < 0)
			continue;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="bfb2360f8e62c7506163102c3567ecac">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\transformation_estimation_svd.h" startLineNumber="40" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\transformation_estimation_point_to_plane_lls.h" startLineNumber="40" endLineNumber="71"/>
            <text>
<![CDATA[#ifndef FAST_PCL_REGISTRATION_TRANSFORMATION_ESTIMATION_POINT_TO_PLANE_LLS_H_ 
#define FAST_PCL_REGISTRATION_TRANSFORMATION_ESTIMATION_POINT_TO_PLANE_LLS_H_

//#include <pcl/registration/transformation_estimation.h>
//#include <pcl/registration/warp_point_rigid.h>
#include "fast_pcl/registration/transformation_estimation.h"
#include "fast_pcl/registration/warp_point_rigid.h"
#include <pcl/cloud_iterator.h>

namespace pcl
{
  namespace registration
  {
    /** \brief @b TransformationEstimationPointToPlaneLLS implements a Linear Least Squares (LLS) approximation
      * for minimizing the point-to-plane distance between two clouds of corresponding points with normals.
      *
      * For additional details, see 
      *   "Linear Least-Squares Optimization for Point-to-Plane ICP Surface Registration", Kok-Lim Low, 2004
      *
      * \note The class is templated on the source and target point types as well as on the output scalar of the
      * transformation matrix (i.e., float or double). Default: float.
      * \author Michael Dixon
      * \ingroup registration
      */
    template <typename PointSource, typename PointTarget, typename Scalar = float>
    class TransformationEstimationPointToPlaneLLS : public TransformationEstimation<PointSource, PointTarget, Scalar>
    {
      public:
        typedef boost::shared_ptr<TransformationEstimationPointToPlaneLLS<PointSource, PointTarget, Scalar> > Ptr;
        typedef boost::shared_ptr<const TransformationEstimationPointToPlaneLLS<PointSource, PointTarget, Scalar> > ConstPtr;

        typedef typename TransformationEstimation<PointSource, PointTarget, Scalar>::Matrix4 Matrix4;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="785d29ce893c65117610fa5323cfe13b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Frame.h" startLineNumber="115" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_rejection.h" startLineNumber="382" endLineNumber="411"/>
            <text>
<![CDATA[        PointCloudPtr input_transformed_;

        /** \brief The target point cloud datase. */
        PointCloudConstPtr target_;

        /** \brief Normals to the input point cloud */
        NormalsConstPtr input_normals_;

        /** \brief Normals to the input point cloud */
        NormalsPtr input_normals_transformed_;

        /** \brief Normals to the target point cloud */
        NormalsConstPtr target_normals_;

        /** \brief A pointer to the spatial search object. */
        KdTreePtr tree_;

        /** \brief The name of the rejection method. */
        std::string class_name_;

        /** \brief Should the current data container use normals? */
        bool needs_normals_;

        /** \brief Variable that stores whether we have a new target cloud, meaning we need to pre-process it again.
         * This way, we avoid rebuilding the kd-tree */
        bool target_cloud_updated_;

        /** \brief A flag which, if set, means the tree operating on the target cloud 
         * will never be recomputed*/
        bool force_no_recompute_;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="fcef030ddc88530bad1db880e3f75733">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_loader\waypoint_loader_core.cpp" startLineNumber="153" endLineNumber="167"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_loader\waypoint_loader_core.cpp" startLineNumber="106" endLineNumber="120"/>
            <text>
<![CDATA[void WaypointLoaderNode::loadWaypointsForVer1(const char *filename, std::vector<waypoint_follower::waypoint> *wps)
{
  std::ifstream ifs(filename);

  if (!ifs)
    return;

  std::string line;
  std::getline(ifs, line);  // Remove first line

  while (std::getline(ifs, line))
  {
    waypoint_follower::waypoint wp;
    parseWaypointForVer1(line, &wp);
    wps->push_back(wp);
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="48f12c231ea7d31c1750fc248e1d1f52">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="277" endLineNumber="288"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="161" endLineNumber="172"/>
            <text>
<![CDATA[    int sizeX, sizeY, xp;
    int thread_num_x, thread_num_y, thread_num_z;
    int block_num_x, block_num_y, block_num_z;
    int sharedMemBytes;
    CUresult res;

    sizeX = dev_map_in->sizeX;
    sizeY = dev_map_in->sizeY;
    xp = dev_map_in->numFeatures;

    void *calc_norm_kernel_arg[] =
    { (void *) &dev_map_in->map, (void *) &dev_norm->map, (void *) &sizeX,
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="07dc71191d9e28118d070838f67141f3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_receiver\tablet_receiver.cpp" startLineNumber="327" endLineNumber="338"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_receiver\tablet_receiver.cpp" startLineNumber="272" endLineNumber="283"/>
            <text>
<![CDATA[		for (char *p = (char *)points; size;
		     size -= nbytes, p += nbytes) {
			nbytes = recv(sock, p, size, 0);
			if (nbytes == -1) {
				perror("recv");
				free(points);
				return -1;
			}
			if (nbytes == 0) {
				fprintf(stderr, "peer is shutdown\n");
				free(points);
				return -1;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="c855e16b1ed16bf6173084fe443d56f1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glsl.h" startLineNumber="223" endLineNumber="232"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glsl.h" startLineNumber="222" endLineNumber="231"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glsl.h" startLineNumber="221" endLineNumber="230"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glsl.h" startLineNumber="220" endLineNumber="229"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glsl.h" startLineNumber="219" endLineNumber="228"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glsl.h" startLineNumber="205" endLineNumber="214"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glsl.h" startLineNumber="204" endLineNumber="213"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glsl.h" startLineNumber="203" endLineNumber="212"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glsl.h" startLineNumber="202" endLineNumber="211"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glsl.h" startLineNumber="201" endLineNumber="210"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="46" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="45" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="44" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="43" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="42" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="61" endLineNumber="70"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\plot\plotter.cpp" startLineNumber="142" endLineNumber="151"/>
            <text>
<![CDATA[            "attribute vec2 a_position;\n"
            "uniform vec2 u_scale;\n"
            "uniform vec2 u_offset;\n"
            "varying float x;\n"
            "varying float y;\n"
            "void main() {\n"
            "    gl_Position = vec4(u_scale * (a_position + u_offset),0,1);\n"
            "    x = a_position.x;"
            "    y = a_position.y;"
            "}\n";
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="276a09ababfd41212525917144acb449">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\load_model.cpp" startLineNumber="271" endLineNumber="280"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\load_model.cpp" startLineNumber="270" endLineNumber="279"/>
            <text>
<![CDATA[	s_free(MO->MI->anchor);
	s_free(MO->MI->def);
	s_free(MO->MI->numpart);
	s_free(MO->MI->offw);
	s_free(MO->MI->oidx);
	s_free(MO->MI->ridx);
	s_free(MO->MI->rsize);
	s_free(MO->MI->x1);
	s_free(MO->MI->x2);
	s_free(MO->MI->y1);
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="b0598d00f6dad90b97a68a2ea251c53e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1400" endLineNumber="1412"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="751" endLineNumber="763"/>
            <text>
<![CDATA[    QTableWidget * tmpvelodynenormaltable=(QTableWidget *)(calibvelodynenormalstab->widget(id));
    calibvelodynenormalstab->removeTab(id);
    delete tmpvelodynenormaltable;

    PlaneExtractor * planeextraction=(PlaneExtractor *)(calibvelodynesshow->widget(id));
    calibvelodynesshow->removeTab(id);
    delete planeextraction;

    int i,n=calibimagesshow->count();
    for(i=id;i<n;i++)
    {
        calibvelodynepointstab->setTabText(i,QString("Velodyne_%1").arg(i));
        calibvelodynenormalstab->setTabText(i,QString("Normal_%1").arg(i));
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="db9bb146c3c04c8efabd1cedf505dda0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\librcnn\src\rcnn_detector.cpp" startLineNumber="348" endLineNumber="359"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="531" endLineNumber="542"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\klt_track\klt_track.cpp" startLineNumber="150" endLineNumber="161"/>
            <text>
<![CDATA[				int x1_max = std::max(x1[indices[i]], x1[indices[j]]);
				int x2_min = std::min(x2[indices[i]], x2[indices[j]]);
				int y1_max = std::max(y1[indices[i]], y1[indices[j]]);
				int y2_min = std::min(y2[indices[i]], y2[indices[j]]);
				int overlap_width = x2_min - x1_max + 1;
				int overlap_height = y2_min - y1_max + 1;
				if(overlap_width > 0 && overlap_height>0)
				{
					float overlap_part = (overlap_width*overlap_height)/area[indices[j]];
					if(overlap_part > in_nms_threshold)
					{
						is_suppresed[indices[j]] = true;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="aef354d0c851ee62663bf3de59394f4c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\ndt.h" startLineNumber="159" endLineNumber="186"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\ndt.h" startLineNumber="141" endLineNumber="168"/>
            <text>
<![CDATA[      inline double
      getStepSize () const
      {
        return (step_size_);
      }

      /** \brief Set/change the newton line search maximum step length.
        * \param[in] step_size maximum step length
        */
      inline void
      setStepSize (double step_size)
      {
        step_size_ = step_size;
      }

      /** \brief Get the point cloud outlier ratio.
        * \return outlier ratio
        */
      inline double
      getOulierRatio () const
      {
        return (outlier_ratio_);
      }

      /** \brief Set/change the point cloud outlier ratio.
        * \param[in] outlier_ratio outlier ratio
        */
      inline void
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="462612ebb3410e2013983b12ae7e8a7f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glplatform.h" startLineNumber="39" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="55" endLineNumber="68"/>
            <text>
<![CDATA[  int id;
  int lid;
  double width;
  char color;
  int type;
  int linkid;
}WhiteLine;

typedef struct{
  int lid;
}Mark;

typedef struct{
  int did;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="6a333d5a2e06ff7fe80b6abf8c4f6abe">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\ssd_node.cpp" startLineNumber="121" endLineNumber="135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\rcnn\rcnn_node.cpp" startLineNumber="127" endLineNumber="141"/>
            <text>
<![CDATA[		cv_tracker::image_obj output_car_message;
		cv_tracker::image_obj output_person_message;
		output_car_message.header = image_source.header;
		output_car_message.type = "car";

		output_person_message.header = image_source.header;
		output_person_message.type = "person";

		//Convert Objects to Message type
		//timer.reset(); timer.start();
		convert_rect_to_image_obj(detections, output_car_message, image, "car");
		convert_rect_to_image_obj(detections, output_person_message, image, "person");

		publisher_car_objects_.publish(output_car_message);
		publisher_person_objects_.publish(output_person_message);
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="74b84102eba8e0659a6607ce3b2403d6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\path_select\path_select.cpp" startLineNumber="35" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\obstacle_avoid\obstacle_avoid.cpp" startLineNumber="35" endLineNumber="55"/>
            <text>
<![CDATA[static ros::Publisher _pub;

void callback(const waypoint_follower::lane &msg)
{
    _pub.publish(msg);
}


int main(int argc, char **argv)
{
    ros::init(argc, argv, "obstacle_avoid");

    ros::NodeHandle nh;
    ros::Subscriber twist_sub = nh.subscribe("temporal_waypoints", 1, callback);
    _pub = nh.advertise<waypoint_follower::lane>("final_waypoints", 1000,true);

    ros::spin();



    return 0;
]]>
            </text>
        </set>
        <set lineCount="10" fingerprint="a4634b14c8a6a31042e8954cb2f9292a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="108" endLineNumber="125"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\dpm_ocv\dpm_ocv.cpp" startLineNumber="44" endLineNumber="53"/>
            <text>
<![CDATA[	double score_threshold_;
	double overlap_threshold_;
	double val_of_truncate_;
	int num_threads_;
	int lambda_;
	int num_cells_;
	int num_bins_;
	std::string model_file_;
	std::string object_class;
	std::string image_topic_name;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="e264e4a043e646cf100d80c28baa5773">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1514" endLineNumber="1527"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1518" endLineNumber="1531"/>
            <text>
<![CDATA[  if (p1.pid == 0)
    return marker;

  Point p2 = vmap.findByKey(Key<Point>(box.pid2));
  if (p2.pid == 0)
    return marker;

  Point p3 = vmap.findByKey(Key<Point>(box.pid3));
  if (p3.pid == 0)
    return marker;

  Point p4 = vmap.findByKey(Key<Point>(box.pid4));
  if (p4.pid == 0)
    return marker;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="8f9bd5f82f1c48d85a54ccbd2049cd24">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\ScoringObject.cpp" startLineNumber="74" endLineNumber="90"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\ScoringObject.cpp" startLineNumber="126" endLineNumber="145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\ScoringObject.cpp" startLineNumber="176" endLineNumber="194"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\ScoringObject.cpp" startLineNumber="227" endLineNumber="244"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\ScoringObject.cpp" startLineNumber="272" endLineNumber="289"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\ScoringObject.cpp" startLineNumber="24" endLineNumber="40"/>
            <text>
<![CDATA[double L1Scoring::score(const BowVector &v1, const BowVector &v2) const
{
  BowVector::const_iterator v1_it, v2_it;
  const BowVector::const_iterator v1_end = v1.end();
  const BowVector::const_iterator v2_end = v2.end();
  
  v1_it = v1.begin();
  v2_it = v2.begin();
  
  double score = 0;
  
  while(v1_it != v1_end && v2_it != v2_end)
  {
    const WordValue& vi = v1_it->second;
    const WordValue& wi = v2_it->second;
    
    if(v1_it->first == v2_it->first)
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="b92816e7d919fddce97eb79c10176921">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="144" endLineNumber="163"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="67" endLineNumber="77"/>
            <text>
<![CDATA[signals:
    void calibDataGrabbedSignal();
    void calibDataGrabbedErrorSignal();
    void calibDataRemovedSignal();
    void calibDataRemovedErrorSignal();
    void sensorCalibratedSignal();
    void sensorCalibratedErrorSignal();
    void calibResultLoadedSignal();
    void calibResultLoadedErrorSignal();
    void calibResultSavedSignal();
    void calibResultSavedErrorSignal();
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="9b6995320eb371391842e7af0954ae18">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="29" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="72" endLineNumber="84"/>
            <text>
<![CDATA[CrossWalk vmap;
ObstaclePoints g_obstacle;

/* Config Parameter */
double g_detection_range = 0;                   // if obstacle is in this range, stop
double g_deceleration_range = 1.8;              // if obstacle is in this range, decelerate
int g_threshold_points = 15;
double g_detection_height_top = 2.0;  // actually +2.0m
double g_detection_height_bottom = -2.0;
double g_others_distance = 8.0;            // meter: stopping distance from obstacles (using VSCAN)
double g_decel = 1.5;                      // (m/s) deceleration
double g_velocity_change_limit = 2.778;    // (m/s) about 10 km/h
double g_temporal_waypoints_size = 100.0;  // meter
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="b945953430d01c09f3092766a2834bd3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\LocalMapping.h" startLineNumber="97" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\LoopClosing.h" startLineNumber="100" endLineNumber="113"/>
            <text>
<![CDATA[    void ResetIfRequested();
    bool mbResetRequested;
    std::mutex mMutexReset;

    bool CheckFinish();
    void SetFinish();
    bool mbFinishRequested;
    bool mbFinished;
    std::mutex mMutexFinish;

    Map* mpMap;
    Tracking* mpTracker;

    KeyFrameDatabase* mpKeyFrameDB;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="a2e518b9c1db7832804f9bb3e10b1602">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="671" endLineNumber="686"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="643" endLineNumber="657"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="620" endLineNumber="635"/>
            <text>
<![CDATA[      DTLane dtlane = vmap_.findByKey(Key<DTLane>(lane.did));
      if (dtlane.did == 0)
        return false;
      response.objects.data.push_back(dtlane);
    }
    return true;
  }

  bool getNode(vector_map_server::GetNode::Request& request,
               vector_map_server::GetNode::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="28047088ddb68d1302e8ddcb5fa44536">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\eigen_types.h" startLineNumber="40" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\eigen_types.h" startLineNumber="35" endLineNumber="47"/>
            <text>
<![CDATA[  typedef Eigen::Matrix<int,2,1,Eigen::ColMajor>                                  Vector2I;
  typedef Eigen::Matrix<int,3,1,Eigen::ColMajor>                                  Vector3I;
  typedef Eigen::Matrix<int,4,1,Eigen::ColMajor>                                  Vector4I;
  typedef Eigen::Matrix<int,Eigen::Dynamic,1,Eigen::ColMajor>                     VectorXI; 

  typedef Eigen::Matrix<float,2,1,Eigen::ColMajor>                                Vector2F; 
  typedef Eigen::Matrix<float,3,1,Eigen::ColMajor>                                Vector3F; 
  typedef Eigen::Matrix<float,4,1,Eigen::ColMajor>                                Vector4F; 
  typedef Eigen::Matrix<float,Eigen::Dynamic,1,Eigen::ColMajor>                   VectorXF; 

  typedef Eigen::Matrix<double,2,1,Eigen::ColMajor>                               Vector2D;
  typedef Eigen::Matrix<double,3,1,Eigen::ColMajor>                               Vector3D;
  typedef Eigen::Matrix<double,4,1,Eigen::ColMajor>                               Vector4D;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="0593adca5c39890ee98d80abaa104b9d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\compat\glconsole.h" startLineNumber="63" endLineNumber="73"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="44" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="43" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="42" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="41" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="40" endLineNumber="50"/>
            <text>
<![CDATA[#define SIZE_FEATP2 100000000
#define SIZE_A_SIZE 1000
#define SIZE_B 100000
#define SIZE_B_DIMS 1000
#define SIZE_ERROR_ARRAY 100
#define SIZE_C 50000000
#define SIZE_PM 10000
#define SIZE_DEF 1000
#define SIZE_NUMPART 100
#define SIZE_PIDX 10000
#define SIZE_DID 10000
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="c75118c06a17eab37d506473bfcfb5c4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\lidar_tracker\nodes\obj_fusion\sync_obj_fusion.cpp" startLineNumber="415" endLineNumber="429"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\range_fusion\sync_range_fusion.cpp" startLineNumber="259" endLineNumber="273"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\sync_obj_reproj.cpp" startLineNumber="259" endLineNumber="273"/>
            <text>
<![CDATA[        ros::spinOnce();
        usleep(100000);
    }
    pthread_mutex_lock(&mutex);
    if(!publish()) {
        /* when to publish is failure, republish */
        struct timespec sleep_time;
        sleep_time.tv_sec = 0;
        sleep_time.tv_nsec = 200000000; //5Hz
        while (!publish() && ros::ok())
            nanosleep(&sleep_time, NULL);
    }
    pthread_mutex_unlock(&mutex);

    ros::spin();
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="67d568d92156aa082a6df2a66cc4d3a3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="19" endLineNumber="31"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="14" endLineNumber="27"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glplatform.h" startLineNumber="28" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="89" endLineNumber="101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="69" endLineNumber="81"/>
            <text>
<![CDATA[  double dist;
  int pid;
  double dir;
  double apara;
  double r;
  double slope;
  double cant;
  double lw;
  double rw;
}DTLane;

typedef struct{
  int lnid;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="f754c7a29eb6078504fcf41214dd2900">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="278" endLineNumber="288"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="277" endLineNumber="287"/>
            <text>
<![CDATA[      mk_red.pose.orientation.x    = 0.0;
      mk_red.pose.orientation.y    = 0.0;
      mk_red.pose.orientation.y    = 0.0;
      mk_red.pose.orientation.w    = 0.0;
      mk_yellow.pose.orientation.x = 0.0;
      mk_yellow.pose.orientation.y = 0.0;
      mk_yellow.pose.orientation.y = 0.0;
      mk_yellow.pose.orientation.w = 0.0;
      mk_green.pose.orientation.x  = 0.0;
      mk_green.pose.orientation.y  = 0.0;
      mk_green.pose.orientation.y  = 0.0;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="3c4dd88cc48cc64f1a68e7dbdebf4581">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="349" endLineNumber="362"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="350" endLineNumber="362"/>
            <text>
<![CDATA[    map += *transformed_scan_ptr;
    added_pose.x = current_pose.x;
    added_pose.y = current_pose.y;
    added_pose.z = current_pose.z;
    added_pose.roll = current_pose.roll;
    added_pose.pitch = current_pose.pitch;
    added_pose.yaw = current_pose.yaw;
    isMapUpdate = true;
  }

  sensor_msgs::PointCloud2::Ptr map_msg_ptr(new sensor_msgs::PointCloud2);
  pcl::toROSMsg(*map_ptr, *map_msg_ptr);
  ndt_map_pub.publish(*map_msg_ptr);
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="97b89d669841ff32e4ace96bd3c0eee7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="31" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="18" endLineNumber="31"/>
            <text>
<![CDATA[    int scoreX;         //mapX - filterX + 1
    int scoreY;         //mapY - filterY + 1
    int mapSize;        //mapX * mapY
    int filterSize;     //filterX * filterY
    int scoreSize;      //scoreX * scoreY
} ConvolutionParam;

typedef struct
{
    float internalDistTrans;
    int internalPoints;
    int v;
    float z;
} DistTransWork;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="98d44708323073e940aca66c9a952f85">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\mainwindow.h" startLineNumber="1" endLineNumber="19"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_toolkit\mainwindow.h" startLineNumber="1" endLineNumber="27"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.h" startLineNumber="1" endLineNumber="28"/>
            <text>
<![CDATA[#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include<QPainter>
#include<QImage>
#include<QTime>

#include<rosinterface.h>
#include<fastvirtualscan.h>
#include<sensor_msgs/LaserScan.h>

//#define DEBUG_GUI

namespace Ui {
class MainWindow;
}

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    explicit MainWindow(QWidget *parent = 0);
    ~MainWindow();

private:
    Ui::MainWindow *ui;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="9f79c9155cc6f8c8d0eb4c9c9763063e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\lib\pos_db\SendData.cpp" startLineNumber="293" endLineNumber="304"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\lib\pos_db\SendData.cpp" startLineNumber="322" endLineNumber="333"/>
            <text>
<![CDATA[		} else {
			n = 0;
		}
#endif /* USE_LIBSSH2 */
		if (n < 0) {
			perror("read");
			DisconnectDB("tunnel failed");
			return -1-n;
		} else if (n == 0) {
			std::cerr << "read timed out" << std::endl;
			DisconnectDB("tunnel failed");
			return -1;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="3859db35bbe5a6a21d6b3689fc3bc7ad">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glvbo.h" startLineNumber="214" endLineNumber="228"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glvbo.h" startLineNumber="180" endLineNumber="193"/>
            <text>
<![CDATA[    glEnableClientState(GL_VERTEX_ARRAY);
    
    if(draw_mesh) {
        ibo.Bind();
        glDrawElements(GL_TRIANGLE_STRIP,ibo.num_elements, ibo.datatype, 0);
        ibo.Unbind();
    }else{
        glPointSize(2.0);
        glDrawArrays(GL_POINTS, 0, vbo.num_elements);
    }
    
    if(draw_color) {
        glDisableClientState(GL_COLOR_ARRAY);
        cbo.Unbind();
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="57c890613f75a680873ab9998c9bec2d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.cpp" startLineNumber="567" endLineNumber="578"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.cpp" startLineNumber="584" endLineNumber="595"/>
            <text>
<![CDATA[          next_node->status = STATUS::OPEN;
          next_node->x      = next_x;
          next_node->y      = next_y;
          next_node->theta  = next_theta;
          next_node->gc     = current_node->gc + move_cost;
          next_node->hc     = next_hc;
          next_node->back   = state.back;
          next_node->parent = current_node;

          next.cost = next_node->gc + next_node->hc;
          openlist_.push(next);
          continue;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="426496cee119f921d02188bef4bba96c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\gnss_localizer\nodes\nmea2tfpose\nmea2tfpose_core.cpp" startLineNumber="41" endLineNumber="58"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_core.cpp" startLineNumber="44" endLineNumber="63"/>
            <text>
<![CDATA[  , current_linear_velocity_(0)
  , command_linear_velocity_(0)
  , param_flag_(-1)
  , const_lookahead_distance_(4.0)
  , const_velocity_(5.0)
  , lookahead_distance_ratio_(2.0)
  , minimum_lookahead_distance_(6.0)
{
  initForROS();

  // initialize for PurePursuit
  pp_.setLinearInterpolationParameter(is_linear_interpolation_);
}

// Destructor
PurePursuitNode::~PurePursuitNode()
{
}

void PurePursuitNode::initForROS()
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="0ac3493d9b585f32f55d89850f5790bc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="133" endLineNumber="147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="167" endLineNumber="182"/>
            <text>
<![CDATA[				if (nbytes < 0) {
					ROS_ERROR_STREAM("udon_socket::udon::send_location: " << std::strerror(errno));
					goto delete_buf;
				}
				nbytes = recv(connect_fd, buf, bufsize, 0);
				if (nbytes < 0) {
					ROS_ERROR_STREAM("recv: " << std::strerror(errno));
					goto delete_buf;
				} else if (nbytes == 0) {
					ROS_INFO_STREAM("disconnect " << astr << ":" << ntohs(client_addr.sin_port));
					goto delete_buf;
				}
			}
		}

		prev = curr;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="3862d4d0ac25be345ece363c7f731d77">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="71" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="76" endLineNumber="89"/>
            <text>
<![CDATA[#define PREDICT_POSE_THRESHOLD 0.5

#define Wa 0.4
#define Wb 0.3
#define Wc 0.3

struct pose
{
  double x;
  double y;
  double z;
  double roll;
  double pitch;
  double yaw;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="20347f13c4f7cfd48e537e02db23a52b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="161" endLineNumber="181"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="192" endLineNumber="212"/>
            <text>
<![CDATA[			catch (tf::TransformException &ex)
			{
				ROS_ERROR("publishCentroids: %s",ex.what());
			}
		}
		in_publisher->publish(centroids_transformed);
	}
	else
	{
		in_publisher->publish(in_centroids);
	}
}

void publishBoundingBoxArray(const ros::Publisher* in_publisher, const jsk_recognition_msgs::BoundingBoxArray& in_boundingbox_array, const std::string& in_target_frame, const std_msgs::Header& in_header)
{
	if (in_target_frame!=in_header.frame_id)
	{
		jsk_recognition_msgs::BoundingBoxArray boundingboxes_transformed;
		boundingboxes_transformed.header = in_header;
		boundingboxes_transformed.header.frame_id = in_target_frame;
		for (auto i=in_boundingbox_array.boxes.begin(); i!= in_boundingbox_array.boxes.end(); i++)
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="5a91e3318a94ca01f73d8aa7bd4f5675">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="737" endLineNumber="752"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="831" endLineNumber="846"/>
            <text>
<![CDATA[		uintptr_t pointer_DIDX = (uintptr_t)sub_dst_DIDX;
		uintptr_t pointer_DID_4 = (uintptr_t)sub_dst_DID_4;
		uintptr_t pointer_PIDX = (uintptr_t)sub_dst_PIDX;
		for(int level=interval; level<L_MAX; level++) {
			int L = level - interval;

			if(feature_size[level*2]+2*pady<MO->MI->max_Y ||(feature_size[level*2+1]+2*padx<MO->MI->max_X))
			{
				continue;
			}

			DIDX_array[L] = (int **)pointer_DIDX;
			pointer_DIDX += (uintptr_t)(NoC*sizeof(int*));

			DID_4_array[L] = (int **)pointer_DID_4;
			pointer_DID_4 += (uintptr_t)(NoC*sizeof(int*));
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="da790a325e62c889059f022c8b3060c8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="29" endLineNumber="85"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="29" endLineNumber="85"/>
            <text>
<![CDATA[static s_CudaErrorStr sCudaDrvErrorString[] =
{
    /**
     * The API call returned with no errors. In the case of query calls, this
     * can also mean that the operation being queried is complete (see
     * ::cuEventQuery() and ::cuStreamQuery()).
     */
    { "CUDA_SUCCESS", 0 },

    /**
     * This indicates that one or more of the parameters passed to the API call
     * is not within an acceptable range of values.
     */
    { "CUDA_ERROR_INVALID_VALUE", 1 },

    /**
     * The API call failed because it was unable to allocate enough memory to
     * perform the requested operation.
     */
    { "CUDA_ERROR_OUT_OF_MEMORY", 2 },

    /**
     * This indicates that the CUDA driver has not been initialized with
     * ::cuInit() or that initialization has failed.
     */
    { "CUDA_ERROR_NOT_INITIALIZED", 3 },

    /**
     * This indicates that the CUDA driver is in the process of shutting down.
     */
    { "CUDA_ERROR_DEINITIALIZED", 4 },

    /**
     * This indicates profiling APIs are called while application is running
     * in visual profiler mode.
    */
    { "CUDA_ERROR_PROFILER_DISABLED", 5 },
    /**
     * This indicates profiling has not been initialized for this context.
     * Call cuProfilerInitialize() to resolve this.
    */
    { "CUDA_ERROR_PROFILER_NOT_INITIALIZED", 6 },
    /**
     * This indicates profiler has already been started and probably
     * cuProfilerStart() is incorrectly called.
    */
    { "CUDA_ERROR_PROFILER_ALREADY_STARTED", 7 },
    /**
     * This indicates profiler has already been stopped and probably
     * cuProfilerStop() is incorrectly called.
    */
    { "CUDA_ERROR_PROFILER_ALREADY_STOPPED", 8 },
    /**
     * This indicates that no CUDA-capable devices were detected by the installed
     * CUDA driver.
     */
    { "CUDA_ERROR_NO_DEVICE (no CUDA-capable devices were detected)", 100 },
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="3f0bd667b52b10ebedc0c55562321d1c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="490" endLineNumber="506"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="366" endLineNumber="380"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="130" endLineNumber="144"/>
            <text>
<![CDATA[    ret[id].lid = std::stoi(tbl[i][1]);
    ret[id].height = std::stod(tbl[i][2]);
    ret[id].width = std::stod(tbl[i][3]);
    ret[id].dir = std::stoi(tbl[i][4]);
    ret[id].linkid = std::stoi(tbl[i][5]);
  }
  return ret;
}

/* for whiteline.csv */
struct WhiteLine {
	int id;
	int lid;
	double width;
	char color;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="8e65ca60e7bdb178409c0ea811c062d6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="539" endLineNumber="552"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="511" endLineNumber="524"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="477" endLineNumber="490"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="451" endLineNumber="464"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="428" endLineNumber="441"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="404" endLineNumber="417"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="379" endLineNumber="392"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="349" endLineNumber="362"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="317" endLineNumber="330"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="292" endLineNumber="305"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="268" endLineNumber="281"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="145" endLineNumber="158"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="117" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="91" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="68" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="574" endLineNumber="587"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="220" endLineNumber="233"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="196" endLineNumber="209"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="172" endLineNumber="185"/>
            <text>
<![CDATA[	int signid;
	int linkid;
};

std::vector<StopLine> read_stopline(const char* filename)
{
  int max_id;
  Tbl tbl = read_csv(filename, &max_id);
  size_t i, n = tbl.size();
  std::vector<StopLine> ret(max_id + 1);
  for (i=0; i<n; i++) {
    int id = std::stoi(tbl[i][0]);
    ret[id].id = id;
    ret[id].lid = std::stoi(tbl[i][1]);
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="3dd2a132caa74f8d4f16d5101df9e785">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_receiver\udon_receiver.cpp" startLineNumber="76" endLineNumber="93"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="256" endLineNumber="273"/>
            <text>
<![CDATA[close_listen_fd:
	close(listen_fd);
}

} // namespace

int main(int argc, char **argv)
{
	ros::init(argc, argv, "udon_sender");

	ros::NodeHandle n;

	int backlog;
	n.param<int>("/udon_sender/backlog", backlog, 128);
	int bufsize;
	n.param<int>("/udon_sender/bufsize", bufsize, 4096);
	int period;
	n.param<int>("/udon_sender/period", period, 200);
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="6f5376763630aa41d4c232c13c1a1c4a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="561" endLineNumber="579"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1255" endLineNumber="1273"/>
            <text>
<![CDATA[    velodynesub->startReceiveSlot();
    return 1;
}

//=========================================================================

CalibrateCameraLidarChessboardBase::CalibrateCameraLidarChessboardBase(float maxRange, cv::Size2f patternSize, cv::Size2i patternNum, QWidget *parent)
    : CalibrateCameraChessboardBase(patternSize,patternNum,parent)
{
    maxrange=maxRange;

    caliblidartab=new QTabWidget;
    calibsplitter->addWidget(caliblidartab);
    calibsplitter->setStretchFactor(calibsplitter->indexOf(caliblidartab),1);

    caliblidarpointstab=new QTabWidget;
    caliblidartab->addTab(caliblidarpointstab,"Chessboard Points");

    calibrationerrorshow=new QLabel;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="d6783a5cb2b3c3429d12333abfaa3b66">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="150" endLineNumber="161"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="166" endLineNumber="177"/>
            <text>
<![CDATA[				ssize_t nbytes = udon_socket::udon::send_location(connect_fd, curr.location);
				if (nbytes < 0) {
					ROS_ERROR_STREAM("udon_socket::udon::send_location: " << std::strerror(errno));
					goto delete_buf;
				}
				nbytes = recv(connect_fd, buf, bufsize, 0);
				if (nbytes < 0) {
					ROS_ERROR_STREAM("recv: " << std::strerror(errno));
					goto delete_buf;
				} else if (nbytes == 0) {
					ROS_INFO_STREAM("disconnect " << astr << ":" << ntohs(client_addr.sin_port));
					goto delete_buf;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="ea427ea05845fb2508d70b73f2952617">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="547" endLineNumber="561"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="598" endLineNumber="613"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="478" endLineNumber="492"/>
            <text>
<![CDATA[    if (isValidMarker(vector_marker))
      marker_array.markers.push_back(vector_marker);
    else
      ROS_ERROR_STREAM("[createRoadSignMarkerArray] failed createVectorMarker: " << vector);

    if (road_sign.plid != 0)
    {
      visualization_msgs::Marker pole_marker = createPoleMarker("road_sign", id++, pole_color, vmap, pole);
      if (isValidMarker(pole_marker))
        marker_array.markers.push_back(pole_marker);
      else
        ROS_ERROR_STREAM("[createRoadSignMarkerArray] failed createPoleMarker: " << pole);
    }
  }
  return marker_array;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="c1a1b44589054cf86f72179651bd5b16">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="23" endLineNumber="37"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="12" endLineNumber="26"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="42" endLineNumber="52"/>
            <text>
<![CDATA[	int NoP;
	int NoC;
	int interval;
	int L_MAX;
	int sum_size_SQ;
	int max_numpart;
	int max_dim0;
	int max_dim1;
	FLOAT *dst_M;
	int *dst_tmpIx;
	int *dst_tmpIy;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="9e74c3f3dc38eb27f65e299961baea2c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="748" endLineNumber="758"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="323" endLineNumber="333"/>
            <text>
<![CDATA[  lane_waypoint_marker.header.frame_id = "map";
  lane_waypoint_marker.header.stamp = ros::Time();
  lane_waypoint_marker.ns = "local_point_marker";
  lane_waypoint_marker.id = 0;
  lane_waypoint_marker.type = visualization_msgs::Marker::CUBE_LIST;
  lane_waypoint_marker.action = visualization_msgs::Marker::ADD;
  lane_waypoint_marker.scale.x = 0.2;
  lane_waypoint_marker.scale.y = 0.2;
  lane_waypoint_marker.scale.z = 0.2;
  lane_waypoint_marker.color.r = 1.0;
   lane_waypoint_marker.color.a = 1.0;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="a17f7481982b3b1e897be09d11086706">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="127" endLineNumber="144"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="168" endLineNumber="185"/>
            <text>
<![CDATA[  return 1;
}

int zero_matrix2d(double dst[2][2])
{
  dst[0][0] = 0;
  dst[0][1] = 0;
  dst[1][0] = 0;
  dst[1][1] = 0;
  return 1;
}

int zero_matrix3d(double dst[3][3])
{
  int i, j;
  for (i = 0; i < 3; i++)
  {
    for (j = 0; j < 3; j++)
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="7009bbfb59390bf46a5a60d6ce0ec5c1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="189" endLineNumber="203"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="183" endLineNumber="197"/>
            <text>
<![CDATA[	if(res != CUDA_SUCCESS) {
		printf("cuMemcpyHtoD(ssize) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
	}

	res = cuMemcpyHtoD(size_score_dev, &size_score_array[0], NoC*sizeof(int));
	if(res != CUDA_SUCCESS) {
		printf("cuMemcpyHtoD(size_score) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
	}

	res = cuMemcpyHtoD(RY_dev, &RY_array[0], NoC*sizeof(int));
	if(res != CUDA_SUCCESS) {
		printf("cuMemcpyHtoD(RY) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="0281f065472c337f1203e75b24450bc4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="243" endLineNumber="274"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="22" endLineNumber="56"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="37" endLineNumber="54"/>
            <text>
<![CDATA[    int max_intensity;
    int min_intensity;
    float focal_distance;
    float focal_slope;

    /** cached values calculated when the calibration file is read */
    float cos_rot_correction;              ///< cached cosine of rot_correction
    float sin_rot_correction;              ///< cached sine of rot_correction
    float cos_vert_correction;             ///< cached cosine of vert_correction
    float sin_vert_correction;             ///< cached sine of vert_correction

    int laser_ring;                        ///< ring number for this laser
  };

  /** \brief Calibration class storing entire configuration for the Velodyne */
  class Calibration {

  public:
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="50a40a8dd71033d62142ba28d192f99d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lane_detector\nodes\lane_detector\lane_detector.cpp" startLineNumber="413" endLineNumber="424"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lane_detector\nodes\lane_detector\lane_detector.cpp" startLineNumber="426" endLineNumber="437"/>
            <text>
<![CDATA[  for (std::size_t i = 0; i < left.size(); ++i)
    {
      CvPoint org_p0 = left[i].p0;
      org_p0.y += org_offset;
      CvPoint org_p1 = left[i].p1;
      org_p1.y += org_offset;
#ifdef USE_POSIX_SHARED_MEMORY
#ifdef SHOW_DETAIL
      cvLine(temp_frame, left[i].p0, left[i].p1, RED, 2);
#endif
      cvLine(org_frame, org_p0, org_p1, RED, 2);
#endif
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="0e22e58ede85d1ee80e86f430e3e1acf">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set.cpp" startLineNumber="317" endLineNumber="338"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set.cpp" startLineNumber="269" endLineNumber="290"/>
            <text>
<![CDATA[        stop_point_count++;
        geometry_msgs::Point point_temp;
        point_temp.x = p.x;
        point_temp.y = p.y;
        point_temp.z = p.z;
	obstacle_points->setStopPoint(calcAbsoluteCoordinate(point_temp, localizer_pose.pose));
      }
    }

    // there is an obstacle if the number of points exceeded the threshold
    if (stop_point_count > points_threshold)
    {
      stop_obstacle_waypoint = i;
      break;
    }

    obstacle_points->clearStopPoints();

    // check next waypoint...
  }

  return stop_obstacle_waypoint;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="3e5e79dfe5856d006c82e960d1ba5d51">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="152" endLineNumber="171"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="136" endLineNumber="155"/>
            <text>
<![CDATA[  return 1;
}

int identity_matrix3d(double dst[3][3])
{
  int i, j;
  for (i = 0; i < 3; i++)
  {
    for (j = 0; j < 3; j++)
    {
      if (i == j)
        dst[i][j] = 1;
      else
        dst[i][j] = 0;
    }
  }
  return 1;
}

int identity_matrix6d(double dst[6][6])
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="a2bd0575474fa134c974f898ed066fd6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="117" endLineNumber="128"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="115" endLineNumber="127"/>
            <text>
<![CDATA[	ctx = (CUcontext*)malloc(device_num*sizeof(CUcontext));

	module = (CUmodule*)malloc(device_num*sizeof(CUmodule));

	func_process_root = (CUfunction*)malloc(device_num*sizeof(CUfunction));
	func_process_part = (CUfunction*)malloc(device_num*sizeof(CUfunction));
	func_dt1d_x = (CUfunction*)malloc(device_num*sizeof(CUfunction));
	func_dt1d_y = (CUfunction*)malloc(device_num*sizeof(CUfunction));
	func_calc_a_score = (CUfunction*)malloc(device_num*sizeof(CUfunction));
	func_inverse_Q = (CUfunction*)malloc(device_num*sizeof(CUfunction));
	func_calc_hist    = (CUfunction*)malloc(device_num*sizeof(CUfunction));
	func_calc_norm    = (CUfunction*)malloc(device_num*sizeof(CUfunction));
	func_calc_feat    = (CUfunction*)malloc(device_num*sizeof(CUfunction));
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="f054ad2253031e3623828a6a8ccc4126">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="2025" endLineNumber="2035"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="2028" endLineNumber="2038"/>
            <text>
<![CDATA[                  stbtt__handle_clipped_edge(scanline,x,e, x0,y0, x1,y1);
                  stbtt__handle_clipped_edge(scanline,x,e, x1,y1, x3,y3);
               } else if (x3 < x1 && x0 > x1) {  // two segments across x, down-left
                  stbtt__handle_clipped_edge(scanline,x,e, x0,y0, x1,y1);
                  stbtt__handle_clipped_edge(scanline,x,e, x1,y1, x3,y3);
               } else if (x0 < x2 && x3 > x2) {  // two segments across x+1, down-right
                  stbtt__handle_clipped_edge(scanline,x,e, x0,y0, x2,y2);
                  stbtt__handle_clipped_edge(scanline,x,e, x2,y2, x3,y3);
               } else if (x3 < x2 && x0 > x2) {  // two segments across x+1, down-left
                  stbtt__handle_clipped_edge(scanline,x,e, x0,y0, x2,y2);
                  stbtt__handle_clipped_edge(scanline,x,e, x2,y2, x3,y3);
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="968a34e0dccf6f390f7df01a2b1a92bb">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="21" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="33" endLineNumber="57"/>
            <text>
<![CDATA[void CalibrationToolkitBase::removeCalibDataSlot()
{
    if(removeCalibData())
    {
        emit calibDataRemovedSignal();
    }
    else
    {
        emit calibDataRemovedErrorSignal();
    }
}

void CalibrationToolkitBase::calibrateSensorSlot()
{
    if(calibrateSensor())
    {
        emit sensorCalibratedSignal();
    }
    else
    {
        emit sensorCalibratedErrorSignal();
    }
}

void CalibrationToolkitBase::loadCalibResultSlot()
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="4b5c0f8a9d417e86376816c850b05754">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="301" endLineNumber="313"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\search_info_ros.h" startLineNumber="36" endLineNumber="49"/>
            <text>
<![CDATA[  nav_msgs::OccupancyGrid map_;
  geometry_msgs::PoseStamped start_pose_global_;
  geometry_msgs::PoseStamped goal_pose_global_;
  geometry_msgs::PoseStamped start_pose_local_;
  geometry_msgs::PoseStamped goal_pose_local_;
  // Transform which converts global frame (/map in Autoware) to OccupancyGrid frame
  tf::Transform ogm2map_;
  tf::TransformListener tf_listener_;
  geometry_msgs::Pose current_pose_;

  // set data flag
  bool map_set_;
  bool start_set_;
  bool goal_set_;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="8139e0486c4b15236a6bf09c287e76e4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="388" endLineNumber="402"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\kf_track\sync_track.cpp" startLineNumber="259" endLineNumber="273"/>
            <text>
<![CDATA[        ros::spinOnce();
        usleep(100000);
    }
    pthread_mutex_lock(&mutex);
    if(!publish()) {
        /* when to publish is failure, republish */
        struct timespec sleep_time;
        sleep_time.tv_sec = 0;
        sleep_time.tv_nsec = 200000000; //5Hz
        while (!publish() || ros::ok())
            nanosleep(&sleep_time, NULL);
    }
    pthread_mutex_unlock(&mutex);

    ros::spin();
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="1d3c540e3933631096368e34623ebdb9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_points_map_update\sample_points_map_update.cpp" startLineNumber="65" endLineNumber="80"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_trajectory\sample_trajectory.cpp" startLineNumber="39" endLineNumber="54"/>
            <text>
<![CDATA[typedef std::vector<std::vector<std::string>> Tbl;

Tbl read_csv(const char* filename)
{
  std::ifstream ifs(filename);
  std::string line;

  Tbl tbl;

  while (std::getline(ifs, line)) {
    std::istringstream ss(line);

    std::vector<std::string> columns;
    std::string column;
    while (std::getline(ss, column, ',')) {
      columns.push_back(column);
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="3a1606f7dd04b6f3fde600669acc74f0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="116" endLineNumber="134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\kf_track\sync_track.cpp" startLineNumber="137" endLineNumber="155"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\sync_obj_reproj.cpp" startLineNumber="137" endLineNumber="155"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\range_fusion\sync_range_fusion.cpp" startLineNumber="137" endLineNumber="155"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\lidar_tracker\nodes\obj_fusion\sync_obj_fusion.cpp" startLineNumber="138" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\dpm_sync_2.cpp" startLineNumber="110" endLineNumber="128"/>
            <text>
<![CDATA[                return true;
            }

            for (it++; it != vscan_image_ringbuf.end(); it++) {
                if (fabs_time_diff(&(image_obj_ringbuf.front().header), &((it-1)->header))
                    < fabs_time_diff(&(image_obj_ringbuf.front().header), &(it->header))) {
                    p_vscan_image_buf = &*(it-1);
                    break;
                }
            }

            if (it == vscan_image_ringbuf.end()) {
                p_vscan_image_buf = &(vscan_image_ringbuf.back());
            }
        }
        publish_msg(p_image_obj_buf, p_vscan_image_buf);
        if (image_obj_ranged_flag == true){
            buf_flag = false;
            image_obj_ranged_flag = false;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="1f0ca28e85f3b5e80b1941f06cb8adcb">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="117" endLineNumber="128"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="132" endLineNumber="143"/>
            <text>
<![CDATA[				nbytes = udon_socket::udon::send_location(connect_fd, curr.location);
				if (nbytes < 0) {
					ROS_ERROR_STREAM("udon_socket::udon::send_location: " << std::strerror(errno));
					goto delete_buf;
				}
				nbytes = recv(connect_fd, buf, bufsize, 0);
				if (nbytes < 0) {
					ROS_ERROR_STREAM("recv: " << std::strerror(errno));
					goto delete_buf;
				} else if (nbytes == 0) {
					ROS_INFO_STREAM("disconnect " << astr << ":" << ntohs(client_addr.sin_port));
					goto delete_buf;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="6523127f9cce104d5fa6af6248840cc1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="167" endLineNumber="182"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_mobility\sample_mobility.cpp" startLineNumber="134" endLineNumber="147"/>
            <text>
<![CDATA[    geo.llh_to_xyz(car.lat, car.lon, car.ele);
    car.x = geo.x();
    car.y = geo.y();
    car.z = geo.z();

    // swap x and y
    geometry_msgs::Point p;
    p.x = car.y;
    p.y = car.x;
    p.z = car.z;
    cars.push_back(car);
    sphere_list.points.push_back(p);

    car.dump();
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="b24fdda890151f406b6dcf6c50782fcb">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl_es_compat.h" startLineNumber="19" endLineNumber="29"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl_es_compat.h" startLineNumber="29" endLineNumber="40"/>
            <text>
<![CDATA[    #define glOrtho                     glOrthof
    #define glGenFramebuffersEXT        glGenFramebuffersOES
    #define glDeleteFramebuffersEXT     glDeleteFramebuffersOES
    #define glBindFramebufferEXT        glBindFramebufferOES
    #define glDrawBuffers               glDrawBuffersOES
    #define glFramebufferTexture2DEXT   glFramebufferTexture2DOES
    #define GL_FRAMEBUFFER_EXT          GL_FRAMEBUFFER_OES
    #define GL_DEPTH_COMPONENT24        GL_DEPTH_COMPONENT24_OES
    #define GL_COLOR_ATTACHMENT0_EXT    GL_COLOR_ATTACHMENT0_OES
#endif

#define glGetDoublev                glGetFloatv
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="699e1f766b8cc74b7ec30e70910d44da">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="102" endLineNumber="118"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="88" endLineNumber="103"/>
            <text>
<![CDATA[static pcl::NormalDistributionsTransform<pcl::PointXYZI, pcl::PointXYZI> ndt;
// Default values
static int max_iter = 30; // Maximum iterations
static float ndt_res = 1.0; // Resolution
static double step_size = 0.1; // Step size
static double trans_eps = 0.01; // Transformation epsilon

// Leaf size of VoxelGrid filter.
static double voxel_leaf_size = 2.0;

static ros::Time callback_start, callback_end, t1_start, t1_end, t2_start, t2_end, t3_start, t3_end, t4_start, t4_end, t5_start, t5_end;
static ros::Duration d_callback, d1, d2, d3, d4, d5;

static ros::Publisher ndt_map_pub;
static ros::Publisher reference_map_pub;
static ros::Publisher current_pose_pub;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="4184d9fdbc761424d21cb9a9d4fbc66a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\librcnn\include\rcnn_detector.h" startLineNumber="1" endLineNumber="34"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\include\ssd_detector.h" startLineNumber="1" endLineNumber="31"/>
            <text>
<![CDATA[#ifndef SSD_DETECTOR_H_
#define SSD_DETECTOR_H_

#include <caffe/caffe.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <algorithm>
#include <iomanip>
#include <iosfwd>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "rect_class_score.h"

namespace Ssd
{
	enum SsdDetectorClasses
	{
		BACKGROUND,
		PLANE, BICYCLE, BIRD, BOAT,
		BOTTLE, BUS, CAR, CAT, CHAIR,
		COW, TABLE, DOG, HORSE,
		MOTORBIKE, PERSON, PLANT,
		SHEEP, SOFA, TRAIN, TV, NUM_CLASSES
	};
}

class SsdDetector
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="f79610acce4dc61b2b5e960a4723cc55">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="42" endLineNumber="53"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="114" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\Math.h" startLineNumber="8" endLineNumber="23"/>
            <text>
<![CDATA[#ifndef SRC_MATH_H_
#define SRC_MATH_H_

#include <Eigen/Eigen>
#include <math.h>


typedef Eigen::Vector2f Point2;
typedef Eigen::Vector3f Point3;
typedef Eigen::Vector3f Vector3;
typedef Eigen::Vector4f Point4;
typedef Eigen::Vector4f Vector4;
typedef Eigen::Vector2f Vector2;
typedef Eigen::Quaternionf Quaternion;
typedef Eigen::Matrix4f Matrix4;
typedef Eigen::Matrix2f Matrix2;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="9f2c19d84373dd1f8a3e3fb4c3daa806">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="527" endLineNumber="538"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="370" endLineNumber="381"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="364" endLineNumber="375"/>
            <text>
<![CDATA[  q.setRPY(current_pose.roll, current_pose.pitch, current_pose.yaw);
  current_pose_msg.header.frame_id = "map";
  current_pose_msg.header.stamp = scan_time;
  current_pose_msg.pose.position.x = current_pose.x;
  current_pose_msg.pose.position.y = current_pose.y;
  current_pose_msg.pose.position.z = current_pose.z;
  current_pose_msg.pose.orientation.x = q.x();
  current_pose_msg.pose.orientation.y = q.y();
  current_pose_msg.pose.orientation.z = q.z();
  current_pose_msg.pose.orientation.w = q.w();

  current_pose_pub.publish(current_pose_msg);
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="90629257eef5d987ec36599b5ccecd86">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\plot\plotter.cpp" startLineNumber="640" endLineNumber="650"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\plot\plotter.cpp" startLineNumber="643" endLineNumber="653"/>
            <text>
<![CDATA[        ret.factor = 1.0f / (float)M_PI;
        ret.symbol = "pi";
    }else if( std::abs(tick/M_PI_4 - floor(tick/M_PI_4)) < eps ) {
        ret.factor = 1.0f / (float)M_PI;
        ret.symbol = "pi";
    }else if( std::abs(tick/M_SQRT2 - floor(tick/M_SQRT2)) < eps ) {
        ret.factor = 1.0f / (float)M_SQRT2;
        ret.symbol = "\251 2";
    }else if( std::abs(tick/M_E - floor(tick/M_E)) < eps ) {
        ret.factor = 1.0f / (float)M_E;
        ret.symbol = "e";
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="dd32cdfe176ac0379614e9f4e1cf47af">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\plot\plotter.cpp" startLineNumber="84" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\plot\plotter.cpp" startLineNumber="148" endLineNumber="159"/>
            <text>
<![CDATA[            "    gl_Position = vec4(u_scale * (a_position + u_offset),0,1);\n"
            "    x = a_position.x;"
            "    y = a_position.y;"
            "}\n";

    static const std::string fs1 =
        #ifdef HAVE_GLES_2
            "precision mediump float;\n"
        #endif // HAVE_GLES_2
            "varying float x;\n"
            "varying float y;\n"
            "void main() {\n";
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="1ed55875ef0a68b556e3348d390744a7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\gnss_localizer\nodes\nmea2tfpose\nmea2tfpose_core.h" startLineNumber="31" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\state\state_machine\nodes\state_machine\state_machine_core.h" startLineNumber="31" endLineNumber="56"/>
            <text>
<![CDATA[#ifndef STATE_MACHINE_CORE_H
#define STATE_MACHINE_CORE_H

// ROS includes
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <std_msgs/Int32.h>

// User Defined includes
#include "runtime_manager/traffic_light.h"
#include "state_machine.h"

namespace state_machine
{
class StateMachineNode
{
public:
  StateMachineNode();
  ~StateMachineNode();

  void run();

private:
  // handle
  ros::NodeHandle nh_;
  ros::NodeHandle private_nh_;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="6b2ad51418db9c13e12524ea0d501f2a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="99" endLineNumber="109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="95" endLineNumber="105"/>
            <text>
<![CDATA[      case GREEN:
        label = "GREEN";
        textColor = CV_RGB(0, 255, 0);
        break;
      case YELLOW:
        label = "YELLOW";
        textColor = CV_RGB(255, 255, 0);
        break;
      case RED:
        label = "RED";
        textColor = CV_RGB(255, 0, 0);
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="7040ce12313a76d4facbf1b72376732a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="151" endLineNumber="165"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="145" endLineNumber="159"/>
            <text>
<![CDATA[	if(res != CUDA_SUCCESS) {
		printf("cuMemAlloc(ssize) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
	}

	res = cuMemAlloc(&size_score_dev, NoC*sizeof(int));
	if(res != CUDA_SUCCESS) {
		printf("cuMemAlloc(size_score) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
	}

	res = cuMemAlloc(&RY_dev, NoC*sizeof(int));
	if(res != CUDA_SUCCESS) {
		printf("cuMemAlloc(RY) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="476512ec3643bf4938ec16cbe74ac4a6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\camera_lidar2d_offline_calib.cpp" startLineNumber="199" endLineNumber="209"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\camera_lidar2d_offline_calib.cpp" startLineNumber="198" endLineNumber="208"/>
            <text>
<![CDATA[        cvmSet(affine_g2c, 0, 0, cvmGet(m_rotation, 0, 0));
        cvmSet(affine_g2c, 0, 1, cvmGet(m_rotation, 0, 1));
        cvmSet(affine_g2c, 0, 2, cvmGet(m_rotation, 0, 2));
        cvmSet(affine_g2c, 1, 0, cvmGet(m_rotation, 1, 0));
        cvmSet(affine_g2c, 1, 1, cvmGet(m_rotation, 1, 1));
        cvmSet(affine_g2c, 1, 2, cvmGet(m_rotation, 1, 2));
        cvmSet(affine_g2c, 2, 0, cvmGet(m_rotation, 2, 0));
        cvmSet(affine_g2c, 2, 1, cvmGet(m_rotation, 2, 1));
        cvmSet(affine_g2c, 2, 2, cvmGet(m_rotation, 2, 2));
        cvmSet(affine_g2c, 0, 3, cvmGet(v_g2c, 0, 0));
        cvmSet(affine_g2c, 1, 3, cvmGet(v_g2c, 0, 1));
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="78a0df4519bf28cebc692edcd9e0d762">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="132" endLineNumber="147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="150" endLineNumber="165"/>
            <text>
<![CDATA[vector_map::Point find_end_point(const VectorMap& vmap, const vector_map::Lane& lane)
{
	vector_map::Point error;
	error.pid = -1;

	for (const vector_map::Node& n : vmap.nodes) {
		if (n.nid != lane.fnid)
			continue;
		for (const vector_map::Point& p : vmap.points) {
			if (p.pid != n.pid)
				continue;
			return p;
		}
	}

	return error;
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="8a724599744364774d0d38f226fde29d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set.cpp" startLineNumber="154" endLineNumber="166"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="485" endLineNumber="497"/>
            <text>
<![CDATA[  if (crosswalk_id > 0)
    scale = vmap.getDetectionPoints(crosswalk_id).width;
  crosswalk_marker.scale.x = scale;
  crosswalk_marker.scale.y = scale;
  crosswalk_marker.scale.z = scale;
  crosswalk_marker.color.a = 0.5;
  crosswalk_marker.color.r = 0.0;
  crosswalk_marker.color.g = 1.0;
  crosswalk_marker.color.b = 0.0;
  crosswalk_marker.frame_locked = true;

  // set marker points coordinate
  for (int i = 0; i < g_search_distance; i++)
]]>
            </text>
        </set>
        <set lineCount="11" fingerprint="080cdf650d8a7e083f01b6b434511941">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\voxel_grid.h" startLineNumber="340" endLineNumber="358"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\voxel_grid.h" startLineNumber="670" endLineNumber="693"/>
            <text>
<![CDATA[        Eigen::Array4i diff2min = min_b_ - ijk;
        Eigen::Array4i diff2max = max_b_ - ijk;
        std::vector<int> neighbors (relative_coordinates.cols());
        for (int ni = 0; ni < relative_coordinates.cols (); ni++)
        {
          Eigen::Vector4i displacement = (Eigen::Vector4i() << relative_coordinates.col(ni), 0).finished();
          // checking if the specified cell is in the grid
          if ((diff2min <= displacement.array()).all() && (diff2max >= displacement.array()).all())
            neighbors[ni] = leaf_layout_[((ijk + displacement - min_b_).dot (divb_mul_))]; // .at() can be omitted
          else
            neighbors[ni] = -1; // cell is out of bounds, consider it empty
        }
        return (neighbors);
      }
      
      /** \brief Returns the indices in the resulting downsampled cloud of the points at the specified grid coordinates,
        * relative to the grid coordinates of the specified point (or -1 if the cell was empty/out of bounds).
        * \param[in] x the X coordinate of the reference point (corresponding cell is allowed to be empty/out of bounds)
        * \param[in] y the Y coordinate of the reference point (corresponding cell is allowed to be empty/out of bounds)
        * \param[in] z the Z coordinate of the reference point (corresponding cell is allowed to be empty/out of bounds)
        * \param[out] relative_coordinates vector with the elements being the coordinates of the requested cells, relative to the reference point's cell
        * \note for efficiency, user must make sure that the saving of the leaf layout is enabled and filtering performed
        */
      inline std::vector<int> 
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="80d6d2af4b5bd83bed697f774b7ce757">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\voxel_grid_filter\voxel_grid_filter.cpp" startLineNumber="44" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\random_filter\random_filter.cpp" startLineNumber="43" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\distance_filter\distance_filter.cpp" startLineNumber="44" endLineNumber="64"/>
            <text>
<![CDATA[ros::Publisher filtered_points_pub;

static int sample_num = 1000;

static ros::Publisher points_downsampler_info_pub;
static points_downsampler::PointsDownsamplerInfo points_downsampler_info_msg;

static std::chrono::time_point<std::chrono::system_clock> filter_start, filter_end;

static bool _output_log = false;
static std::ofstream ofs;
static std::string filename;

static std::string POINTS_TOPIC;

static void config_callback(const runtime_manager::ConfigDistanceFilter::ConstPtr& input)
{
  sample_num = input->sample_num;
}

static void scan_callback(const sensor_msgs::PointCloud2::ConstPtr& input)
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="d2efb49ef038bf1eccea1d14fc2e7a8d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\obj_fusion\obj_fusion.cpp" startLineNumber="226" endLineNumber="242"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\obj_fusion\obj_fusion.cpp" startLineNumber="172" endLineNumber="189"/>
            <text>
<![CDATA[  UNLOCK(mtx_reprojected_positions);

  /* confirm obj_label is subscribed */
  LOCK(mtx_flag_obj_label);
  isReady_obj_label = true;
  UNLOCK(mtx_flag_obj_label);

  /* Publish fusion result if both of topics are ready */
  if (isReady_obj_label && isReady_cluster_centroids) {
    fusion_objects();

    LOCK(mtx_flag_obj_label);
    isReady_obj_label = false;
    UNLOCK(mtx_flag_obj_label);

    LOCK(mtx_flag_cluster_centroids);
    isReady_cluster_centroids = false;
    UNLOCK(mtx_flag_cluster_centroids);
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="6fd2a68696d30b4aea10799d9c436516">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\dpm_sync_2.cpp" startLineNumber="156" endLineNumber="169"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\dpm_sync_2.cpp" startLineNumber="139" endLineNumber="152"/>
            <text>
<![CDATA[void image_obj_callback(const cv_tracker::image_obj::ConstPtr& image_obj_msg) {
    pthread_mutex_lock(&mutex);
    image_obj_ringbuf.push_front(*image_obj_msg);
    //vscan_image is empty
    if (vscan_image_ringbuf.begin() == vscan_image_ringbuf.end()) {
        ROS_INFO("vscan_image ring buffer is empty");
        buf_flag = false;
        pthread_mutex_unlock(&mutex);
        return;
    }
    buf_flag = true;
    pthread_mutex_unlock(&mutex);
    if (image_obj_ranged_flag == true) {
        publish();
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="254d56e5053992a1ac8ac28c13ed89a9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\var\var.h" startLineNumber="183" endLineNumber="197"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\var\var.h" startLineNumber="158" endLineNumber="172"/>
            <text>
<![CDATA[        VarValueGeneric*& v = VarState::I()[name];
        if(v && !v->Meta().generic) {
            InitialiseFromGeneric(v);
        }else{
            // new VarValue<T> (owned by VarStore)
            VarValue<T>* nv;
            if(v) {
                // Specialise generic variable
                nv = new VarValue<T>( Convert<T,std::string>::Do( v->str->Get() ) );
                delete v;
            }else{
                nv = new VarValue<T>(value);
            }
            v = nv;
            var = nv;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="58699e41e962fcb248f5770eb9f8760c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="71" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="16" endLineNumber="30"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="21" endLineNumber="34"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\include\astar_util.h" startLineNumber="37" endLineNumber="52"/>
            <text>
<![CDATA[  double shift_x;
  double shift_y;
  double rotation;
  double step;
  int index_theta;
  bool curve;
  bool back;
};

// For open list and goal list
struct SimpleNode
{
  int index_x;
  int index_y;
  int index_theta;
  double cost;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="7d3f64d371294f5e40c4b3fca25f0c20">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="477" endLineNumber="492"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="597" endLineNumber="613"/>
            <text>
<![CDATA[      visualization_msgs::Marker line_marker = createLinkedLineMarker("street_light", id++, light_color, vmap, line);
      if (isValidMarker(line_marker))
        marker_array.markers.push_back(line_marker);
      else
        ROS_ERROR_STREAM("[createStreetLightMarkerArray] failed createLinkedLineMarker: " << line);
    }

    if (street_light.plid != 0)
    {
      visualization_msgs::Marker pole_marker = createPoleMarker("street_light", id++, pole_color, vmap, pole);
      if (isValidMarker(pole_marker))
        marker_array.markers.push_back(pole_marker);
      else
        ROS_ERROR_STREAM("[createStreetLightMarkerArray] failed createPoleMarker: " << pole);
    }
  }
  return marker_array;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="1c21c56b12b02be5d83cfcb0c96516a4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\camera_lidar2d_offline_calib.cpp" startLineNumber="216" endLineNumber="227"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_test\camera_lidar2d_offline_calib.cpp" startLineNumber="214" endLineNumber="225"/>
            <text>
<![CDATA[        printf("--transration v_g2l\n");
        print_param(v_g2l);
        printf("--transration v_g2c\n");
        print_param(v_g2c);
        printf("--transration m_rotation\n");
        print_param(m_rotation);
        printf("--transration l2g\n");
        print_param(affine_l2g);
        printf("--transration g2c\n");
        print_param(affine_g2c);
        printf("--transration l2c\n");
        print_param(affine_l2c);
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="a36982aea7d01341517858eeb984b6c1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="445" endLineNumber="457"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\local2global\local2global.cpp" startLineNumber="131" endLineNumber="143"/>
            <text>
<![CDATA[        previous_pos.x = initial_x;
        previous_pos.y = initial_y;
        previous_pos.z = initial_z;
        previous_pos.roll = initial_roll;
        previous_pos.pitch = initial_pitch;
        previous_pos.yaw = initial_yaw;

        current_pos.x = initial_x;
        current_pos.y = initial_y;
        current_pos.z = initial_z;
        current_pos.roll = initial_roll;
        current_pos.pitch = initial_pitch;
        current_pos.yaw = initial_yaw;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="f5562056b797d5141cae72364efca48a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\detect.cpp" startLineNumber="57" endLineNumber="75"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\detect.cpp" startLineNumber="54" endLineNumber="73"/>
            <text>
<![CDATA[	FLOAT *boxes = dpm_ttic_cpu_get_boxes(feature,scales,featsize,MO,D_NUMS,A_SCORE,thresh);

	free(scales);
	free(featsize);
	dpm_ttic_cpu_free_features(feature, MO->MI);

	return boxes;
}

RESULT *dpm_ttic_cpu_car_detection(IplImage *image, MODEL *model, FLOAT thresh, int *D_NUMS,
				   FLOAT *A_SCORE,FLOAT overlap)
{
	FLOAT *boxes = detect(image,model,thresh,D_NUMS,A_SCORE);	//detect high-score region
	FLOAT *rects = dpm_ttic_cpu_nms(boxes,overlap,D_NUMS,model);	//get boundary-rectangles of car
	RESULT *result = dpm_ttic_cpu_get_new_rects(image,model,rects,D_NUMS);	//get current result

	s_free(boxes);
	s_free(rects);

	return result;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="e93b06fb16ad122621646cac3c8cef91">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="620" endLineNumber="634"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="606" endLineNumber="620"/>
            <text>
<![CDATA[	VectorMap null_vmap;

	vector_map::Point departure_point;
	departure_point.pid = -1;
	if (lno == LNO_ALL)
		departure_point = find_nearest_point(lane_vmap, coarse_vmap.points.front());
	else {
		for (int i = lno; i >= LNO_CROSSING; --i) {
			departure_point = find_departure_point(lane_vmap, i, coarse_vmap.points, search_radius);
			if (departure_point.pid >= 0)
				break;
		}
	}
	if (departure_point.pid < 0)
		return null_vmap;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="99f8a5fbb0a9399d7aab56ecc8b072dd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="801" endLineNumber="818"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="734" endLineNumber="751"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="706" endLineNumber="723"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="678" endLineNumber="695"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="650" endLineNumber="667"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="622" endLineNumber="639"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="891" endLineNumber="908"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="863" endLineNumber="880"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="835" endLineNumber="852"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="425" endLineNumber="442"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="397" endLineNumber="414"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="369" endLineNumber="386"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="341" endLineNumber="358"/>
            <text>
<![CDATA[    if (zebra_zone.aid == 0)
    {
      ROS_ERROR_STREAM("[createZebraZoneMarkerArray] invalid zebra_zone: " << zebra_zone);
      continue;
    }

    Area area = vmap.findByKey(Key<Area>(zebra_zone.aid));
    if (area.aid == 0)
    {
      ROS_ERROR_STREAM("[createZebraZoneMarkerArray] invalid area: " << area);
      continue;
    }

    visualization_msgs::Marker marker = createAreaMarker("zebra_zone", id++, color, vmap, area);
    if (isValidMarker(marker))
      marker_array.markers.push_back(marker);
    else
      ROS_ERROR_STREAM("[createZebraZoneMarkerArray] failed createAreaMarker: " << area);
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="34f28dd0145764cca9f3c6b662d3b21a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\opengl_render_state.cpp" startLineNumber="86" endLineNumber="100"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\opengl_render_state.cpp" startLineNumber="60" endLineNumber="74"/>
            <text>
<![CDATA[    mat(2, 2) = z;
    return mat;
}

OpenGlMatrix OpenGlMatrix::RotateX(GLprecision theta_rad)
{
    OpenGlMatrix mat;
    mat.SetIdentity();
    const GLprecision costh = cos(theta_rad);
    const GLprecision sinth = sin(theta_rad);
    mat(1, 1) = costh;
    mat(1, 2) = -sinth;
    mat(2, 1) = sinth;
    mat(2, 2) = costh;
    return mat;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="342c475379f038268e73be66b697e583">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="623" endLineNumber="640"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="658" endLineNumber="674"/>
            <text>
<![CDATA[      response.objects.data.push_back(lane);
    return true;
  }

  bool getWayArea(vector_map_server::GetWayArea::Request& request,
                  vector_map_server::GetWayArea::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      WayArea way_area = vmap_.findByKey(Key<WayArea>(lane.linkwaid));
      if (way_area.waid == 0)
        return false;
      response.objects.data.push_back(way_area);
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="d624f9fde4f12415292929d647fc55a0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="33" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\semantics\packages\object_map\nodes\potential_field\potential_field.cpp" startLineNumber="38" endLineNumber="51"/>
            <text>
<![CDATA[    double ver_x_p;
    double ver_y_p;
  };
  class TargetWaypointFieldParamater {
  public:
    TargetWaypointFieldParamater() : ver_x_p(1.0), ver_y_p(1.0) {}
    double ver_x_p;
    double ver_y_p;
  };
  class VscanPointsFieldParamater {
  public:
    VscanPointsFieldParamater() : around_x(0.5), around_y(0.5) {}
    double around_x;
    double around_y;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="933f8d3faf3de73dd8bdf24c3854d423">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="180" endLineNumber="196"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="164" endLineNumber="180"/>
            <text>
<![CDATA[  return point;
}

std::vector<Point> findStartPoints(const VectorMap& vmap)
{
  std::vector<Point> start_points;
  for (const auto& lane : vmap.findByFilter([](const Lane& lane){return true;}))
  {
    Node node = vmap.findByKey(Key<Node>(lane.bnid));
    if (node.nid == 0)
      continue;
    Point point = vmap.findByKey(Key<Point>(node.pid));
    if (point.pid == 0)
      continue;
    start_points.push_back(point);
  }
  return start_points;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="8df40fe8f9698d913ebd88a37d0da32a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\voxel_grid_covariance.h" startLineNumber="115" endLineNumber="146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\voxel_grid_covariance.h" startLineNumber="124" endLineNumber="156"/>
            <text>
<![CDATA[        Eigen::Matrix3d
        getInverseCov () const
        {
          return (icov_);
        }

        /** \brief Get the voxel centroid.
          * \return centroid
          */
        Eigen::Vector3d
        getMean () const
        {
          return (mean_);
        }

        /** \brief Get the eigen vectors of the voxel covariance.
          * \note Order corresponds with \ref getEvals
          * \return matrix whose columns contain eigen vectors
          */
        Eigen::Matrix3d
        getEvecs () const
        {
          return (evecs_);
        }

        /** \brief Get the eigen values of the voxel covariance.
          * \note Order corresponds with \ref getEvecs
          * \return vector of eigen values
          */
        Eigen::Vector3d
        getEvals () const
        {
          return (evals_);
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="83ae87e413ef3eb99252d56f786f8387">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="40" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="119" endLineNumber="131"/>
            <text>
<![CDATA[#define INITIAL_Z 33
#define INITIAL_ROLL  0
#define INITIAL_PITCH -0.063
#define INITIAL_YAW -1.976
#endif
//incubation parking(1224)
#if 0
#define INITIAL_X (-18389.8)
#define INITIAL_Y (-93499.1)
#define INITIAL_Z 33
#define INITIAL_ROLL  0
#define INITIAL_PITCH 0
#define INITIAL_YAW 1.107
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="c99634be57458f67cf066ecbaa99a531">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="80" endLineNumber="93"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="103" endLineNumber="118"/>
            <text>
<![CDATA[static int maximum_iterations = 100;
static double transformation_epsilon = 0.01;
static double max_correspondence_distance = 1.0;
static double euclidean_fitness_epsilon = 0.1;
static double ransac_outlier_rejection_threshold = 1.0;

static ros::Publisher predict_pose_pub;
static geometry_msgs::PoseStamped predict_pose_msg;

static ros::Publisher icp_pose_pub;
static geometry_msgs::PoseStamped icp_pose_msg;

static ros::Publisher current_pose_pub;
static geometry_msgs::PoseStamped current_pose_msg;

static ros::Publisher localizer_pose_pub;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="5bfe52420bed58e4b8d40608c80f1324">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\src\voxel_grid.cpp" startLineNumber="324" endLineNumber="344"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\src\voxel_grid.cpp" startLineNumber="354" endLineNumber="373"/>
            <text>
<![CDATA[      memcpy (&pt[0], &input_->data[xyz_offset[0]], sizeof (float));
      memcpy (&pt[1], &input_->data[xyz_offset[1]], sizeof (float));
      memcpy (&pt[2], &input_->data[xyz_offset[2]], sizeof (float));

      // Check if the point is invalid
      if (!pcl_isfinite (pt[0]) || 
          !pcl_isfinite (pt[1]) || 
          !pcl_isfinite (pt[2]))
      {
        xyz_offset += input_->point_step;
        continue;
      }

      int ijk0 = static_cast<int> (floor (pt[0] * inverse_leaf_size_[0]) - min_b_[0]);
      int ijk1 = static_cast<int> (floor (pt[1] * inverse_leaf_size_[1]) - min_b_[1]);
      int ijk2 = static_cast<int> (floor (pt[2] * inverse_leaf_size_[2]) - min_b_[2]);
      // Compute the centroid leaf index
      int idx = ijk0 * divb_mul_[0] + ijk1 * divb_mul_[1] + ijk2 * divb_mul_[2];
      index_vector.push_back (cloud_point_index_idx (idx, static_cast<unsigned int> (cp)));
      xyz_offset += input_->point_step;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="2fd4af60484f63dab1ec6e452690824f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="528" endLineNumber="540"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="692" endLineNumber="707"/>
            <text>
<![CDATA[      localizer_pose_msg.header.frame_id = "/map";
      localizer_pose_msg.header.stamp = current_scan_time;
      localizer_pose_msg.pose.position.x = localizer_pose.x;
      localizer_pose_msg.pose.position.y = localizer_pose.y;
      localizer_pose_msg.pose.position.z = localizer_pose.z;
      localizer_pose_msg.pose.orientation.x = localizer_q.x();
      localizer_pose_msg.pose.orientation.y = localizer_q.y();
      localizer_pose_msg.pose.orientation.z = localizer_q.z();
      localizer_pose_msg.pose.orientation.w = localizer_q.w();
    }

    predict_pose_pub.publish(predict_pose_msg);
    ndt_pose_pub.publish(ndt_pose_msg);
    // current_pose is published by vel_pose_mux
    //    current_pose_pub.publish(current_pose_msg);
    localizer_pose_pub.publish(localizer_pose_msg);
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="fa5f44b1235c470ba82b91e234afa567">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\load_model.cpp" startLineNumber="211" endLineNumber="227"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\load_model.cpp" startLineNumber="164" endLineNumber="178"/>
            <text>
<![CDATA[	RF->rootsym=(int*)malloc(sizeof(int)*RF->NoR);		//symmetric information of root

	for (int ii=0;ii<RF->NoR;ii++)
	{
		fscanf(file,FLOAT_SCAN_FMT3,&t1,&t2,&t3);			//number of components
		RF->root_size[ii]=(int*)malloc(sizeof(int)*3);
		RF->root_size[ii][0]=(int)t1;
		RF->root_size[ii][1]=(int)t2;
		RF->root_size[ii][2]=(int)t3;
		int NUMB=RF->root_size[ii][0]*RF->root_size[ii][1]*RF->root_size[ii][2];
		RF->rootfilter[ii]=(FLOAT*)malloc(sizeof(FLOAT)*NUMB);	//weight of root filter
		for (int jj=0;jj<NUMB;jj++)
		{
			fscanf(file,FLOAT_SCAN_FMT,&t1);
			RF->rootfilter[ii][jj]=t1;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="ee3e5329a64e1555d33bcb3f2239c3f6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\load_model.cpp" startLineNumber="418" endLineNumber="431"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\load_model.cpp" startLineNumber="272" endLineNumber="286"/>
            <text>
<![CDATA[	s_free(MO->MI->numpart);
	s_free(MO->MI->offw);
	s_free(MO->MI->oidx);
	s_free(MO->MI->ridx);
	s_free(MO->MI->rsize);
	s_free(MO->MI->x1);
	s_free(MO->MI->x2);
	s_free(MO->MI->y1);
	s_free(MO->MI->y2);
	s_free(MO->MI);

	//free root-filter information
	for(int ii=0;ii<MO->RF->NoR;ii++)
	{
		s_free(MO->RF->root_size[ii]);
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="cc9a636c3606110526de525bb22494f3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="152" endLineNumber="176"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="138" endLineNumber="156"/>
            <text>
<![CDATA[        double theta; 
        double kappa;
        double v;
        double vdes;
        double timestamp;
    };

    double state_value[7];
};

union Parameters 
{
    struct 
    {
        double a;
        double b;
        double c;
        double d;
        double s;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="7f8915dd70e1b3b446eecc066bff26c4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="488" endLineNumber="508"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1624" endLineNumber="1644"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1143" endLineNumber="1163"/>
            <text>
<![CDATA[    delete velodynesub;
}

bool CalibrateCameraVelodyneChessboardROS::refreshImage()
{
    sensor_msgs::ImageConstPtr msg=camerasub->getMessage();
    if(msg==NULL)
    {
        return 0;
    }
    imagesize.height=msg->height;
    imagesize.width=msg->width;
    cameratimestamp=QTime::fromMSecsSinceStartOfDay((msg->header.stamp.sec%(24*60*60))*1000+msg->header.stamp.nsec/1000000);

    cv_bridge::CvImagePtr cv_image = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::BGR8);
    calibimage = cv_image->image.clone();

    return CalibrateCameraBase::refreshImage();
}

bool CalibrateCameraVelodyneChessboardROS::refreshVelodyne()
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="ab19d4cffc038d96181f9761ef5d5065">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\widgets\widgets.cpp" startLineNumber="600" endLineNumber="616"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\widgets\widgets.cpp" startLineNumber="561" endLineNumber="577"/>
            <text>
<![CDATA[        if(do_edit)
        {
            const int sl = gledit.Width() + 2;
            const int rl = v.l + v.w - sl;
            int ep = edit.length();
            
            if( x < rl )
            {
                ep = 0;
            }else{
                for( unsigned i=0; i<edit.length(); ++i )
                {
                    const int tl = rl + font.Text(edit.substr(0,i)).Width();
                    if(x < tl+2)
                    {
                        ep = i;
                        break;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="1e117efb9a047ce59a30d82e9f81e23c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1713" endLineNumber="1727"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1691" endLineNumber="1705"/>
            <text>
<![CDATA[     << obj.height;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::DTLane& obj)
{
  os << obj.did << ","
     << obj.dist << ","
     << obj.pid << ","
     << obj.dir << ","
     << obj.apara << ","
     << obj.r << ","
     << obj.slope << ","
     << obj.cant << ","
     << obj.lw << ","
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="0955cf30dadc29b1161daf433da26a15">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\src\voxel_grid.cpp" startLineNumber="157" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\src\voxel_grid.cpp" startLineNumber="74" endLineNumber="94"/>
            <text>
<![CDATA[    memcpy (&pt[0], &cloud->data[xyz_offset[0]], sizeof (float));
    memcpy (&pt[1], &cloud->data[xyz_offset[1]], sizeof (float));
    memcpy (&pt[2], &cloud->data[xyz_offset[2]], sizeof (float));
    // Check if the point is invalid
    if (!pcl_isfinite (pt[0]) || 
        !pcl_isfinite (pt[1]) || 
        !pcl_isfinite (pt[2]))
    {
      xyz_offset += cloud->point_step;
      continue;
    }
    xyz_offset += cloud->point_step;
    min_p = (min_p.min) (pt);
    max_p = (max_p.max) (pt);
  }
  min_pt = min_p;
  max_pt = max_p;
}

///////////////////////////////////////////////////////////////////////////////////////////
void
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="5397b0465a3cb2cf0b7692ebf640df9d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="222" endLineNumber="240"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="242" endLineNumber="256"/>
            <text>
<![CDATA[  int layer;
  int x;
  int y;
  int z;
  int to_x;
  int to_y;
  double size;
  char name[30];

  NDMapPtr next;
}NDMap;

typedef struct nd_data *NDDatPtr;

typedef struct nd_data{
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="57065c1d1daad102265dca4b2ae3b1a9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\KeyFrameDatabase.h" startLineNumber="21" endLineNumber="57"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\KeyFrame.h" startLineNumber="22" endLineNumber="58"/>
            <text>
<![CDATA[#define KEYFRAME_H

#include "MapPoint.h"
#include "DBoW2/BowVector.h"
#include "DBoW2/FeatureVector.h"
#include "ORBVocabulary.h"
#include "ORBextractor.h"
#include "Frame.h"

#include <mutex>
#include <list>
#include <map>
#include <boost/serialization/serialization.hpp>


typedef int64_t idtype;


namespace boost {
namespace serialization {

template <class Archive>
	void save (Archive & ar, const ORB_SLAM2::KeyFrame &keyframe, const unsigned int version);
template <class Archive>
	void load (Archive & ar, ORB_SLAM2::KeyFrame &keyframe, const unsigned int version);

}
}



namespace ORB_SLAM2
{

class Map;
class MapPoint;
class Frame;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="91847f7eda1bc6628e809ac048d78e12">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="61" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="134" endLineNumber="147"/>
            <text>
<![CDATA[      tmp.did   = dtlane.did;
      tmp.dist  = dtlane.dist;
      tmp.pid   = dtlane.pid;
      tmp.dir   = dtlane.dir;
      tmp.apara = dtlane.apara;
      tmp.r     = dtlane.r;
      tmp.slope = dtlane.slope;
      tmp.cant  = dtlane.cant;
      tmp.lw    = dtlane.lw;
      tmp.rw    = dtlane.rw;

      dtlanes.insert( std::map<int, DTLane>::value_type(tmp.did, tmp) );
    }
  std::cout << "load dtlanes complete." << std::endl;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="7bcb519d0222bd191449ee6bcab20090">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\utils\file_utils.cpp" startLineNumber="327" endLineNumber="344"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\utils\file_utils.cpp" startLineNumber="272" endLineNumber="289"/>
            <text>
<![CDATA[#endif // UNICODE

bool FilesMatchingWildcard(const std::string& wildcard, std::vector<std::string>& file_vec)
{
	size_t nLastSlash = wildcard.find_last_of("/\\");
    
    std::string sPath;
    std::string sFileWc;
    
    if(nLastSlash != std::string::npos) {
        sPath =   wildcard.substr(0, nLastSlash);                  
        sFileWc = wildcard.substr(nLastSlash+1, std::string::npos);
    }else{
        sPath = ".";
        sFileWc = wildcard;
    }

    sPath = PathExpand(sPath);
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="1775bb63215e2df4d85500848f8488d0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="166" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="165" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="163" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="162" endLineNumber="176"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="160" endLineNumber="174"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="159" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="158" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="157" endLineNumber="170"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="156" endLineNumber="169"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="154" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="152" endLineNumber="167"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="151" endLineNumber="166"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="150" endLineNumber="165"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="149" endLineNumber="163"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\device\display_glut.h" startLineNumber="38" endLineNumber="49"/>
            <text>
<![CDATA[#define  GLUT_RGB         0x0000
#define  GLUT_RGBA        0x0000
#define  GLUT_INDEX       0x0001
#define  GLUT_SINGLE      0x0000
#define  GLUT_DOUBLE      0x0002
#define  GLUT_ACCUM       0x0004
#define  GLUT_ALPHA       0x0008
#define  GLUT_DEPTH       0x0010
#define  GLUT_STENCIL     0x0020
#define  GLUT_MULTISAMPLE 0x0080
#define  GLUT_STEREO      0x0100
#define  GLUT_LUMINANCE   0x0200
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="37e0f81a15c664bd70d53863bef67adb">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\klt_track\klt_track.cpp" startLineNumber="108" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="496" endLineNumber="510"/>
            <text>
<![CDATA[	if (tmp_source.empty())
		return ;

	unsigned int size = in_source.size();

	std::vector<float> area(size);
	std::vector<float> scores(size);
	std::vector<int> x1(size);
	std::vector<int> y1(size);
	std::vector<int> x2(size);
	std::vector<int> y2(size);
	std::vector<unsigned int> indices(size);
	std::vector<bool> is_suppresed(size);

	for(unsigned int i = 0; i< in_source.size(); i++)
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="bb0bec74461edd1487ba6d86b48fdbba">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\rosinterface\include\rosinterface\rosinterface.h" startLineNumber="268" endLineNumber="279"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\rosinterface\include\rosinterface\rosinterface.h" startLineNumber="135" endLineNumber="146"/>
            <text>
<![CDATA[    QReadWriteLock lock;
signals:
    void receiveMessageSignal();
    void startReceiveSignal();
    void stopReceiveSignal();
    void resetQueryIntervalSignal(int QueryInterval);
public slots:
    void startReceiveSlot();
    void stopReceiveSlot();
protected slots:
    void receiveMessageSlot();
protected:
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="175f84008f82f8af6e5b38454cbe91dc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.cpp" startLineNumber="214" endLineNumber="226"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.cpp" startLineNumber="126" endLineNumber="138"/>
            <text>
<![CDATA[  _jacobianOplusXj(0,0) =  x*y/z_2 *fx;
  _jacobianOplusXj(0,1) = -(1+(x*x/z_2)) *fx;
  _jacobianOplusXj(0,2) = y/z *fx;
  _jacobianOplusXj(0,3) = -1./z *fx;
  _jacobianOplusXj(0,4) = 0;
  _jacobianOplusXj(0,5) = x/z_2 *fx;

  _jacobianOplusXj(1,0) = (1+y*y/z_2) *fy;
  _jacobianOplusXj(1,1) = -x*y/z_2 *fy;
  _jacobianOplusXj(1,2) = -x/z *fy;
  _jacobianOplusXj(1,3) = 0;
  _jacobianOplusXj(1,4) = -1./z *fy;
  _jacobianOplusXj(1,5) = y/z_2 *fy;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="28a9d15897071ba7a58903b852b3277f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="398" endLineNumber="410"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="391" endLineNumber="403"/>
            <text>
<![CDATA[  thSet.Red.Hue.upper = (double)DAYTIME_RED_UPPER;
  thSet.Red.Hue.lower = (double)DAYTIME_RED_LOWER;
  thSet.Red.Sat.upper = 1.0f;
  thSet.Red.Sat.lower = DAYTIME_S_SIGNAL_THRESHOLD;
  thSet.Red.Val.upper = 1.0f;
  thSet.Red.Val.lower = DAYTIME_V_SIGNAL_THRESHOLD;

  thSet.Yellow.Hue.upper = (double)DAYTIME_YELLOW_UPPER;
  thSet.Yellow.Hue.lower = (double)DAYTIME_YELLOW_LOWER;
  thSet.Yellow.Sat.upper = 1.0f;
  thSet.Yellow.Sat.lower = DAYTIME_S_SIGNAL_THRESHOLD;
  thSet.Yellow.Val.upper = 1.0f;
  thSet.Yellow.Val.lower = DAYTIME_V_SIGNAL_THRESHOLD;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="119e795eb83f6f966eadd2ac39c05f1f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="735" endLineNumber="748"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="730" endLineNumber="743"/>
            <text>
<![CDATA[	FLOAT ****M_array = (FLOAT ****)malloc((L_MAX-interval)*sizeof(FLOAT***));
	FLOAT ***sub_sub_dst_M = (FLOAT ***)malloc(NoC*(L_MAX-interval)*sizeof(FLOAT**));
	FLOAT **sub_dst_M = (FLOAT **)malloc(sum_numpart*sizeof(FLOAT*));
	FLOAT *dst_M =  (FLOAT *)malloc(sum_size_SQ*sizeof(FLOAT));

	FLOAT ****tmpM_array = (FLOAT ****)malloc((L_MAX-interval)*sizeof(FLOAT***));
	FLOAT ***sub_sub_dst_tmpM = (FLOAT ***)malloc(NoC*(L_MAX-interval)*sizeof(FLOAT**));
	FLOAT **sub_dst_tmpM = (FLOAT **)malloc(sum_numpart*sizeof(FLOAT*));
	FLOAT *dst_tmpM = (FLOAT *)malloc(sum_size_SQ*sizeof(FLOAT));

	int ****tmpIx_array = (int ****)malloc((L_MAX-interval)*sizeof(int***));
	int ***sub_sub_dst_tmpIx = (int ***)malloc(NoC*(L_MAX-interval)*sizeof(int**));
	int **sub_dst_tmpIx = (int **)malloc(sum_numpart*sizeof(int*));
	int *dst_tmpIx = (int *)malloc(sum_size_SQ*sizeof(int));
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="6267a10452770c85526a872ea24af1b9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="1299" endLineNumber="1315"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="1283" endLineNumber="1299"/>
            <text>
<![CDATA[      x=0;
      for (i=0; i < n; ++i) {
         flags = vertices[off+i].type;
         if (flags & 2) {
            stbtt_int16 dx = *points++;
            x += (flags & 16) ? dx : -dx; // ???
         } else {
            if (!(flags & 16)) {
               x = x + (stbtt_int16) (points[0]*256 + points[1]);
               points += 2;
            }
         }
         vertices[off+i].x = (stbtt_int16) x;
      }

      // now load y coordinates
      y=0;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="987c78795288959e52d3a969b1d8730c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2image\points2image.cpp" startLineNumber="125" endLineNumber="144"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2image\points2image.cpp" startLineNumber="136" endLineNumber="155"/>
            <text>
<![CDATA[	std::string camera_info_topic;
	if (private_nh.getParam("camera_info_topic", camera_info_topic))
	{
		ROS_INFO("Setting camera_info topic to %s", camera_info_topic.c_str());
	}
	else
	{
		ROS_INFO("No camera info topic received, defaulting to /camera/camera_info, you can use _camera_info_topic:=YOUR_TOPIC");
		camera_info_topic = "/camera/camera_info";
	}

	std::string projection_matrix_topic;
	if (private_nh.getParam("projection_matrix_topic", projection_matrix_topic))
	{
		ROS_INFO("Setting projection_matrix topic to %s", projection_matrix_topic.c_str());
	}
	else
	{
		ROS_INFO("No projection matrix topic received, defaulting to /projection_matrix, you can use _projection_matrix_topic:=YOUR_TOPIC");
		projection_matrix_topic = "/projection_matrix";
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="d5ea73b2a96a8f6a1067cde12177156b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\factory.cpp" startLineNumber="100" endLineNumber="111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\factory.cpp" startLineNumber="103" endLineNumber="114"/>
            <text>
<![CDATA[    case HyperGraph::HGET_EDGE:
      cerr << " -> Edge";
      break;
    case HyperGraph::HGET_PARAMETER:
      cerr << " -> Parameter";
      break;
    case HyperGraph::HGET_CACHE:
      cerr << " -> Cache";
      break;
    case HyperGraph::HGET_DATA:
      cerr << " -> Data";
      break;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="b819a1e93af920c1c6f3b1f91f2441e5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_toolkit\mainwindow.cpp" startLineNumber="98" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_toolkit\mainwindow.cpp" startLineNumber="84" endLineNumber="96"/>
            <text>
<![CDATA[    else if(selection==CALIBCAMERAVELODYNE)
    {
        QString cameratopic=inputcameratopic;
        QString velodynetopic="/points_raw";
        CalibrateCameraVelodyneChessboardROS * calibration=new CalibrateCameraVelodyneChessboardROS(cameratopic,1000,10,velodynetopic,1000,10,100,cvpatternsize,cvpatternnum);
        ui->tabWidget->addTab(calibration,CALIBCAMERAVELODYNE);
        connect(ui->grab,SIGNAL(clicked()),calibration,SLOT(grabCalibDataSlot()));
        connect(ui->remove,SIGNAL(clicked()),calibration,SLOT(removeCalibDataSlot()));
        connect(ui->calibrate,SIGNAL(clicked()),calibration,SLOT(calibrateSensorSlot()));
        connect(ui->load,SIGNAL(clicked()),calibration,SLOT(loadCalibResultSlot()));
        connect(ui->save,SIGNAL(clicked()),calibration,SLOT(saveCalibResultSlot()));
        connect(ui->refresh,SIGNAL(clicked()),calibration,SLOT(refreshParametersSlot()));
        connect(ui->Project,SIGNAL(clicked()),calibration,SLOT(projectPointsSlot()));
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="c7591734babce286b0e480e5faa709f9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="2753" endLineNumber="2768"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="2692" endLineNumber="2707"/>
            <text>
<![CDATA[static void stbtt__h_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigned int kernel_width)
{
   unsigned char buffer[STBTT_MAX_OVERSAMPLE];
   int safe_w = w - kernel_width;
   int j;
   for (j=0; j < h; ++j) {
      int i;
      unsigned int total;
      STBTT_memset(buffer, 0, kernel_width);

      total = 0;

      // make kernel_width a constant in common cases so compiler can optimize out the divide
      switch (kernel_width) {
         case 2:
            for (i=0; i <= safe_w; ++i) {
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="b689623758d2bebd0bbc0337e477af85">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="113" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="41" endLineNumber="53"/>
            <text>
<![CDATA[int waypoint_max;
double search_radius; // meter
double velocity; // km/h
std::string frame_id;
std::string output_file;

visualization_msgs::Marker waypoint_marker;
visualization_msgs::Marker branching_marker;
visualization_msgs::Marker merging_marker;
visualization_msgs::Marker selection_marker;
visualization_msgs::Marker route_marker;
ros::Publisher marker_pub;
tf::StampedTransform transform;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="cfc7742e1c43015e97e9b31b07468105">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_viewer\vscan_image_viewer.cpp" startLineNumber="73" endLineNumber="86"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_viewer\points_image_viewer.cpp" startLineNumber="74" endLineNumber="87"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="237" endLineNumber="250"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\integrated_viewer\node\image_viewer_plugin\draw_points.cpp" startLineNumber="36" endLineNumber="54"/>
            <text>
<![CDATA[    float distance_range = max_distance - min_distance;

    for (int y = 0; y < height; y++) {
      for (int x = 0; x < width; x++) {
        int index = y * width + x;

        float distance = points->distance[index];
        if (distance == 0) {
          continue;
        }

        // Specify which color will be use for this point
        int color_id = distance_range ? ((distance - min_distance) * 255 / distance_range) : 128;

        // Divide color into each element
        cv::Vec3b color = color_map_.at<cv::Vec3b>(color_id);
        int red   = color[0];
        int green = color[1];
        int blue  = color[2];
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="9d512b7c72311cc9a72ef546994df9ae">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\ScoringObject.cpp" startLineNumber="266" endLineNumber="289"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\ScoringObject.cpp" startLineNumber="221" endLineNumber="244"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\ScoringObject.cpp" startLineNumber="170" endLineNumber="194"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\ScoringObject.cpp" startLineNumber="120" endLineNumber="145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\ScoringObject.cpp" startLineNumber="68" endLineNumber="90"/>
            <text>
<![CDATA[  return score; // [0..1]
}

// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------

double L2Scoring::score(const BowVector &v1, const BowVector &v2) const
{
  BowVector::const_iterator v1_it, v2_it;
  const BowVector::const_iterator v1_end = v1.end();
  const BowVector::const_iterator v2_end = v2.end();
  
  v1_it = v1.begin();
  v2_it = v2.begin();
  
  double score = 0;
  
  while(v1_it != v1_end && v2_it != v2_end)
  {
    const WordValue& vi = v1_it->second;
    const WordValue& wi = v2_it->second;
    
    if(v1_it->first == v2_it->first)
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="0131d03dc1d4dd6235f8d0f06756e40d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\dpm_sync_2.cpp" startLineNumber="233" endLineNumber="250"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="392" endLineNumber="409"/>
            <text>
<![CDATA[    if(!publish()) {
        /* when to publish is failure, republish */
        struct timespec sleep_time;
        sleep_time.tv_sec = 0;
        sleep_time.tv_nsec = 200000000; //5Hz
        while (!publish() || ros::ok())
            nanosleep(&sleep_time, NULL);
    }
    pthread_mutex_lock(&mutex);

    ros::spin();

    /* shutdown server thread */
    ROS_INFO("wait until shutdown a thread");
    pthread_kill(th, SIGINT);
    pthread_join(th, NULL);

    return 0;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="3dfde79353cc5d7cfc3e5aa3e23abd52">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="47" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="125" endLineNumber="141"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="73" endLineNumber="86"/>
            <text>
<![CDATA[  double r;
  double slope;
  double cant;
  double lw;
  double rw;
}DTLane;

typedef struct{
  int lnid;
  int did;
  int blid;
  int flid;
  int bnid;
  int fnid;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="d75bde21780782096cb8f4a7ea7f83b8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_uploader\obj_uploader.cpp" startLineNumber="220" endLineNumber="238"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="252" endLineNumber="271"/>
            <text>
<![CDATA[  int port = default_db_port;
  if(argc >= 3){
    host_name = argv[1];
    port = std::atoi(argv[2]);
  }

  sd = SendData(host_name, port);

  //set angle and position flag : false at first
  canGetFlag = false;

  pthread_t th;
  if(pthread_create(&th, nullptr, intervalCall, nullptr)){
    printf("thread create error\n");
  }
  pthread_detach(th);

  ros::spin();

  return 0;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="55e945f2cef5276d0002051f0201186b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="1" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\stuff\color_macros.h" startLineNumber="27" endLineNumber="42"/>
            <text>
<![CDATA[#ifndef G2O_COLOR_MACROS_H
#define G2O_COLOR_MACROS_H

// font attributes
#define FT_BOLD      "\033[1m"
#define FT_UNDERLINE "\033[4m"

//background color
#define BG_BLACK     "\033[40m"
#define BG_RED       "\033[41m"
#define BG_GREEN     "\033[42m"
#define BG_YELLOW    "\033[43m"
#define BG_LIGHTBLUE "\033[44m"
#define BG_MAGENTA   "\033[45m"
#define BG_BLUE      "\033[46m"
#define BG_WHITE     "\033[47m"
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="05ba3a7c12bd0a4f4e1245f0e4d8251d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\lidar_tracker\nodes\obj_fusion\sync_obj_fusion.cpp" startLineNumber="396" endLineNumber="413"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\dpm_sync_2.cpp" startLineNumber="209" endLineNumber="226"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\range_fusion\sync_range_fusion.cpp" startLineNumber="239" endLineNumber="256"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\sync_obj_reproj.cpp" startLineNumber="239" endLineNumber="256"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\kf_track\sync_track.cpp" startLineNumber="239" endLineNumber="256"/>
            <text>
<![CDATA[    return NULL;
}

int main(int argc, char **argv) {
    /* init */
    buf_flag = false;
    image_obj_tracked_flag = false;
    ros::init(argc, argv, "sync_tracking");
    ros::NodeHandle nh;

    /* create server thread */
    pthread_t th;
    pthread_create(&th, NULL, thread, (void *)NULL );

    ros::Subscriber image_obj_ranged_sub = nh.subscribe("/image_obj_ranged", 1, image_obj_ranged_callback);
    ros::Subscriber image_raw_sub = nh.subscribe("/sync_drivers/image_raw", 1, image_raw_callback);
    image_obj_ranged__pub = nh.advertise<cv_tracker::image_obj_ranged>("/sync_tracking/image_obj_ranged", 5);
    image_raw__pub = nh.advertise<sensor_msgs::Image>("/sync_tracking/image_raw", 5);
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="b2539631fc4c138aca0a3becbad05c4b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="36" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="240" endLineNumber="274"/>
            <text>
<![CDATA[        double correspondences_prev_mse_;

        /** \brief The MSE for the current set of correspondences. */
        double correspondences_cur_mse_;

        /** \brief The maximum nuyyGmber of iterations that the registration loop is to be executed. */
        int max_iterations_;

        /** \brief Specifys if the registration fails or converges when the maximum number of iterations is reached. */
        bool failure_after_max_iter_;

        /** \brief The rotation threshold is the relative rotation between two iterations (as angle cosine). */
        double rotation_threshold_;

        /** \brief The translation threshold is the relative translation between two iterations (0 if no translation). */
        double translation_threshold_;

        /** \brief The relative change from the previous MSE for the current set of correspondences, e.g. .1 means 10% change. */
        double mse_threshold_relative_;

        /** \brief The absolute change from the previous MSE for the current set of correspondences. */
        double mse_threshold_absolute_;

        /** \brief Internal counter for the number of iterations that the internal 
          * rotation, translation, and MSE differences are allowed to be similar. */
        int iterations_similar_transforms_;

        /** \brief The maximum number of iterations that the internal rotation, 
          * translation, and MSE differences are allowed to be similar. */
        int max_iterations_similar_transforms_;

        /** \brief The state of the convergence (e.g., why did the registration converge). */
        ConvergenceState convergence_state_;

      public:
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="5833703d01f12e8066526e28d4a48669">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\Cluster.cpp" startLineNumber="74" endLineNumber="87"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\Cluster.cpp" startLineNumber="69" endLineNumber="82"/>
            <text>
<![CDATA[	out_cluster_message.min_point.header = in_ros_header;
	out_cluster_message.min_point.point.x = this->GetMinPoint().x;
	out_cluster_message.min_point.point.y = this->GetMinPoint().y;
	out_cluster_message.min_point.point.z = this->GetMinPoint().z;

	out_cluster_message.max_point.header = in_ros_header;
	out_cluster_message.max_point.point.x = this->GetMaxPoint().x;
	out_cluster_message.max_point.point.y = this->GetMaxPoint().y;
	out_cluster_message.max_point.point.z = this->GetMaxPoint().z;

	out_cluster_message.avg_point.header = in_ros_header;
	out_cluster_message.avg_point.point.x = this->GetAveragePoint().x;
	out_cluster_message.avg_point.point.y = this->GetAveragePoint().y;
	out_cluster_message.avg_point.point.z = this->GetAveragePoint().z;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="9f07e45f4eced2bcf58ff928d1b784c4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="119" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="53" endLineNumber="74"/>
            <text>
<![CDATA[    ctx = (CUcontext*) malloc(device_num * sizeof(CUcontext));

    module = (CUmodule*) malloc(device_num * sizeof(CUmodule));

    ConvolutionKernel_func = (CUfunction*) malloc(
            device_num * sizeof(CUfunction));
    DistanceTransformTwoDimensionalProblem_func = (CUfunction*) malloc(
            device_num * sizeof(CUfunction));
    BilinearKernelTex32F_func = (CUfunction*) malloc(
            device_num * sizeof(CUfunction));
    calculateHistogram_func = (CUfunction*) malloc(
            device_num * sizeof(CUfunction));
    getFeatureMaps_func = (CUfunction*) malloc(device_num * sizeof(CUfunction));
    calculateNorm_func = (CUfunction*) malloc(device_num * sizeof(CUfunction));
    normalizeAndTruncate_func = (CUfunction*) malloc(
            device_num * sizeof(CUfunction));
    PCAFeatureMapsAddNullableBorder_func = (CUfunction*) malloc(
            device_num * sizeof(CUfunction));

    for (int i = 0; i < device_num; i++)
    {
        res = cuCtxCreate(&ctx[i], 0, dev[i]);
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="12f0e25d317fec640a33dadec8c5d92b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\range_fusion\range_fusion.cpp" startLineNumber="108" endLineNumber="126"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="952" endLineNumber="970"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_d_viewer\vscan_image_d_viewer.cpp" startLineNumber="213" endLineNumber="233"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="338" endLineNumber="352"/>
            <text>
<![CDATA[  std::string pedestrian_node;
  std::string points_node;

  if (private_nh.getParam("image_raw_topic", image_topic_name)) {
    ROS_INFO("Setting image topic to %s", image_topic_name.c_str());
  } else {
    ROS_INFO("No image topic received, defaulting to image_raw, you can use _image_raw_topic:=YOUR_NODE");
    image_topic_name = "/image_raw";
  }

  if (private_nh.getParam("car_node", car_node)) {
    ROS_INFO("Setting car positions node to %s", car_node.c_str());
  } else {
    ROS_INFO("No car positions node received, defaulting to car_pixel_xyz, you can use _car_node:=YOUR_TOPIC");
    car_node = "/obj_car/image_obj_ranged";
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="af22021f96420c6defa14a0f2d8cfb55">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="495" endLineNumber="514"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="484" endLineNumber="504"/>
            <text>
<![CDATA[	return false;
}

geometry_msgs::Point create_geometry_msgs_point(const vector_map::Point& vp)
{
	// reverse X-Y axis
	geometry_msgs::Point gp;
	gp.x = vp.ly;
	gp.y = vp.bx;
	gp.z = vp.h;

	return gp;
}

vector_map::Point create_vector_map_point(const geometry_msgs::Point& gp)
{
	// reverse X-Y axis
	vector_map::Point vp;
	vp.bx = gp.y;
	vp.ly = gp.x;
	vp.h = gp.z;
]]>
            </text>
        </set>
        <set lineCount="12" fingerprint="23b65d3a1bf502b560a1caa4cf551f0c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="496" endLineNumber="512"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="334" endLineNumber="350"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="88" endLineNumber="107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="77" endLineNumber="90"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="64" endLineNumber="77"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="554" endLineNumber="568"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="18" endLineNumber="38"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="2" endLineNumber="21"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="8" endLineNumber="32"/>
            <text>
<![CDATA[#define INCLUDED_Minfo_

#include <opencv/cv.h>
#include "switch_float.h"

/////////////////////
//file information///
/////////////////////

//struct for model component information
struct Model_info {
	//basic information
	//from xxxcomp.csv
	int numcomponent;	//number of component
	int sbin;		//cell size
	int interval;	//interval (for hierachical detection)
	int max_X;
	int max_Y;
	//from calculation
	int padx;	//pad information
	int pady;
	int max_scale;
	//image size information
	int IM_WIDTH;
	int IM_HEIGHT;
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="856632e4001591689b6e4e87b41bc171">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1362" endLineNumber="1380"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1386" endLineNumber="1404"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1413" endLineNumber="1431"/>
            <text>
<![CDATA[  marker.scale.x = MAKER_SCALE_LINE;
  marker.color = createColorRGBA(color);
  if (marker.color.a == COLOR_VALUE_MIN)
    return marker;

  enableMarker(marker);
  return marker;
}

visualization_msgs::Marker createAreaMarker(const std::string& ns, int id, Color color, const VectorMap& vmap,
                                            const Area& area)
{
  visualization_msgs::Marker marker = createMarker(ns, id, visualization_msgs::Marker::LINE_STRIP);
  if (area.aid == 0)
    return marker;

  Line line = vmap.findByKey(Key<Line>(area.slid));
  if (line.lid == 0)
    return marker;
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="20b362d96c36cbf5e08ea8ff3e4ebde1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1291" endLineNumber="1303"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1287" endLineNumber="1299"/>
            <text>
<![CDATA[    color_rgba.b = COLOR_VALUE_MAX;
    break;
  case YELLOW:
    color_rgba.r = COLOR_VALUE_MAX;
    color_rgba.g = COLOR_VALUE_MAX;
    break;
  case CYAN:
    color_rgba.g = COLOR_VALUE_MAX;
    color_rgba.b = COLOR_VALUE_MAX;
    break;
  case MAGENTA:
    color_rgba.r = COLOR_VALUE_MAX;
    color_rgba.b = COLOR_VALUE_MAX;
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="07fa4ef72d60a3f0976ec2a9a550cbae">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\tf_mapping\tf_mapping.cpp" startLineNumber="77" endLineNumber="92"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\tf_mapping\tf_mapping.cpp" startLineNumber="94" endLineNumber="109"/>
            <text>
<![CDATA[      for (int i = 0; i < (int)input->size(); i++)
      {
        tf::Point pt(input->points[i].x, input->points[i].y, input->points[i].z);
        tf::Point pt_world = transform * pt;
        pcl::PointXYZI wp;
        double distance = pt.x() * pt.x() + pt.y() * pt.y() + pt.z() * pt.z();
        if (distance < 3 * 3)
          continue;
        wp.x = pt_world.x();
        wp.y = pt_world.y();
        wp.z = pt_world.z();
        wp.intensity = input->points[i].intensity;

        pcl_out.push_back(wp);
      }
      pcl_out.header = input->header;
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="7618b33fbddf8db753b5468fd93d5202">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1178" endLineNumber="1194"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1659" endLineNumber="1675"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="510" endLineNumber="525"/>
            <text>
<![CDATA[    camerasub->stopReceiveSlot();
    cv::vector<cv::Point2f> grid2dpoint;
    CHESSBOARDTYPE boardtype=CHESSBOARDTYPE(chessboardtype->currentIndex());
    bool found=false;
    switch(boardtype)
    {
    case BoxGrid:
        found=cv::findChessboardCorners(calibimage,patternnum,grid2dpoint);
        break;
    case CircleGrid:
        found=cv::findCirclesGrid(calibimage,patternnum,grid2dpoint);
        break;
    }
    if(!found)
    {
        camerasub->startReceiveSlot();
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="2e3181459a07458bc0afbdbcd0f859f0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="332" endLineNumber="350"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="494" endLineNumber="512"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="552" endLineNumber="568"/>
            <text>
<![CDATA[    ret[id].pid = std::stoi(tbl[i][1]);
  }
  return ret;
}

/* for lane.csv */
struct LaneData {
  int lnid;
  int did;
  int blid;
  int flid;
  int bnid;
  int fnid;
  int jct;
  int blid2;
  int blid3;
  int blid4;
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="8c4ba7d2f38fd612f04d9e5e008a988f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="256" endLineNumber="274"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="285" endLineNumber="303"/>
            <text>
<![CDATA[  double max_score = -DBL_MAX;
  for (const auto& p2 : findNearPoints(findEndPoints(vmap), bp2, radius))
  {
    for (const auto& lane : findLanesByEndPoint(vmap, p2))
    {
      if (lane.lnid == 0)
        continue;
      Point p1 = findStartPoint(vmap, lane);
      if (p1.pid == 0)
        continue;
      double score = computeScore(bp2, bp1, p2, p1, radius);
      if (score >= max_score)
      {
        end_lane = lane;
        max_score = score;
      }
    }
  }
  return end_lane;
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="c31b36253b6082c46bdde29e0b1e9ad2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="1312" endLineNumber="1327"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\utils\picojson.h" startLineNumber="1301" endLineNumber="1316"/>
            <text>
<![CDATA[        pangolin::json::value v1, v2;
        const char *s;
        string err;
        s = "{ \"b\": true, \"a\": [1,2,\"three\"], \"d\": 2 }";
        err = pangolin::json::parse(v1, s, s + strlen(s));
        s = "{ \"d\": 2.0, \"a\": [1,\"three\"], \"b\": true }";
        err = pangolin::json::parse(v2, s, s + strlen(s));
        ok((v1 != v2), "check != operator for array in deep comparison");
    }

    {
        pangolin::json::value v1, v2;
        const char *s;
        string err;
        s = "{ \"b\": true, \"a\": [1,2,\"three\"], \"d\": 2 }";
        err = pangolin::json::parse(v1, s, s + strlen(s));
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="29ebbe0879d2bdebabf3239ab6f44ad8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="189" endLineNumber="201"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="178" endLineNumber="190"/>
            <text>
<![CDATA[  oss << can.devmode << ",";
  oss << can.drvcontmode << ",";
  oss << can.drvoverridemode << ",";
  oss << can.drvservo << ",";
  oss << can.drivepedal << ",";
  oss << can.targetpedalstr << ",";
  oss << can.inputpedalstr << ",";
  oss << fixed << setprecision(6) << can.targetveloc << ",";
  oss << fixed << setprecision(6) << can.speed << ",";
  oss << can.driveshift << ",";
  oss << can.targetshift << ",";
  oss << can.inputshift << ",";
  oss << can.strmode << ",";
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="06b3b55a3d88f89d6521a5052e0c1066">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="541" endLineNumber="556"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_stop\lane_stop.cpp" startLineNumber="107" endLineNumber="122"/>
            <text>
<![CDATA[int main(int argc, char **argv)
{
	ros::init(argc, argv, "lane_stop");

	ros::NodeHandle n;

	int sub_light_queue_size;
	n.param<int>("/lane_stop/sub_light_queue_size", sub_light_queue_size, 1);
	int sub_waypoint_queue_size;
	n.param<int>("/lane_stop/sub_waypoint_queue_size", sub_waypoint_queue_size, 1);
	int sub_config_queue_size;
	n.param<int>("/lane_rule/sub_config_queue_size", sub_config_queue_size, 1);
	int pub_waypoint_queue_size;
	n.param<int>("/lane_stop/pub_waypoint_queue_size", pub_waypoint_queue_size, 1);
	bool pub_waypoint_latch;
	n.param<bool>("/lane_stop/pub_waypoint_latch", pub_waypoint_latch, true);
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="aac6f02364ba2006e90f6be676a85e1d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="246" endLineNumber="267"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="438" endLineNumber="456"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="554" endLineNumber="574"/>
            <text>
<![CDATA[      visualization_msgs::Marker pole_marker = createPoleMarker("signal", id++, pole_color, vmap, pole);
      if (isValidMarker(pole_marker))
        marker_array.markers.push_back(pole_marker);
      else
        ROS_ERROR_STREAM("[createSignalMarkerArray] failed createPoleMarker: " << pole);
    }
  }
  return marker_array;
}

visualization_msgs::MarkerArray createStreetLightMarkerArray(const VectorMap& vmap, Color light_color,
                                                             Color pole_color)
{
  visualization_msgs::MarkerArray marker_array;
  int id = 0;
  for (const auto& street_light : vmap.findByFilter([](const StreetLight& street_light){return true;}))
  {
    if (street_light.lid == 0)
    {
      ROS_ERROR_STREAM("[createStreetLightMarkerArray] invalid street_light: " << street_light);
      continue;
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="2c0fc443a3b7191dee5502ef347836a3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_path.cpp" startLineNumber="62" endLineNumber="80"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="137" endLineNumber="154"/>
            <text>
<![CDATA[  temporal_waypoints_.waypoints.clear();
  temporal_waypoints_.header = current_waypoints_.header;
  temporal_waypoints_.increment = current_waypoints_.increment;
  // push current pose
  waypoint_follower::waypoint current_point;

  current_point.pose = g_control_pose;
  current_point.twist = current_waypoints_.waypoints[g_closest_waypoint].twist;
  current_point.dtlane = current_waypoints_.waypoints[g_closest_waypoint].dtlane;
  temporal_waypoints_.waypoints.push_back(current_point);
  for (int i = 0; i < size; i++)
  {
    if (g_closest_waypoint + i >= getSize())
      return;
    temporal_waypoints_.waypoints.push_back(current_waypoints_.waypoints[g_closest_waypoint + i]);
  }

  return;
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="d74fef86ef9f35a9220c826b4bf3780d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="125" endLineNumber="142"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="73" endLineNumber="87"/>
            <text>
<![CDATA[  double r;
  double slope;
  double cant;
  double lw;
  double rw;
}DTLane;

typedef struct{
  int lnid;
  int did;
  int blid;
  int flid;
  int bnid;
  int fnid;
  int jct;
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="2a98fbf5f70aa77f8eaa3a46efca7756">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="599" endLineNumber="618"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="610" endLineNumber="629"/>
            <text>
<![CDATA[  is_current_pose_subscribed_ = true;

  if(current_lane_idx_ == -1)
    initForLaneSelect();
  else
    processing();
}

void LaneSelectNode::callbackFromTwistStamped(const geometry_msgs::TwistStampedConstPtr &msg)
{
  current_velocity_ = *msg;
  is_current_velocity_subscribed_ = true;

  if(current_lane_idx_ == -1)
    initForLaneSelect();
  else
    processing();
}

void LaneSelectNode::callbackFromState(const std_msgs::StringConstPtr &msg)
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="7b195c174fc1566714b14352f76a558e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\kf_lidar_track\kf_lidar_track.cpp" startLineNumber="20" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\pf_lidar_track\pf_lidar_track.cpp" startLineNumber="20" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\svm_lidar_detect\svm_lidar_detect.cpp" startLineNumber="18" endLineNumber="39"/>
            <text>
<![CDATA[class SvmDetect
{
public:
	SvmDetect();

private:

	ros::NodeHandle node_handle_;
	ros::Subscriber cloud_clusters_sub_;
	ros::Publisher cloud_clusters_pub_;

	void CloudClustersCallback(const lidar_tracker::CloudClusterArray::Ptr& in_cloud_cluster_array_ptr);
};

SvmDetect::SvmDetect() :
		node_handle_("~")
{
	cloud_clusters_sub_ = node_handle_.subscribe("/cloud_clusters", 10, &SvmDetect::CloudClustersCallback, this);
	cloud_clusters_pub_ = node_handle_.advertise<lidar_tracker::CloudClusterArray>( "/cloud_clusters_class", 10);
}

void SvmDetect::CloudClustersCallback(const lidar_tracker::CloudClusterArray::Ptr& in_cloud_cluster_array_ptr)
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="4a7ac368d2598ddb11eceb02e627a1d2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="131" endLineNumber="145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="298" endLineNumber="312"/>
            <text>
<![CDATA[    ros::NodeHandle nh;
    ros::Publisher pubPc;
    ros::Publisher pubPc2;
    ros::Publisher pubImu;
    ros::Publisher pubMag;
    vssp::vsspDriver driver;
    sensor_msgs::PointCloud2 cloud2;
    sensor_msgs::Imu imu;
    sensor_msgs::MagneticField mag;

    ros::Time timePing;
    ros::Time timestampBase;

    int field;
    int frame;
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="871eb2a339006950784ea6e15ed3196c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="181" endLineNumber="194"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="198" endLineNumber="211"/>
            <text>
<![CDATA[inline void glDisableClientState(GLenum cap)
{
    pangolin::GlEngine& gl = pangolin::glEngine();
    if(cap == GL_VERTEX_ARRAY) {
        glDisableVertexAttribArray(pangolin::DEFAULT_LOCATION_POSITION);
    }else if(cap == GL_COLOR_ARRAY) {
        glDisableVertexAttribArray(pangolin::DEFAULT_LOCATION_COLOUR);
    }else if(cap == GL_NORMAL_ARRAY) {
        glDisableVertexAttribArray(pangolin::DEFAULT_LOCATION_NORMAL);
    }else if(cap == GL_TEXTURE_COORD_ARRAY) {
        glDisableVertexAttribArray(pangolin::DEFAULT_LOCATION_TEXCOORD);
        gl.EnableTexturing(false);
    }else{
        pango_print_error("Not Implemented: %s, %s, %d", __FUNCTION__, __FILE__, __LINE__);
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="ce2e87b6dd9c803007b393f81c733d6e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="155" endLineNumber="167"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="911" endLineNumber="926"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="910" endLineNumber="924"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1131" endLineNumber="1147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1129" endLineNumber="1146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1128" endLineNumber="1145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1126" endLineNumber="1143"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1125" endLineNumber="1142"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1123" endLineNumber="1141"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1122" endLineNumber="1139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1115" endLineNumber="1138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="514" endLineNumber="526"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="513" endLineNumber="525"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="512" endLineNumber="524"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="511" endLineNumber="523"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="510" endLineNumber="522"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="509" endLineNumber="521"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="508" endLineNumber="520"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="507" endLineNumber="519"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="506" endLineNumber="518"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="505" endLineNumber="517"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="504" endLineNumber="516"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="503" endLineNumber="515"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="502" endLineNumber="514"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="501" endLineNumber="513"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="500" endLineNumber="512"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="499" endLineNumber="511"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="498" endLineNumber="510"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="497" endLineNumber="509"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="496" endLineNumber="508"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="495" endLineNumber="507"/>
            <text>
<![CDATA[	free(featp2_dev);
	free(A_SIZE_dev);
	free(B_dev);
	free(B_dims_dev);
	free(fconvs_error_array_dev);
	free(fconvs_C_dev);
	free(NR_MAXTHREADS_X);
	free(NR_MAXTHREADS_Y);
	free(func_process_root);
	free(func_process_part);
	free(func_dt1d_x);
	free(func_dt1d_y);
	free(func_calc_a_score);
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="4ef19a4b2ddc127056d01f9b5d01699e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\display.h" startLineNumber="83" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\display\display.h" startLineNumber="79" endLineNumber="103"/>
            <text>
<![CDATA[  PANGOLIN_EXPORT
  void FinishFrame();

  /// Request that the program exit.
  PANGOLIN_EXPORT
  void Quit();

  /// Returns true if user has requested to close OpenGL window.
  PANGOLIN_EXPORT
  bool ShouldQuit();

  /// Returns true if user has interacted with the window since this was last called.
  PANGOLIN_EXPORT
  bool HadInput();

  /// Returns true if user has resized the window.
  PANGOLIN_EXPORT
  bool HasResized();

  /// Renders any views with default draw methods.
  PANGOLIN_EXPORT
  void RenderViews();
  
  /// Perform any post render events, such as screen recording.
  PANGOLIN_EXPORT
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="d3e11497756af7ab8353a52bc1754f92">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="371" endLineNumber="391"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="355" endLineNumber="375"/>
            <text>
<![CDATA[    Red_set.sat.center = ((DEFAULT_SAT_UPPER - DEFAULT_SAT_LOWER) / 2 ) + DEFAULT_SAT_LOWER;
    Red_set.sat.range  = (DEFAULT_SAT_UPPER - DEFAULT_SAT_LOWER) / 2;
    Red_set.val.center = ((DEFAULT_VAL_UPPER - DEFAULT_VAL_LOWER) / 2 ) + DEFAULT_VAL_LOWER;
    Red_set.val.range  = (DEFAULT_VAL_UPPER - DEFAULT_VAL_LOWER) / 2;
    std::cout << "Red is default setting" << std::endl;
  }

  if (Yellow_set.isUpdated == false) {
    /*
      ========== Yellow : Default values ==========
      50                < Hue < 70
      DEFAULT_SAT_LOWER < Sat < DEFAULT_SAT_UPPER
      DEFAULT_VAL_LOWER < Val < DEFAULT_VAL_UPPER
     */
    Yellow_set.hue.center = ( ((70 - 50 ) / 2 ) + 50) % 360;
    Yellow_set.hue.range  = ((70 - 50 ) / 2 );
    Yellow_set.sat.center = ((DEFAULT_SAT_UPPER - DEFAULT_SAT_LOWER) / 2 ) + DEFAULT_SAT_LOWER;
    Yellow_set.sat.range  = (DEFAULT_SAT_UPPER - DEFAULT_SAT_LOWER) / 2;
    Yellow_set.val.center = ((DEFAULT_VAL_UPPER - DEFAULT_VAL_LOWER) / 2 ) + DEFAULT_VAL_LOWER;
    Yellow_set.val.range  = (DEFAULT_VAL_UPPER - DEFAULT_VAL_LOWER) / 2;
    std::cout << "Yellow is default setting" << std::endl;
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="2e47032f9b56ff80ab33fd56e8272cb6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="496" endLineNumber="520"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="502" endLineNumber="526"/>
            <text>
<![CDATA[void cache_lane(const vector_map::LaneArray& msg)
{
	all_vmap.lanes = msg.data;
	update_values();
}

void cache_node(const vector_map::NodeArray& msg)
{
	all_vmap.nodes = msg.data;
	update_values();
}

void cache_stopline(const vector_map::StopLineArray& msg)
{
	all_vmap.stoplines = msg.data;
	update_values();
}

void cache_dtlane(const vector_map::DTLaneArray& msg)
{
	all_vmap.dtlanes = msg.data;
	update_values();
}

void config_parameter(const runtime_manager::ConfigLaneRule& msg)
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="049d229ab19b4ef977a5bb5939390656">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_trajectory\sample_trajectory.cpp" startLineNumber="119" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="676" endLineNumber="693"/>
            <text>
<![CDATA[void publish_marker(visualization_msgs::Marker* marker,
		    ros::Publisher& pub,
		    ros::Rate& rate)
{
#if SELF_TRANS
    if(swap_x_y) {
      marker->pose.position.x += 16635;
      marker->pose.position.y += 86432;
    } else {
      marker->pose.position.x += 86432;
      marker->pose.position.y += 16635;
    }
    marker->pose.position.z += -50; // -50
#endif

    ros::ok();
    pub.publish(*marker);
    rate.sleep();
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="31cce4d00e6ea9af80a5ebaeccf114ef">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="103" endLineNumber="134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_rejection.h" startLineNumber="241" endLineNumber="270"/>
            <text>
<![CDATA[          , needs_normals_ (needs_normals)
          , target_cloud_updated_ (true)
          , force_no_recompute_ (false)
        {
        }
      
        /** \brief Empty destructor */
        virtual ~DataContainer () {}

        /** \brief Provide a source point cloud dataset (must contain XYZ
          * data!), used to compute the correspondence distance.  
          * \param[in] cloud a cloud containing XYZ data
          */
        PCL_DEPRECATED ("[pcl::registration::DataContainer::setInputCloud] setInputCloud is deprecated. Please use setInputSource instead.")
        void
        setInputCloud (const PointCloudConstPtr &cloud);

        /** \brief Get a pointer to the input point cloud dataset target. */
        PCL_DEPRECATED ("[pcl::registration::DataContainer::getInputCloud] getInputCloud is deprecated. Please use getInputSource instead.")
        PointCloudConstPtr const
        getInputCloud ();

        /** \brief Provide a source point cloud dataset (must contain XYZ
          * data!), used to compute the correspondence distance.  
          * \param[in] cloud a cloud containing XYZ data
          */
        inline void 
        setInputSource (const PointCloudConstPtr &cloud)
        {
          input_ = cloud;
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="b3450222d1a72a2413e284807dc36f1b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_downloader\pos_downloader.cpp" startLineNumber="545" endLineNumber="558"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_uploader\pos_uploader.cpp" startLineNumber="350" endLineNumber="364"/>
            <text>
<![CDATA[  nh.param<string>("pos_db/db_host_name", db_host_name, DB_HOSTNAME);
  cout << "db_host_name=" << db_host_name << endl;
  nh.param<int>("pos_db/db_port", db_port, DB_PORT);
  cout << "db_port=" << db_port << endl;
  nh.param<string>("pos_db/sshpubkey", sshpubkey, home_dir+SSHPUBKEY);
  cout << "sshpubkey=" << sshpubkey << endl;
  nh.param<string>("pos_db/sshprivatekey", sshprivatekey, home_dir+SSHPRIVATEKEY);
  cout << "sshprivatekey=" << sshprivatekey << endl;
  nh.param<int>("pos_db/ssh_port", ssh_port, SSHPORT);
  cout << "ssh_port=" << ssh_port << endl;
  nh.param<string>("pos_db/sshtunnelhost", sshtunnelhost, SSHTUNNELHOST);
  cout << "sshtunnelhost=" << sshtunnelhost << endl;

  //set server name and port
  sd = SendData(db_host_name, db_port, argv[1], sshpubkey, sshprivatekey, ssh_port, sshtunnelhost);
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="dbcb7c5e6987515a1f293891e141b271">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="251" endLineNumber="282"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="325" endLineNumber="356"/>
            <text>
<![CDATA[	thread_num_x = (pt->max_dim0 < max_threads_num) ? pt->max_dim0 : max_threads_num;
	thread_num_y = (pt->max_numpart < max_threads_num) ? pt->max_numpart : max_threads_num;

	block_num_x = pt->max_dim0 / thread_num_x;
	block_num_y = pt->max_numpart / thread_num_y;
	if(pt->max_dim0 % thread_num_x != 0) block_num_x++;
	if(pt->max_numpart % thread_num_y != 0) block_num_y++;

	blockDimY = thread_num_y / device_num;
	if(thread_num_y%device_num != 0){
		blockDimY++;
	}

	/* prepare for launch dt1d_y */
	if(pt->pid == 0){
		gettimeofday(&tv_kernel_start, NULL);
	}

	res = cuLaunchKernel(
		func_dt1d_y[pt->pid],    // call functions
		block_num_x,    // gridDimX
		block_num_y,    // gridDimY
		pt->L_MAX-pt->interval, // gridDimZ
		thread_num_x,   // blockDimX
		blockDimY,   // blockDimY
		pt->NoC,            // blockDimZ
		sharedMemBytes, // sharedMemBytes
		NULL,           // hStream
		kernel_args_y,  // kernelParams
		NULL            // extra
		);
	if(res != CUDA_SUCCESS) {
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="ba10797e9e9bbd202362be84e75d07da">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="191" endLineNumber="203"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="190" endLineNumber="202"/>
            <text>
<![CDATA[  BLACK,
  GRAY,
  LIGHT_RED,
  LIGHT_GREEN,
  LIGHT_BLUE,
  LIGHT_YELLOW,
  LIGHT_CYAN,
  LIGHT_MAGENTA,
  RED,
  GREEN,
  BLUE,
  YELLOW,
  CYAN,
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="6d7392e4ee7991bfd711d48511f87e15">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="1071" endLineNumber="1087"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="1059" endLineNumber="1079"/>
            <text>
<![CDATA[  MY_CUDA_CHECK(res, "cuMemAlloc(resized_image_size_dev)");

  CUdeviceptr hist_dev;
  res = cuMemAlloc(&hist_dev, sum_size_hist);
  MY_CUDA_CHECK(res, "cuMemAlloc(hist_dev)");

  // CUdeviceptr image_idx_incrementer_dev;
  // res = cuMemAlloc(&image_idx_incrementer_dev, LEN*sizeof(int));
  // MY_CUDA_CHECK(res, "cuMemAlloc(image_idx_incrementer)");

  CUdeviceptr hist_ptr_incrementer_dev;
  res = cuMemAlloc(&hist_ptr_incrementer_dev, LEN*sizeof(unsigned long long int));
  MY_CUDA_CHECK(res, "cuMemAlloc(hist_ptr_incrementer_dev)");

  CUdeviceptr norm_dev;
  res = cuMemAlloc(&norm_dev, sum_size_norm);
  MY_CUDA_CHECK(res, "cuMemAlloc(norm_dev)");

  CUdeviceptr norm_ptr_incrementer_dev;
  res = cuMemAlloc(&norm_ptr_incrementer_dev, LEN*sizeof(unsigned long long int));
  MY_CUDA_CHECK(res, "cuMemAlloc(norm_ptr_incrementer_dev)");
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="efbd63509cf65dba61be3363a6239827">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\sparse_block_matrix_ccs.h" startLineNumber="101" endLineNumber="120"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\sparse_block_matrix_diagonal.h" startLineNumber="75" endLineNumber="93"/>
            <text>
<![CDATA[      const std::vector<int>& blockIndices() const { return _blockIndices;}

      void multiply(double*& dest, const double* src) const
      {
        int destSize=cols();
        if (! dest) {
          dest=new double[destSize];
          memset(dest,0, destSize*sizeof(double));
        }

        // map the memory by Eigen
        Eigen::Map<Eigen::VectorXd> destVec(dest, destSize);
        Eigen::Map<const Eigen::VectorXd> srcVec(src, rows());

#      ifdef G2O_OPENMP
#      pragma omp parallel for default (shared) schedule(dynamic, 10)
#      endif
        for (int i=0; i < static_cast<int>(_diagonal.size()); ++i){
          int destOffset = baseOfBlock(i);
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="64f7e8c953817c97853320706672c9ed">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\cpu\dpm_ocv_cpu.cpp" startLineNumber="463" endLineNumber="485"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="761" endLineNumber="783"/>
            <text>
<![CDATA[    if (image->depth == IPL_DEPTH_32F)
    {
        imgResize = image;
    }
    else
    {
        imgResize = cvCreateImage(cvSize(image->width, image->height),
                IPL_DEPTH_32F, 3);
        cvConvert(image, imgResize);
    }

    W = imgResize->width;
    H = imgResize->height;

    step = powf(2.0f, 1.0f / ((float) Lambda));
    maxNumCells = W / Side_Length;
    if (maxNumCells > H / Side_Length)
    {
        maxNumCells = H / Side_Length;
    }
    numStep = (int) (logf((float) maxNumCells / (5.0f)) / logf(step)) + 1;

    allocFeaturePyramidObject(maps, numStep + Lambda);
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="a4d519d6eb221f5a3776a4de08cdee01">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2063" endLineNumber="2083"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2127" endLineNumber="2147"/>
            <text>
<![CDATA[  obj.linkwaid = std::stoi(columns[22]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::WayArea& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.waid = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::RoadEdge& obj)
{
  std::vector<std::string> columns;
  std::string column;
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="96eb89635f9a046d721021c09e399d22">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="176" endLineNumber="194"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="258" endLineNumber="276"/>
            <text>
<![CDATA[	if (indexes.empty())
		return l;

	for (const size_t i : indexes)
		l = apply_acceleration(l, acceleration, i, behind_cnt + 1, 0);

	std::reverse(l.waypoints.begin(), l.waypoints.end());

	std::vector<size_t> reverse_indexes;
	for (const size_t i : indexes)
		reverse_indexes.push_back(l.waypoints.size() - i - 1);
	std::reverse(reverse_indexes.begin(), reverse_indexes.end());

	for (const size_t i : reverse_indexes)
		l = apply_acceleration(l, acceleration, i, ahead_cnt + 1, 0);

	std::reverse(l.waypoints.begin(), l.waypoints.end());

	return l;
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="ba918315fa3f0632e3024f4736979771">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\load_model.cpp" startLineNumber="240" endLineNumber="259"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\load_model.cpp" startLineNumber="343" endLineNumber="361"/>
            <text>
<![CDATA[	for(int i = 0; i < PF->NoP; i++) {
		PF->partfilter[i] = (FLOAT *)pointer;
		int NUMB=PF->part_size[i][0]*PF->part_size[i][1]*PF->part_size[i][2];
		pointer += NUMB*sizeof(FLOAT);
	}
#endif
#endif
	/* reset the location of file-pointer */
	fseek(file, before_loop_location, SEEK_SET);

	for(int i = 0; i < PF->NoP; i++) {
		int NUMB = PF->part_size[i][0]*PF->part_size[i][1]*PF->part_size[i][2];

		/* adjust the location of file-pointer */
		fscanf(file,FLOAT_SCAN_FMT3,&dummy_t1,&dummy_t2,&dummy_t3);  // this is dummy scan

		for (int j = 0; j < NUMB; j++) {
			fscanf(file,FLOAT_SCAN_FMT,&t1);
			PF->partfilter[i][j]=t1;
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="add53a1d27422aad314e7d81fa655389">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="257" endLineNumber="276"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="535" endLineNumber="555"/>
            <text>
<![CDATA[		create_waypoint(update_waypoint);
	}
}

} // namespace

int main(int argc, char **argv)
{
	ros::init(argc, argv, "lane_rule");

	ros::NodeHandle n;

	int sub_vmap_queue_size;
	n.param<int>("/lane_rule/sub_vmap_queue_size", sub_vmap_queue_size, 1);
	int sub_waypoint_queue_size;
	n.param<int>("/lane_rule/sub_waypoint_queue_size", sub_waypoint_queue_size, 1);
	int sub_config_queue_size;
	n.param<int>("/lane_rule/sub_config_queue_size", sub_config_queue_size, 1);
	int pub_waypoint_queue_size;
	n.param<int>("/lane_rule/pub_waypoint_queue_size", pub_waypoint_queue_size, 1);
	bool pub_waypoint_latch;
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="7cb9ab80a82f61fc327a323e8fa562bf">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\gazebo\laser_scan_converter\src\converter.cpp" startLineNumber="41" endLineNumber="58"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\gazebo\twist_cmd_converter\src\converter.cpp" startLineNumber="43" endLineNumber="60"/>
            <text>
<![CDATA[class TwistCmdConverter {
private:
  boost::mutex m_mutex_;
  // ROS
  ros::NodeHandle nh_;
  ros::Subscriber sub_twist_;
  ros::Publisher pub_twist_;

  int queue_size_;
  string twist_in_, twist_out_;

public:
  TwistCmdConverter()
      : nh_("~"), queue_size_(100), twist_in_("/twist_in"),
        twist_out_("/twist_out") {
    // Subscribe to the cloud topic using both the old message format and the
    // new
    sub_twist_ = nh_.subscribe(twist_in_, queue_size_,
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="ff60dabcac2d2cfc39f9e9065ac5be3c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_sender\tablet_sender.cpp" startLineNumber="61" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_sender\tablet_sender.cpp" startLineNumber="70" endLineNumber="90"/>
            <text>
<![CDATA[struct can_request {
	int32_t type;
	int32_t driveshift;

	can_request(const vehicle_socket::CanInfo& msg)
	: type(CAN_INFO_TYPE), driveshift(msg.driveshift) {
	}
};

struct mode_request {
	int32_t type;
	int32_t mode;

	mode_request(const tablet_socket::mode_info& msg)
	: type(MODE_INFO_TYPE), mode(msg.mode) {
	}
};

struct ndt_request {
	int32_t type;
	float exe_time;
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="de22450d0d0aa443ff6ab0cd45416932">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_receiver\udon_receiver.cpp" startLineNumber="137" endLineNumber="153"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="229" endLineNumber="245"/>
            <text>
<![CDATA[	int connect_fd;
	while (true) {
		sockaddr_in client_addr;
		socklen_t len = sizeof(client_addr);
		connect_fd = accept(listen_fd, reinterpret_cast<sockaddr *>(&client_addr), &len);
		if (connect_fd < 0) {
			ROS_ERROR_STREAM("accept: " << std::strerror(errno));
			goto close_listen_fd;
		}

		if (inet_ntop(AF_INET, &client_addr.sin_addr, astr, sizeof(astr)) == nullptr) {
			ROS_ERROR_STREAM("inet_ntop: " << std::strerror(errno));
			goto close_connect_fd;
		}
		ROS_INFO_STREAM("connect " << astr << ":" << ntohs(client_addr.sin_port));

		try {
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="7ce61f05306041b3db75b3134777258f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="279" endLineNumber="301"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="425" endLineNumber="446"/>
            <text>
<![CDATA[		exit(1);
	}

	if(pt->pid == 0 && pt->calc_flag == PART){
		gettimeofday(&tv_fconv_kernel_end, NULL);
		tvsub(&tv_fconv_kernel_end, &tv_fconv_kernel_start, &tv);
		time_fconv_kernel += tv.tv_sec * 1000.0 + (float)tv.tv_usec / 1000.0;
	}

	if(pt->pid == 0){
		gettimeofday(&tv_kernel_end, NULL);
		tvsub(&tv_kernel_end, &tv_kernel_start, &tv);
		time_kernel += tv.tv_sec * 1000.0 + (float)tv.tv_usec / 1000.0;
	}


	/* download C from GPU */
	if(pt->pid == 0){
		gettimeofday(&tv_memcpy_start, NULL);
	}
	if(pt->pid == 0 && pt->calc_flag == PART){
		gettimeofday(&tv_fconv_memcpyDtoH_start, NULL);
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="a2aad177326a309d2e0a81003bf14bd0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="129" endLineNumber="142"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="128" endLineNumber="140"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="127" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="126" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="125" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="124" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="122" endLineNumber="135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="109" endLineNumber="126"/>
            <text>
<![CDATA[static ros::Publisher predict_pose_pub;
static geometry_msgs::PoseStamped predict_pose_msg;

static ros::Publisher icp_pose_pub;
static geometry_msgs::PoseStamped icp_pose_msg;

static ros::Publisher current_pose_pub;
static geometry_msgs::PoseStamped current_pose_msg;

static ros::Publisher localizer_pose_pub;
static geometry_msgs::PoseStamped localizer_pose_msg;

static ros::Publisher estimate_twist_pub;
static geometry_msgs::TwistStamped estimate_twist_msg;

static ros::Time current_scan_time;
static ros::Time previous_scan_time;
static ros::Duration scan_duration;
]]>
            </text>
        </set>
        <set lineCount="13" fingerprint="731972b81916b346b5baaa76059c95c2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="154" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\sync_obj_reproj.cpp" startLineNumber="352" endLineNumber="370"/>
            <text>
<![CDATA[    pthread_mutex_unlock(&mutex);
    pthread_mutex_lock(&mutex);
    if (obj_label_flag == true) {
        publish();
    }
    pthread_mutex_unlock(&mutex);
}

void current_pose_callback(const geometry_msgs::PoseStamped::ConstPtr& current_pose_msg) {
    pthread_mutex_lock(&mutex);
    current_pose_ringbuf.push_front(*current_pose_msg);
    //image_obj_tracked is empty
    if (image_obj_tracked_ringbuf.begin() == image_obj_tracked_ringbuf.end()) {
        ROS_INFO("image_obj_tracked ring buffer is empty");
        pthread_mutex_unlock(&mutex);
        return;
    }

    buf_flag = true;
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="299d20c4a4011fb21e38e4ad18ab359e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\klt_track\klt_track.cpp" startLineNumber="326" endLineNumber="344"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="881" endLineNumber="901"/>
            <text>
<![CDATA[		_min_heights.clear();
		_max_heights.clear();

		for (unsigned int i=0; i<num;i++)
		{
			cv::Rect tmp;
			tmp.x = objects.at(i).rect.x;
			tmp.y = objects.at(i).rect.y;
			tmp.width = objects.at(i).rect.width;
			tmp.height = objects.at(i).rect.height;
			_dpm_detections.push_back(cv::LatentSvmDetector::ObjectDetection(tmp, 0));
			_ranges.push_back(objects.at(i).range);
			_min_heights.push_back(objects.at(i).min_height);
			_max_heights.push_back(objects.at(i).max_height);
		}
		//_ready = true;
		detect_ready_ = true;
	}
	//cout << "received pos" << endl;

	publish_if_possible();
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="15c007d89106b5e29c64090b0df47ebc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="86" endLineNumber="101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="1" endLineNumber="31"/>
            <text>
<![CDATA[#ifndef __VECTOR_MAP__
#define __VECTOR_MAP__

//#include "ros/ros.h"
//#include "std_msgs/String.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <vector>
#include <map>
#include <string>
#include "Math.h"

#include <vector_map/vector_map.h>


typedef struct{
  int pid;
  double bx;
  double ly;
  double h;
  double b;
  double l;
  int ref;
  int mcode1;
  int mcode2;
  int mcode3;
}Point;

typedef struct{
  int lid;
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="8b55e0db7c11a9146facbe87dc4d2b49">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\ndt.h" startLineNumber="220" endLineNumber="234"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\ndt.h" startLineNumber="219" endLineNumber="232"/>
            <text>
<![CDATA[      using Registration<PointSource, PointTarget>::reg_name_;
      using Registration<PointSource, PointTarget>::getClassName;
      using Registration<PointSource, PointTarget>::input_;
      using Registration<PointSource, PointTarget>::indices_;
      using Registration<PointSource, PointTarget>::target_;
      using Registration<PointSource, PointTarget>::nr_iterations_;
      using Registration<PointSource, PointTarget>::max_iterations_;
      using Registration<PointSource, PointTarget>::previous_transformation_;
      using Registration<PointSource, PointTarget>::final_transformation_;
      using Registration<PointSource, PointTarget>::transformation_;
      using Registration<PointSource, PointTarget>::transformation_epsilon_;
      using Registration<PointSource, PointTarget>::converged_;
      using Registration<PointSource, PointTarget>::corr_dist_threshold_;
      using Registration<PointSource, PointTarget>::inlier_threshold_;
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="99e596ed324341e7114f75578eaa8226">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="1230" endLineNumber="1245"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="922" endLineNumber="937"/>
            <text>
<![CDATA[  cuEventRecord(resize_end, NULL);
  MY_CUDA_CHECK(res, "cuEventRecord(resize_end)");
  cuEventSynchronize(resize_end);
  MY_CUDA_CHECK(res, "cuEventSynchronize(resize_end)");

  float elapsed_time;
  res = cuEventElapsedTime(&elapsed_time, resize_start, resize_end);
  MY_CUDA_CHECK(res, "cuEventElapsedTime(resize)");
#ifdef PRINT_INFO
  printf("\n-----resize image : %f", elapsed_time);
#endif

  res = cuEventDestroy(resize_start);
  MY_CUDA_CHECK(res, "cuEventDestroy(resize_start)");
  cuEventDestroy(resize_end);
  MY_CUDA_CHECK(res, "cuEventDestroy(resize_end)");
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="2eeeb247b3cc7eccd4932f8d2edcecc5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="147" endLineNumber="171"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\featurepyramid.cpp" startLineNumber="110" endLineNumber="135"/>
            <text>
<![CDATA[		MI->IM_HEIGHT=IM->height;
		/*printf("楂樸仌%d\n",MI->IM_HEIGHT);*/
		MI->IM_WIDTH=IM->width;
		/*printf("妯?%d\n",MI->IM_WIDTH);*/
		MI->ini=false;
	}
	else
	{
		interval = MI->interval;
		max_scale = MI->max_scale;
		MI->IM_HEIGHT = IM->height;
		MI->IM_WIDTH = IM->width;
	}

	//return
	FLOAT *scales = (FLOAT*)calloc((max_scale+interval),sizeof(FLOAT));		//Model information
	return(scales);
}

//initialize feature size matrix

int *dpm_ttic_cpu_ini_featsize(Model_info *MI)
{
	const int LofFeat=MI->max_scale+MI->interval;
	int *featsize = (int*)calloc(LofFeat*2,sizeof(FLOAT)); // feature size information matrix
	return(featsize);
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="7628eb211f3cdbbf42610bdba98135bf">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\lib\pos_db\SendData.cpp" startLineNumber="81" endLineNumber="100"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\lib\obj_db\SendData.cpp" startLineNumber="67" endLineNumber="86"/>
            <text>
<![CDATA[	if (sock < 0) {
		perror("socket");
		return -1;
	}

	server.sin_family = AF_INET;
	server.sin_port = htons(port_); // HTTP port is 80

	server.sin_addr.s_addr = inet_addr(host_name_.c_str());
	if (server.sin_addr.s_addr == 0xffffffff) {
		struct hostent *host;

		host = gethostbyname(host_name_.c_str());
		if (host == nullptr) {
			if (h_errno == HOST_NOT_FOUND) {
				// h_errno is defined in extern
				printf("host not found : %s\n", host_name_.c_str());
			} else {

				printf("%s : %s\n", hstrerror(h_errno), host_name_.c_str());
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="4da33975a845282a489946453f343e93">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="737" endLineNumber="756"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\featurepyramid.cpp" startLineNumber="381" endLineNumber="400"/>
            <text>
<![CDATA[	FLOAT *R= Output;
	FLOAT *G= Output+SQ;
	FLOAT *B= Output+2*SQ;
	char *IDATA = Input->imageData;

	//pick intensity of pixel (color)
	for(int x=0;x<width;x++)
	{
		int XT = x*3;
		for(int y=0;y<height;y++)
		{
			int pp = WS*y+XT;
			*(B++)=(FLOAT)(unsigned char)IDATA[pp];	//B
			pp++;
			*(G++)=(FLOAT)(unsigned char)IDATA[pp];	//G
			pp++;
			*(R++)=(FLOAT)(unsigned char)IDATA[pp];	//R
		}
	}
	return(Output);
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="d62b3815ba4af2148e0be3049eea11f9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="37" endLineNumber="85"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="37" endLineNumber="85"/>
            <text>
<![CDATA[#define OUTPUT // If you want to output "position_log.txt", "#define OUTPUT".

#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>

#include <ros/ros.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Float32.h>
#include <sensor_msgs/PointCloud2.h>
#include <velodyne_pointcloud/point_types.h>
#include <velodyne_pointcloud/rawdata.h>

#include <tf/transform_broadcaster.h>
#include <tf/transform_datatypes.h>

#include <pcl/io/io.h>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl_conversions/pcl_conversions.h>

#ifdef USE_FAST_PCL
#include <fast_pcl/registration/ndt.h>
#include <fast_pcl/filters/voxel_grid.h>
#else
#include <pcl/registration/ndt.h>
#include <pcl/filters/voxel_grid.h>
#endif

#include <runtime_manager/ConfigNdtMapping.h>
#include <runtime_manager/ConfigNdtMappingOutput.h>

struct pose {
    double x;
    double y;
    double z;
    double roll;
    double pitch;
    double yaw;
};

// global variables
static pose previous_pose, guess_pose, current_pose, ndt_pose, added_pose, localizer_pose;

static double offset_x, offset_y, offset_z, offset_yaw; // current_pose - previous_pose

static pcl::PointCloud<pcl::PointXYZI> map;
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="1d5baecf068faaa1145afed254d8a355">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gldraw.h" startLineNumber="386" endLineNumber="399"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gldraw.h" startLineNumber="385" endLineNumber="398"/>
            <text>
<![CDATA[        l[0], l[1], l[2],
        l[0], l[1], h[2],
        h[0], l[1], h[2],
        h[0], l[1], l[2],
        l[0], l[1], l[2],
        l[0], h[1], l[2],
        h[0], h[1], l[2],
        h[0], l[1], l[2],
        h[0], h[1], l[2],
        h[0], h[1], h[2],
        l[0], h[1], h[2],
        l[0], h[1], l[2],
        l[0], h[1], h[2],
        l[0], l[1], h[2],
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="0528b595229007ac131ef2d6c4e32fd1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\vectacam\nodes\vectacam\VectaCam.cpp" startLineNumber="95" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\vectacam\nodes\vectacam\VectaCam.cpp" startLineNumber="94" endLineNumber="107"/>
            <text>
<![CDATA[				 0x00, 0x00, 0x00, 0x00, // data_output
				 0x00, 0x00, 0x00, 0x00, //
				 0x00, 0x00, 0x00, 0x00, //
				 0x00, 0x00, 0x00, 0x00, //
				 0x00, 0x00, 0x00, 0x00, //
				 0x00, 0x00, 0x00, 0x00, //
				 0x00, 0x00, 0x00, 0x00, //
				 0x00, 0x00, 0x00, 0x00, //
				 0x00, 0x00, 0x00, 0x00, //
				 0x00, 0x00, 0x00, 0x00, //
				 0x00, 0x00, 0x00, 0x00, //
				 0x00, 0x00, 0x00, 0x00, //
				 0x00, 0x00, 0x00, 0x00, //
				 0x00, 0x00, 0x00, 0x00, //
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="04e892ed18f38ab5eccc5df1b016adb7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\load_model.cpp" startLineNumber="188" endLineNumber="210"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\load_model.cpp" startLineNumber="142" endLineNumber="164"/>
            <text>
<![CDATA[	fclose(file);

	return(MI);
}

static Rootfilters *load_rootfilter(const char *filename)
{
	FILE *file;
	Rootfilters *RF=(Rootfilters*)malloc(sizeof(Rootfilters));	//Root filter

	if( (file=fopen(filename, "r"))==NULL )
	{
		printf("Root-filter file not found \n");
		exit(-1);
	}

	FLOAT t1,t2,t3;
	fscanf(file,FLOAT_SCAN_FMT,&t1);
	RF->NoR=(int)t1;						//number of root filter

	RF->root_size=(int**)malloc(sizeof(int*)*RF->NoR);		//size of root filter
	RF->rootfilter=(FLOAT**)malloc(sizeof(FLOAT*)*RF->NoR);	//weight of root filter
	RF->rootsym=(int*)malloc(sizeof(int)*RF->NoR);		//symmetric information of root
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="d5ba1f42ec252c40b7abf17576b4e4dd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set.cpp" startLineNumber="207" endLineNumber="224"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set.cpp" startLineNumber="257" endLineNumber="279"/>
            <text>
<![CDATA[    tf::Vector3 tf_waypoint = point2vector(waypoint);
    tf_waypoint.setZ(0);

    int stop_point_count = 0;
    for (const auto& p : points)
    {
      tf::Vector3 point_vector(p.x, p.y, 0);

      // 2D distance between waypoint and points (obstacle)
      double dt = tf::tfDistance(point_vector, tf_waypoint);
      if (dt < stop_range)
      {
        stop_point_count++;
        geometry_msgs::Point point_temp;
        point_temp.x = p.x;
        point_temp.y = p.y;
        point_temp.z = p.z;
	obstacle_points->setStopPoint(calcAbsoluteCoordinate(point_temp, localizer_pose.pose));
      }
    }

    // there is an obstacle if the number of points exceeded the threshold
    if (stop_point_count > points_threshold)
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="f2d19b66a561a107f5a4080ce83a9f87">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\nodes\calibration_publisher\calibration_publisher.cpp" startLineNumber="88" endLineNumber="109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\pointgrey\nodes\ladybug\ladybug.cpp" startLineNumber="51" endLineNumber="80"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\pointgrey\nodes\grasshopper3\grasshopper3.cpp" startLineNumber="70" endLineNumber="99"/>
            <text>
<![CDATA[	msg.height = imgSize.height;
	msg.width  = imgSize.width;

	for (int row=0; row<3; row++)
	{
		for (int col=0; col<3; col++)
		{
			msg.K[row * 3 + col] = camMat.at<double>(row, col);
		}
	}

	for (int row=0; row<3; row++)
	{
		for (int col=0; col<4; col++)
		{
			if (col == 3)
			{
				msg.P[row * 4 + col] = 0.0f;
			} else
			{
				msg.P[row * 4 + col] = camMat.at<double>(row, col);
			}
		}
	}

	for (int row=0; row<disCoeff.rows; row++)
	{
		for (int col=0; col<disCoeff.cols; col++)
		{
			msg.D.push_back(disCoeff.at<double>(row, col));
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="9463989989130de520da4ef758b66886">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_mobility\sample_mobility.cpp" startLineNumber="91" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="134" endLineNumber="147"/>
            <text>
<![CDATA[  sphere_list.header.frame_id = "/mobility";
  sphere_list.header.stamp = ros::Time::now();
  sphere_list.ns = "mo_marker";
  sphere_list.id = 0;
  sphere_list.type = visualization_msgs::Marker::SPHERE_LIST;
  sphere_list.action = visualization_msgs::Marker::ADD;
  sphere_list.lifetime = ros::Duration();
  sphere_list.color.r = 1.0;
  sphere_list.color.g = 0.0;
  sphere_list.color.b = 0.0;
  sphere_list.color.a = 1.0;
  sphere_list.scale.x = 10.0;
  sphere_list.scale.y = 10.0;
  sphere_list.scale.z = 10.0;
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="943d59f1a220a9fe91c76de74e30848e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="205" endLineNumber="218"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="193" endLineNumber="206"/>
            <text>
<![CDATA[  case RANGE:
     ss << "SELECT 0,lat,lon,x,y,z,tm FROM pos"
        << " WHERE ((lat >= "<< fixed << setprecision(7) << positionRange[0]
        << " AND lat < " << fixed << setprecision(7) << positionRange[1]
        << " AND lon >= " << fixed << setprecision(7) << positionRange[2]
        << " AND lon < " << fixed << setprecision(7) << positionRange[3] << ")"
        << " OR (x >= " << fixed << setprecision(7) << geoPosition[0]
        << " AND x < "  << fixed << setprecision(7) << geoPosition[1]
        << " AND y >= " << fixed << setprecision(7) << geoPosition[2]
        << " AND y < " << fixed << setprecision(7) << geoPosition[3] << "))"
        << " AND tm > TO_TIMESTAMP(Second,SINCE_EPOCH(Second,current_timestamp)-1) and tm <= current_timestamp;";
      break;
  case TEST:
     ss << "SELECT 0,lat,lon,0,x,y,z,tm FROM pos"
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="85a2ce91c8a198f0c9d709b75e5cca30">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\nodes\pure_pursuit\pure_pursuit_core.h" startLineNumber="51" endLineNumber="74"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.h" startLineNumber="58" endLineNumber="81"/>
            <text>
<![CDATA[  right,
  left,

  unknown = -1,
};

template <class T>
typename std::underlying_type<T>::type enumToInteger(T t)
{
  return static_cast<typename std::underlying_type<T>::type>(t);
}

class LaneSelectNode
{
public:
  LaneSelectNode();
  ~LaneSelectNode();

  void run();

private:
  // handle
  ros::NodeHandle nh_;
  ros::NodeHandle private_nh_;
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="0593890cd620a5cb9d3bd3ced82729cc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="92" endLineNumber="119"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="88" endLineNumber="115"/>
            <text>
<![CDATA[        res = cuModuleGetFunction(&ConvolutionKernel_func[i], module[i],
                "ConvolutionKernel");
        CUDA_CHECK(res, "cuModuleGetFunction(ConvolutionKernel)");

        res = cuModuleGetFunction(
                &DistanceTransformTwoDimensionalProblem_func[i], module[i],
                "DistanceTransformTwoDimensionalProblemKernel");
        CUDA_CHECK(res, "cuModuleGetFunction(DistanceTransformTwoDimensionalProblemKernel)");

        res = cuModuleGetFunction(&BilinearKernelTex32F_func[i], module[i],
                "BilinearKernelTex32F");
        CUDA_CHECK(res, "cuModuleGetFunction(BilinearKernelTex32F)");

        res = cuModuleGetFunction(&calculateHistogram_func[i], module[i],
                "calculateHistogram");
        CUDA_CHECK(res, "cuModuleGetFunction(calculateHistogram)");

        res = cuModuleGetFunction(&getFeatureMaps_func[i], module[i],
                "getFeatureMaps");
        CUDA_CHECK(res, "cuModuleGetFunction(getFeatureMaps)");

        res = cuModuleGetFunction(&calculateNorm_func[i], module[i],
                "calculateNorm");
        CUDA_CHECK(res, "cuModuleGetFunction(calculateNorm)");

        res = cuModuleGetFunction(&normalizeAndTruncate_func[i], module[i],
                "normalizeAndTruncate");
        CUDA_CHECK(res, "cuModuleGetFunction(normalizeAndTruncate)");
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="f3d421119b47b448a85f1c3a34b0e51c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="452" endLineNumber="471"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="357" endLineNumber="377"/>
            <text>
<![CDATA[    static double align_time, getFitnessScore_time = 0.0;

    // Setting point cloud to be aligned.
//    ndt.setInputSource(filtered_scan_ptr);
    icp.setInputSource(filtered_scan_ptr);

    // Guess the initial gross estimation of the transformation
    predict_pose.x = previous_pose.x + offset_x;
    predict_pose.y = previous_pose.y + offset_y;
    predict_pose.z = previous_pose.z + offset_z;
    predict_pose.roll = previous_pose.roll;
    predict_pose.pitch = previous_pose.pitch;
    predict_pose.yaw = previous_pose.yaw + offset_yaw;

    Eigen::Translation3f init_translation(predict_pose.x, predict_pose.y, predict_pose.z);
    Eigen::AngleAxisf init_rotation_x(predict_pose.roll, Eigen::Vector3f::UnitX());
    Eigen::AngleAxisf init_rotation_y(predict_pose.pitch, Eigen::Vector3f::UnitY());
    Eigen::AngleAxisf init_rotation_z(predict_pose.yaw, Eigen::Vector3f::UnitZ());
    Eigen::Matrix4f init_guess = (init_translation * init_rotation_z * init_rotation_y * init_rotation_x) * tf_btol;

    pcl::PointCloud<pcl::PointXYZ>::Ptr output_cloud(new pcl::PointCloud<pcl::PointXYZ>);
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="d41c8e1a0e26e102aa9683050c7704db">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="364" endLineNumber="385"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\cpu\dpm_ocv_cpu.cpp" startLineNumber="343" endLineNumber="364"/>
            <text>
<![CDATA[    for(i = 0; i < k / 2; i++)
    {
        nearest[i] = -1;
    }/*for(i = 0; i < k / 2; i++)*/
    for(i = k / 2; i < k; i++)
    {
        nearest[i] = 1;
    }/*for(i = k / 2; i < k; i++)*/

    for(j = 0; j < k / 2; j++)
    {
        b_x = k / 2 + j + 0.5f;
        a_x = k / 2 - j - 0.5f;
        w[j * 2    ] = 1.0f/a_x * ((a_x * b_x) / ( a_x + b_x));
        w[j * 2 + 1] = 1.0f/b_x * ((a_x * b_x) / ( a_x + b_x));
    }/*for(j = 0; j < k / 2; j++)*/
    for(j = k / 2; j < k; j++)
    {
        a_x = j - k / 2 + 0.5f;
        b_x =-j + k / 2 - 0.5f + k;
        w[j * 2    ] = 1.0f/a_x * ((a_x * b_x) / ( a_x + b_x));
        w[j * 2 + 1] = 1.0f/b_x * ((a_x * b_x) / ( a_x + b_x));
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="56154f0c96c3fcb0771c537f40e5c9f5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_rejection.h" startLineNumber="137" endLineNumber="164"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="155" endLineNumber="186"/>
            <text>
<![CDATA[        getInputTarget () { return (target_ ); }


        /** \brief See if this rejector requires source normals */
        virtual bool
        requiresSourceNormals () const
        { return (false); }

        /** \brief Abstract method for setting the source normals */
        virtual void
        setSourceNormals (pcl::PCLPointCloud2::ConstPtr /*cloud2*/)
        {
          PCL_WARN ("[pcl::registration::%s::setSourceNormals] This class does not require input source normals", getClassName ().c_str ());
        }
        
        /** \brief See if this rejector requires target normals */
        virtual bool
        requiresTargetNormals () const
        { return (false); }

        /** \brief Abstract method for setting the target normals */
        virtual void
        setTargetNormals (pcl::PCLPointCloud2::ConstPtr /*cloud2*/)
        {
          PCL_WARN ("[pcl::registration::%s::setTargetNormals] This class does not require input target normals", getClassName ().c_str ());
        }

        /** \brief Provide a pointer to the vector of indices that represent the 
          * input source point cloud.
          * \param[in] indices a pointer to the vector of indices 
          */
        inline void
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="f5b317136f39880adba9891451ee4c7a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_matching\orb_matching.cpp" startLineNumber="513" endLineNumber="539"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_mapping\orb_mapping.cpp" startLineNumber="235" endLineNumber="260"/>
            <text>
<![CDATA[int main (int argc, char *argv[])
{
	const string orbVocabFile (ORB_SLAM_VOCABULARY);

	ros::init(argc, argv, "orb_mapping", ros::init_options::AnonymousName);
	ros::start();
	ros::NodeHandle nodeHandler("~");

	string mapPath;
	nodeHandler.getParam("map_file", mapPath);

	string configFile;
	nodeHandler.getParam("configuration_file", configFile);

	ORB_SLAM2::System SLAM(orbVocabFile,
		configFile,
		ORB_SLAM2::System::MONOCULAR,
		true,
		mapPath,
		System::MAPPING);

	ORB_Mapper Mapper (SLAM, nodeHandler);

	string imageTopic;
	nodeHandler.getParam("image_topic", imageTopic);
	Mapper.imageSub = Mapper.imageBuf->subscribe (imageTopic, 1,  &ORB_Mapper::imageCallback, &Mapper, Mapper.th);
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="61346ecdf013b63836a153c3e79d9bc4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\sync_obj_reproj.cpp" startLineNumber="172" endLineNumber="190"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="149" endLineNumber="167"/>
            <text>
<![CDATA[        pthread_mutex_unlock(&mutex);
        ROS_INFO("cluster_centroids ring buffer is empty");
        return;
    }
    buf_flag = true;
    pthread_mutex_unlock(&mutex);
    pthread_mutex_lock(&mutex);
    if (obj_pose_flag == true) {
        publish();
    }
    pthread_mutex_unlock(&mutex);
}

void cluster_centroids_callback(const lidar_tracker::centroids::ConstPtr& cluster_centroids_msg) {
    pthread_mutex_lock(&mutex);
    cluster_centroids_ringbuf.push_front(*cluster_centroids_msg);
    //obj_label is empty
    if (obj_label_ringbuf.begin() == obj_label_ringbuf.end()) {
        ROS_INFO("obj_label ring buffer is empty");
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="0e15b28dccd357243f9c563a00278426">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="11" endLineNumber="26"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="129" endLineNumber="145"/>
            <text>
<![CDATA[void VectorMap::load_dtlanes(const vector_map::DTLaneArray& msg)
{
  for (const auto& dtlane : msg.data)
    {
      DTLane tmp;
      tmp.did   = dtlane.did;
      tmp.dist  = dtlane.dist;
      tmp.pid   = dtlane.pid;
      tmp.dir   = dtlane.dir;
      tmp.apara = dtlane.apara;
      tmp.r     = dtlane.r;
      tmp.slope = dtlane.slope;
      tmp.cant  = dtlane.cant;
      tmp.lw    = dtlane.lw;
      tmp.rw    = dtlane.rw;

      dtlanes.insert( std::map<int, DTLane>::value_type(tmp.did, tmp) );
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="5016fbadc878b7a1690912561e9291d5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\dpm_ocv_gpu.cpp" startLineNumber="372" endLineNumber="388"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\cpu\dpm_ocv_cpu.cpp" startLineNumber="536" endLineNumber="552"/>
            <text>
<![CDATA[    CvLSVMFeaturePyramid *H = 0;
    CvPoint *points = 0, *oppPoints = 0;
    int kPoints = 0;
    float *score = 0;
    unsigned int maxXBorder = 0, maxYBorder = 0;
    int numBoxesOut = 0;
    CvPoint *pointsOut = 0;
    CvPoint *oppPointsOut = 0;
    float *scoreOut = 0;
    CvSeq* result_seq = 0;
    int error = 0;

    if(image->nChannels == 3)
        cvCvtColor(image, image, CV_BGR2RGB);

    // Getting maximum filter dimensions
    getMaxFilterDims((const CvLSVMFilterObject**)(detector->filters), detector->num_components,
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="8edf55125143184d6d1c524ef4ca91ed">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="112" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="112" endLineNumber="136"/>
            <text>
<![CDATA[static ros::Publisher predict_pose_pub;
static geometry_msgs::PoseStamped predict_pose_msg;

static ros::Publisher ndt_pose_pub;
static geometry_msgs::PoseStamped ndt_pose_msg;

// current_pose is published by vel_pose_mux
/*
static ros::Publisher current_pose_pub;
static geometry_msgs::PoseStamped current_pose_msg;
*/

static ros::Publisher localizer_pose_pub;
static geometry_msgs::PoseStamped localizer_pose_msg;

static ros::Publisher estimate_twist_pub;
static geometry_msgs::TwistStamped estimate_twist_msg;

static ros::Time current_scan_time;
static ros::Time previous_scan_time;
static ros::Duration scan_duration;

static double exe_time = 0.0;
static int iteration = 0;
static double fitness_score = 0.0;
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="1312d08d912cbc1aab2efb2d0a744670">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\glviewer\GLViewer\glviewer.cpp" startLineNumber="208" endLineNumber="229"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\glviewer\GLViewer\glviewer.cpp" startLineNumber="198" endLineNumber="219"/>
            <text>
<![CDATA[        break;
    case Qt::Key_W://w
        {
            cameraparameters.transform.block<3,3>(0,0)=cameraparameters.transform.block<3,3>(0,0)*Eigen::AngleAxisd(cameraparameters.rspeed*GL_PI/180.0,Eigen::Vector3d::UnitX());
        }
        break;
    case Qt::Key_S://s
        {
            cameraparameters.transform.block<3,3>(0,0)=cameraparameters.transform.block<3,3>(0,0)*Eigen::AngleAxisd(-cameraparameters.rspeed*GL_PI/180.0,Eigen::Vector3d::UnitX());
        }
        break;
    case Qt::Key_A://a
        {
            cameraparameters.transform.block<3,3>(0,0)=cameraparameters.transform.block<3,3>(0,0)*Eigen::AngleAxisd(cameraparameters.rspeed*GL_PI/180.0,Eigen::Vector3d::UnitY());
        }
        break;
    case Qt::Key_D://d
        {
            cameraparameters.transform.block<3,3>(0,0)=cameraparameters.transform.block<3,3>(0,0)*Eigen::AngleAxisd(-cameraparameters.rspeed*GL_PI/180.0,Eigen::Vector3d::UnitY());
        }
        break;
    case Qt::Key_Q://q
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="bc9e8812fd8056d4949d8dcb1fbd56cb">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\space_filter\space_filter.cpp" startLineNumber="70" endLineNumber="90"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="247" endLineNumber="267"/>
            <text>
<![CDATA[	pcl::PointIndices::Ptr far_indices (new pcl::PointIndices);
	for(unsigned int i=0; i< in_cloud_ptr->points.size(); i++)
	{
		pcl::PointXYZ current_point;
		current_point.x=in_cloud_ptr->points[i].x;
		current_point.y=in_cloud_ptr->points[i].y;
		current_point.z=in_cloud_ptr->points[i].z;

		if (
				current_point.y > (in_left_lane_threshold) || current_point.y < -1.0*in_right_lane_threshold
			)
		{
			far_indices->indices.push_back(i);
		}
	}
	out_cloud_ptr->points.clear();
	pcl::ExtractIndices<pcl::PointXYZ> extract;
	extract.setInputCloud (in_cloud_ptr);
	extract.setIndices(far_indices);
	extract.setNegative(true);//true removes the indices, false leaves only the indices
	extract.filter(*out_cloud_ptr);
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="eae09ac01c8080673acb114868c77ed8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="185" endLineNumber="199"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\lidar_tracker\nodes\obj_fusion\sync_obj_fusion.cpp" startLineNumber="209" endLineNumber="223"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\sync_obj_reproj.cpp" startLineNumber="432" endLineNumber="446"/>
            <text>
<![CDATA[bool publish() {
    if (buf_flag) {
        ROS_INFO("publish");
        image_obj_tracked__pub.publish(image_obj_tracked_buf);
        current_pose__pub.publish(current_pose_buf);
        if (obj_label_flag == true){
            buf_flag = false;
            obj_label_flag = false;
            image_obj_tracked_ringbuf.clear();
            current_pose_ringbuf.clear();
        }
        return true;
    } else {
        ROS_INFO("publish failed");
        return false;
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="66a561b0b6ea462083ef0df83f7bf58c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1643" endLineNumber="1662"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1755" endLineNumber="1774"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1670" endLineNumber="1689"/>
            <text>
<![CDATA[     << obj.slid << ","
     << obj.elid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Pole& obj)
{
  os << obj.plid << ","
     << obj.vid << ","
     << obj.length << ","
     << obj.dim;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Box& obj)
{
  os << obj.bid << ","
     << obj.pid1 << ","
     << obj.pid2 << ","
     << obj.pid3 << ","
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="4b2fa5df1699ada154042550e0d7b5d3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="38" endLineNumber="51"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="37" endLineNumber="50"/>
            <text>
<![CDATA[#define CAMERAEXTRINSICMAT "CameraExtrinsicMat"
#define CAMERAMAT "CameraMat"
#define DISTCOEFF "DistCoeff"
#define IMAGESIZE "ImageSize"
#define CHESSBOARDPOSE "ChessboardPose"
#define CHESSBOARDIMAGE "ChessboardImage"
#define CHESSBOARDVIEWNUM "ChessboardViewNUM"
#define GRID3DPOINTS "Grid3DPoints"
#define GRID2DPOINTS "Grid2DPoints"
#define REPROJECTIONERROR "ReprojectionError"
#define VELODYNEPOINTS "VelodynePoints"
#define VELODYNENORMALS "VelodyneNormals"
#define VELODYNEVIEWERPOSE "VelodyneViewerPose"
#define CALIBRATIONERROR "CalibrationError"
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="9d6c33922b5bda8d01736e43c4d0328d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_d_viewer\image_d_viewer.cpp" startLineNumber="200" endLineNumber="233"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\image_d_viewer\image_d_viewer.cpp" startLineNumber="149" endLineNumber="182"/>
            <text>
<![CDATA[    for (unsigned int i = 0; i < car_fused_objects.obj.size(); i++) {
      if(!isNearlyNODATA(car_fused_objects.obj.at(i).range)) {
          int rect_x      = car_fused_objects.obj.at(i).rect.x;
          int rect_y      = car_fused_objects.obj.at(i).rect.y;
          int rect_width  = car_fused_objects.obj.at(i).rect.width;
          int rect_height = car_fused_objects.obj.at(i).rect.height;
          float range     = car_fused_objects.obj.at(i).range;

          /* put label */
          CvPoint labelOrg = cvPoint(rect_x - OBJ_RECT_THICKNESS,
                                     rect_y - baseline - OBJ_RECT_THICKNESS);
          cvRectangle(image_clone,
                      cvPoint(labelOrg.x + 0, labelOrg.y + baseline),
                      cvPoint(labelOrg.x + text_size.width, labelOrg.y - text_size.height),
                      CV_RGB(0, 0, 0), // label background color is black
                      -1, 8, 0
                      );
          cvPutText(image_clone,
                    objectLabel.data(),
                    labelOrg,
                    &dfont_label,
                    CV_RGB(255, 255, 255) // label text color is white
                    );

          /* put distance data */
            cvRectangle(image_clone,
                        cv::Point(rect_x + (rect_width/2) - (((int)log10(range/100)+1) * 5 + 45),
                                  rect_y + rect_height + 5),
                        cv::Point(rect_x + (rect_width/2) + (((int)log10(range/100)+1) * 8 + 38),
                                  rect_y + rect_height + 30),
                        cv::Scalar(255,255,255), -1);
            cvInitFont (&dfont, CV_FONT_HERSHEY_COMPLEX , hscale, vscale, italicscale, thickness, CV_AA);
            sprintf(distance_string, "%.2f m", range / 100); //unit of length is meter
            cvPutText(image_clone,
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="a229f5c6c36a7d9f39cd004dd2c25b82">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapObjectSerialization.h" startLineNumber="511" endLineNumber="525"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapObjectSerialization.h" startLineNumber="458" endLineNumber="472"/>
            <text>
<![CDATA[	ar & mapPoint.mnTrackScaleLevel &
		mapPoint.mTrackViewCos &
		mapPoint.mnTrackReferenceForFrame &
		mapPoint.mnLastFrameSeen &
		mapPoint.mnBALocalForKF &
		mapPoint.mnFuseCandidateForKF &
		mapPoint.mnLoopPointForKF &
		mapPoint.mnCorrectedByKF &
		mapPoint.mnCorrectedReference;
	ar &
		mapPoint.mPosGBA &
		mapPoint.mnBAGlobalForKF;

	ar &
		mapPoint.mWorldPos;
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="9173d08fad604876c531ffa566222fb1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="41" endLineNumber="54"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="40" endLineNumber="53"/>
            <text>
<![CDATA[#define SIZE_FEATP2 100000000
#define SIZE_A_SIZE 1000
#define SIZE_B 100000
#define SIZE_B_DIMS 1000
#define SIZE_ERROR_ARRAY 100
#define SIZE_C 50000000
#define SIZE_PM 10000
#define SIZE_DEF 1000
#define SIZE_NUMPART 100
#define SIZE_PIDX 10000
#define SIZE_DID 10000
#define SIZE_M 30000000
#define SIZE_TMPM 30000000
#define SIZE_TMPIX 30000000
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="4cd69531ccf10611f73caa303b5b52eb">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="85" endLineNumber="98"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="92" endLineNumber="105"/>
            <text>
<![CDATA[  Yellow_set.hue.center = 0;
  Yellow_set.hue.range  = 0;
  Yellow_set.sat.center = 0;
  Yellow_set.sat.range  = 0;
  Yellow_set.val.center = 0;
  Yellow_set.val.range  = 0;
  Yellow_set.isUpdated  = false;
  Green_set.hue.center = 0;
  Green_set.hue.range  = 0;
  Green_set.sat.center = 0;
  Green_set.sat.range  = 0;
  Green_set.val.center = 0;
  Green_set.val.range  = 0;
  Green_set.isUpdated  = false;
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="0c1b60740f47917b663c9bcbebbe3592">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="513" endLineNumber="526"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="512" endLineNumber="525"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="511" endLineNumber="524"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="510" endLineNumber="523"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="509" endLineNumber="522"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="508" endLineNumber="521"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="507" endLineNumber="520"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="506" endLineNumber="519"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="505" endLineNumber="518"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="504" endLineNumber="517"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="503" endLineNumber="516"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="502" endLineNumber="515"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="501" endLineNumber="514"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="500" endLineNumber="513"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="499" endLineNumber="512"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="498" endLineNumber="511"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="497" endLineNumber="510"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="496" endLineNumber="509"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="495" endLineNumber="508"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1129" endLineNumber="1147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1128" endLineNumber="1146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1126" endLineNumber="1145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1125" endLineNumber="1143"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1123" endLineNumber="1142"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1122" endLineNumber="1141"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1115" endLineNumber="1139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="910" endLineNumber="926"/>
            <text>
<![CDATA[	free(part_error_array);
	free(dst_tmpM);
	free(sub_dst_tmpM);
	free(sub_sub_dst_tmpM);
	free(tmpM_array);

	free(dst_tmpIx);
	free(sub_dst_tmpIx);
	free(sub_sub_dst_tmpIx);
	free(tmpIx_array);

	free(dst_tmpIy);
	free(sub_dst_tmpIy);
	free(sub_sub_dst_tmpIy);
	free(tmpIy_array);

	return(M_array);
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="2dbe5555a8ea525777f3afefe3589f33">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\for_use_GPU.h" startLineNumber="55" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\for_use_GPU.h" startLineNumber="54" endLineNumber="67"/>
            <text>
<![CDATA[extern CUdeviceptr *featp2_dev;
extern CUdeviceptr *A_SIZE_dev;
extern CUdeviceptr *B_dev;
extern CUdeviceptr *B_dims_dev;
extern CUdeviceptr *fconvs_error_array_dev;
extern CUdeviceptr *fconvs_C_dev;
extern CUdeviceptr *part_C_dev;
extern CUdeviceptr *part_error_array_dev;
extern CUdeviceptr *M_dev;
extern CUdeviceptr *tmpM_dev;
extern CUdeviceptr *tmpIx_dev;
extern CUdeviceptr *tmpIy_dev;
extern CUdeviceptr *pm_size_array_dev;
extern CUdeviceptr *PIDX_array_dev;
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="37f05eccbce53647364f069709ffd45f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1812" endLineNumber="1831"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1849" endLineNumber="1868"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1641" endLineNumber="1660"/>
            <text>
<![CDATA[     << obj.ref << ","
     << obj.mcode1 << ","
     << obj.mcode2 << ","
     << obj.mcode3;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Vector& obj)
{
  os << obj.vid << ","
     << obj.pid << ","
     << obj.hang << ","
     << obj.vang;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Line& obj)
{
  os << obj.lid << ","
     << obj.bpid << ","
]]>
            </text>
        </set>
        <set lineCount="14" fingerprint="6a0545dd8a5a75453cb12fa2ddd4461c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_uploader\pos_uploader.cpp" startLineNumber="281" endLineNumber="304"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_uploader\pos_uploader.cpp" startLineNumber="258" endLineNumber="281"/>
            <text>
<![CDATA[static void car_locate_cb(const visualization_msgs::MarkerArray& obj_pose_msg)
{
	if (obj_pose_msg.markers.size() > 0) {
		geometry_msgs::Point tmpPoint;
		cv_tracker::obj_label tmpLabel;

		pthread_mutex_lock(&pose_lock_);

		for (visualization_msgs::Marker tmpMarker : obj_pose_msg.markers) {
			tmpPoint.x = tmpMarker.pose.position.x;
			tmpPoint.y = tmpMarker.pose.position.y;
			tmpPoint.z = tmpMarker.pose.position.z;

			tmpLabel.reprojected_pos.push_back(tmpPoint);
		}

		car_positions_array.push_back(tmpLabel);
		car_num += obj_pose_msg.markers.size();

		pthread_mutex_unlock(&pose_lock_);
	}
}

static void person_locate_cb(const visualization_msgs::MarkerArray &obj_pose_msg)
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="8f77fa55606fb082d9735756a32311bd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set.cpp" startLineNumber="201" endLineNumber="221"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="567" endLineNumber="587"/>
            <text>
<![CDATA[  double search_radius = vmap.getDetectionPoints(crosswalk_id).width / 2;

  // Search each calculated points in the crosswalk
  for (const auto &p : vmap.getDetectionPoints(crosswalk_id).points)
  {
    geometry_msgs::Point detection_point = calcRelativeCoordinate(p, g_localizer_pose.pose);
    tf::Vector3 detection_vector = point2vector(detection_point);
    detection_vector.setZ(0.0);

    int stop_count = 0;  // the number of points in the detection area
    for (const auto &vscan : g_vscan)
    {
      tf::Vector3 vscan_vector(vscan.x, vscan.y, 0.0);
      double distance = tf::tfDistance(vscan_vector, detection_vector);
      if (distance < search_radius)
      {
        stop_count++;
        geometry_msgs::Point vscan_temp;
        vscan_temp.x = vscan.x;
        vscan_temp.y = vscan.y;
        vscan_temp.z = vscan.z;
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="0280d8b101435d8039a51f887b11c925">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="22" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="83" endLineNumber="105"/>
            <text>
<![CDATA[      tmp.vid  = vector.vid;
      tmp.pid  = vector.pid;
      tmp.hang = vector.hang;
      tmp.vang = vector.vang;

      vectors.insert( std::map<int, Vector>::value_type(tmp.vid, tmp) );
    }
  std::cout << "load vectors complete. element num: " << vectors.size() << std::endl;
} /* void VectorMap::load_vectors() */


void VectorMap::load_signals(const vector_map::SignalArray& msg)
{
  for (const auto& signal : msg.data)
    {
      Signal tmp;
      tmp.id     = signal.id;
      tmp.vid    = signal.vid;
      tmp.plid   = signal.plid;
      tmp.type   = signal.type;
      tmp.linkid = signal.linkid;

      signals.insert( std::map<int, Signal>::value_type(tmp.id, tmp) );
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="2091c9433d231de239f55b53ccb3e0f5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\var\var.h" startLineNumber="280" endLineNumber="299"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\var\var.h" startLineNumber="284" endLineNumber="303"/>
            <text>
<![CDATA[        }else if( !strcmp(v->TypeId(), typeid(short).name() ) ) {
            // Wrapper, owned by this object
            ptr = new VarWrapper<T,short>( *(VarValueT<short>*)v );
            var = ptr;
        }else if( !strcmp(v->TypeId(), typeid(int).name() ) ) {
            // Wrapper, owned by this object
            ptr = new VarWrapper<T,int>( *(VarValueT<int>*)v );
            var = ptr;
        }else if( !strcmp(v->TypeId(), typeid(long).name() ) ) {
            // Wrapper, owned by this object
            ptr = new VarWrapper<T,long>( *(VarValueT<long>*)v );
            var = ptr;
        }else if( !strcmp(v->TypeId(), typeid(float).name() ) ) {
            // Wrapper, owned by this object
            ptr = new VarWrapper<T,float>( *(VarValueT<float>*)v );
            var = ptr;
        }else if( !strcmp(v->TypeId(), typeid(double).name() ) ) {
            // Wrapper, owned by this object
            ptr = new VarWrapper<T,double>( *(VarValueT<double>*)v );
            var = ptr;
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="241a91edb3581d866e55e922058b0b29">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gldraw.h" startLineNumber="234" endLineNumber="256"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\gldraw.h" startLineNumber="256" endLineNumber="278"/>
            <text>
<![CDATA[    glDisable(target);
}

inline void glDrawTextureFlipY(GLenum target, GLuint texid)
{
    glBindTexture(target, texid);
    glEnable(target);
    
    const GLfloat sq_vert[] = { -1,-1,  1,-1,  1, 1,  -1, 1 };
    glVertexPointer(2, GL_FLOAT, 0, sq_vert);
    glEnableClientState(GL_VERTEX_ARRAY);   

    const GLfloat sq_tex[]  = { 0,1,  1,1,  1,0,  0,0  };
    glTexCoordPointer(2, GL_FLOAT, 0, sq_tex);
    glEnableClientState(GL_TEXTURE_COORD_ARRAY);
         
    glColor4f(1,1,1,1);
    glDrawArrays(GL_TRIANGLE_FAN, 0, 4);

    glDisableClientState(GL_VERTEX_ARRAY);
    glDisableClientState(GL_TEXTURE_COORD_ARRAY);

    glDisable(target);
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="83f565c504b48afc4dfbec734d774213">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="493" endLineNumber="549"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="569" endLineNumber="623"/>
            <text>
<![CDATA[#ifdef USE_STREAM
  res = cuLaunchKernel(
                       func_calc_norm[0], // call function
                       block_num_x,       // gridDimX
                       block_num_y,       // gridDimY
                       1,                 // gridDimZ
                       thread_num_x,      // blockDimX
                       thread_num_y,      // blockDimY
                       1,                 // blockDimZ
                       sharedMemBytes,    // sharedMemBytes
                       stream,            // hStream
                       kernel_args_norm,  // kernel Parameter
                       NULL               // extra
                       );
#else
  res = cuLaunchKernel(
                       func_calc_norm[0], // call function
                       block_num_x,       // gridDimX
                       block_num_y,       // gridDimY
                       1,                 // gridDimZ
                       thread_num_x,      // blockDimX
                       thread_num_y,      // blockDimY
                       1,                 // blockDimZ
                       sharedMemBytes,    // sharedMemBytes
                       NULL,              // hStream
                       kernel_args_norm,  // kernel Parameter
                       NULL               // extra
                       );
#endif
  MY_CUDA_CHECK(res, "cuLaunchKernel(calc_norm)");

#ifdef USE_STREAM
  /* p-thread barrier in order to enqueue Launch command in breadth first order */
  pthread_barrier_wait(&barrier);

  /* synchronize CUDA Stream */
  /*
     A CUDA operation is dispatched from the engine queue
     if preceding calls in the same stream have completed.
     So, there is no need to synchronize CUDA Stream here.
  */
  // res = cuStreamSynchronize(stream);
  // MY_CUDA_CHECK(res, "cuStreamSynchronize(stream)");
#else
  /* synchronize GPU threads */
  res = cuCtxSynchronize();
  MY_CUDA_CHECK(res, "cuCtxSynchronize(calc_norm)");
#endif



  /* compute featuers */
  void *kernel_args_feat[] = {
    &hist_dev,
    &norm_dev,
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="5c295c39e3c48112983b7b1aea641b58">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="193" endLineNumber="232"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_rejection.h" startLineNumber="274" endLineNumber="314"/>
            <text>
<![CDATA[        inline PointCloudConstPtr const 
        getInputSource () { return (input_); }

        /** \brief Provide a target point cloud dataset (must contain XYZ
          * data!), used to compute the correspondence distance.  
          * \param[in] target a cloud containing XYZ data
          */
        inline void 
        setInputTarget (const PointCloudConstPtr &target)
        {
          target_ = target;
          target_cloud_updated_ = true;
        }

        /** \brief Get a pointer to the input point cloud dataset target. */
        inline PointCloudConstPtr const 
        getInputTarget () { return (target_); }
        
        /** \brief Provide a pointer to the search object used to find correspondences in
          * the target cloud.
          * \param[in] tree a pointer to the spatial search object.
          * \param[in] force_no_recompute If set to true, this tree will NEVER be 
          * recomputed, regardless of calls to setInputTarget. Only use if you are 
          * confident that the tree will be set correctly.
          */
        inline void
        setSearchMethodTarget (const KdTreePtr &tree, 
                               bool force_no_recompute = false) 
        { 
          tree_ = tree; 
          if (force_no_recompute)
          {
            force_no_recompute_ = true;
          }
          target_cloud_updated_ = true;
        }

        /** \brief Set the normals computed on the input point cloud
          * \param[in] normals the normals computed for the input cloud
          */
        inline void
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="f81b1ba93c698b7109baa669063bb2a3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\freespace_planner\nodes\astar_navi\astar_search.h" startLineNumber="53" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="87" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="492" endLineNumber="546"/>
            <text>
<![CDATA[      std::string reg_name_;

      /** \brief A pointer to the spatial search object. */
      KdTreePtr tree_;
      
      /** \brief A pointer to the spatial search object of the source. */
      KdTreeReciprocalPtr tree_reciprocal_;

      /** \brief The number of iterations the internal optimization ran for (used internally). */
      int nr_iterations_;

      /** \brief The maximum number of iterations the internal optimization should run for.
        * The default value is 10.
        */
      int max_iterations_;

      /** \brief The number of iterations RANSAC should run for. */
      int ransac_iterations_;

      /** \brief The input point cloud dataset target. */
      PointCloudTargetConstPtr target_;

      /** \brief The final transformation matrix estimated by the registration method after N iterations. */
      Matrix4 final_transformation_;

      /** \brief The transformation matrix estimated by the registration method. */
      Matrix4 transformation_;

      /** \brief The previous transformation matrix estimated by the registration method (used internally). */
      Matrix4 previous_transformation_;

      /** \brief The maximum difference between two consecutive transformations in order to consider convergence 
        * (user defined). 
        */
      double transformation_epsilon_;

      /** \brief The maximum allowed Euclidean error between two consecutive steps in the ICP loop, before the 
        * algorithm is considered to have converged. The error is estimated as the sum of the differences between 
        * correspondences in an Euclidean sense, divided by the number of correspondences.
        */
      double euclidean_fitness_epsilon_;

      /** \brief The maximum distance threshold between two correspondent points in source <-> target. If the 
        * distance is larger than this threshold, the points will be ignored in the alignement process.
        */
      double corr_dist_threshold_;

      /** \brief The inlier distance threshold for the internal RANSAC outlier rejection loop.
        * The method considers a point to be an inlier, if the distance between the target data index and the transformed 
        * source index is smaller than the given inlier distance threshold. The default value is 0.05. 
        */
      double inlier_threshold_;

      /** \brief Holds internal convergence state, given user parameters. */
      bool converged_;
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="d09b0e317f2319681cb70cd5a960fdcb">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="769" endLineNumber="797"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_follower\lib\libwaypoint_follower.cpp" startLineNumber="239" endLineNumber="268"/>
            <text>
<![CDATA[    return waypoint_min;
  }
}

// let the linear equation be "ax + by + c = 0"
// if there are two points (x1,y1) , (x2,y2), a = "y2-y1, b = "(-1) * x2 - x1" ,c = "(-1) * (y2-y1)x1 + (x2-x1)y1"
bool getLinearEquation(geometry_msgs::Point start, geometry_msgs::Point end, double *a, double *b, double *c)
{
  //(x1, y1) = (start.x, star.y), (x2, y2) = (end.x, end.y)
  double sub_x = fabs(start.x - end.x);
  double sub_y = fabs(start.y - end.y);
  double error = pow(10, -5);  // 0.00001

  if (sub_x < error && sub_y < error)
  {
    ROS_INFO("two points are the same point!!");
    return false;
  }

  *a = end.y - start.y;
  *b = (-1) * (end.x - start.x);
  *c = (-1) * (end.y - start.y) * start.x + (end.x - start.x) * start.y;

  return true;
}
double getDistanceBetweenLineAndPoint(geometry_msgs::Point point, double a, double b, double c)
{
  double d = fabs(a * point.x + b * point.y + c) / sqrt(pow(a, 2) + pow(b, 2));

  return d;
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="bb3399d62ff5030b8e6d484fc9ebed5d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="122" endLineNumber="142"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\lib\lktracker\LkTracker.cpp" startLineNumber="328" endLineNumber="349"/>
            <text>
<![CDATA[	for (unsigned int i=0; i<in_corners_points.size(); i++)
	{
		if (in_corners_points[i].x > 0 )
		{
			if (in_corners_points[i].x < min_x)
				min_x = in_corners_points[i].x;
			if (in_corners_points[i].x > max_x)
				max_x = in_corners_points[i].x;
		}

		if (in_corners_points[i].y > 0 )
		{
			if (in_corners_points[i].y < min_y)
				min_y = in_corners_points[i].y;
			if (in_corners_points[i].y > max_y)
				max_y = in_corners_points[i].y;
		}
	}
	out_boundingbox.x 		= min_x;
	out_boundingbox.y 		= min_y;
	out_boundingbox.width 	= max_x - min_x;
	out_boundingbox.height 	= max_y - min_y;
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="56c8cc4a81b1c53a0eeaae07ee272f10">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\obj_reproj.cpp" startLineNumber="128" endLineNumber="144"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="217" endLineNumber="233"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="223" endLineNumber="239"/>
            <text>
<![CDATA[  std_msgs::ColorRGBA color_red;
  color_red.r = 1.0f;
  color_red.g = 0.0f;
  color_red.b = 0.0f;
  color_red.a = 1.0f;

  std_msgs::ColorRGBA color_yellow;
  color_yellow.r = 1.0f;
  color_yellow.g = 1.0f;
  color_yellow.b = 0.0f;
  color_yellow.a = 1.0f;

  std_msgs::ColorRGBA color_green;
  color_green.r = 0.0f;
  color_green.g = 1.0f;
  color_green.b = 0.0f;
  color_green.a = 1.0f;
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="eb8f74338bd84635a7f11349d12b1abd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\dpm_sync_2.cpp" startLineNumber="130" endLineNumber="150"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\kf_track\sync_track.cpp" startLineNumber="156" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\range_fusion\sync_range_fusion.cpp" startLineNumber="156" endLineNumber="177"/>
            <text>
<![CDATA[            image_obj_ringbuf.clear();
            vscan_image_ringbuf.clear();
        }

        return true;
    } else {
        return false;
    }
}

void image_obj_callback(const cv_tracker::image_obj::ConstPtr& image_obj_msg) {
    pthread_mutex_lock(&mutex);
    image_obj_ringbuf.push_front(*image_obj_msg);
    //vscan_image is empty
    if (vscan_image_ringbuf.begin() == vscan_image_ringbuf.end()) {
        ROS_INFO("vscan_image ring buffer is empty");
        buf_flag = false;
        pthread_mutex_unlock(&mutex);
        return;
    }
    buf_flag = true;
    pthread_mutex_unlock(&mutex);
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="1d47fbb551c1f612317a4b7ba862876a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\for_use_gpu.h" startLineNumber="64" endLineNumber="83"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_init.cpp" startLineNumber="11" endLineNumber="28"/>
            <text>
<![CDATA[CUdevice *dev;
CUcontext *ctx;

CUfunction *DistanceTransformTwoDimensionalProblem_func;
CUfunction *ConvolutionKernel_func;
CUfunction *BilinearKernelTex32F_func;
CUfunction *calculateHistogram_func;
CUfunction *getFeatureMaps_func;
CUfunction *calculateNorm_func;
CUfunction *normalizeAndTruncate_func;
CUfunction *PCAFeatureMapsAddNullableBorder_func;

CUmodule *module;
int *NR_MAXTHREADS_X, *NR_MAXTHREADS_Y;
int device_num;
int max_threads_num;

void init_cuda(void)
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="e9e907554e65dd4f9378f830cc83f809">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="107" endLineNumber="132"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="104" endLineNumber="124"/>
            <text>
<![CDATA[static double transformation_epsilon = 0.01;
static double max_correspondence_distance = 1.0;
static double euclidean_fitness_epsilon = 0.1;
static double ransac_outlier_rejection_threshold = 1.0;

static ros::Publisher predict_pose_pub;
static geometry_msgs::PoseStamped predict_pose_msg;

static ros::Publisher icp_pose_pub;
static geometry_msgs::PoseStamped icp_pose_msg;

static ros::Publisher current_pose_pub;
static geometry_msgs::PoseStamped current_pose_msg;

static ros::Publisher localizer_pose_pub;
static geometry_msgs::PoseStamped localizer_pose_msg;

static ros::Publisher estimate_twist_pub;
static geometry_msgs::TwistStamped estimate_twist_msg;

static ros::Time current_scan_time;
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="53a061ae09e33501fde55065c4526487">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="18" endLineNumber="34"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\gpu_matching.h" startLineNumber="13" endLineNumber="30"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="68" endLineNumber="84"/>
            <text>
<![CDATA[  int did;
  double dist;
  int pid;
  double dir;
  double apara;
  double r;
  double slope;
  double cant;
  double lw;
  double rw;
}DTLane;

typedef struct{
  int lnid;
  int did;
  int blid;
  int flid;
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="25197a7ed15f410ab02f60186b47735e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="21" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="99" endLineNumber="120"/>
            <text>
<![CDATA[      tmp.id     = signal.id;
      tmp.vid    = signal.vid;
      tmp.plid   = signal.plid;
      tmp.type   = signal.type;
      tmp.linkid = signal.linkid;

      signals.insert( std::map<int, Signal>::value_type(tmp.id, tmp) );
    }
  std::cout << "load signals complete. element num: " << signals.size() << std::endl;
} /* void VectorMap::load_signals() */


void VectorMap::load_whitelines(const vector_map::WhiteLineArray& msg)
{
  for (const auto& white_line : msg.data)
    {
      WhiteLine tmp;
      tmp.id     = white_line.id;
      tmp.lid    = white_line.lid;
      tmp.width  = white_line.width;
      tmp.color  = white_line.color;
      tmp.type   = white_line.type;
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="52a9df1d07bd54cfef9ed99afe8da238">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="388" endLineNumber="408"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="417" endLineNumber="437"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="454" endLineNumber="474"/>
            <text>
<![CDATA[visualization_msgs::Marker LaneSelectNode::createLeftLaneMarker()
{
  visualization_msgs::Marker marker;
  marker.header.frame_id = "map";
  marker.header.stamp = ros::Time();
  marker.ns = "left_lane_marker";

  if (left_lane_idx_ == -1 || std::get<0>(tuple_vec_.at(current_lane_idx_)).waypoints.empty())
  {
    marker.action = visualization_msgs::Marker::DELETE;
    return marker;
  }

  marker.type = visualization_msgs::Marker::LINE_STRIP;
  marker.action = visualization_msgs::Marker::ADD;
  marker.scale.x = 0.05;

  std_msgs::ColorRGBA color_neighbor;
  color_neighbor.r = 0.5;
  color_neighbor.b = 0.5;
  color_neighbor.g = 0.5;
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="761680dd57cc8eab4436a3c8bf34592c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="65" endLineNumber="86"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="116" endLineNumber="137"/>
            <text>
<![CDATA[      tmp.id     = white_line.id;
      tmp.lid    = white_line.lid;
      tmp.width  = white_line.width;
      tmp.color  = white_line.color;
      tmp.type   = white_line.type;
      tmp.linkid = white_line.linkid;

      whitelines.insert( std::map<int, WhiteLine>::value_type(tmp.id, tmp) );
    }
  std::cout << "load whitelines complete." << std::endl;
} /* void VectorMap::load_whitelines() */


void VectorMap::load_dtlanes(const vector_map::DTLaneArray& msg)
{
  for (const auto& dtlane : msg.data)
    {
      DTLane tmp;
      tmp.did   = dtlane.did;
      tmp.dist  = dtlane.dist;
      tmp.pid   = dtlane.pid;
      tmp.dir   = dtlane.dir;
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="b04bce5a7891dee7426363f29ea50b42">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="773" endLineNumber="787"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="772" endLineNumber="786"/>
            <text>
<![CDATA[  std::vector<PoleData> poledatas = read_poledata(argv[1]);
  std::vector<SignalData> signaldatas = read_signaldata(argv[2]);
  std::vector<PoleClass> poleclasses = read_poleclass(argv[3]);
  std::vector<VectorClass> vectorclasses = read_vectorclass(argv[4]);
  std::vector<PointClass> pointclasses = read_pointclass(argv[5]);
  std::vector<SignalData> roadsigns = read_signaldata(argv[6]);
  std::vector<DTLane> dtlanes = read_dtlane(argv[7]);
  std::vector<NodeData> nodes = read_nodedata(argv[8]);
  std::vector<LaneData> lanes = read_lanedata(argv[9]);
  std::vector<WhiteLine> whitelines = read_whiteline(argv[10]);
  std::vector<ZebraZone> zebrazones = read_zebrazone(argv[11]);
  std::vector<AreaClass> areaclasses = read_areaclass(argv[12]);
  std::vector<CrossWalk> crosswalks = read_crosswalk(argv[13]);
  std::vector<LineClass> lines = read_lineclass(argv[14]);
  std::vector<RoadEdge> roadedges = read_roadedge(argv[15]);
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="01f4e74a77415c42aa59c0bf1cb3953e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1839" endLineNumber="1859"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1784" endLineNumber="1804"/>
            <text>
<![CDATA[     << obj.width << ","
     << obj.color << ","
     << obj.type << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::StopLine& obj)
{
  os << obj.id << ","
     << obj.lid << ","
     << obj.tlid << ","
     << obj.signid << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::ZebraZone& obj)
{
  os << obj.id << ","
     << obj.aid << ","
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="9b86a37d415b84e401fefe04947d0e9e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1629" endLineNumber="1650"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1692" endLineNumber="1712"/>
            <text>
<![CDATA[  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::DTLane& obj)
{
  os << obj.did << ","
     << obj.dist << ","
     << obj.pid << ","
     << obj.dir << ","
     << obj.apara << ","
     << obj.r << ","
     << obj.slope << ","
     << obj.cant << ","
     << obj.lw << ","
     << obj.rw;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Node& obj)
{
  os << obj.nid << ","
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="0a8e33a3449504b3f505480a320831f3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_viewer\vscan_image_viewer.cpp" startLineNumber="98" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="312" endLineNumber="336"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_d_viewer\vscan_image_d_viewer.cpp" startLineNumber="187" endLineNumber="211"/>
            <text>
<![CDATA[static void image_cb(const sensor_msgs::Image& msg)
{
	image_msg = msg;
	existImage = true;
	show();
}

static void points_cb(const points2image::PointsImageConstPtr& msg)
{
	points_msg = msg;
	existPoints = true;
	show();
}

int main(int argc, char **argv)
{
	/* create resizable window */
	cvNamedWindow(window_name, CV_WINDOW_NORMAL);
	cvStartWindowThread();

	ros::init(argc, argv, "vscan_image_d_viewer");
	ros::NodeHandle n;
	ros::NodeHandle private_nh("~");

	std::string image_topic_name;
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="be99badfe1970f61265a1f2f9a045c2e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="184" endLineNumber="203"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="226" endLineNumber="245"/>
            <text>
<![CDATA[		if (l.lnid < 0)
			continue;

		vector_map::Point p2 = find_start_point(lane_vmap, l);
		if (p2.pid < 0)
			continue;

		double a = compute_direction_angle(p1, p2);
		a = fabs(a - coarse_angle);
		if (a > 180)
			a = fabs(a - 360);
		double d = hypot(p1.bx - coarse_p1.bx, p1.ly - coarse_p1.ly);
		double s = a + d;
		if (s <= score) {
			nearest_point = p1;
			score = s;
		}
	}

	return nearest_point;
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="3584729f2430124365bfbffba632b5f5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\TemplatedVocabulary.h" startLineNumber="469" endLineNumber="487"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\TemplatedVocabulary.h" startLineNumber="473" endLineNumber="491"/>
            <text>
<![CDATA[    case L2_NORM:
      m_scoring_object = new L2Scoring;
      break;
    
    case CHI_SQUARE:
      m_scoring_object = new ChiSquareScoring;
      break;
      
    case KL:
      m_scoring_object = new KLScoring;
      break;
      
    case BHATTACHARYYA:
      m_scoring_object = new BhattacharyyaScoring;
      break;
      
    case DOT_PRODUCT:
      m_scoring_object = new DotProductScoring;
      break;
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="2d4a837735bc962783fee554bdaa0455">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="24" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="39" endLineNumber="58"/>
            <text>
<![CDATA[  int vid;
  int pid;
  double hang;
  double vang;
}Vector;
  

typedef struct{
  int id;
  int vid;
  int plid;
  int type;
  int linkid;
}Signal;

typedef struct{
  int id;
  int lid;
  double width;
  char color;
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="49cf0853e41d781fd39f0490ccbc5690">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="588" endLineNumber="602"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="587" endLineNumber="601"/>
            <text>
<![CDATA[    ret[id].did = std::stoi(tbl[i][1]);
    ret[id].blid = std::stoi(tbl[i][2]);
    ret[id].flid = std::stoi(tbl[i][3]);
    ret[id].bnid = std::stoi(tbl[i][4]);
    ret[id].fnid = std::stoi(tbl[i][5]);
    ret[id].jct = std::stoi(tbl[i][6]);
    ret[id].blid2 = std::stoi(tbl[i][7]);
    ret[id].blid3 = std::stoi(tbl[i][8]);
    ret[id].blid4 = std::stoi(tbl[i][9]);
    ret[id].flid2 = std::stoi(tbl[i][10]);
    ret[id].flid3 = std::stoi(tbl[i][11]);
    ret[id].flid4 = std::stoi(tbl[i][12]);
    ret[id].clossid = std::stoi(tbl[i][13]);
    ret[id].span = std::stod(tbl[i][14]);
    ret[id].lcnt = std::stoi(tbl[i][15]);
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="ae8f1dd53946b8c14d0782bbdc04b1d7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="382" endLineNumber="397"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\icp.h" startLineNumber="114" endLineNumber="129"/>
            <text>
<![CDATA[      typedef boost::shared_ptr<IterativeClosestPoint<PointSource, PointTarget, Scalar> > Ptr;
      typedef boost::shared_ptr<const IterativeClosestPoint<PointSource, PointTarget, Scalar> > ConstPtr;

      using Registration<PointSource, PointTarget, Scalar>::reg_name_;
      using Registration<PointSource, PointTarget, Scalar>::getClassName;
      using Registration<PointSource, PointTarget, Scalar>::input_;
      using Registration<PointSource, PointTarget, Scalar>::indices_;
      using Registration<PointSource, PointTarget, Scalar>::target_;
      using Registration<PointSource, PointTarget, Scalar>::nr_iterations_;
      using Registration<PointSource, PointTarget, Scalar>::max_iterations_;
      using Registration<PointSource, PointTarget, Scalar>::previous_transformation_;
      using Registration<PointSource, PointTarget, Scalar>::final_transformation_;
      using Registration<PointSource, PointTarget, Scalar>::transformation_;
      using Registration<PointSource, PointTarget, Scalar>::transformation_epsilon_;
      using Registration<PointSource, PointTarget, Scalar>::converged_;
      using Registration<PointSource, PointTarget, Scalar>::corr_dist_threshold_;
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="a42a996ab94aa7507a07155852c21fb1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="41" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glsl.h" startLineNumber="200" endLineNumber="214"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glsl.h" startLineNumber="218" endLineNumber="232"/>
            <text>
<![CDATA[        const char* source_offsetscale =
                "uniform float offset;"
                "uniform float scale;"
                "uniform sampler2D tex;"
                "void main() {"
                "  vec2 uv = gl_TexCoord[0].st;"
                "  if(0.0 <= uv.x && uv.x <= 1.0 && 0.0 <= uv.y && uv.y <= 1.0) {"
                "    gl_FragColor = texture2D(tex,gl_TexCoord[0].st);"
                "    gl_FragColor.xyz += vec3(offset,offset,offset);"
                "    gl_FragColor.xyz *= scale;"
                "  }else{"
                "    float v = 0.1;"
                "    gl_FragColor.xyz = vec3(v,v,v);"
                "  }"
                "}";
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="bf43f7c3f09824d315e91da4975be3b5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1360" endLineNumber="1380"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1384" endLineNumber="1404"/>
            <text>
<![CDATA[  marker.scale.x = MAKER_SCALE_VECTOR_LENGTH;
  marker.scale.y = MAKER_SCALE_VECTOR;
  marker.scale.z = MAKER_SCALE_VECTOR;
  marker.color = createColorRGBA(color);
  if (marker.color.a == COLOR_VALUE_MIN)
    return marker;

  enableMarker(marker);
  return marker;
}

visualization_msgs::Marker createLineMarker(const std::string& ns, int id, Color color, const VectorMap& vmap,
                                            const Line& line)
{
  visualization_msgs::Marker marker = createMarker(ns, id, visualization_msgs::Marker::LINE_STRIP);
  if (line.lid == 0)
    return marker;

  Point bp = vmap.findByKey(Key<Point>(line.bpid));
  if (bp.pid == 0)
    return marker;
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="b2721041e959e61b92c4d6a29a3197f1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.h" startLineNumber="189" endLineNumber="226"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\optimizable_graph.h" startLineNumber="233" endLineNumber="270"/>
            <text>
<![CDATA[        bool setMinimalEstimateData(const double* estimate);

        /**
         * sets the initial estimate from an array of double.
         * Implement setMinimalEstimateDataImpl()
         * @return true on success
         */
        bool setMinimalEstimateData(const std::vector<double>& estimate) {
#ifndef NDEBUG
          int dim = minimalEstimateDimension();
          assert((dim == -1) || (estimate.size() == std::size_t(dim)));
#endif
          return setMinimalEstimateData(&estimate[0]);
        };

        /**
         * writes the estimate to an array of double
         * @returns true on success
         */
        virtual bool getMinimalEstimateData(double* estimate) const ;

        /**
         * writes the estimate to an array of double
         * @returns true on success
         */
        virtual bool getMinimalEstimateData(std::vector<double>& estimate) const {
          int dim = minimalEstimateDimension();
          if (dim < 0)
            return false;
          estimate.resize(dim);
          return getMinimalEstimateData(&estimate[0]);
        };

        /**
         * returns the dimension of the extended representation used by get/setEstimate(double*)
         * -1 if it is not supported
         */
        virtual int minimalEstimateDimension() const;
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="67345819a688e8306bcb4d3b4d603b79">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="502" endLineNumber="521"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="517" endLineNumber="536"/>
            <text>
<![CDATA[	wd.cant = vd.cant;
	wd.lw = vd.lw;
	wd.rw = vd.rw;

	return wd;
}

vector_map::DTLane create_vector_map_dtlane(const waypoint_follower::dtlane& wd)
{
	vector_map::DTLane vd;
	vd.dist = wd.dist;
	vd.dir = wd.dir;
	vd.apara = wd.apara;
	vd.r = wd.r;
	vd.slope = wd.slope;
	vd.cant = wd.cant;
	vd.lw = wd.lw;
	vd.rw = wd.rw;

	return vd;
]]>
            </text>
        </set>
        <set lineCount="15" fingerprint="027fec47890763e90d685b470c53bd15">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1387" endLineNumber="1408"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1502" endLineNumber="1523"/>
            <text>
<![CDATA[  marker.color = createColorRGBA(color);
  if (marker.color.a == COLOR_VALUE_MIN)
    return marker;

  enableMarker(marker);
  return marker;
}

visualization_msgs::Marker createBoxMarker(const std::string& ns, int id, Color color, const VectorMap& vmap,
                                           const Box& box)
{
  visualization_msgs::Marker marker = createMarker(ns, id, visualization_msgs::Marker::LINE_STRIP);
  if (box.bid == 0)
    return marker;

  Point p1 = vmap.findByKey(Key<Point>(box.pid1));
  if (p1.pid == 0)
    return marker;

  Point p2 = vmap.findByKey(Key<Point>(box.pid2));
  if (p2.pid == 0)
    return marker;
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="d8e61a90535d184036ef08ed7f7220b1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\glpangoglu.cpp" startLineNumber="64" endLineNumber="79"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\glpangoglu.cpp" startLineNumber="48" endLineNumber="63"/>
            <text>
<![CDATA[    inv[0] =   m[5]*m[10]*m[15] - m[5]*m[11]*m[14] - m[9]*m[6]*m[15]
             + m[9]*m[7]*m[14] + m[13]*m[6]*m[11] - m[13]*m[7]*m[10];
    inv[4] =  -m[4]*m[10]*m[15] + m[4]*m[11]*m[14] + m[8]*m[6]*m[15]
             - m[8]*m[7]*m[14] - m[12]*m[6]*m[11] + m[12]*m[7]*m[10];
    inv[8] =   m[4]*m[9]*m[15] - m[4]*m[11]*m[13] - m[8]*m[5]*m[15]
             + m[8]*m[7]*m[13] + m[12]*m[5]*m[11] - m[12]*m[7]*m[9];
    inv[12] = -m[4]*m[9]*m[14] + m[4]*m[10]*m[13] + m[8]*m[5]*m[14]
             - m[8]*m[6]*m[13] - m[12]*m[5]*m[10] + m[12]*m[6]*m[9];
    inv[1] =  -m[1]*m[10]*m[15] + m[1]*m[11]*m[14] + m[9]*m[2]*m[15]
             - m[9]*m[3]*m[14] - m[13]*m[2]*m[11] + m[13]*m[3]*m[10];
    inv[5] =   m[0]*m[10]*m[15] - m[0]*m[11]*m[14] - m[8]*m[2]*m[15]
             + m[8]*m[3]*m[14] + m[12]*m[2]*m[11] - m[12]*m[3]*m[10];
    inv[9] =  -m[0]*m[9]*m[15] + m[0]*m[11]*m[13] + m[8]*m[1]*m[15]
             - m[8]*m[3]*m[13] - m[12]*m[1]*m[11] + m[12]*m[3]*m[9];
    inv[13] =  m[0]*m[9]*m[14] - m[0]*m[10]*m[13] - m[8]*m[1]*m[14]
             + m[8]*m[2]*m[13] + m[12]*m[1]*m[10] - m[12]*m[2]*m[9];
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="0b0d44628f5f49d879d599b4d65830c4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2039" endLineNumber="2059"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2022" endLineNumber="2042"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2166" endLineNumber="2186"/>
            <text>
<![CDATA[  obj.id = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  obj.type = std::stoi(columns[2]);
  obj.linkid = std::stoi(columns[3]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::Curb& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.lid = std::stoi(columns[1]);
  obj.height = std::stod(columns[2]);
  obj.width = std::stod(columns[3]);
  obj.dir = std::stoi(columns[4]);
  obj.linkid = std::stoi(columns[5]);
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="2b55cd25eddb6f952513144721a01229">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="79" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set_info.h" startLineNumber="74" endLineNumber="111"/>
            <text>
<![CDATA[  double getStopRange() const
  {
    return stop_range_;
  }

  double getDecelerationRange() const
  {
    return deceleration_range_;
  }

  int getPointsThreshold() const
  {
    return points_threshold_;
  }

  int getDetectionHeightTop() const
  {
    return detection_height_top_;
  }

  int getDetectionHeightBottom() const
  {
    return detection_height_bottom_;
  }

  int getStopDistance() const
  {
    return stop_distance_;
  }

  double getDeceleration() const
  {
    return decel_;
  }

  double getVelocityChangeLimit() const
  {
    return velocity_change_limit_;
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="a223febd245a64ab3e56564bd46e3ed8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_receiver\vehicle_receiver.cpp" startLineNumber="79" endLineNumber="94"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_receiver\vehicle_receiver.cpp" startLineNumber="82" endLineNumber="97"/>
            <text>
<![CDATA[      break;
    case CAN_KEY_ANGLE:
      msg.angle = std::stod(columns[i+1]);
      break;
    case CAN_KEY_TORQUE:
      msg.torque = std::stoi(columns[i+1]);
      break;
    case CAN_KEY_ACCEL:
      msg.drivepedal = std::stoi(columns[i+1]);
      break;
    case CAN_KEY_BRAKE:
      msg.brakepedal = std::stoi(columns[i+1]);
      break;
    case CAN_KEY_SHIFT:
      msg.driveshift = std::stoi(columns[i+1]);
      break;
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="45964a0c12b2cb91566aaec2988598b6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="287" endLineNumber="310"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="262" endLineNumber="285"/>
            <text>
<![CDATA[#if 0
static void car_updater_callback(dpm::ImageObjects image_objects_msg)
{
  int num = image_objects_msg.car_num;
  std::vector<int> points = image_objects_msg.corner_point;
  //points are X,Y,W,H and repeat for each instance
  cars.clear();

  for (int i=0; i<num;i++) {
    cv::Rect tmp;
    tmp.x = points[i*4 + 0];
    tmp.y = points[i*4 + 1];
    tmp.width = points[i*4 + 2];
    tmp.height = points[i*4 + 3];
    cars.push_back(tmp);
  }
}
#else
static void car_updater_callback(const cv_tracker::image_obj_ranged& fused_car_msg)
{
  car_fused_objects = fused_car_msg;
  //  show();
}
#endif
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="a6e6891f642654e1a3abd2bf6c924100">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="68" endLineNumber="85"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="18" endLineNumber="35"/>
            <text>
<![CDATA[  int pid;
  double bx;
  double ly;
  double h;
  double b;
  double l;
  int ref;
  int mcode1;
  int mcode2;
  int mcode3;
}Point;

typedef struct{
  int lid;
  int bpid;
  int fpid;
  int blid;
  int flid;
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="a57415dd42f283b143c56033a1e0a527">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\tracking.cpp" startLineNumber="91" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\tracking.cpp" startLineNumber="91" endLineNumber="112"/>
            <text>
<![CDATA[			Avec_T++;
		}

		//save result
		if(XP1>0)			{PP[0]=(int)XP1;}
		else				{PP[0]=0;}
		if(YP1>0)			{PP[1]=(int)YP1;}
		else				{PP[1]=0;}
		if(XP2<Image->width){PP[2]=(int)XP2;}
		else				{PP[2]=Image->width;}
		if(YP2<Image->height)	{PP[3]=(int)YP2;}
		else					{PP[3]=Image->height;}
		//memcpy_s(CUR->point+ii*4,4*sizeof(int),PP,4*sizeof(int));
		memcpy(CUR->point+ii*4, PP,4*sizeof(int));
		CUR->scale[ii]=*(P+GL-1); CUR->score[ii]=*(P+GL-2); CUR->type[ii] = CNUM;

		//calculate image coodinate for ORIGINAL-scale-image[640x480]
		int *OPP = CUR->OR_point+ii*4;
		OPP[0] = (int)((FLOAT)PP[0]/ratio);
		OPP[1] = (int)((FLOAT)PP[1]/ratio);
		OPP[2] = (int)((FLOAT)PP[2]/ratio);
		OPP[3] = (int)((FLOAT)PP[3]/ratio);
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="c7a6ab6eb57a1df40620b27a3aed382e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="534" endLineNumber="550"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="204" endLineNumber="220"/>
            <text>
<![CDATA[    case Gutter::NO_COVER:
      marker = createAreaMarker("gutter", id++, no_cover_color, vmap, area);
      break;
    case Gutter::COVER:
      marker = createAreaMarker("gutter", id++, cover_color, vmap, area);
      break;
    case Gutter::GRATING:
      marker = createAreaMarker("gutter", id++, grating_color, vmap, area);
      break;
    default:
      ROS_ERROR_STREAM("[createGutterMarkerArray] unknown gutter.type: " << gutter);
      continue;
    }
    if (isValidMarker(marker))
      marker_array.markers.push_back(marker);
    else
      ROS_ERROR_STREAM("[createGutterMarkerArray] failed createAreaMarker: " << area);
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="22e501600f2fd00271f1487a3bfd28ee">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="150" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\Tracking.h" startLineNumber="147" endLineNumber="172"/>
            <text>
<![CDATA[    void Track();

    // Map initialization for stereo and RGB-D
    void StereoInitialization();

    void MapOpenMonocularInitialization();

    // Map initialization for monocular
    void MonocularInitialization();
    void CreateInitialMapMonocular();

    void CheckReplacedInLastFrame();
    bool TrackReferenceKeyFrame();
    void UpdateLastFrame();
    bool TrackWithMotionModel();

    bool Relocalization();

    void UpdateLocalMap();
    void UpdateLocalPoints();
    void UpdateLocalKeyFrames();

    bool TrackLocalMap();
    void SearchLocalPoints();

    bool NeedNewKeyFrame();
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="83584662508eb919e0c5a0f87bba14df">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="938" endLineNumber="958"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="749" endLineNumber="770"/>
            <text>
<![CDATA[  predict_pose_pub = nh.advertise<geometry_msgs::PoseStamped>("/predict_pose", 1000);
  icp_pose_pub = nh.advertise<geometry_msgs::PoseStamped>("/icp_pose", 1000);
  // current_pose_pub = nh.advertise<geometry_msgs::PoseStamped>("/current_pose", 1000);
  localizer_pose_pub = nh.advertise<geometry_msgs::PoseStamped>("/localizer_pose", 1000);
  estimate_twist_pub = nh.advertise<geometry_msgs::TwistStamped>("/estimate_twist", 1000);
  estimated_vel_mps_pub = nh.advertise<std_msgs::Float32>("/estimated_vel_mps", 1000);
  estimated_vel_kmph_pub = nh.advertise<std_msgs::Float32>("/estimated_vel_kmph", 1000);
  estimated_vel_pub = nh.advertise<geometry_msgs::Vector3Stamped>("/estimated_vel", 1000);
  time_icp_matching_pub = nh.advertise<std_msgs::Float32>("/time_icp_matching", 1000);
  icp_stat_pub = nh.advertise<icp_localizer::icp_stat>("/icp_stat", 1000);
//  ndt_reliability_pub = nh.advertise<std_msgs::Float32>("/ndt_reliability", 1000);

  // Subscribers
  ros::Subscriber param_sub = nh.subscribe("config/icp", 10, param_callback);
  ros::Subscriber gnss_sub = nh.subscribe("gnss_pose", 10, gnss_callback);
  ros::Subscriber map_sub = nh.subscribe("points_map", 10, map_callback);
  ros::Subscriber initialpose_sub = nh.subscribe("initialpose", 1000, initialpose_callback);
  ros::Subscriber points_sub = nh.subscribe("filtered_points", _queue_size, points_callback);

  ros::spin();

  return 0;
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="a197632d1c0ed1bf38bcebdbde726c8b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="99" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="98" endLineNumber="114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="560" endLineNumber="575"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="559" endLineNumber="574"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="5" endLineNumber="22"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="4" endLineNumber="20"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="49" endLineNumber="70"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="48" endLineNumber="69"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="44" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="43" endLineNumber="67"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="42" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="41" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="210" endLineNumber="230"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="501" endLineNumber="560"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="498" endLineNumber="557"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="495" endLineNumber="554"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="88" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="310" endLineNumber="325"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="82" endLineNumber="97"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="81" endLineNumber="96"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="31" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="30" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="29" endLineNumber="46"/>
            <text>
<![CDATA[    float rot_correction;
    float vert_correction;
    float dist_correction;
    bool two_pt_correction_available;
    float dist_correction_x;
    float dist_correction_y;
    float vert_offset_correction;
    float horiz_offset_correction;
    int max_intensity;
    int min_intensity;
    float focal_distance;
    float focal_slope;

    /** cached values calculated when the calibration file is read */
    float cos_rot_correction;              ///< cached cosine of rot_correction
    float sin_rot_correction;              ///< cached sine of rot_correction
    float cos_vert_correction;             ///< cached cosine of vert_correction
    float sin_vert_correction;             ///< cached sine of vert_correction
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="ca51c8335d432418e6153a9da9078ff6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\robust_kernel_factory.h" startLineNumber="124" endLineNumber="146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\factory.h" startLineNumber="146" endLineNumber="168"/>
            <text>
<![CDATA[        Factory::instance()->unregisterType(_name);
      }

    private:
      std::string _name;
  };

#if defined _MSC_VER && defined G2O_SHARED_LIBS
#  define G2O_FACTORY_EXPORT __declspec(dllexport)
#  define G2O_FACTORY_IMPORT __declspec(dllimport)
#else
#  define G2O_FACTORY_EXPORT
#  define G2O_FACTORY_IMPORT
#endif

  // These macros are used to automate registering types and forcing linkage
#define G2O_REGISTER_TYPE(name, classname) \
    extern "C" void G2O_FACTORY_EXPORT g2o_type_##classname(void) {} \
    static g2o::RegisterTypeProxy<classname> g_type_proxy_##classname(#name);

#define G2O_USE_TYPE_BY_CLASS_NAME(classname) \
    extern "C" void G2O_FACTORY_IMPORT g2o_type_##classname(void); \
    static g2o::ForceLinker proxy_##classname(g2o_type_##classname);
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="b340d17392778d7fd0ab5fd53e604d2f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2290" endLineNumber="2310"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2038" endLineNumber="2058"/>
            <text>
<![CDATA[  obj.pid1 = std::stoi(columns[1]);
  obj.pid2 = std::stoi(columns[2]);
  obj.pid3 = std::stoi(columns[3]);
  obj.pid4 = std::stoi(columns[4]);
  obj.height = std::stod(columns[5]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::DTLane& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.did = std::stoi(columns[0]);
  obj.dist = std::stod(columns[1]);
  obj.pid = std::stoi(columns[2]);
  obj.dir = std::stod(columns[3]);
  obj.apara = std::stod(columns[4]);
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="dae0039a33cbf9327c345a04f8e391dc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2037" endLineNumber="2057"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1960" endLineNumber="1980"/>
            <text>
<![CDATA[  obj.bx = std::stod(columns[4]);
  obj.ly = std::stod(columns[5]);
  obj.ref = std::stoi(columns[6]);
  obj.mcode1 = std::stoi(columns[7]);
  obj.mcode2 = std::stoi(columns[8]);
  obj.mcode3 = std::stoi(columns[9]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::Vector& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.vid = std::stoi(columns[0]);
  obj.pid = std::stoi(columns[1]);
  obj.hang = std::stod(columns[2]);
  obj.vang = std::stod(columns[3]);
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="cd4313e786a5177d72c05eb32ba2e7ae">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2091" endLineNumber="2106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2090" endLineNumber="2105"/>
            <text>
<![CDATA[  obj.lnid = std::stoi(columns[0]);
  obj.did = std::stoi(columns[1]);
  obj.blid = std::stoi(columns[2]);
  obj.flid = std::stoi(columns[3]);
  obj.bnid = std::stoi(columns[4]);
  obj.fnid = std::stoi(columns[5]);
  obj.jct = std::stoi(columns[6]);
  obj.blid2 = std::stoi(columns[7]);
  obj.blid3 = std::stoi(columns[8]);
  obj.blid4 = std::stoi(columns[9]);
  obj.flid2 = std::stoi(columns[10]);
  obj.flid3 = std::stoi(columns[11]);
  obj.flid4 = std::stoi(columns[12]);
  obj.clossid = std::stoi(columns[13]);
  obj.span = std::stod(columns[14]);
  obj.lcnt = std::stoi(columns[15]);
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="f08895887903005b2e65e87d2ca1bfb9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="291" endLineNumber="311"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="175" endLineNumber="195"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\featurepyramid_gpu.cpp" startLineNumber="55" endLineNumber="75"/>
            <text>
<![CDATA[    thread_num_x =
            (width < std::sqrt(max_threads_num)) ? width : std::sqrt(max_threads_num);
    thread_num_y =
            (height < std::sqrt(max_threads_num)) ? height : std::sqrt(max_threads_num);
    thread_num_z = 1;
    block_num_x = width / thread_num_x;
    block_num_y = height / thread_num_y;
    block_num_z = 1;
    if (width % thread_num_x != 0)
        block_num_x++;
    if (height % thread_num_y != 0)
        block_num_y++;

    sharedMemBytes = 0;

    res = cuLaunchKernel(calculateHistogram_func[0], block_num_x, block_num_y,
            block_num_z, thread_num_x, thread_num_y, thread_num_z,
            sharedMemBytes, stream, calc_hist_kernel_arg, NULL);
    CUDA_CHECK(res, "cuLaunchKernel(calculateHistogram)");

    return LATENT_SVM_OK;
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="cfaf803f2a083939a68b1bf2b91517a1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="730" endLineNumber="749"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="555" endLineNumber="575"/>
            <text>
<![CDATA[    estimate_twist_msg.twist.linear.x = current_velocity;
    estimate_twist_msg.twist.linear.y = 0.0;
    estimate_twist_msg.twist.linear.z = 0.0;
    estimate_twist_msg.twist.angular.x = 0.0;
    estimate_twist_msg.twist.angular.y = 0.0;
    estimate_twist_msg.twist.angular.z = angular_velocity;

    estimate_twist_pub.publish(estimate_twist_msg);

    geometry_msgs::Vector3Stamped estimate_vel_msg;
    estimate_vel_msg.header.stamp = current_scan_time;
    estimate_vel_msg.vector.x = current_velocity;
    estimated_vel_pub.publish(estimate_vel_msg);

    // Set values for /icp_stat
    icp_stat_msg.header.stamp = current_scan_time;
    icp_stat_msg.exe_time = time_icp_matching.data;
//    icp_stat_msg.iteration = iteration;
    icp_stat_msg.score = fitness_score;
    icp_stat_msg.velocity = current_velocity;
    icp_stat_msg.acceleration = current_accel;
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="ea001c258e9ef9c250263049def06041">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="344" endLineNumber="361"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="342" endLineNumber="359"/>
            <text>
<![CDATA[  thSet.Red.Hue.upper = cvtInt2Double_hue(msg.Red.Hue.center, msg.Red.Hue.range);
  thSet.Red.Hue.lower = cvtInt2Double_hue(msg.Red.Hue.center, -msg.Red.Hue.range);
  thSet.Red.Sat.upper = cvtInt2Double_sat(msg.Red.Sat.center, msg.Red.Sat.range);
  thSet.Red.Sat.lower = cvtInt2Double_sat(msg.Red.Sat.center, -msg.Red.Sat.range);
  thSet.Red.Val.upper = cvtInt2Double_val(msg.Red.Val.center, msg.Red.Val.range);
  thSet.Red.Val.lower = cvtInt2Double_val(msg.Red.Val.center, -msg.Red.Val.range);

  thSet.Yellow.Hue.upper = cvtInt2Double_hue(msg.Yellow.Hue.center, msg.Yellow.Hue.range);
  thSet.Yellow.Hue.lower = cvtInt2Double_hue(msg.Yellow.Hue.center, -msg.Yellow.Hue.range);
  thSet.Yellow.Sat.upper = cvtInt2Double_sat(msg.Yellow.Sat.center, msg.Yellow.Sat.range);
  thSet.Yellow.Sat.lower = cvtInt2Double_sat(msg.Yellow.Sat.center, -msg.Yellow.Sat.range);
  thSet.Yellow.Val.upper = cvtInt2Double_val(msg.Yellow.Val.center, msg.Yellow.Val.range);
  thSet.Yellow.Val.lower = cvtInt2Double_val(msg.Yellow.Val.center, -msg.Yellow.Val.range);

  thSet.Green.Hue.upper = cvtInt2Double_hue(msg.Green.Hue.center, msg.Green.Hue.range);
  thSet.Green.Hue.lower = cvtInt2Double_hue(msg.Green.Hue.center, -msg.Green.Hue.range);
  thSet.Green.Sat.upper = cvtInt2Double_sat(msg.Green.Sat.center, msg.Green.Sat.range);
  thSet.Green.Sat.lower = cvtInt2Double_sat(msg.Green.Sat.center, -msg.Green.Sat.range);
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="af0371541d2e89a372035e59b917534f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="567" endLineNumber="591"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="449" endLineNumber="473"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="498" endLineNumber="522"/>
            <text>
<![CDATA[  visualization_msgs::MarkerArray marker_array;
  int id = 0;
  for (const auto& signal : vmap.findByFilter([](const Signal& signal){return true;}))
  {
    if (signal.vid == 0)
    {
      ROS_ERROR_STREAM("[createSignalMarkerArray] invalid signal: " << signal);
      continue;
    }

    Vector vector = vmap.findByKey(Key<Vector>(signal.vid));
    if (vector.vid == 0)
    {
      ROS_ERROR_STREAM("[createSignalMarkerArray] invalid vector: " << vector);
      continue;
    }

    Pole pole;
    if (signal.plid != 0)
    {
      pole = vmap.findByKey(Key<Pole>(signal.plid));
      if (pole.plid == 0)
      {
        ROS_ERROR_STREAM("[createSignalMarkerArray] invalid pole: " << pole);
        continue;
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="b9126c58f894c2d1d12939543514c09b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_viewer\scan_image_viewer.cpp" startLineNumber="110" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_d_viewer\scan_image_d_viewer.cpp" startLineNumber="253" endLineNumber="273"/>
            <text>
<![CDATA[    cv_image = cv_bridge::toCvCopy(image_msg, sensor_msgs::image_encodings::BGR8);
    image = cv_image->image;
    exist_image = true;
    show();
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "sca_image_d_viewer");
    ros::NodeHandle n;
    ros::NodeHandle private_nh("~");
    std::string image_topic_name;
    if (private_nh.getParam("image_raw_topic", image_topic_name)) {
      ROS_INFO("Setting image topic to %s", image_topic_name.c_str());
    } else {
      ROS_INFO("No image topic received, defaulting to image_raw, you can use _image_raw_topic:=YOUR_NODE");
      image_topic_name = "/image_raw";
    }

    ros::Subscriber scan_image_sub = n.subscribe("/scan_image", 1, scan_image_callback);
    ros::Subscriber image_sub = n.subscribe(image_topic_name, 1, image_callback);
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="076f662174adcfa90ef28a814b1f03ba">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\glviewer\GLViewer\glviewer.cpp" startLineNumber="546" endLineNumber="572"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\glviewer\GLViewer\glviewer.cpp" startLineNumber="494" endLineNumber="520"/>
            <text>
<![CDATA[    return;
}

void GLViewer::setDisplayListScale(GLuint listid, double sx, double sy, double sz, bool islistid)
{
    if(islistid)
    {
        int i;
        int n=displaylist.size();
        for(i=0;i<n;i++)
        {
            if(displaylist[i].listid==listid)
            {
				displaylist[i].scale(0,0)=sx;
				displaylist[i].scale(1,1)=sy;
				displaylist[i].scale(2,2)=sz;
                break;
            }
        }
    }
    else
    {
        displaylist[listid].scale(0,0)=sx;
		displaylist[listid].scale(1,1)=sy;
		displaylist[listid].scale(2,2)=sz;
    }
    return;
]]>
            </text>
        </set>
        <set lineCount="16" fingerprint="d4d9f6c532c93e41c92c0225bf2b3567">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="87" endLineNumber="107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="99" endLineNumber="116"/>
            <text>
<![CDATA[#define INITIAL_X -18354.1
#define INITIAL_Y -93693.4
#define INITIAL_Z 43
#define INITIAL_ROLL  0
#define INITIAL_PITCH 0
#define INITIAL_YAW -0.5
#endif
//meidai  (141205_outdoor1)
#if 0
#define INITIAL_X -18526.5
#define INITIAL_Y -93646.0
#define INITIAL_Z 39
#define INITIAL_ROLL  0
#define INITIAL_PITCH 0.03
#define INITIAL_YAW -0.45
#endif
//incubation(0826)
#if 0
]]>
            </text>
        </set>
        <set lineCount="17" fingerprint="60b8a2bc3dfa56019d579133d2be7e3e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1814" endLineNumber="1839"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1851" endLineNumber="1876"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1868" endLineNumber="1893"/>
            <text>
<![CDATA[     << obj.plid << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::GuardRail& obj)
{
  os << obj.id << ","
     << obj.aid << ","
     << obj.type << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::SideWalk& obj)
{
  os << obj.id << ","
     << obj.aid << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::DriveOnPortion& obj)
{
  os << obj.id << ","
     << obj.aid << ","
]]>
            </text>
        </set>
        <set lineCount="17" fingerprint="989a1fa231b2e8b58022e2eae1b0afc7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\distance_filter\distance_filter.cpp" startLineNumber="44" endLineNumber="71"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\random_filter\random_filter.cpp" startLineNumber="43" endLineNumber="71"/>
            <text>
<![CDATA[ros::Publisher filtered_points_pub;

static int sample_num = 1000;

static ros::Publisher points_downsampler_info_pub;
static points_downsampler::PointsDownsamplerInfo points_downsampler_info_msg;

static std::chrono::time_point<std::chrono::system_clock> filter_start, filter_end;

static bool _output_log = false;
static std::ofstream ofs;
static std::string filename;

static std::string POINTS_TOPIC;

static void config_callback(const runtime_manager::ConfigRandomFilter::ConstPtr& input)
{
  sample_num = input->sample_num;
}

static void scan_callback(const sensor_msgs::PointCloud2::ConstPtr& input)
{
  pcl::PointXYZI sampled_p;
  pcl::PointCloud<pcl::PointXYZI> scan;

  pcl::fromROSMsg(*input, scan);

  pcl::PointCloud<pcl::PointXYZI>::Ptr filtered_scan_ptr(new pcl::PointCloud<pcl::PointXYZI>());
  filtered_scan_ptr->header = scan.header;
]]>
            </text>
        </set>
        <set lineCount="17" fingerprint="69c17d284bd72314a14bc3dabf85028e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="158" endLineNumber="175"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="157" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="156" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="155" endLineNumber="171"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="154" endLineNumber="170"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="153" endLineNumber="169"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="152" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="151" endLineNumber="167"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="150" endLineNumber="166"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="149" endLineNumber="165"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="148" endLineNumber="164"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="147" endLineNumber="163"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="146" endLineNumber="162"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="145" endLineNumber="161"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="144" endLineNumber="160"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="143" endLineNumber="159"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="142" endLineNumber="158"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="141" endLineNumber="157"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="140" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="139" endLineNumber="155"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="138" endLineNumber="154"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="137" endLineNumber="153"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="136" endLineNumber="152"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="135" endLineNumber="151"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="134" endLineNumber="150"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="133" endLineNumber="149"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="132" endLineNumber="148"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="131" endLineNumber="147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="130" endLineNumber="146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="129" endLineNumber="145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="128" endLineNumber="144"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="127" endLineNumber="143"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="126" endLineNumber="142"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="125" endLineNumber="141"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="124" endLineNumber="140"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="123" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="122" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="120" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="198" endLineNumber="311"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="193" endLineNumber="306"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="188" endLineNumber="298"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="181" endLineNumber="291"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="175" endLineNumber="285"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="169" endLineNumber="278"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="163" endLineNumber="271"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="157" endLineNumber="265"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="152" endLineNumber="254"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="147" endLineNumber="243"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="139" endLineNumber="233"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="134" endLineNumber="225"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="128" endLineNumber="219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="123" endLineNumber="213"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="118" endLineNumber="208"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="109" endLineNumber="203"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="99" endLineNumber="198"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="197" endLineNumber="314"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="192" endLineNumber="309"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="187" endLineNumber="301"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="180" endLineNumber="294"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="174" endLineNumber="288"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="168" endLineNumber="281"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="162" endLineNumber="274"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="156" endLineNumber="268"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="151" endLineNumber="257"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="146" endLineNumber="246"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="138" endLineNumber="235"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="133" endLineNumber="226"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="127" endLineNumber="219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="122" endLineNumber="212"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="117" endLineNumber="207"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="108" endLineNumber="202"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="98" endLineNumber="197"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="91" endLineNumber="192"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="85" endLineNumber="187"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="80" endLineNumber="180"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="75" endLineNumber="174"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="70" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="65" endLineNumber="162"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="59" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="54" endLineNumber="151"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="48" endLineNumber="146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="42" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="36" endLineNumber="133"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1125" endLineNumber="1147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1123" endLineNumber="1146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1122" endLineNumber="1145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1115" endLineNumber="1143"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="510" endLineNumber="526"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="509" endLineNumber="525"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="508" endLineNumber="524"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="507" endLineNumber="523"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="506" endLineNumber="522"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="505" endLineNumber="521"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="504" endLineNumber="520"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="503" endLineNumber="519"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="502" endLineNumber="518"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="501" endLineNumber="517"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="500" endLineNumber="516"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="499" endLineNumber="515"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="498" endLineNumber="514"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="497" endLineNumber="513"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="496" endLineNumber="512"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="495" endLineNumber="511"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="54" endLineNumber="70"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="201" endLineNumber="219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="200" endLineNumber="218"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="262" endLineNumber="280"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="261" endLineNumber="279"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="167" endLineNumber="183"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="166" endLineNumber="182"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="165" endLineNumber="181"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="164" endLineNumber="180"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="163" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="162" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="159" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="158" endLineNumber="176"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="157" endLineNumber="175"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="156" endLineNumber="174"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="153" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="152" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="151" endLineNumber="171"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="150" endLineNumber="170"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="149" endLineNumber="169"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="148" endLineNumber="168"/>
            <text>
<![CDATA[  POINT = 1LLU << 0,
  VECTOR = 1LLU << 1,
  LINE = 1LLU << 2,
  AREA = 1LLU << 3,
  POLE = 1LLU << 4,
  BOX = 1LLU << 5,

  // Road Data
  DTLANE = 1LLU << 6,
  NODE = 1LLU << 7,
  LANE = 1LLU << 8,
  WAY_AREA = 1LLU << 9,

  // Object Data
  ROAD_EDGE = 1LLU << 10,
  GUTTER = 1LLU << 11,
  CURB = 1LLU << 12,
  WHITE_LINE = 1LLU << 13,
  STOP_LINE = 1LLU << 14,
  ZEBRA_ZONE = 1LLU << 15,
  CROSS_WALK = 1LLU << 16,
]]>
            </text>
        </set>
        <set lineCount="17" fingerprint="d2bdf53aa4c58cde9a357dc5677c7aec">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\glviewer\GLViewer\glviewer.cpp" startLineNumber="243" endLineNumber="272"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\RobotSDK\glviewer\GLViewer\glviewer.cpp" startLineNumber="269" endLineNumber="298"/>
            <text>
<![CDATA[            setProjection();
        }
        break;
    case Qt::Key_Period:
        {
            if(bperspective)
            {
                cameraparameters.viewAngle+=10;
            }
            else
            {
                cameraparameters.viewheight+=10;
            }
            setProjection();
        }
        break;
    case Qt::Key_Comma:
        {
            if(bperspective)
            {
                cameraparameters.viewAngle-=10;
            }
            else
            {
                cameraparameters.viewheight-=10;
            }
            setProjection();
        }
        break;
    case Qt::Key_B:
]]>
            </text>
        </set>
        <set lineCount="17" fingerprint="c1fbd94a006277ebdd8707f981901952">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\opengl_render_state.cpp" startLineNumber="424" endLineNumber="453"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\opengl_render_state.cpp" startLineNumber="453" endLineNumber="482"/>
            <text>
<![CDATA[    return P;
}

// Camera Axis:
//   X - Right, Y - Down, Z - Forward
// Image Origin:
//   Bottom Left
// Pricipal point specified with image origin (0,0) at top left of top-left pixel (not center)
OpenGlMatrixSpec ProjectionMatrixRDF_BottomLeft(int w, int h, GLprecision fu, GLprecision fv, GLprecision u0, GLprecision v0, GLprecision zNear, GLprecision zFar )
{
    // http://www.songho.ca/opengl/gl_projectionmatrix.html
    const GLprecision L = -(u0) * zNear / fu;
    const GLprecision R = +(w-u0) * zNear / fu;
    const GLprecision B = -(v0) * zNear / fv;
    const GLprecision T = +(h-v0) * zNear / fv;
    
    OpenGlMatrixSpec P;
    P.type = GlProjectionStack;
    std::fill_n(P.m,4*4,0);
    
    P.m[0*4+0] = 2 * zNear / (R-L);
    P.m[1*4+1] = 2 * zNear / (T-B);
    
    P.m[2*4+0] = (R+L)/(L-R);
    P.m[2*4+1] = (T+B)/(B-T);
    P.m[2*4+2] = (zFar +zNear) / (zFar - zNear);
    P.m[2*4+3] = 1.0;
    
    P.m[3*4+2] =  (2*zFar*zNear)/(zNear - zFar);
    return P;
]]>
            </text>
        </set>
        <set lineCount="17" fingerprint="ae1d41ec17c6e74abd48980860e59300">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="87" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="492" endLineNumber="554"/>
            <text>
<![CDATA[      std::string reg_name_;

      /** \brief A pointer to the spatial search object. */
      KdTreePtr tree_;
      
      /** \brief A pointer to the spatial search object of the source. */
      KdTreeReciprocalPtr tree_reciprocal_;

      /** \brief The number of iterations the internal optimization ran for (used internally). */
      int nr_iterations_;

      /** \brief The maximum number of iterations the internal optimization should run for.
        * The default value is 10.
        */
      int max_iterations_;

      /** \brief The number of iterations RANSAC should run for. */
      int ransac_iterations_;

      /** \brief The input point cloud dataset target. */
      PointCloudTargetConstPtr target_;

      /** \brief The final transformation matrix estimated by the registration method after N iterations. */
      Matrix4 final_transformation_;

      /** \brief The transformation matrix estimated by the registration method. */
      Matrix4 transformation_;

      /** \brief The previous transformation matrix estimated by the registration method (used internally). */
      Matrix4 previous_transformation_;

      /** \brief The maximum difference between two consecutive transformations in order to consider convergence 
        * (user defined). 
        */
      double transformation_epsilon_;

      /** \brief The maximum allowed Euclidean error between two consecutive steps in the ICP loop, before the 
        * algorithm is considered to have converged. The error is estimated as the sum of the differences between 
        * correspondences in an Euclidean sense, divided by the number of correspondences.
        */
      double euclidean_fitness_epsilon_;

      /** \brief The maximum distance threshold between two correspondent points in source <-> target. If the 
        * distance is larger than this threshold, the points will be ignored in the alignement process.
        */
      double corr_dist_threshold_;

      /** \brief The inlier distance threshold for the internal RANSAC outlier rejection loop.
        * The method considers a point to be an inlier, if the distance between the target data index and the transformed 
        * source index is smaller than the given inlier distance threshold. The default value is 0.05. 
        */
      double inlier_threshold_;

      /** \brief Holds internal convergence state, given user parameters. */
      bool converged_;

      /** \brief The minimum number of correspondences that the algorithm needs before attempting to estimate the 
        * transformation. The default value is 3.
        */
      int min_number_correspondences_;

      /** \brief The set of correspondences determined at this ICP step. */
      CorrespondencesPtr correspondences_;
]]>
            </text>
        </set>
        <set lineCount="17" fingerprint="1731f87d75686d7251f50dcffe459497">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\librcnn\include\rect_class_score.h" startLineNumber="29" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\librcnn\include\rect_class_score.h" startLineNumber="28" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\librcnn\include\rect_class_score.h" startLineNumber="27" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\librcnn\include\rect_class_score.h" startLineNumber="26" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\librcnn\include\rect_class_score.h" startLineNumber="25" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\include\rect_class_score.h" startLineNumber="29" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\include\rect_class_score.h" startLineNumber="28" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\include\rect_class_score.h" startLineNumber="27" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\include\rect_class_score.h" startLineNumber="26" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\include\rect_class_score.h" startLineNumber="25" endLineNumber="41"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="179" endLineNumber="198"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="214" endLineNumber="233"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="343" endLineNumber="359"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="342" endLineNumber="358"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="341" endLineNumber="357"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="340" endLineNumber="356"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="339" endLineNumber="355"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="338" endLineNumber="354"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="337" endLineNumber="353"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="336" endLineNumber="352"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="335" endLineNumber="351"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="334" endLineNumber="350"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="333" endLineNumber="349"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="332" endLineNumber="348"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="331" endLineNumber="347"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="330" endLineNumber="346"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="329" endLineNumber="345"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="328" endLineNumber="344"/>
            <text>
<![CDATA[void updatePoint(std::map<Key<Point>, Point>& map, const PointArray& msg);
void updateVector(std::map<Key<Vector>, Vector>& map, const VectorArray& msg);
void updateLine(std::map<Key<Line>, Line>& map, const LineArray& msg);
void updateArea(std::map<Key<Area>, Area>& map, const AreaArray& msg);
void updatePole(std::map<Key<Pole>, Pole>& map, const PoleArray& msg);
void updateBox(std::map<Key<Box>, Box>& map, const BoxArray& msg);
void updateDTLane(std::map<Key<DTLane>, DTLane>& map, const DTLaneArray& msg);
void updateNode(std::map<Key<Node>, Node>& map, const NodeArray& msg);
void updateLane(std::map<Key<Lane>, Lane>& map, const LaneArray& msg);
void updateWayArea(std::map<Key<WayArea>, WayArea>& map, const WayAreaArray& msg);
void updateRoadEdge(std::map<Key<RoadEdge>, RoadEdge>& map, const RoadEdgeArray& msg);
void updateGutter(std::map<Key<Gutter>, Gutter>& map, const GutterArray& msg);
void updateCurb(std::map<Key<Curb>, Curb>& map, const CurbArray& msg);
void updateWhiteLine(std::map<Key<WhiteLine>, WhiteLine>& map, const WhiteLineArray& msg);
void updateStopLine(std::map<Key<StopLine>, StopLine>& map, const StopLineArray& msg);
void updateZebraZone(std::map<Key<ZebraZone>, ZebraZone>& map, const ZebraZoneArray& msg);
void updateCrossWalk(std::map<Key<CrossWalk>, CrossWalk>& map, const CrossWalkArray& msg);
]]>
            </text>
        </set>
        <set lineCount="17" fingerprint="77e46a3a0f441afa39cca6a26d5b003d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\voxel_grid_covariance.h" startLineNumber="63" endLineNumber="80"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_x11.cpp" startLineNumber="316" endLineNumber="332"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_x11.cpp" startLineNumber="315" endLineNumber="331"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_x11.cpp" startLineNumber="314" endLineNumber="330"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_x11.cpp" startLineNumber="313" endLineNumber="329"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_x11.cpp" startLineNumber="312" endLineNumber="328"/>
            <text>
<![CDATA[                case XK_F1:        key = PANGO_SPECIAL + PANGO_KEY_F1         ; break;
                case XK_F2:        key = PANGO_SPECIAL + PANGO_KEY_F2         ; break;
                case XK_F3:        key = PANGO_SPECIAL + PANGO_KEY_F3         ; break;
                case XK_F4:        key = PANGO_SPECIAL + PANGO_KEY_F4         ; break;
                case XK_F5:        key = PANGO_SPECIAL + PANGO_KEY_F5         ; break;
                case XK_F6:        key = PANGO_SPECIAL + PANGO_KEY_F6         ; break;
                case XK_F7:        key = PANGO_SPECIAL + PANGO_KEY_F7         ; break;
                case XK_F8:        key = PANGO_SPECIAL + PANGO_KEY_F8         ; break;
                case XK_F9:        key = PANGO_SPECIAL + PANGO_KEY_F9         ; break;
                case XK_F10:       key = PANGO_SPECIAL + PANGO_KEY_F10        ; break;
                case XK_F11:       key = PANGO_SPECIAL + PANGO_KEY_F11        ; break;
                case XK_F12:       key = PANGO_SPECIAL + PANGO_KEY_F12        ; break;
                case XK_Left:      key = PANGO_SPECIAL + PANGO_KEY_LEFT       ; break;
                case XK_Up:        key = PANGO_SPECIAL + PANGO_KEY_UP         ; break;
                case XK_Right:     key = PANGO_SPECIAL + PANGO_KEY_RIGHT      ; break;
                case XK_Down:      key = PANGO_SPECIAL + PANGO_KEY_DOWN       ; break;
                case XK_Page_Up:   key = PANGO_SPECIAL + PANGO_KEY_PAGE_UP    ; break;
]]>
            </text>
        </set>
        <set lineCount="17" fingerprint="b950e409c035a8b48b9ac76246568d86">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1774" endLineNumber="1796"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1763" endLineNumber="1785"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1678" endLineNumber="1700"/>
            <text>
<![CDATA[     << obj.vid << ","
     << obj.length << ","
     << obj.dim;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Box& obj)
{
  os << obj.bid << ","
     << obj.pid1 << ","
     << obj.pid2 << ","
     << obj.pid3 << ","
     << obj.pid4 << ","
     << obj.height;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::DTLane& obj)
{
  os << obj.did << ","
     << obj.dist << ","
     << obj.pid << ","
     << obj.dir << ","
]]>
            </text>
        </set>
        <set lineCount="17" fingerprint="74dffc35c39e1eba136231520143f179">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\model_publisher\nodes\model_publisher.cpp" startLineNumber="22" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\model_publisher\nodes\model_publisher.cpp" startLineNumber="26" endLineNumber="47"/>
            <text>
<![CDATA[  private_nh.getParam("offset_x", offset_x);
  ROS_INFO_STREAM("offset_x : " << offset_x);

  double offset_y;
  private_nh.getParam("offset_y", offset_y);
  ROS_INFO_STREAM("offset_y : " << offset_y);

  double offset_z;
  private_nh.getParam("offset_z", offset_z);
  ROS_INFO_STREAM("offset_z : " << offset_z);

  double offset_roll;
  private_nh.getParam("offset_roll", offset_roll);
  ROS_INFO_STREAM("offset_roll : " << offset_roll);

  double offset_pitch;
  private_nh.getParam("offset_pitch", offset_pitch);
  ROS_INFO_STREAM("offset_pitch : " << offset_pitch);

  double offset_yaw;
  private_nh.getParam("offset_yaw", offset_yaw);
  ROS_INFO_STREAM("offset_yaw : " << offset_yaw);
]]>
            </text>
        </set>
        <set lineCount="17" fingerprint="a0361037786f8d13e236999cbbcdad73">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glsl.h" startLineNumber="200" endLineNumber="216"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glsl.h" startLineNumber="218" endLineNumber="234"/>
            <text>
<![CDATA[        const char* source_offsetscale =
                "uniform float offset;"
                "uniform float scale;"
                "uniform sampler2D tex;"
                "void main() {"
                "  vec2 uv = gl_TexCoord[0].st;"
                "  if(0.0 <= uv.x && uv.x <= 1.0 && 0.0 <= uv.y && uv.y <= 1.0) {"
                "    gl_FragColor = texture2D(tex,gl_TexCoord[0].st);"
                "    gl_FragColor.xyz += vec3(offset,offset,offset);"
                "    gl_FragColor.xyz *= scale;"
                "  }else{"
                "    float v = 0.1;"
                "    gl_FragColor.xyz = vec3(v,v,v);"
                "  }"
                "}";
        prog_offsetscale.AddShader(GlSlFragmentShader, source_offsetscale);
        prog_offsetscale.Link();
]]>
            </text>
        </set>
        <set lineCount="17" fingerprint="1883f53d19cfb0781ebb484a5263983c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="235" endLineNumber="251"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1724" endLineNumber="1740"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1723" endLineNumber="1739"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1722" endLineNumber="1738"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1721" endLineNumber="1737"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1720" endLineNumber="1736"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.cpp" startLineNumber="59" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.cpp" startLineNumber="55" endLineNumber="80"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.cpp" startLineNumber="54" endLineNumber="79"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.cpp" startLineNumber="53" endLineNumber="78"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.cpp" startLineNumber="51" endLineNumber="77"/>
            <text>
<![CDATA[    os << PTHING(iteration);

    os << PTHING( numVertices ); // how many vertices are involved
    os << PTHING( numEdges ); // hoe many edges
    os << PTHING(  chi2 );  // total chi2
    
    /** timings **/
    // nonlinear part
    os << PTHING(  timeResiduals );  
    os << PTHING(  timeLinearize );   // jacobians
    os << PTHING(  timeQuadraticForm ); // construct the quadratic form in the graph
    
    // block_solver (constructs Ax=b, plus maybe schur);
    os << PTHING(  timeSchurComplement ); // compute schur complement (0 if not done);
    
    // linear solver (computes Ax=b); );
    os << PTHING(  timeSymbolicDecomposition ); // symbolic decomposition (0 if not done);
    os << PTHING(  timeNumericDecomposition ); // numeric decomposition  (0 if not done);
    os << PTHING(  timeLinearSolution );             // total time for solving Ax=b
    os << PTHING(  iterationsLinearSolver );  // iterations of PCG
    os << PTHING(  timeUpdate ); // oplus
    os << PTHING(  timeIteration ); // total time );

    os << PTHING( levenbergIterations );
    os << PTHING( timeLinearSolver);

    os << PTHING(hessianDimension);
]]>
            </text>
        </set>
        <set lineCount="17" fingerprint="fb7bb77310e785dc2e3654f35ee67273">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="558" endLineNumber="574"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="93" endLineNumber="114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\imu\packages\memsic\nodes\vg440\vg440_node.cpp" startLineNumber="308" endLineNumber="325"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="26" endLineNumber="46"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="78" endLineNumber="96"/>
            <text>
<![CDATA[}DTLane;

typedef struct{
  int lnid;
  int did;
  int blid;
  int flid;
  int bnid;
  int fnid;
  int jct;
  int blid2;
  int blid3;
  int blid4;
  int flid2;
  int flid3;
  int flid4;
  int clossid;
  double span;
  int lcnt;
]]>
            </text>
        </set>
        <set lineCount="17" fingerprint="63c02f6df6065d017c30c436b01f197a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1733" endLineNumber="1755"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1698" endLineNumber="1720"/>
            <text>
<![CDATA[     << obj.dist << ","
     << obj.pid << ","
     << obj.dir << ","
     << obj.apara << ","
     << obj.r << ","
     << obj.slope << ","
     << obj.cant << ","
     << obj.lw << ","
     << obj.rw;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Node& obj)
{
  os << obj.nid << ","
     << obj.pid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Lane& obj)
{
  os << obj.lnid << ","
     << obj.did << ","
]]>
            </text>
        </set>
        <set lineCount="17" fingerprint="62081a17930d563392e5e975ad321f9e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="662" endLineNumber="686"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="611" endLineNumber="635"/>
            <text>
<![CDATA[  bool getDTLane(vector_map_server::GetDTLane::Request& request,
                 vector_map_server::GetDTLane::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      DTLane dtlane = vmap_.findByKey(Key<DTLane>(lane.did));
      if (dtlane.did == 0)
        return false;
      response.objects.data.push_back(dtlane);
    }
    return true;
  }

  bool getNode(vector_map_server::GetNode::Request& request,
               vector_map_server::GetNode::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
]]>
            </text>
        </set>
        <set lineCount="17" fingerprint="b8cf097addc6d05d903b02e380281828">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\CarPositionXYZ.h" startLineNumber="120" endLineNumber="146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\CarPositionXYZ.h" startLineNumber="125" endLineNumber="152"/>
            <text>
<![CDATA[template <class ContainerAllocator>
struct IsFixedSize< ::sensors_fusion::CarPositionXYZ_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensors_fusion::CarPositionXYZ_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensors_fusion::CarPositionXYZ_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensors_fusion::CarPositionXYZ_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensors_fusion::CarPositionXYZ_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensors_fusion::CarPositionXYZ_<ContainerAllocator> >
]]>
            </text>
        </set>
        <set lineCount="17" fingerprint="cfcd208495d565ef66e7dff9f98764da">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="559" endLineNumber="575"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="98" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="498" endLineNumber="560"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="495" endLineNumber="557"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="48" endLineNumber="70"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="44" endLineNumber="69"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="43" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="42" endLineNumber="67"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="41" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2vscan\mainwindow.cpp" startLineNumber="4" endLineNumber="22"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="455" endLineNumber="471"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="454" endLineNumber="470"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="453" endLineNumber="469"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="452" endLineNumber="468"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="451" endLineNumber="467"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="450" endLineNumber="466"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="449" endLineNumber="465"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="448" endLineNumber="464"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="447" endLineNumber="463"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="446" endLineNumber="462"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="445" endLineNumber="461"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="444" endLineNumber="460"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="443" endLineNumber="459"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="442" endLineNumber="458"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="441" endLineNumber="457"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="440" endLineNumber="456"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="30" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="29" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="81" endLineNumber="97"/>
            <text>
<![CDATA[  int lnid;
  int did;
  int blid;
  int flid;
  int bnid;
  int fnid;
  int jct;
  int blid2;
  int blid3;
  int blid4;
  int flid2;
  int flid3;
  int flid4;
  int clossid;
  double span;
  int lcnt;
  int lno;
]]>
            </text>
        </set>
        <set lineCount="18" fingerprint="af9dffaa84384df90e5ad6a7dfcfe38f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.cpp" startLineNumber="309" endLineNumber="336"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.cpp" startLineNumber="162" endLineNumber="189"/>
            <text>
<![CDATA[bool EdgeStereoSE3ProjectXYZ::read(std::istream& is){
  for (int i=0; i<=3; i++){
    is >> _measurement[i];
  }
  for (int i=0; i<=2; i++)
    for (int j=i; j<=2; j++) {
      is >> information()(i,j);
      if (i!=j)
        information()(j,i)=information()(i,j);
    }
  return true;
}

bool EdgeStereoSE3ProjectXYZ::write(std::ostream& os) const {

  for (int i=0; i<=3; i++){
    os << measurement()[i] << " ";
  }

  for (int i=0; i<=2; i++)
    for (int j=i; j<=2; j++){
      os << " " <<  information()(i,j);
    }
  return os.good();
}

void EdgeStereoSE3ProjectXYZ::linearizeOplus() {
  VertexSE3Expmap * vj = static_cast<VertexSE3Expmap *>(_vertices[1]);
]]>
            </text>
        </set>
        <set lineCount="18" fingerprint="a4ee4436ff0b0ffc8b5b10317fa95561">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="1414" endLineNumber="1446"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="1411" endLineNumber="1443"/>
            <text>
<![CDATA[  res = cuMemFreeHost(hist_ptr_incrementer);
  MY_CUDA_CHECK(res, "cuMemFreeHost(hist_ptr_incrementer)");

  res = cuMemFreeHost(norm_ptr_incrementer);
  MY_CUDA_CHECK(res, "cuMemFreeHost(norm_ptr_incrementer)");

  res = cuMemFreeHost(feat_ptr_incrementer);
  MY_CUDA_CHECK(res, "cuMemFreeHost(feat_ptr_incrementer)");

  /* release GPU memory */
  // res = cuMemFree(resized_image_dev);
  // MY_CUDA_CHECK(res, "cuMemFree(resized_image_dev)");

  res = cuMemFree(resized_image_size_dev);
  MY_CUDA_CHECK(res, "cuMemFree(resized_image_size_dev)");

  res = cuMemFree(hist_dev);
  MY_CUDA_CHECK(res, "cuMemFree(hist_dev)");

  // res = cuMemFree(image_idx_incrementer_dev);
  // MY_CUDA_CHECK(res, "cuMemFree(image_idx_incrementer_dev)");

  res = cuMemFree(hist_ptr_incrementer_dev);
  MY_CUDA_CHECK(res, "cuMemFree(hist_ptr_incrementer_dev)");

  res = cuMemFree(norm_dev);
  MY_CUDA_CHECK(res, "cuMemFree(norm_dev)");

  res = cuMemFree(norm_ptr_incrementer_dev);
  MY_CUDA_CHECK(res, "cuMemFree(norm_ptr_incrementer_dev)");

  res = cuMemFree(feat_dev);
  MY_CUDA_CHECK(res, "cuMemFree(feat_dev)");
]]>
            </text>
        </set>
        <set lineCount="18" fingerprint="fa6e48e8fb99209c25072aa2d730a5ed">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_rejection.h" startLineNumber="153" endLineNumber="184"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_rejection.h" startLineNumber="141" endLineNumber="172"/>
            <text>
<![CDATA[        virtual bool
        requiresSourcePoints () const
        { return (false); }

        /** \brief Abstract method for setting the source cloud */
        virtual void
        setSourcePoints (pcl::PCLPointCloud2::ConstPtr /*cloud2*/)
        {
          PCL_WARN ("[pcl::registration::%s::setSourcePoints] This class does not require an input source cloud", getClassName ().c_str ());
        }
        
        /** \brief See if this rejector requires source normals */
        virtual bool
        requiresSourceNormals () const
        { return (false); }

        /** \brief Abstract method for setting the source normals */
        virtual void
        setSourceNormals (pcl::PCLPointCloud2::ConstPtr /*cloud2*/)
        { 
          PCL_WARN ("[pcl::registration::%s::setSourceNormals] This class does not require input source normals", getClassName ().c_str ());
        }
        /** \brief See if this rejector requires a target cloud */
        virtual bool
        requiresTargetPoints () const
        { return (false); }

        /** \brief Abstract method for setting the target cloud */
        virtual void
        setTargetPoints (pcl::PCLPointCloud2::ConstPtr /*cloud2*/)
        {
          PCL_WARN ("[pcl::registration::%s::setTargetPoints] This class does not require an input target cloud", getClassName ().c_str ());
]]>
            </text>
        </set>
        <set lineCount="18" fingerprint="7aaf0296ca53d1a2eb0ed22553310c37">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="264" endLineNumber="286"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="141" endLineNumber="164"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="99" endLineNumber="122"/>
            <text>
<![CDATA[void createGlobalLaneArrayVelocityMarker(const waypoint_follower::LaneArray &lane_waypoints_array)
{
  visualization_msgs::MarkerArray tmp_marker_array;
  // display by markers the velocity of each waypoint.
  visualization_msgs::Marker velocity_marker;
  velocity_marker.header.frame_id = "map";
  velocity_marker.header.stamp = ros::Time();
  velocity_marker.type = visualization_msgs::Marker::TEXT_VIEW_FACING;
  velocity_marker.action = visualization_msgs::Marker::ADD;
  velocity_marker.scale.z = 0.4;
  velocity_marker.color.a = 1.0;
  velocity_marker.color.r = 1;
  velocity_marker.color.g = 1;
  velocity_marker.color.b = 1;
  velocity_marker.frame_locked = true;

  int count = 1;
  for (auto lane : lane_waypoints_array.lanes)
  {
    velocity_marker.ns = "global_velocity_lane_" + std::to_string(count);
    for (int i = 0; i < static_cast<int>(lane.waypoints.size()); i++)
    {
      //std::cout << _waypoints[i].GetX() << " " << _waypoints[i].GetY() << " " << _waypoints[i].GetZ() << " " << _waypoints[i].GetVelocity_kmh() << std::endl;
      velocity_marker.id = i;
]]>
            </text>
        </set>
        <set lineCount="18" fingerprint="b3150dc4486bd4e7c82548760688a50e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\newton.cpp" startLineNumber="286" endLineNumber="306"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\newton.cpp" startLineNumber="262" endLineNumber="282"/>
            <text>
<![CDATA[  if (_downsampler_num == 0)
  {
    /*锟角★拷锟斤拷锟斤拷锟斤拷锟叫わ拷锟斤拷锟斤拷1=锟斤拷膜扭摹锟?*/
    switch (target)
    {
      case 3:
        inc = 1;
        ndmode = 0;
        break;
      case 2:
        inc = 500;
        ndmode = 1;
        break;
      case 1:
        inc = 5000;
        ndmode = 0;
        break;
      default:
        inc = 5000;
        ndmode = 0;
        break;
]]>
            </text>
        </set>
        <set lineCount="18" fingerprint="1ad17ca120cbda7fcf6306d900037c20">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="756" endLineNumber="784"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="304" endLineNumber="332"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="225" endLineNumber="254"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="150" endLineNumber="178"/>
            <text>
<![CDATA[visualization_msgs::MarkerArray createRoadEdgeMarkerArray(const VectorMap& vmap, Color color)
{
  visualization_msgs::MarkerArray marker_array;
  int id = 0;
  for (const auto& road_edge : vmap.findByFilter([](const RoadEdge& road_edge){return true;}))
  {
    if (road_edge.lid == 0)
    {
      ROS_ERROR_STREAM("[createRoadEdgeMarkerArray] invalid road_edge: " << road_edge);
      continue;
    }

    Line line = vmap.findByKey(Key<Line>(road_edge.lid));
    if (line.lid == 0)
    {
      ROS_ERROR_STREAM("[createRoadEdgeMarkerArray] invalid line: " << line);
      continue;
    }

    if (line.blid == 0) // if beginning line
    {
      visualization_msgs::Marker marker = createLinkedLineMarker("road_edge", id++, color, vmap, line);
      if (isValidMarker(marker))
        marker_array.markers.push_back(marker);
      else
        ROS_ERROR_STREAM("[createRoadEdgeMarkerArray] failed createLinkedLineMarker: " << line);
    }
  }
  return marker_array;
]]>
            </text>
        </set>
        <set lineCount="18" fingerprint="791610ea209ccd01f5bc75ea23f2c695">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1859" endLineNumber="1885"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1661" endLineNumber="1687"/>
            <text>
<![CDATA[     << obj.fpid << ","
     << obj.blid << ","
     << obj.flid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Area& obj)
{
  os << obj.aid << ","
     << obj.slid << ","
     << obj.elid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Pole& obj)
{
  os << obj.plid << ","
     << obj.vid << ","
     << obj.length << ","
     << obj.dim;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Box& obj)
{
  os << obj.bid << ","
     << obj.pid1 << ","
]]>
            </text>
        </set>
        <set lineCount="18" fingerprint="8f97a81966dd588de0f1c4a10cd6aa84">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\voxel_grid_filter\voxel_grid_filter.cpp" startLineNumber="77" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\ring_filter\ring_filter.cpp" startLineNumber="105" endLineNumber="134"/>
            <text>
<![CDATA[  if (voxel_leaf_size >= 0.1)
  {
    // Downsampling the velodyne scan using VoxelGrid filter
    pcl::VoxelGrid<pcl::PointXYZI> voxel_grid_filter;
    voxel_grid_filter.setLeafSize(voxel_leaf_size, voxel_leaf_size, voxel_leaf_size);
    voxel_grid_filter.setInputCloud(scan_ptr);
    voxel_grid_filter.filter(*filtered_scan_ptr);

    pcl::toROSMsg(*filtered_scan_ptr, filtered_msg);
  }
  else
  {
    pcl::toROSMsg(*scan_ptr, filtered_msg);
  }

  filter_end = std::chrono::system_clock::now();

  filtered_msg.header = input->header;
  filtered_points_pub.publish(filtered_msg);

  points_downsampler_info_msg.header = input->header;
  points_downsampler_info_msg.filter_name = "ring_filter";
  points_downsampler_info_msg.original_points_size = scan.size();
  if (voxel_leaf_size >= 0.1)
  {
    points_downsampler_info_msg.filtered_points_size = filtered_scan_ptr->size();
  }
  else
  {
    points_downsampler_info_msg.filtered_points_size = scan_ptr->size();
]]>
            </text>
        </set>
        <set lineCount="18" fingerprint="29fa43999572e018c549952253a36402">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="2713" endLineNumber="2733"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="2706" endLineNumber="2726"/>
            <text>
<![CDATA[         case 2:
            for (i=0; i <= safe_w; ++i) {
               total += pixels[i] - buffer[i & STBTT__OVER_MASK];
               buffer[(i+kernel_width) & STBTT__OVER_MASK] = pixels[i];
               pixels[i] = (unsigned char) (total / 2);
            }
            break;
         case 3:
            for (i=0; i <= safe_w; ++i) {
               total += pixels[i] - buffer[i & STBTT__OVER_MASK];
               buffer[(i+kernel_width) & STBTT__OVER_MASK] = pixels[i];
               pixels[i] = (unsigned char) (total / 3);
            }
            break;
         case 4:
            for (i=0; i <= safe_w; ++i) {
               total += pixels[i] - buffer[i & STBTT__OVER_MASK];
               buffer[(i+kernel_width) & STBTT__OVER_MASK] = pixels[i];
               pixels[i] = (unsigned char) (total / 4);
            }
            break;
]]>
            </text>
        </set>
        <set lineCount="18" fingerprint="398186f9f3ca664dcc538b9373d023f5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1786" endLineNumber="1812"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1652" endLineNumber="1678"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1909" endLineNumber="1935"/>
            <text>
<![CDATA[     << obj.lid << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::CurveMirror& obj)
{
  os << obj.id << ","
     << obj.vid << ","
     << obj.plid << ","
     << obj.type << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Wall& obj)
{
  os << obj.id << ","
     << obj.aid << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Fence& obj)
{
  os << obj.id << ","
     << obj.aid << ","
]]>
            </text>
        </set>
        <set lineCount="18" fingerprint="990df15dbc81019508ebe5116cc2f329">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\log\packetstream.cpp" startLineNumber="385" endLineNumber="405"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\log\packetstream.cpp" startLineNumber="338" endLineNumber="358"/>
            <text>
<![CDATA[    switch (next_tag) {
    case TAG_PANGO_HDR:
        ReadHeaderPacket();
        break;
    case TAG_ADD_SOURCE:
        ReadNewSourcePacket();
        break;
    case TAG_PANGO_STATS:
        ReadStatsPacket();
        break;
    case TAG_SRC_JSON:
    {
        size_t src_id = ReadCompressedUnsignedInt();
        if(src_id >= sources.size()) {
            std::cerr << src_id << std::endl;
            throw std::runtime_error("Invalid Frame Source ID.");
        }
        ReadSourcePacketMeta(sources[src_id].meta);
        break;
    }
    case TAG_SRC_PACKET:
]]>
            </text>
        </set>
        <set lineCount="18" fingerprint="4161379e2cb2d77cbba29b0c25da71bf">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1796" endLineNumber="1822"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1823" endLineNumber="1849"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1901" endLineNumber="1927"/>
            <text>
<![CDATA[     << obj.aid << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::SideStrip& obj)
{
  os << obj.id << ","
     << obj.lid << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::CurveMirror& obj)
{
  os << obj.id << ","
     << obj.vid << ","
     << obj.plid << ","
     << obj.type << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Wall& obj)
{
  os << obj.id << ","
     << obj.aid << ","
]]>
            </text>
        </set>
        <set lineCount="18" fingerprint="b6572f50e250e727cb4f1c9208426ae3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\can\packages\kvaser\nodes\can_draw\can_draw.cpp" startLineNumber="55" endLineNumber="76"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\can\packages\kvaser\nodes\can_converter\can_converter.cpp" startLineNumber="56" endLineNumber="76"/>
            <text>
<![CDATA[    w=msg->dat[4]*256+msg->dat[5];
    brake=w;
    changed=1;
  }
  if(msg->id==0x127){
    shift=msg->dat[3];
    speed=msg->dat[4];
    changed=1;
  }
  if(msg->id==0x230){
    w=msg->dat[0]*256+msg->dat[1];
    enc_p=enc;
    enc=w;
    diff=enc-enc_p;
    enc_diff=diff;
    enc_sum+=diff;
    changed=1;
  }
  if(changed){
    if(!log_fp)log_fp=fopen("/tmp/can_log","w");
    fprintf(log_fp,"%f %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n",
]]>
            </text>
        </set>
        <set lineCount="18" fingerprint="855c68473b79c8ca31daaad6fa71be74">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.cpp" startLineNumber="239" endLineNumber="267"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.cpp" startLineNumber="76" endLineNumber="104"/>
            <text>
<![CDATA[bool EdgeSE3ProjectXYZ::read(std::istream& is){
  for (int i=0; i<2; i++){
    is >> _measurement[i];
  }
  for (int i=0; i<2; i++)
    for (int j=i; j<2; j++) {
      is >> information()(i,j);
      if (i!=j)
        information()(j,i)=information()(i,j);
    }
  return true;
}

bool EdgeSE3ProjectXYZ::write(std::ostream& os) const {

  for (int i=0; i<2; i++){
    os << measurement()[i] << " ";
  }

  for (int i=0; i<2; i++)
    for (int j=i; j<2; j++){
      os << " " <<  information()(i,j);
    }
  return os.good();
}


void EdgeSE3ProjectXYZ::linearizeOplus() {
  VertexSE3Expmap * vj = static_cast<VertexSE3Expmap *>(_vertices[1]);
]]>
            </text>
        </set>
        <set lineCount="18" fingerprint="66ac6f2092ed7f998cc249f57f2eb5d5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="889" endLineNumber="906"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="841" endLineNumber="859"/>
            <text>
<![CDATA[	CUTThread* threads = (CUTThread *)malloc(sizeof(CUTThread) * device_num);

	for(int i = 0; i < device_num; i++){
		p[i].NoP = NoP;
		p[i].NoC = NoC;
		p[i].interval = interval;
		p[i].L_MAX = L_MAX;
		p[i].sum_size_SQ = sum_size_SQ;
		p[i].max_numpart = max_numpart;
		p[i].max_dim0 = max_dim0;
		p[i].max_dim1 = max_dim1;
		p[i].dst_M = dst_M;
		p[i].dst_tmpIx = dst_tmpIx;
		p[i].dst_tmpIy = dst_tmpIy;
		p[i].PIDX_array = PIDX_array;
		p[i].size_array = size_array;
		p[i].numpart = numpart;
		p[i].FSIZE = FSIZE;
		p[i].padx = padx;
]]>
            </text>
        </set>
        <set lineCount="18" fingerprint="2415d2cb6dbe9c956c059b864fad2707">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="2774" endLineNumber="2794"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\stb_truetype.h" startLineNumber="2767" endLineNumber="2787"/>
            <text>
<![CDATA[         case 2:
            for (i=0; i <= safe_h; ++i) {
               total += pixels[i*stride_in_bytes] - buffer[i & STBTT__OVER_MASK];
               buffer[(i+kernel_width) & STBTT__OVER_MASK] = pixels[i*stride_in_bytes];
               pixels[i*stride_in_bytes] = (unsigned char) (total / 2);
            }
            break;
         case 3:
            for (i=0; i <= safe_h; ++i) {
               total += pixels[i*stride_in_bytes] - buffer[i & STBTT__OVER_MASK];
               buffer[(i+kernel_width) & STBTT__OVER_MASK] = pixels[i*stride_in_bytes];
               pixels[i*stride_in_bytes] = (unsigned char) (total / 3);
            }
            break;
         case 4:
            for (i=0; i <= safe_h; ++i) {
               total += pixels[i*stride_in_bytes] - buffer[i & STBTT__OVER_MASK];
               buffer[(i+kernel_width) & STBTT__OVER_MASK] = pixels[i*stride_in_bytes];
               pixels[i*stride_in_bytes] = (unsigned char) (total / 4);
            }
            break;
]]>
            </text>
        </set>
        <set lineCount="18" fingerprint="e4b3facd88b99a204edd3b19c17efedd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\tracking.cpp" startLineNumber="56" endLineNumber="85"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\tracking.cpp" startLineNumber="58" endLineNumber="87"/>
            <text>
<![CDATA[	int ML = 1+2*(1+numpart[0]);

	RESULT *CUR =create_result(*NUM);

	//no_rectangle was detected
	if(*NUM==0) return(CUR);

	FLOAT *Avec = (FLOAT *)calloc(ML,sizeof(FLOAT));
	for(int ii=0;ii<*NUM;ii++)
	{
		FLOAT *P = boxes+GL*ii;
		FLOAT *Avec_T = Avec;
		int CNUM = (int)(*(P+GL-3));
		int PP[4];

		*(Avec_T++)=P[3]-P[1];

		for(int kk=0;kk<LL;kk+=4)
		{
			*(Avec_T++)=*(P+kk+1);
			*(Avec_T++)=*(P+kk);
		}

		FLOAT XP1=0,XP2=0,YP1=0,YP2=0;
		Avec_T = Avec;
		FLOAT *x1_T = x1[CNUM]; FLOAT *x2_T = x2[CNUM];
		FLOAT *y1_T = y1[CNUM]; FLOAT *y2_T = y2[CNUM];

		//get rectangle coodinate (by linear-method)
		for(int kk=0;kk<ML;kk++)
]]>
            </text>
        </set>
        <set lineCount="18" fingerprint="d4d2150cd3bacbf28b4a70d5c538a5e8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\librcnn\src\rcnn_detector.cpp" startLineNumber="340" endLineNumber="370"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\kf\src\kf.cpp" startLineNumber="523" endLineNumber="553"/>
            <text>
<![CDATA[	Sort(scores, indices);//returns indices ordered based on scores

	for(unsigned int i=0; i< size; i++)
	{
		if(!is_suppresed[indices[i]])
		{
			for(unsigned int j= i+1; j< size; j++)
			{
				int x1_max = std::max(x1[indices[i]], x1[indices[j]]);
				int x2_min = std::min(x2[indices[i]], x2[indices[j]]);
				int y1_max = std::max(y1[indices[i]], y1[indices[j]]);
				int y2_min = std::min(y2[indices[i]], y2[indices[j]]);
				int overlap_width = x2_min - x1_max + 1;
				int overlap_height = y2_min - y1_max + 1;
				if(overlap_width > 0 && overlap_height>0)
				{
					float overlap_part = (overlap_width*overlap_height)/area[indices[j]];
					if(overlap_part > in_nms_threshold)
					{
						is_suppresed[indices[j]] = true;
					}
				}
			}
		}
	}

	unsigned int size_out = 0;
	for (unsigned int i = 0; i < size; i++)
	{
		if (!is_suppresed[i])
			size_out++;
]]>
            </text>
        </set>
        <set lineCount="18" fingerprint="cfcd208495d565ef66e7dff9f98764da">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="454" endLineNumber="471"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="453" endLineNumber="470"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="452" endLineNumber="469"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="451" endLineNumber="468"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="450" endLineNumber="467"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="449" endLineNumber="466"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="448" endLineNumber="465"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="447" endLineNumber="464"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="446" endLineNumber="463"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="445" endLineNumber="462"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="444" endLineNumber="461"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="443" endLineNumber="460"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="442" endLineNumber="459"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="441" endLineNumber="458"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="440" endLineNumber="457"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="44" endLineNumber="70"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="43" endLineNumber="69"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="42" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="41" endLineNumber="67"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="411" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="409" endLineNumber="429"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="408" endLineNumber="428"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="407" endLineNumber="427"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="406" endLineNumber="426"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="405" endLineNumber="425"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="404" endLineNumber="423"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="402" endLineNumber="422"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="401" endLineNumber="421"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="400" endLineNumber="420"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="399" endLineNumber="419"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="398" endLineNumber="418"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="397" endLineNumber="416"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="418" endLineNumber="437"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="416" endLineNumber="436"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="415" endLineNumber="435"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="414" endLineNumber="434"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="413" endLineNumber="433"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="412" endLineNumber="432"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="411" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="409" endLineNumber="429"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="408" endLineNumber="428"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="407" endLineNumber="427"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="406" endLineNumber="426"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="405" endLineNumber="425"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="404" endLineNumber="423"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\include\rect_class_score.h" startLineNumber="28" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\include\rect_class_score.h" startLineNumber="27" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\include\rect_class_score.h" startLineNumber="26" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\include\rect_class_score.h" startLineNumber="25" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\librcnn\include\rect_class_score.h" startLineNumber="28" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\librcnn\include\rect_class_score.h" startLineNumber="27" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\librcnn\include\rect_class_score.h" startLineNumber="26" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\librcnn\include\rect_class_score.h" startLineNumber="25" endLineNumber="42"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.cpp" startLineNumber="55" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.cpp" startLineNumber="54" endLineNumber="80"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.cpp" startLineNumber="53" endLineNumber="79"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.cpp" startLineNumber="51" endLineNumber="78"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1723" endLineNumber="1740"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1722" endLineNumber="1739"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1721" endLineNumber="1738"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1720" endLineNumber="1737"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="75" endLineNumber="118"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="73" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="71" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="69" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="67" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="65" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="63" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1077" endLineNumber="1111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1075" endLineNumber="1109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1073" endLineNumber="1107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1071" endLineNumber="1105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1069" endLineNumber="1103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1067" endLineNumber="1101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1065" endLineNumber="1099"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1063" endLineNumber="1097"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1061" endLineNumber="1095"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1059" endLineNumber="1093"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\icp.h" startLineNumber="120" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\icp.h" startLineNumber="119" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\icp.h" startLineNumber="118" endLineNumber="135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\icp.h" startLineNumber="117" endLineNumber="134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1027" endLineNumber="1044"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1026" endLineNumber="1043"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1025" endLineNumber="1042"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1024" endLineNumber="1041"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1023" endLineNumber="1040"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1022" endLineNumber="1039"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1021" endLineNumber="1038"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1020" endLineNumber="1037"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1019" endLineNumber="1036"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1018" endLineNumber="1035"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1017" endLineNumber="1034"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1016" endLineNumber="1033"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1015" endLineNumber="1032"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1014" endLineNumber="1031"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1013" endLineNumber="1030"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="124" endLineNumber="142"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="122" endLineNumber="140"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="122" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="121" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="120" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="119" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="118" endLineNumber="135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="117" endLineNumber="134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="116" endLineNumber="133"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="115" endLineNumber="132"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="114" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="113" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="112" endLineNumber="129"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="111" endLineNumber="128"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="110" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="109" endLineNumber="126"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="108" endLineNumber="125"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="106" endLineNumber="124"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="105" endLineNumber="123"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="104" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="103" endLineNumber="121"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="102" endLineNumber="120"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="101" endLineNumber="119"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="100" endLineNumber="118"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="99" endLineNumber="117"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="98" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="97" endLineNumber="115"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="96" endLineNumber="114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="95" endLineNumber="113"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="94" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="93" endLineNumber="111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="92" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="91" endLineNumber="109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="90" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="89" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="88" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="87" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="86" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="85" endLineNumber="102"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="84" endLineNumber="101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="83" endLineNumber="100"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="82" endLineNumber="99"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="81" endLineNumber="98"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="80" endLineNumber="97"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="79" endLineNumber="96"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="78" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="77" endLineNumber="94"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="76" endLineNumber="93"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="75" endLineNumber="92"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="29" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_x11.cpp" startLineNumber="315" endLineNumber="332"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_x11.cpp" startLineNumber="314" endLineNumber="331"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_x11.cpp" startLineNumber="313" endLineNumber="330"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_x11.cpp" startLineNumber="312" endLineNumber="329"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="162" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="161" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="160" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="65" endLineNumber="82"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="64" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="63" endLineNumber="80"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="342" endLineNumber="359"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="341" endLineNumber="358"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="340" endLineNumber="357"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="339" endLineNumber="356"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="338" endLineNumber="355"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="337" endLineNumber="354"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="336" endLineNumber="353"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="335" endLineNumber="352"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="334" endLineNumber="351"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="333" endLineNumber="350"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="332" endLineNumber="349"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="331" endLineNumber="348"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="330" endLineNumber="347"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="329" endLineNumber="346"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="328" endLineNumber="345"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="850" endLineNumber="867"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="849" endLineNumber="866"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="848" endLineNumber="865"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="847" endLineNumber="864"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="846" endLineNumber="863"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="845" endLineNumber="862"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="844" endLineNumber="861"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="495" endLineNumber="560"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="48" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="47" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="46" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="45" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="42" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="41" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="38" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="37" endLineNumber="58"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="36" endLineNumber="57"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="379" endLineNumber="396"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="378" endLineNumber="395"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="377" endLineNumber="394"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="376" endLineNumber="393"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="375" endLineNumber="392"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="374" endLineNumber="391"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="373" endLineNumber="390"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="372" endLineNumber="389"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="371" endLineNumber="388"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="370" endLineNumber="387"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="369" endLineNumber="386"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="368" endLineNumber="385"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="367" endLineNumber="384"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="366" endLineNumber="383"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="365" endLineNumber="382"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="270" endLineNumber="289"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="166" endLineNumber="183"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="165" endLineNumber="182"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="164" endLineNumber="181"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="163" endLineNumber="180"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="162" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="159" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="158" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="157" endLineNumber="176"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="156" endLineNumber="175"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="153" endLineNumber="174"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="152" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="151" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="150" endLineNumber="171"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="149" endLineNumber="170"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="148" endLineNumber="169"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="261" endLineNumber="280"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="200" endLineNumber="219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="509" endLineNumber="526"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="508" endLineNumber="525"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="507" endLineNumber="524"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="506" endLineNumber="523"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="505" endLineNumber="522"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="504" endLineNumber="521"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="503" endLineNumber="520"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="502" endLineNumber="519"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="501" endLineNumber="518"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="500" endLineNumber="517"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="499" endLineNumber="516"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="498" endLineNumber="515"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="497" endLineNumber="514"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="496" endLineNumber="513"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="495" endLineNumber="512"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1123" endLineNumber="1147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1122" endLineNumber="1146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1115" endLineNumber="1145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="192" endLineNumber="314"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="187" endLineNumber="309"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="180" endLineNumber="301"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="174" endLineNumber="294"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="168" endLineNumber="288"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="162" endLineNumber="281"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="156" endLineNumber="274"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="151" endLineNumber="268"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="146" endLineNumber="257"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="138" endLineNumber="246"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="133" endLineNumber="235"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="127" endLineNumber="226"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="122" endLineNumber="219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="117" endLineNumber="212"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="108" endLineNumber="207"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="98" endLineNumber="202"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="91" endLineNumber="197"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="85" endLineNumber="192"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="80" endLineNumber="187"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="75" endLineNumber="180"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="70" endLineNumber="174"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="65" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="59" endLineNumber="162"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="54" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="48" endLineNumber="151"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="42" endLineNumber="146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="36" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="193" endLineNumber="311"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="188" endLineNumber="306"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="181" endLineNumber="298"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="175" endLineNumber="291"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="169" endLineNumber="285"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="163" endLineNumber="278"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="157" endLineNumber="271"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="152" endLineNumber="265"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="147" endLineNumber="254"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="139" endLineNumber="243"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="134" endLineNumber="233"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="128" endLineNumber="225"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="123" endLineNumber="219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="118" endLineNumber="213"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="109" endLineNumber="208"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="99" endLineNumber="203"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="157" endLineNumber="175"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="156" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="155" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="154" endLineNumber="171"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="153" endLineNumber="170"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="152" endLineNumber="169"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="151" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="150" endLineNumber="167"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="149" endLineNumber="166"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="148" endLineNumber="165"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="147" endLineNumber="164"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="146" endLineNumber="163"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="145" endLineNumber="162"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="144" endLineNumber="161"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="143" endLineNumber="160"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="142" endLineNumber="159"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="141" endLineNumber="158"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="140" endLineNumber="157"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="139" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="138" endLineNumber="155"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="137" endLineNumber="154"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="136" endLineNumber="153"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="135" endLineNumber="152"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="134" endLineNumber="151"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="133" endLineNumber="150"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="132" endLineNumber="149"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="131" endLineNumber="148"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="130" endLineNumber="147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="129" endLineNumber="146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="128" endLineNumber="145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="127" endLineNumber="144"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="126" endLineNumber="143"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="125" endLineNumber="142"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="124" endLineNumber="141"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="123" endLineNumber="140"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="122" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="120" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="487" endLineNumber="504"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="486" endLineNumber="503"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="485" endLineNumber="502"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="484" endLineNumber="501"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="483" endLineNumber="500"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="482" endLineNumber="499"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="481" endLineNumber="498"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="480" endLineNumber="497"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="479" endLineNumber="496"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="478" endLineNumber="495"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="477" endLineNumber="494"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="476" endLineNumber="493"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="475" endLineNumber="492"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="474" endLineNumber="491"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="473" endLineNumber="490"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="421" endLineNumber="438"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="420" endLineNumber="437"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="419" endLineNumber="436"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="418" endLineNumber="435"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="417" endLineNumber="434"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="416" endLineNumber="433"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="415" endLineNumber="432"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="414" endLineNumber="431"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="413" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="412" endLineNumber="429"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="411" endLineNumber="428"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="410" endLineNumber="427"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="409" endLineNumber="426"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="408" endLineNumber="425"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="407" endLineNumber="424"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="561" endLineNumber="578"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="560" endLineNumber="577"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="559" endLineNumber="576"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="558" endLineNumber="575"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="557" endLineNumber="574"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="556" endLineNumber="573"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="555" endLineNumber="572"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="554" endLineNumber="571"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="553" endLineNumber="570"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="552" endLineNumber="569"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="551" endLineNumber="568"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="550" endLineNumber="567"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="549" endLineNumber="566"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="548" endLineNumber="565"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="547" endLineNumber="564"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="951" endLineNumber="968"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="950" endLineNumber="967"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="949" endLineNumber="966"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="948" endLineNumber="965"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="947" endLineNumber="964"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="946" endLineNumber="963"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="945" endLineNumber="962"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="944" endLineNumber="961"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="943" endLineNumber="960"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="942" endLineNumber="959"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="941" endLineNumber="958"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="940" endLineNumber="957"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="939" endLineNumber="956"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="938" endLineNumber="955"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="937" endLineNumber="954"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="594" endLineNumber="611"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="593" endLineNumber="610"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="592" endLineNumber="609"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="591" endLineNumber="608"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="590" endLineNumber="607"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="589" endLineNumber="606"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="588" endLineNumber="605"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="587" endLineNumber="604"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="586" endLineNumber="603"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="585" endLineNumber="602"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="584" endLineNumber="601"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="583" endLineNumber="600"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="582" endLineNumber="599"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="581" endLineNumber="598"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="580" endLineNumber="597"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="158" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="157" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="156" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="154" endLineNumber="176"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="152" endLineNumber="174"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="151" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="150" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="149" endLineNumber="170"/>
            <text>
<![CDATA[#define GL_MODELVIEW                      0x1700
#define GL_PROJECTION                     0x1701
#define GL_SHADE_MODEL                    0x0B54
#define GL_POINT_SIZE                     0x0B11

#define GL_MULTISAMPLE                    0x809D

#define GL_LIGHTING                       0x0B50
#define GL_POINT_SMOOTH                   0x0B10
#define GL_LINE_SMOOTH                    0x0B20
#define GL_SCISSOR_TEST                   0x0C11
#define GL_COLOR_MATERIAL                 0x0B57

#define GL_FLAT                           0x1D00
#define GL_SMOOTH                         0x1D01

#define GL_MODULATE                       0x2100
#define GL_DECAL                          0x2101
#define GL_ADD                            0x0104
#define GL_TEXTURE_ENV_MODE               0x2200
#define GL_TEXTURE_ENV_COLOR              0x2201
#define GL_TEXTURE_ENV                    0x2300
]]>
            </text>
        </set>
        <set lineCount="19" fingerprint="b7a2eb8231529f04e240261b2d7f1a60">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="234" endLineNumber="259"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="237" endLineNumber="262"/>
            <text>
<![CDATA[  pcl::PointCloud<pcl::PointXYZI>::Ptr map_ptr(new pcl::PointCloud<pcl::PointXYZI>(map));

  ndt.setTransformationEpsilon(trans_eps);
  ndt.setStepSize(step_size);
  ndt.setResolution(ndt_res);
  ndt.setMaximumIterations(max_iter);
  ndt.setInputSource(filtered_scan_ptr);

  if (isMapUpdate == true)
  {
    ndt.setInputTarget(map_ptr);
    isMapUpdate = false;
  }

  guess_pose.x = previous_pose.x + offset_x;
  guess_pose.y = previous_pose.y + offset_y;
  guess_pose.z = previous_pose.z + offset_z;
  guess_pose.roll = previous_pose.roll;
  guess_pose.pitch = previous_pose.pitch;
  guess_pose.yaw = previous_pose.yaw + offset_yaw;

  Eigen::AngleAxisf init_rotation_x(guess_pose.roll, Eigen::Vector3f::UnitX());
  Eigen::AngleAxisf init_rotation_y(guess_pose.pitch, Eigen::Vector3f::UnitY());
  Eigen::AngleAxisf init_rotation_z(guess_pose.yaw, Eigen::Vector3f::UnitZ());

  Eigen::Translation3f init_translation(guess_pose.x, guess_pose.y, guess_pose.z);
]]>
            </text>
        </set>
        <set lineCount="19" fingerprint="3dfb386c217313fe31774793ca5445ae">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\pointgrey\nodes\grasshopper3\grasshopper3.cpp" startLineNumber="56" endLineNumber="99"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\pointgrey\nodes\ladybug\ladybug.cpp" startLineNumber="38" endLineNumber="80"/>
            <text>
<![CDATA[static void signalHandler(int)
{
	running_ = 0;
	ros::shutdown();
}

void parseCameraInfo(const cv::Mat  &camMat,
						const cv::Mat  &disCoeff,
						const cv::Size &imgSize,
						sensor_msgs::CameraInfo &msg)
{
	msg.header.frame_id = "camera";

	msg.height = imgSize.height;
	msg.width  = imgSize.width;

	for (int row=0; row<3; row++)
	{
		for (int col=0; col<3; col++)
		{
			msg.K[row * 3 + col] = camMat.at<double>(row, col);
		}
	}

	for (int row=0; row<3; row++)
	{
		for (int col=0; col<4; col++)
		{
			if (col == 3)
			{
				msg.P[row * 4 + col] = 0.0f;
			} else
			{
				msg.P[row * 4 + col] = camMat.at<double>(row, col);
			}
		}
	}

	for (int row=0; row<disCoeff.rows; row++)
	{
		for (int col=0; col<disCoeff.cols; col++)
		{
			msg.D.push_back(disCoeff.at<double>(row, col));
]]>
            </text>
        </set>
        <set lineCount="19" fingerprint="71759591743447f59956c4c183a8e49b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1876" endLineNumber="1903"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1918" endLineNumber="1945"/>
            <text>
<![CDATA[     << obj.plid << ","
     << obj.type << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Wall& obj)
{
  os << obj.id << ","
     << obj.aid << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Fence& obj)
{
  os << obj.id << ","
     << obj.aid << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::RailCrossing& obj)
{
  os << obj.id << ","
     << obj.aid << ","
     << obj.linkid;
  return os;
]]>
            </text>
        </set>
        <set lineCount="19" fingerprint="606a438ddcfe7d3346feb1c5d3280497">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="852" endLineNumber="873"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="891" endLineNumber="912"/>
            <text>
<![CDATA[		p[i].featp2 = featp2;
		p[i].SUM_SIZE_feat = SUM_SIZE_feat;
		p[i].A_SIZE = A_SIZE;
		p[i].SUM_SIZE_B = SUM_SIZE_B;
		p[i].SUM_SIZE_C = SUM_SIZE_C;
		p[i].dst_C = dst_C;
		p[i].filter = filter;
		p[i].len = len;
		p[i].calc_flag = calc_flag;
		p[i].error_array_num = error_array_num;
		p[i].start = start;
		p[i].error_array = error_array;
		p[i].B_dimension = B_dimension;
		p[i].interval = interval;
		p[i].L_MAX = L_MAX;
		p[i].pid = i;
		threads[i] = cutStartThread((CUT_THREADROUTINE)fconvs_thread_func, (void *)&p[i]);

	}

	cutWaitForThreads(threads, device_num);
	free(threads);
]]>
            </text>
        </set>
        <set lineCount="19" fingerprint="85ff6a032d766a06f2c67ca028245fe3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="554" endLineNumber="575"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="88" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="18" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="77" endLineNumber="97"/>
            <text>
<![CDATA[  double rw;
}DTLane;

typedef struct{
  int lnid;
  int did;
  int blid;
  int flid;
  int bnid;
  int fnid;
  int jct;
  int blid2;
  int blid3;
  int blid4;
  int flid2;
  int flid3;
  int flid4;
  int clossid;
  double span;
  int lcnt;
  int lno;
]]>
            </text>
        </set>
        <set lineCount="19" fingerprint="206e87f3359af64919d3f9b6215fb704">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glstate.h" startLineNumber="155" endLineNumber="184"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\glstate.h" startLineNumber="166" endLineNumber="196"/>
            <text>
<![CDATA[        if(!m_ShadeModelCalled) {
            m_ShadeModelCalled = true;
            glGetIntegerv(GL_CULL_FACE_MODE, &m_OriginalCullFace);
        }
        ::glCullFace(mode);        
    }
    
    bool m_PointSizeCalled;
    GLfloat m_OriginalPointSize;
    void glPointSize(GLfloat size)
    {
        if(!m_PointSizeCalled) {
            m_PointSizeCalled = true;
            glGetFloatv(GL_POINT_SIZE, &m_OriginalPointSize);
        }
        ::glPointSize(size);
    }
    
    bool m_LineWidthCalled;
    GLfloat m_OriginalLineWidth;
    void glLineWidth(GLfloat width)
    {
        if(!m_LineWidthCalled) {
            m_LineWidthCalled = true;
            glGetFloatv(GL_LINE_WIDTH, &m_OriginalLineWidth);
        }
        ::glLineWidth(width);
        
    }

    bool m_ColorMaskCalled;
]]>
            </text>
        </set>
        <set lineCount="19" fingerprint="af45b7e635eaa6f4700759f163e684ab">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="200" endLineNumber="221"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="261" endLineNumber="282"/>
            <text>
<![CDATA[    localizer_pose.x = initial_pose.x;
    localizer_pose.y = initial_pose.y;
    localizer_pose.z = initial_pose.z;
    localizer_pose.roll = initial_pose.roll;
    localizer_pose.pitch = initial_pose.pitch;
    localizer_pose.yaw = initial_pose.yaw;

    previous_pose.x = initial_pose.x;
    previous_pose.y = initial_pose.y;
    previous_pose.z = initial_pose.z;
    previous_pose.roll = initial_pose.roll;
    previous_pose.pitch = initial_pose.pitch;
    previous_pose.yaw = initial_pose.yaw;

    current_pose.x = initial_pose.x;
    current_pose.y = initial_pose.y;
    current_pose.z = initial_pose.z;
    current_pose.roll = initial_pose.roll;
    current_pose.pitch = initial_pose.pitch;
    current_pose.yaw = initial_pose.yaw;

    init_pos_set = 1;
]]>
            </text>
        </set>
        <set lineCount="19" fingerprint="66797a495afb0d566984ef2df0e4abe8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\obj_downloader\obj_downloader.cpp" startLineNumber="63" endLineNumber="85"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_mobility\sample_mobility.cpp" startLineNumber="43" endLineNumber="65"/>
            <text>
<![CDATA[struct car_info {
  int gps_id;
  double lat;
  double lon;
  double ele;
  std::string timestamp;
  double x;
  double y;
  double z;

  void dump() const;
};

void car_info::dump() const
{
    std::cout << "gps_id: " << gps_id << std::endl;
    std::cout << "lat: " << lat << std::endl;
    std::cout << "lon: " << lon << std::endl;
    std::cout << "ele: " << ele << std::endl;
    std::cout << "timestamp: " << timestamp << std::endl;
    std::cout << "x: " << x << std::endl;
    std::cout << "y: " << y << std::endl;
    std::cout << "z: " << z << std::endl;
]]>
            </text>
        </set>
        <set lineCount="19" fingerprint="1577616d85e0dc596e69407d2c5021ee">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\get_boxes.cpp" startLineNumber="136" endLineNumber="161"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="57" endLineNumber="84"/>
            <text>
<![CDATA[static FLOAT *rootbox(int x, int y, FLOAT scale, int pad_x, int pad_y, int *root_size)
{
	FLOAT *Out=(FLOAT*)malloc(sizeof(FLOAT)*4);

	Out[0]=((FLOAT)y-(FLOAT)pad_y+1)*scale;	//Y1
	Out[1]=((FLOAT)x-(FLOAT)pad_x+1)*scale;	//X1
	Out[2]=Out[0]+(FLOAT)root_size[0]*scale-1.0;	//Y2
	Out[3]=Out[1]+(FLOAT)root_size[1]*scale-1.0;	//X2

	return(Out);
}

//get part-box pixel coordinate
static FLOAT *partbox(int x,int y,int ax,int ay,FLOAT scale,int padx,int pady,int *psize,int *lx,int *ly,int *ssize)
{
	FLOAT *Out=(FLOAT*)malloc(sizeof(FLOAT)*4);
	int probex = (x-1)*2+ax;
	int probey = (y-1)*2+ay;
	int P = probey+probex*ssize[0];

	FLOAT px = (FLOAT)lx[P]+1.0;
	FLOAT py = (FLOAT)ly[P]+1.0;

	Out[0]=((py-2.0)/2.0+1.0-(FLOAT)pady)*scale;	//Y1
	Out[1]=((px-2.0)/2.0+1.0-(FLOAT)padx)*scale;	//X1
	Out[2]=Out[0]+(FLOAT)psize[0]*scale/2.0-1.0;		//Y2
	Out[3]=Out[1]+(FLOAT)psize[1]*scale/2.0-1.0;		//X2
	return(Out);
]]>
            </text>
        </set>
        <set lineCount="19" fingerprint="450c622d17dda392f7f2556963b1e2e8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\ScoringObject.cpp" startLineNumber="68" endLineNumber="107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\DBoW2\ScoringObject.cpp" startLineNumber="266" endLineNumber="306"/>
            <text>
<![CDATA[  return score; // already scaled
}

// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------

double DotProductScoring::score(const BowVector &v1, 
  const BowVector &v2) const
{
  BowVector::const_iterator v1_it, v2_it;
  const BowVector::const_iterator v1_end = v1.end();
  const BowVector::const_iterator v2_end = v2.end();
  
  v1_it = v1.begin();
  v2_it = v2.begin();
  
  double score = 0;
  
  while(v1_it != v1_end && v2_it != v2_end)
  {
    const WordValue& vi = v1_it->second;
    const WordValue& wi = v2_it->second;
    
    if(v1_it->first == v2_it->first)
    {
      score += vi * wi;
      
      // move v1 and v2 forward
      ++v1_it;
      ++v2_it;
    }
    else if(v1_it->first < v2_it->first)
    {
      // move v1 forward
      v1_it = v1.lower_bound(v2_it->first);
      // v1_it = (first element >= v2_it.id)
    }
    else
    {
      // move v2 forward
      v2_it = v2.lower_bound(v1_it->first);
]]>
            </text>
        </set>
        <set lineCount="19" fingerprint="cb4bbcaa3704157055f59bf4214d7bab">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapObjectSerialization.h" startLineNumber="54" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapObjectSerialization.h" startLineNumber="142" endLineNumber="172"/>
            <text>
<![CDATA[template<typename MapObject>
list<idtype> createIdList(const list<MapObject*> &mapObjectList)
{
	typedef typename list<MapObject*>::const_iterator ciMapObj;
	list<idtype> idList;

	for (ciMapObj it=mapObjectList.begin(); it!=mapObjectList.end(); it++) {
		MapObject *obj = *it;
		if (obj==NULL) continue;
		idList.push_back (obj->mnId);
	}

	return idList;
}


template<typename MapObject>
list<MapObject*> createObjectList (const list<idtype> &mapIdList)
{
	list<MapObject*> objVect;

	for (list<idtype>::const_iterator it=mapIdList.begin(); it!=mapIdList.end(); it++) {
		try {
			MapObject *obj = MapObject::objectListLookup.at (*it);
			objVect.push_back (obj);
		} catch (out_of_range &e) {
			continue;
		}
	}

	return objVect;
]]>
            </text>
        </set>
        <set lineCount="19" fingerprint="cfcd208495d565ef66e7dff9f98764da">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="157" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="156" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="154" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="152" endLineNumber="176"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="151" endLineNumber="174"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="150" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="149" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="593" endLineNumber="611"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="592" endLineNumber="610"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="591" endLineNumber="609"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="590" endLineNumber="608"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="589" endLineNumber="607"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="588" endLineNumber="606"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="587" endLineNumber="605"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="586" endLineNumber="604"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="585" endLineNumber="603"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="584" endLineNumber="602"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="583" endLineNumber="601"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="582" endLineNumber="600"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="581" endLineNumber="599"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="580" endLineNumber="598"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="950" endLineNumber="968"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="949" endLineNumber="967"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="948" endLineNumber="966"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="947" endLineNumber="965"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="946" endLineNumber="964"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="945" endLineNumber="963"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="944" endLineNumber="962"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="943" endLineNumber="961"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="942" endLineNumber="960"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="941" endLineNumber="959"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="940" endLineNumber="958"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="939" endLineNumber="957"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="938" endLineNumber="956"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="937" endLineNumber="955"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="560" endLineNumber="578"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="559" endLineNumber="577"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="558" endLineNumber="576"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="557" endLineNumber="575"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="556" endLineNumber="574"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="555" endLineNumber="573"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="554" endLineNumber="572"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="553" endLineNumber="571"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="552" endLineNumber="570"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="551" endLineNumber="569"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="550" endLineNumber="568"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="549" endLineNumber="567"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="548" endLineNumber="566"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="547" endLineNumber="565"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="420" endLineNumber="438"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="419" endLineNumber="437"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="418" endLineNumber="436"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="417" endLineNumber="435"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="416" endLineNumber="434"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="415" endLineNumber="433"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="414" endLineNumber="432"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="413" endLineNumber="431"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="412" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="411" endLineNumber="429"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="410" endLineNumber="428"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="409" endLineNumber="427"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="408" endLineNumber="426"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="407" endLineNumber="425"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="486" endLineNumber="504"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="485" endLineNumber="503"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="484" endLineNumber="502"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="483" endLineNumber="501"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="482" endLineNumber="500"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="481" endLineNumber="499"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="480" endLineNumber="498"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="479" endLineNumber="497"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="478" endLineNumber="496"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="477" endLineNumber="495"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="476" endLineNumber="494"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="475" endLineNumber="493"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="474" endLineNumber="492"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="473" endLineNumber="491"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="156" endLineNumber="175"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="155" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="154" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="153" endLineNumber="171"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="152" endLineNumber="170"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="151" endLineNumber="169"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="150" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="149" endLineNumber="167"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="148" endLineNumber="166"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="147" endLineNumber="165"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="146" endLineNumber="164"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="145" endLineNumber="163"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="144" endLineNumber="162"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="143" endLineNumber="161"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="142" endLineNumber="160"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="141" endLineNumber="159"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="140" endLineNumber="158"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="139" endLineNumber="157"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="138" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="137" endLineNumber="155"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="136" endLineNumber="154"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="135" endLineNumber="153"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="134" endLineNumber="152"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="133" endLineNumber="151"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="132" endLineNumber="150"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="131" endLineNumber="149"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="130" endLineNumber="148"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="129" endLineNumber="147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="128" endLineNumber="146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="127" endLineNumber="145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="126" endLineNumber="144"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="125" endLineNumber="143"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="124" endLineNumber="142"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="123" endLineNumber="141"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="122" endLineNumber="140"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="120" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="188" endLineNumber="311"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="181" endLineNumber="306"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="175" endLineNumber="298"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="169" endLineNumber="291"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="163" endLineNumber="285"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="157" endLineNumber="278"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="152" endLineNumber="271"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="147" endLineNumber="265"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="139" endLineNumber="254"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="134" endLineNumber="243"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="128" endLineNumber="233"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="123" endLineNumber="225"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="118" endLineNumber="219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="109" endLineNumber="213"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="99" endLineNumber="208"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="187" endLineNumber="314"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="180" endLineNumber="309"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="174" endLineNumber="301"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="168" endLineNumber="294"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="162" endLineNumber="288"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="156" endLineNumber="281"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="151" endLineNumber="274"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="146" endLineNumber="268"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="138" endLineNumber="257"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="133" endLineNumber="246"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="127" endLineNumber="235"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="122" endLineNumber="226"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="117" endLineNumber="219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="108" endLineNumber="212"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="98" endLineNumber="207"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="91" endLineNumber="202"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="85" endLineNumber="197"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="80" endLineNumber="192"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="75" endLineNumber="187"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="70" endLineNumber="180"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="65" endLineNumber="174"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="59" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="54" endLineNumber="162"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="48" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="42" endLineNumber="151"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="36" endLineNumber="146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1122" endLineNumber="1147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1115" endLineNumber="1146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="508" endLineNumber="526"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="507" endLineNumber="525"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="506" endLineNumber="524"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="505" endLineNumber="523"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="504" endLineNumber="522"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="503" endLineNumber="521"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="502" endLineNumber="520"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="501" endLineNumber="519"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="500" endLineNumber="518"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="499" endLineNumber="517"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="498" endLineNumber="516"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="497" endLineNumber="515"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="496" endLineNumber="514"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="495" endLineNumber="513"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="165" endLineNumber="183"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="164" endLineNumber="182"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="163" endLineNumber="181"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="162" endLineNumber="180"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="159" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="158" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="157" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="156" endLineNumber="176"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="153" endLineNumber="175"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="152" endLineNumber="174"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="151" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="150" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="149" endLineNumber="171"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="148" endLineNumber="170"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="378" endLineNumber="396"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="377" endLineNumber="395"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="376" endLineNumber="394"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="375" endLineNumber="393"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="374" endLineNumber="392"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="373" endLineNumber="391"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="372" endLineNumber="390"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="371" endLineNumber="389"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="370" endLineNumber="388"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="369" endLineNumber="387"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="368" endLineNumber="386"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="367" endLineNumber="385"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="366" endLineNumber="384"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="365" endLineNumber="383"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="47" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="46" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="45" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="42" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="41" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="38" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="37" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="36" endLineNumber="58"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="849" endLineNumber="867"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="848" endLineNumber="866"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="847" endLineNumber="865"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="846" endLineNumber="864"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="845" endLineNumber="863"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="844" endLineNumber="862"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="341" endLineNumber="359"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="340" endLineNumber="358"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="339" endLineNumber="357"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="338" endLineNumber="356"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="337" endLineNumber="355"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="336" endLineNumber="354"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="335" endLineNumber="353"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="334" endLineNumber="352"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="333" endLineNumber="351"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="332" endLineNumber="350"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="331" endLineNumber="349"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="330" endLineNumber="348"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="329" endLineNumber="347"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="328" endLineNumber="346"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_x11.cpp" startLineNumber="314" endLineNumber="332"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_x11.cpp" startLineNumber="313" endLineNumber="331"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_x11.cpp" startLineNumber="312" endLineNumber="330"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="121" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="120" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="119" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="118" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="117" endLineNumber="135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="116" endLineNumber="134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="115" endLineNumber="133"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="114" endLineNumber="132"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="113" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="112" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="111" endLineNumber="129"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="110" endLineNumber="128"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="109" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="108" endLineNumber="126"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="106" endLineNumber="125"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="105" endLineNumber="124"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="104" endLineNumber="123"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="103" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="102" endLineNumber="121"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="101" endLineNumber="120"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="100" endLineNumber="119"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="99" endLineNumber="118"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="98" endLineNumber="117"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="97" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="96" endLineNumber="115"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="95" endLineNumber="114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="94" endLineNumber="113"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="93" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="92" endLineNumber="111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="91" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="90" endLineNumber="109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="89" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="88" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="87" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="86" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="85" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="84" endLineNumber="102"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="83" endLineNumber="101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="82" endLineNumber="100"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="81" endLineNumber="99"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="80" endLineNumber="98"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="79" endLineNumber="97"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="78" endLineNumber="96"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="77" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="76" endLineNumber="94"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="75" endLineNumber="93"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="122" endLineNumber="142"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1026" endLineNumber="1044"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1025" endLineNumber="1043"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1024" endLineNumber="1042"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1023" endLineNumber="1041"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1022" endLineNumber="1040"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1021" endLineNumber="1039"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1020" endLineNumber="1038"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1019" endLineNumber="1037"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1018" endLineNumber="1036"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1017" endLineNumber="1035"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1016" endLineNumber="1034"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1015" endLineNumber="1033"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1014" endLineNumber="1032"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1013" endLineNumber="1031"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\icp.h" startLineNumber="119" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\icp.h" startLineNumber="118" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\icp.h" startLineNumber="117" endLineNumber="135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1075" endLineNumber="1111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1073" endLineNumber="1109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1071" endLineNumber="1107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1069" endLineNumber="1105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1067" endLineNumber="1103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1065" endLineNumber="1101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1063" endLineNumber="1099"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1061" endLineNumber="1097"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1059" endLineNumber="1095"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="73" endLineNumber="118"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="71" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="69" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="67" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="65" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="63" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1722" endLineNumber="1740"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1721" endLineNumber="1739"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1720" endLineNumber="1738"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.cpp" startLineNumber="54" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.cpp" startLineNumber="53" endLineNumber="80"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.cpp" startLineNumber="51" endLineNumber="79"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="43" endLineNumber="70"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="42" endLineNumber="69"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="41" endLineNumber="68"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="453" endLineNumber="471"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="452" endLineNumber="470"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="451" endLineNumber="469"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="450" endLineNumber="468"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="449" endLineNumber="467"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="448" endLineNumber="466"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="447" endLineNumber="465"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="446" endLineNumber="464"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="445" endLineNumber="463"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="444" endLineNumber="462"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="443" endLineNumber="461"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="442" endLineNumber="460"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="441" endLineNumber="459"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="440" endLineNumber="458"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="64" endLineNumber="82"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="63" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="161" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="160" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\librcnn\include\rect_class_score.h" startLineNumber="27" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\librcnn\include\rect_class_score.h" startLineNumber="26" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\librcnn\include\rect_class_score.h" startLineNumber="25" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\include\rect_class_score.h" startLineNumber="27" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\include\rect_class_score.h" startLineNumber="26" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\include\rect_class_score.h" startLineNumber="25" endLineNumber="43"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="416" endLineNumber="437"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="415" endLineNumber="436"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="414" endLineNumber="435"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="413" endLineNumber="434"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="412" endLineNumber="433"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="411" endLineNumber="432"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="409" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="408" endLineNumber="429"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="407" endLineNumber="428"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="406" endLineNumber="427"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="405" endLineNumber="426"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="404" endLineNumber="425"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="409" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="408" endLineNumber="429"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="407" endLineNumber="428"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="406" endLineNumber="427"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="405" endLineNumber="426"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="404" endLineNumber="425"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="402" endLineNumber="423"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="401" endLineNumber="422"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="400" endLineNumber="421"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="399" endLineNumber="420"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="398" endLineNumber="419"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="397" endLineNumber="418"/>
            <text>
<![CDATA[  previous_pose.x = 0.0;
  previous_pose.y = 0.0;
  previous_pose.z = 0.0;
  previous_pose.roll = 0.0;
  previous_pose.pitch = 0.0;
  previous_pose.yaw = 0.0;

  ndt_pose.x = 0.0;
  ndt_pose.y = 0.0;
  ndt_pose.z = 0.0;
  ndt_pose.roll = 0.0;
  ndt_pose.pitch = 0.0;
  ndt_pose.yaw = 0.0;

  current_pose.x = 0.0;
  current_pose.y = 0.0;
  current_pose.z = 0.0;
  current_pose.roll = 0.0;
  current_pose.pitch = 0.0;
  current_pose.yaw = 0.0;

  guess_pose.x = 0.0;
]]>
            </text>
        </set>
        <set lineCount="20" fingerprint="cfcd208495d565ef66e7dff9f98764da">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="452" endLineNumber="471"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="451" endLineNumber="470"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="450" endLineNumber="469"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="449" endLineNumber="468"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="448" endLineNumber="467"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="447" endLineNumber="466"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="446" endLineNumber="465"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="445" endLineNumber="464"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="444" endLineNumber="463"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="443" endLineNumber="462"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="442" endLineNumber="461"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="441" endLineNumber="460"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="440" endLineNumber="459"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="42" endLineNumber="70"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="41" endLineNumber="69"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.cpp" startLineNumber="53" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.cpp" startLineNumber="51" endLineNumber="80"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1721" endLineNumber="1740"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1720" endLineNumber="1739"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="71" endLineNumber="118"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="69" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="67" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="65" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="63" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1073" endLineNumber="1111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1071" endLineNumber="1109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1069" endLineNumber="1107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1067" endLineNumber="1105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1065" endLineNumber="1103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1063" endLineNumber="1101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1061" endLineNumber="1099"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1059" endLineNumber="1097"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\icp.h" startLineNumber="118" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\icp.h" startLineNumber="117" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1025" endLineNumber="1044"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1024" endLineNumber="1043"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1023" endLineNumber="1042"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1022" endLineNumber="1041"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1021" endLineNumber="1040"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1020" endLineNumber="1039"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1019" endLineNumber="1038"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1018" endLineNumber="1037"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1017" endLineNumber="1036"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1016" endLineNumber="1035"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1015" endLineNumber="1034"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1014" endLineNumber="1033"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1013" endLineNumber="1032"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="120" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="119" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="118" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="117" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="116" endLineNumber="135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="115" endLineNumber="134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="114" endLineNumber="133"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="113" endLineNumber="132"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="112" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="111" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="110" endLineNumber="129"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="109" endLineNumber="128"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="108" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="106" endLineNumber="126"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="105" endLineNumber="125"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="104" endLineNumber="124"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="103" endLineNumber="123"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="102" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="101" endLineNumber="121"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="100" endLineNumber="120"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="99" endLineNumber="119"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="98" endLineNumber="118"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="97" endLineNumber="117"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="96" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="95" endLineNumber="115"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="94" endLineNumber="114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="93" endLineNumber="113"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="92" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="91" endLineNumber="111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="90" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="89" endLineNumber="109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="88" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="87" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="86" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="85" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="84" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="83" endLineNumber="102"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="82" endLineNumber="101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="81" endLineNumber="100"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="80" endLineNumber="99"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="79" endLineNumber="98"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="78" endLineNumber="97"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="77" endLineNumber="96"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="76" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="75" endLineNumber="94"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_x11.cpp" startLineNumber="313" endLineNumber="332"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_x11.cpp" startLineNumber="312" endLineNumber="331"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="340" endLineNumber="359"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="339" endLineNumber="358"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="338" endLineNumber="357"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="337" endLineNumber="356"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="336" endLineNumber="355"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="335" endLineNumber="354"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="334" endLineNumber="353"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="333" endLineNumber="352"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="332" endLineNumber="351"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="331" endLineNumber="350"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="330" endLineNumber="349"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="329" endLineNumber="348"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="328" endLineNumber="347"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="848" endLineNumber="867"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="847" endLineNumber="866"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="846" endLineNumber="865"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="845" endLineNumber="864"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="844" endLineNumber="863"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="46" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="45" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="42" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="41" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="38" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="37" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="36" endLineNumber="59"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="377" endLineNumber="396"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="376" endLineNumber="395"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="375" endLineNumber="394"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="374" endLineNumber="393"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="373" endLineNumber="392"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="372" endLineNumber="391"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="371" endLineNumber="390"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="370" endLineNumber="389"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="369" endLineNumber="388"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="368" endLineNumber="387"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="367" endLineNumber="386"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="366" endLineNumber="385"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="365" endLineNumber="384"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="164" endLineNumber="183"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="163" endLineNumber="182"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="162" endLineNumber="181"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="159" endLineNumber="180"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="158" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="157" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="156" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="153" endLineNumber="176"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="152" endLineNumber="175"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="151" endLineNumber="174"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="150" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="149" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="148" endLineNumber="171"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="507" endLineNumber="526"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="506" endLineNumber="525"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="505" endLineNumber="524"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="504" endLineNumber="523"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="503" endLineNumber="522"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="502" endLineNumber="521"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="501" endLineNumber="520"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="500" endLineNumber="519"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="499" endLineNumber="518"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="498" endLineNumber="517"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="497" endLineNumber="516"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="496" endLineNumber="515"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="495" endLineNumber="514"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="1115" endLineNumber="1147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="180" endLineNumber="314"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="174" endLineNumber="309"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="168" endLineNumber="301"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="162" endLineNumber="294"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="156" endLineNumber="288"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="151" endLineNumber="281"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="146" endLineNumber="274"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="138" endLineNumber="268"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="133" endLineNumber="257"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="127" endLineNumber="246"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="122" endLineNumber="235"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="117" endLineNumber="226"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="108" endLineNumber="219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="98" endLineNumber="212"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="91" endLineNumber="207"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="85" endLineNumber="202"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="80" endLineNumber="197"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="75" endLineNumber="192"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="70" endLineNumber="187"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="65" endLineNumber="180"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="59" endLineNumber="174"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="54" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="48" endLineNumber="162"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="42" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="36" endLineNumber="151"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="181" endLineNumber="311"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="175" endLineNumber="306"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="169" endLineNumber="298"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="163" endLineNumber="291"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="157" endLineNumber="285"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="152" endLineNumber="278"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="147" endLineNumber="271"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="139" endLineNumber="265"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="134" endLineNumber="254"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="128" endLineNumber="243"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="123" endLineNumber="233"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="118" endLineNumber="225"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="109" endLineNumber="219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="99" endLineNumber="213"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="155" endLineNumber="175"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="154" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="153" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="152" endLineNumber="171"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="151" endLineNumber="170"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="150" endLineNumber="169"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="149" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="148" endLineNumber="167"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="147" endLineNumber="166"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="146" endLineNumber="165"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="145" endLineNumber="164"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="144" endLineNumber="163"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="143" endLineNumber="162"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="142" endLineNumber="161"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="141" endLineNumber="160"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="140" endLineNumber="159"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="139" endLineNumber="158"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="138" endLineNumber="157"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="137" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="136" endLineNumber="155"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="135" endLineNumber="154"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="134" endLineNumber="153"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="133" endLineNumber="152"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="132" endLineNumber="151"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="131" endLineNumber="150"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="130" endLineNumber="149"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="129" endLineNumber="148"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="128" endLineNumber="147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="127" endLineNumber="146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="126" endLineNumber="145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="125" endLineNumber="144"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="124" endLineNumber="143"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="123" endLineNumber="142"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="122" endLineNumber="141"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="120" endLineNumber="140"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="485" endLineNumber="504"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="484" endLineNumber="503"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="483" endLineNumber="502"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="482" endLineNumber="501"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="481" endLineNumber="500"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="480" endLineNumber="499"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="479" endLineNumber="498"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="478" endLineNumber="497"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="477" endLineNumber="496"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="476" endLineNumber="495"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="475" endLineNumber="494"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="474" endLineNumber="493"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="473" endLineNumber="492"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="419" endLineNumber="438"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="418" endLineNumber="437"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="417" endLineNumber="436"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="416" endLineNumber="435"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="415" endLineNumber="434"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="414" endLineNumber="433"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="413" endLineNumber="432"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="412" endLineNumber="431"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="411" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="410" endLineNumber="429"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="409" endLineNumber="428"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="408" endLineNumber="427"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="407" endLineNumber="426"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="559" endLineNumber="578"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="558" endLineNumber="577"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="557" endLineNumber="576"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="556" endLineNumber="575"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="555" endLineNumber="574"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="554" endLineNumber="573"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="553" endLineNumber="572"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="552" endLineNumber="571"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="551" endLineNumber="570"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="550" endLineNumber="569"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="549" endLineNumber="568"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="548" endLineNumber="567"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="547" endLineNumber="566"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="949" endLineNumber="968"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="948" endLineNumber="967"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="947" endLineNumber="966"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="946" endLineNumber="965"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="945" endLineNumber="964"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="944" endLineNumber="963"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="943" endLineNumber="962"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="942" endLineNumber="961"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="941" endLineNumber="960"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="940" endLineNumber="959"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="939" endLineNumber="958"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="938" endLineNumber="957"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="937" endLineNumber="956"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="592" endLineNumber="611"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="591" endLineNumber="610"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="590" endLineNumber="609"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="589" endLineNumber="608"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="588" endLineNumber="607"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="587" endLineNumber="606"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="586" endLineNumber="605"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="585" endLineNumber="604"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="584" endLineNumber="603"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="583" endLineNumber="602"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="582" endLineNumber="601"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="581" endLineNumber="600"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="580" endLineNumber="599"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="156" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="154" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="152" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="151" endLineNumber="176"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="150" endLineNumber="174"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="149" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="408" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="407" endLineNumber="429"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="406" endLineNumber="428"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="405" endLineNumber="427"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="404" endLineNumber="426"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="402" endLineNumber="425"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="401" endLineNumber="423"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="400" endLineNumber="422"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="399" endLineNumber="421"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="398" endLineNumber="420"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="397" endLineNumber="419"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="415" endLineNumber="437"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="414" endLineNumber="436"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="413" endLineNumber="435"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="412" endLineNumber="434"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="411" endLineNumber="433"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="409" endLineNumber="432"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="408" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="407" endLineNumber="429"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="406" endLineNumber="428"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="405" endLineNumber="427"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="404" endLineNumber="426"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\include\rect_class_score.h" startLineNumber="26" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\include\rect_class_score.h" startLineNumber="25" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\librcnn\include\rect_class_score.h" startLineNumber="26" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\librcnn\include\rect_class_score.h" startLineNumber="25" endLineNumber="44"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="160" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="63" endLineNumber="82"/>
            <text>
<![CDATA[					case 20: val += A_off[19] * B_off[19];
					case 19: val += A_off[18] * B_off[18];
					case 18: val += A_off[17] * B_off[17];
					case 17: val += A_off[16] * B_off[16];
					case 16: val += A_off[15] * B_off[15];
					case 15: val += A_off[14] * B_off[14];
					case 14: val += A_off[13] * B_off[13];
					case 13: val += A_off[12] * B_off[12];
					case 12: val += A_off[11] * B_off[11];
					case 11: val += A_off[10] * B_off[10];
					case 10: val += A_off[9] * B_off[9];
					case 9: val += A_off[8] * B_off[8];
					case 8: val += A_off[7] * B_off[7];
					case 7: val += A_off[6] * B_off[6];
					case 6: val += A_off[5] * B_off[5];
					case 5: val += A_off[4] * B_off[4];
					case 4: val += A_off[3] * B_off[3];
					case 3: val += A_off[2] * B_off[2];
					case 2: val += A_off[1] * B_off[1];
					case 1: val += A_off[0] * B_off[0];
]]>
            </text>
        </set>
        <set lineCount="20" fingerprint="2236f8c4ff7f1fc2bc7fe9aabd607659">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="420" endLineNumber="457"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="399" endLineNumber="436"/>
            <text>
<![CDATA[    cv::WriteStructContext st_red(cvfs, "RED", CV_NODE_MAP);
    {
      cv::WriteStructContext st_hue(cvfs, "Hue", CV_NODE_MAP);
      cv::write(cvfs, "center", Red_set.hue.center);
      cv::write(cvfs, "range", Red_set.hue.range);
    }

    {
      cv::WriteStructContext st_hue(cvfs, "Saturation", CV_NODE_MAP);
      cv::write(cvfs, "center", Red_set.sat.center);
      cv::write(cvfs, "range", Red_set.sat.range);
    }

    {
      cv::WriteStructContext st_hue(cvfs, "Value", CV_NODE_MAP);
      cv::write(cvfs, "center", Red_set.val.center);
      cv::write(cvfs, "range", Red_set.val.range);
    }
  }

  {
    cv::WriteStructContext st_yellow(cvfs, "YELLOW", CV_NODE_MAP);
    {
      cv::WriteStructContext st_hue(cvfs, "Hue", CV_NODE_MAP);
      cv::write(cvfs, "center", Yellow_set.hue.center);
      cv::write(cvfs, "range", Yellow_set.hue.range);
    }

    {
      cv::WriteStructContext st_hue(cvfs, "Saturation", CV_NODE_MAP);
      cv::write(cvfs, "center", Yellow_set.sat.center);
      cv::write(cvfs, "range", Yellow_set.sat.range);
    }

    {
      cv::WriteStructContext st_hue(cvfs, "Value", CV_NODE_MAP);
      cv::write(cvfs, "center", Yellow_set.val.center);
      cv::write(cvfs, "range", Yellow_set.val.range);
]]>
            </text>
        </set>
        <set lineCount="20" fingerprint="1533235bffc75aadf7854d4519d9ee82">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1399" endLineNumber="1427"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1449" endLineNumber="1478"/>
            <text>
<![CDATA[    if (line.lid == 0)
      return marker;
  }

  Point bp = vmap.findByKey(Key<Point>(line.bpid));
  if (bp.pid == 0)
    return marker;

  Point fp = vmap.findByKey(Key<Point>(line.fpid));
  if (fp.pid == 0)
    return marker;

  marker.points.push_back(convertPointToGeomPoint(bp));
  marker.points.push_back(convertPointToGeomPoint(fp));

  marker.scale.x = MAKER_SCALE_AREA;
  marker.color = createColorRGBA(color);
  if (marker.color.a == COLOR_VALUE_MIN)
    return marker;

  enableMarker(marker);
  return marker;
}

visualization_msgs::Marker createPoleMarker(const std::string& ns, int id, Color color, const VectorMap& vmap,
                                            const Pole& pole)
{
  visualization_msgs::Marker marker = createMarker(ns, id, visualization_msgs::Marker::CYLINDER);
  if (pole.plid == 0)
    return marker;
]]>
            </text>
        </set>
        <set lineCount="20" fingerprint="4604046803cc8d1b8c89f3faee52e447">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="360" endLineNumber="382"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="364" endLineNumber="388"/>
            <text>
<![CDATA[      sensor_msgs::PointCloud2::Ptr reference_map_msg_ptr(new sensor_msgs::PointCloud2);
      pcl::toROSMsg(*reference_map_ptr, *reference_map_msg_ptr);
      reference_map_pub.publish(*reference_map_msg_ptr);

    }

    q.setRPY(current_pose.roll, current_pose.pitch, current_pose.yaw);
    current_pose_msg.header.frame_id = "map";
    current_pose_msg.header.stamp = scan_time;
    current_pose_msg.pose.position.x = current_pose.x;
    current_pose_msg.pose.position.y = current_pose.y;
    current_pose_msg.pose.position.z = current_pose.z;
    current_pose_msg.pose.orientation.x = q.x();
    current_pose_msg.pose.orientation.y = q.y();
    current_pose_msg.pose.orientation.z = q.z();
    current_pose_msg.pose.orientation.w = q.w();
    
    current_pose_pub.publish(current_pose_msg);
    
    std::cout << "-----------------------------------------------------------------" << std::endl;
    std::cout << "Sequence number: " << input->header.seq << std::endl;
    std::cout << "Number of scan points: " << scan_ptr->size() << " points." << std::endl;
    std::cout << "Number of filtered scan points: " << filtered_scan_ptr->size() << " points." << std::endl;
    std::cout << "transformed_scan_ptr: " << transformed_scan_ptr->points.size() << " points." << std::endl;
    std::cout << "Map: " << map.points.size() << " points." << std::endl;
]]>
            </text>
        </set>
        <set lineCount="20" fingerprint="6dd3f13b9c376656de92de24f5626925">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="314" endLineNumber="345"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\lib\lane_planner\vmap.cpp" startLineNumber="289" endLineNumber="320"/>
            <text>
<![CDATA[			if (l.bnid != n.nid)
				continue;
			return l;
		}
	}

	return error;
}

vector_map::Lane find_prev_lane(const VectorMap& vmap, int lno, const vector_map::Lane& lane)
{
	vector_map::Lane error;
	error.lnid = -1;

	if (is_merging_lane(lane)) {
		for (const vector_map::Lane& l : vmap.lanes) {
			if (lno != LNO_ALL && l.lno != lno)
				continue;
			if (l.lnid != lane.blid && l.lnid != lane.blid2 && l.lnid != lane.blid3 &&
			    l.lnid != lane.blid4)
				continue;
			return l;
		}
	} else {
		for (const vector_map::Lane& l : vmap.lanes) {
			if (l.lnid != lane.blid)
				continue;
			return l;
		}
	}

	return error;
]]>
            </text>
        </set>
        <set lineCount="20" fingerprint="7d965d8290297b46863cc8251a5de367">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\load_model.cpp" startLineNumber="118" endLineNumber="142"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\load_model.cpp" startLineNumber="101" endLineNumber="127"/>
            <text>
<![CDATA[	MI->anchor = (int*)malloc(sizeof(int)*DefL*2);

	for (int kk=0;kk<DefL;kk++)
	{
		fscanf(file,FLOAT_SCAN_FMT4,&t1,&t2,&t3,&t4);
		MI->def[kk*4]=t1;
		MI->def[kk*4+1]=t2;
		MI->def[kk*4+2]=t3;
		MI->def[kk*4+3]=t4;
		fscanf(file,FLOAT_SCAN_FMT2,&t1,&t2);
		MI->anchor[kk*2]=(int)t1;
		MI->anchor[kk*2+1]=(int)t2;
	}

	//get least_square information
	MI->x1 = (FLOAT **)malloc(sizeof(FLOAT*)*MI->numcomponent);
	MI->x2 = (FLOAT **)malloc(sizeof(FLOAT*)*MI->numcomponent);
	MI->y1 = (FLOAT **)malloc(sizeof(FLOAT*)*MI->numcomponent);
	MI->y2 = (FLOAT **)malloc(sizeof(FLOAT*)*MI->numcomponent);

	for(int ii=0;ii<MI->numcomponent;ii++)
	{
		int GL = 1+2*(1+MI->numpart[ii]);
		MI->x1[ii] =(FLOAT *)malloc(sizeof(FLOAT)*GL);
		MI->y1[ii] =(FLOAT *)malloc(sizeof(FLOAT)*GL);
		MI->x2[ii] =(FLOAT *)malloc(sizeof(FLOAT)*GL);
		MI->y2[ii] =(FLOAT *)malloc(sizeof(FLOAT)*GL);
]]>
            </text>
        </set>
        <set lineCount="20" fingerprint="c632daf8d39637280ba5d82f9ab9bf78">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="342" endLineNumber="373"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\get_boxes.cpp" startLineNumber="200" endLineNumber="231"/>
            <text>
<![CDATA[static void free_boxes(FLOAT **boxes, int LofFeat)
{
	if (boxes == nullptr)
		return;

	for(int i = 0; i < LofFeat; i++)
	{
		s_free(boxes[i]);
	}
	s_free(boxes);
}

//detect boundary box
FLOAT *dpm_ttic_cpu_get_boxes(FLOAT **features,FLOAT *scales,int *FSIZE,MODEL *MO,
			      int *Dnum,FLOAT *A_SCORE,FLOAT thresh)
{
	//constant parameters
	const int max_scale = MO->MI->max_scale;
	const int interval = MO->MI->interval;
	const int sbin = MO->MI->sbin;
	const int padx = MO->MI->padx;
	const int pady = MO->MI->pady;
	const int NoR = MO->RF->NoR;
	const int NoP = MO->PF->NoP;
	const int NoC = MO->MI->numcomponent;
	const int *numpart = MO->MI->numpart;
	const int LofFeat=(max_scale+interval)*NoC;
	const int L_MAX = max_scale+interval;

	/* for measurement */
	struct timeval tv;
	struct timeval tv_root_score_start, tv_root_score_end;
]]>
            </text>
        </set>
        <set lineCount="20" fingerprint="558f403874f9e9dd51741f78af4e9f2e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\selectionwidget.cpp" startLineNumber="79" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\selectionwidget.cpp" startLineNumber="27" endLineNumber="56"/>
            <text>
<![CDATA[    kdtree.setInputCloud(cloud.makeShared());

    this->makeCurrent();

    pointsdisplaylist=glGenLists(1);
    selecteddisplaylist=glGenLists(1);
    mousedisplaylist=glGenLists(1);

    this->addDisplayList(pointsdisplaylist);
    this->addDisplayList(selecteddisplaylist);
    this->addDisplayList(mousedisplaylist);

    glEnableClientState(GL_VERTEX_ARRAY);
    glEnableClientState(GL_COLOR_ARRAY);

    glVertexPointer(3,GL_FLOAT,sizeof(pcl::PointXYZI),cloud.points.data());
    glColorPointer(3,GL_FLOAT,3*sizeof(float),colors.data());

    glNewList(pointsdisplaylist,GL_COMPILE);
    glDrawArrays(GL_POINTS,0,n);
    glEndList();

    glDisableClientState(GL_VERTEX_ARRAY);
    glDisableClientState(GL_COLOR_ARRAY);

    this->update();

    extracted=0;

    connect(this,SIGNAL(mousePositionSignal(QMouseEvent*,CAMERAPARAMETERS*)),this,SLOT(mousePositionSlot(QMouseEvent*,CAMERAPARAMETERS*)));
]]>
            </text>
        </set>
        <set lineCount="20" fingerprint="146f8b6be143143a5348038e67ea6be0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="91" endLineNumber="114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="140" endLineNumber="166"/>
            <text>
<![CDATA[#define INITIAL_ROLL  0
#define INITIAL_PITCH 0
//#define INITIAL_YAW 0
#define INITIAL_YAW 2.324
#endif

//tctslc
#if 0
#define INITIAL_X 3702
#define INITIAL_Y -99430  //matsu
//#define INITIAL_Y -99426   //zmp
#define INITIAL_Z 87
#define INITIAL_ROLL  0
#define INITIAL_PITCH 0
#define INITIAL_YAW 0      //matsu
//#define INITIAL_YAW 3.14   //zmp
#endif

//no map
#if 0
#define INITIAL_X 0
#define INITIAL_Y 0
#define INITIAL_Z 0
#define INITIAL_ROLL  0
#define INITIAL_PITCH 0
#define INITIAL_YAW 0
#endif
]]>
            </text>
        </set>
        <set lineCount="20" fingerprint="4ad3d38dd7b95c942f7a2d4cf7e5db75">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1260" endLineNumber="1279"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1255" endLineNumber="1274"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1250" endLineNumber="1269"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1245" endLineNumber="1264"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\region_tlr\region_tlr.cpp" startLineNumber="303" endLineNumber="322"/>
            <text>
<![CDATA[      case GREEN:
        mk_red.color    = color_black;
        mk_yellow.color = color_black;
        mk_green.color  = color_green;
        break;
      case YELLOW:
        mk_red.color    = color_black;
        mk_yellow.color = color_yellow;
        mk_green.color  = color_black;
        break;
      case RED:
        mk_red.color    = color_red;
        mk_yellow.color = color_black;
        mk_green.color  = color_black;
        break;
      case UNDEFINED:
        mk_red.color    = color_black;
        mk_yellow.color = color_black;
        mk_green.color  = color_black;
        break;
]]>
            </text>
        </set>
        <set lineCount="20" fingerprint="a091c94cb70990fcf7ae6be49c341b08">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="787" endLineNumber="812"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_trajectory\sample_trajectory.cpp" startLineNumber="166" endLineNumber="192"/>
            <text>
<![CDATA[  std::vector<GnssData> gnssdatas = read_gnssdata(argv[1]);

  if(std::string(argv[2]) == "swap_x_y_on") {
    printf("swap_x_y: on\n");
    swap_x_y = 1;
  } else {
    printf("swap_x_y : off\n");
  }

  visualization_msgs::Marker marker;
#if SELF_TRANS
  marker.header.frame_id = "/map2";
#else
  marker.header.frame_id = "/map";
#endif
  marker.header.stamp = ros::Time::now();

  marker.ns = "vector_map";
  marker.id = 0;
  marker.action = visualization_msgs::Marker::ADD;
  marker.lifetime = ros::Duration();

  marker.type = visualization_msgs::Marker::SPHERE;

  ros::Rate rate(50);

  size_t i;
]]>
            </text>
        </set>
        <set lineCount="20" fingerprint="06e5a66a077f3279b38b586bca2f5224">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\obstacle_detection.cpp" startLineNumber="95" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\main.cpp" startLineNumber="47" endLineNumber="74"/>
            <text>
<![CDATA[	RESULT *cars = dpm_ttic_cpu_car_detection(image, model_, param.threshold, &detected_objects, ac_score,
						  param.overlap);
	free(ac_score);

	DPMTTICResult result;
	result.num = cars->num;
	for (int i = 0; i < cars->num; ++i) {
		result.type.push_back(cars->type[i]);
	}

	for (int i = 0; i < cars->num; ++i) {
		int base = i * 4;
		int *data = &(cars->OR_point[base]);

		result.corner_points.push_back(data[0]);
		result.corner_points.push_back(data[1]);
		result.corner_points.push_back(data[2] - data[0]);
		result.corner_points.push_back(data[3] - data[1]);
		result.score.push_back(cars->score[i]);
	}

	free(cars->point);
	free(cars->type);
	free(cars->scale);
	free(cars->score);
	free(cars->IM);

	return result;
]]>
            </text>
        </set>
        <set lineCount="20" fingerprint="8954e2fff806b32b56c4ae2b147bf8b7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_evaluator\orb_evaluator.cpp" startLineNumber="56" endLineNumber="90"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_matching\orb_matching.cpp" startLineNumber="85" endLineNumber="119"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_mapping\orb_mapping.cpp" startLineNumber="129" endLineNumber="163"/>
            <text>
<![CDATA[		cv_bridge::CvImageConstPtr cv_ptr;
		try
		{
			cv_ptr = cv_bridge::toCvShare(msg);
		}
		catch (cv_bridge::Exception& e)
		{
			ROS_ERROR("cv_bridge exception: %s", e.what());
			return;
		}

		cv::Mat image;
		// Check if we need debayering
		if (enc::isBayer(msg->encoding)) {
			int code=-1;
			if (msg->encoding == enc::BAYER_RGGB8 ||
				msg->encoding == enc::BAYER_RGGB16) {
				code = cv::COLOR_BayerBG2BGR;
			}
			else if (msg->encoding == enc::BAYER_BGGR8 ||
					 msg->encoding == enc::BAYER_BGGR16) {
				code = cv::COLOR_BayerRG2BGR;
			}
			else if (msg->encoding == enc::BAYER_GBRG8 ||
					 msg->encoding == enc::BAYER_GBRG16) {
				code = cv::COLOR_BayerGR2BGR;
			}
			else if (msg->encoding == enc::BAYER_GRBG8 ||
					 msg->encoding == enc::BAYER_GRBG16) {
				code = cv::COLOR_BayerGB2BGR;
			}
			cv::cvtColor(cv_ptr->image, image, code);
		}
		else
			image = cv_ptr->image;
]]>
            </text>
        </set>
        <set lineCount="20" fingerprint="e01bec8af435843ab5e4f675c869ac9b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1795" endLineNumber="1823"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1822" endLineNumber="1850"/>
            <text>
<![CDATA[     << obj.aid << ","
     << obj.type << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::RoadPole& obj)
{
  os << obj.id << ","
     << obj.plid << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::RoadSign& obj)
{
  os << obj.id << ","
     << obj.vid << ","
     << obj.plid << ","
     << obj.type << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Signal& obj)
{
  os << obj.id << ","
     << obj.vid << ","
     << obj.plid << ","
]]>
            </text>
        </set>
        <set lineCount="20" fingerprint="8bcef89f17fc98c4c12cdf7cb95f5563">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1785" endLineNumber="1813"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1651" endLineNumber="1679"/>
            <text>
<![CDATA[     << obj.pid << ","
     << obj.hang << ","
     << obj.vang;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Line& obj)
{
  os << obj.lid << ","
     << obj.bpid << ","
     << obj.fpid << ","
     << obj.blid << ","
     << obj.flid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Area& obj)
{
  os << obj.aid << ","
     << obj.slid << ","
     << obj.elid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Pole& obj)
{
  os << obj.plid << ","
     << obj.vid << ","
     << obj.length << ","
]]>
            </text>
        </set>
        <set lineCount="20" fingerprint="0eaa95ce98eb90dc6eb22b953cacf7a7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_viewer\vscan_image_viewer.cpp" startLineNumber="68" endLineNumber="94"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="229" endLineNumber="258"/>
            <text>
<![CDATA[  for(int i=0; i<n; i++){
    int di = points_msg->distance[i];
    max_d = di > max_d ? di : max_d;
    min_d = di < min_d ? di : min_d;
    // int it = points_msg->intensity[i];
    // max_i = it > max_i ? it : max_i;
    // min_i = it < min_i ? it : min_i;
  }
  float wid_d = max_d - min_d;

  for(int y=0; y<h; y++){
    for(int x=0; x<w; x++){
      int j = y * w + x;
      double distance = points_msg->distance[j];
      if(distance == 0){
        continue;
      }
      int colorid= wid_d ? ( (distance - min_d) * 255 / wid_d ) : 128;
      cv::Vec3b color=colormap.at<cv::Vec3b>(colorid);
      int g = color[1];
      int b = color[2];
      int r = color[0];
      cvRectangle(&frame, cvPoint(x, y), cvPoint(x+1, y+1), CV_RGB(r, g, b));
    }
  }

  if (cvGetWindowHandle(window_name) != NULL) // Guard not to write destroyed window by using close button on the window
    {
      cvShowImage(window_name, &frame);
      cvWaitKey(2);
]]>
            </text>
        </set>
        <set lineCount="20" fingerprint="95623139114f5919b872b47f9e3ab78c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="117" endLineNumber="143"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\src\vector_map.cpp" startLineNumber="37" endLineNumber="63"/>
            <text>
<![CDATA[      tmp.lid  = line.lid;
      tmp.bpid = line.bpid;
      tmp.fpid = line.fpid;
      tmp.blid = line.blid;
      tmp.flid = line.flid;

      lines.insert( std::map<int, Line>::value_type(tmp.lid, tmp) );
    }
  std::cout << "load lines complete." << std::endl;
} /* void VectorMap::load_lines() */


void VectorMap::load_lanes(const vector_map::LaneArray& msg)
{
  for (const auto& lane : msg.data)
    {
      Lane tmp;
      tmp.lnid    = lane.lnid;
      tmp.did     = lane.did;
      tmp.blid    = lane.blid;
      tmp.flid    = lane.flid;
      tmp.bnid    = lane.bnid;
      tmp.fnid    = lane.fnid;
      tmp.jct     = lane.jct;
      tmp.blid2   = lane.blid2;
      tmp.blid3   = lane.blid3;
      tmp.blid4   = lane.blid4;
]]>
            </text>
        </set>
        <set lineCount="21" fingerprint="a5fd77fc3af7a5bd3b1c00490c125b60">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.cpp" startLineNumber="260" endLineNumber="287"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_six_dof_expmap.cpp" startLineNumber="330" endLineNumber="356"/>
            <text>
<![CDATA[      os << " " <<  information()(i,j);
    }
  return os.good();
}

void EdgeStereoSE3ProjectXYZOnlyPose::linearizeOplus() {
  VertexSE3Expmap * vi = static_cast<VertexSE3Expmap *>(_vertices[0]);
  Vector3d xyz_trans = vi->estimate().map(Xw);

  double x = xyz_trans[0];
  double y = xyz_trans[1];
  double invz = 1.0/xyz_trans[2];
  double invz_2 = invz*invz;

  _jacobianOplusXi(0,0) =  x*y*invz_2 *fx;
  _jacobianOplusXi(0,1) = -(1+(x*x*invz_2)) *fx;
  _jacobianOplusXi(0,2) = y*invz *fx;
  _jacobianOplusXi(0,3) = -invz *fx;
  _jacobianOplusXi(0,4) = 0;
  _jacobianOplusXi(0,5) = x*invz_2 *fx;

  _jacobianOplusXi(1,0) = (1+y*y*invz_2) *fy;
  _jacobianOplusXi(1,1) = -x*y*invz_2 *fy;
  _jacobianOplusXi(1,2) = -x*invz *fy;
  _jacobianOplusXi(1,3) = 0;
  _jacobianOplusXi(1,4) = -invz *fy;
  _jacobianOplusXi(1,5) = y*invz_2 *fy;
]]>
            </text>
        </set>
        <set lineCount="21" fingerprint="764c85660921fece48d4119c51ae5040">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1877" endLineNumber="1909"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1885" endLineNumber="1917"/>
            <text>
<![CDATA[     << obj.aid << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::DriveOnPortion& obj)
{
  os << obj.id << ","
     << obj.aid << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::CrossRoad& obj)
{
  os << obj.id << ","
     << obj.aid << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::SideStrip& obj)
{
  os << obj.id << ","
     << obj.lid << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::CurveMirror& obj)
{
  os << obj.id << ","
     << obj.vid << ","
]]>
            </text>
        </set>
        <set lineCount="21" fingerprint="41b3774b3ecbe42d4ab2eaf60bf941e3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_receiver\vehicle_receiver.cpp" startLineNumber="176" endLineNumber="206"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\vehicle_socket\nodes\vehicle_sender\vehicle_sender.cpp" startLineNumber="167" endLineNumber="197"/>
            <text>
<![CDATA[  std::memset(&addr, 0, sizeof(sockaddr_in));
  addr.sin_family = PF_INET;
  addr.sin_port = htons(listen_port);
  addr.sin_addr.s_addr = INADDR_ANY;

  int ret = bind(sock, (struct sockaddr *)&addr, sizeof(addr));
  if(ret == -1){
    std::perror("bind");
    goto error;
  }

  ret = listen(sock, 20);
  if(ret == -1){
    std::perror("listen");
    goto error;
  }

  while(true){
    //get connect to android
    std::cout << "Waiting access..." << std::endl;

    int *client_sock = new int();
    *client_sock = accept(sock, reinterpret_cast<sockaddr*>(&client), &len);
    if(*client_sock == -1){
      std::perror("accept");
      break;
    }

    std::cout << "get connect." << std::endl;

    pthread_t th;
]]>
            </text>
        </set>
        <set lineCount="21" fingerprint="d503592379dec06bb29a79bee2c2f17b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="47" endLineNumber="75"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_d_viewer\vscan_image_d_viewer.cpp" startLineNumber="44" endLineNumber="72"/>
            <text>
<![CDATA[#define NO_DATA 0
static char window_name[] = "vscan_image_d_viewer";

static bool existImage = false;
static bool existPoints = false;
static sensor_msgs::Image image_msg;
static points2image::PointsImageConstPtr points_msg;
static cv::Mat colormap;

#if 0
static std::vector<cv::Rect> cars;
static std::vector<cv::Rect> peds;
#else
static cv_tracker::image_obj_ranged car_fused_objects;
static cv_tracker::image_obj_ranged pedestrian_fused_objects;
#endif

/* check whether floating value x is nearly 0 or not */
static inline bool isNearlyNODATA(float x)
{
	float abs_x  = (float)fabs(x);
	const int rangeScale = 100;
	return(abs_x < FLT_MIN*rangeScale);
}

static std::vector<cv::Scalar> _colors;

#define	IMAGE_WIDTH		800
#define	IMAGE_HEIGHT 	600
]]>
            </text>
        </set>
        <set lineCount="21" fingerprint="3cef8b90a3858f57ebbe8874d9a446f1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="132" endLineNumber="159"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="104" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="464" endLineNumber="491"/>
            <text>
<![CDATA[    ret[id].vid = std::stoi(tbl[i][1]);
    ret[id].length = std::stod(tbl[i][2]);
    ret[id].dim = std::stod(tbl[i][3]);
  }
  return ret;
}

/* for box.csv */
struct BoxClass {
  int bid;
  int pid1;
  int pid2;
  int pid3;
  int pid4;
  double height;
};

std::vector<BoxClass> read_boxclass(const char *filename)
{
  int max_id;
  Tbl tbl = read_csv(filename, &max_id);
  size_t i, n = tbl.size();
  std::vector<BoxClass> ret(max_id + 1);
  for (i=0; i<n; i++) {
    int id = std::stoi(tbl[i][0]);
    ret[id].bid = id;
    ret[id].pid1 = std::stoi(tbl[i][1]);
    ret[id].pid2 = std::stoi(tbl[i][2]);
]]>
            </text>
        </set>
        <set lineCount="21" fingerprint="468ba2ee69222a387770e42fed4ecc17">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="390" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="589" endLineNumber="629"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="490" endLineNumber="530"/>
            <text>
<![CDATA[	unsigned long long int pointer_dst_tmpIx = (unsigned long long int)pt->dst_tmpIx;
	unsigned long long int pointer_tmpIx_dev = (unsigned long long int)tmpIx_dev[pt->pid];


	for(int L=0; L<(pt->L_MAX-pt->interval); L++) {

		/**************************************************************************/
		/* loop condition */
		if( (pt->FSIZE[(L+pt->interval)*2]+2*pt->pady < pt->max_Y) || (pt->FSIZE[(L+pt->interval)*2+1]+2*pt->padx < pt->max_X) )
		{
			continue;
		}
		/* loop conditon */
		/**************************************************************************/


		for(int jj=0; jj<pt->NoC; jj++) {

			part_y = pt->numpart[jj] / device_num;
			if(pt->numpart[jj]%device_num != 0){
				part_y++;
			}

			start_kk = part_y * pt->pid;
			end_kk = part_y * (pt->pid + 1);

			if(end_kk > pt->numpart[jj]){
				end_kk = pt->numpart[jj];
			}

			if(pt->pid > 0){
				part_end_kk = part_y * pt->pid;
			}

			for(int kk=0; kk<pt->numpart[jj]; kk++) {

				int PIDX = pt->PIDX_array[L][jj][kk];
				int dims0 = pt->size_array[L][PIDX*2];
				int dims1 = pt->size_array[L][PIDX*2+1];
				if(start_kk <= kk && kk < end_kk){
					part_size += dims0 * dims1;
]]>
            </text>
        </set>
        <set lineCount="21" fingerprint="9d0dbfd14bced0f9eff2b0a4b1df557d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_receiver\udon_receiver.cpp" startLineNumber="104" endLineNumber="132"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\udon_socket\nodes\udon_sender\udon_sender.cpp" startLineNumber="201" endLineNumber="229"/>
            <text>
<![CDATA[	const int on = 1;
	if (setsockopt(listen_fd, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on)) < 0) {
		ROS_ERROR_STREAM("setsockopt: " << std::strerror(errno));
		goto close_listen_fd;
	}

	sockaddr_in server_addr;
	std::memset(&server_addr, 0, sizeof(server_addr));
	server_addr.sin_family = AF_INET;
	server_addr.sin_port = htons(port);
	server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
	if (bind(listen_fd, reinterpret_cast<const sockaddr *>(&server_addr), sizeof(server_addr)) < 0) {
		ROS_ERROR_STREAM("bind: " << std::strerror(errno));
		goto close_listen_fd;
	}

	if (listen(listen_fd, backlog) < 0) {
		ROS_ERROR_STREAM("listen: " << std::strerror(errno));
		goto close_listen_fd;
	}

	char astr[INET_ADDRSTRLEN];
	if (inet_ntop(AF_INET, &server_addr.sin_addr, astr, sizeof(astr)) == nullptr) {
		ROS_ERROR_STREAM("inet_ntop: " << std::strerror(errno));
		goto close_listen_fd;
	}
	ROS_INFO_STREAM("listen " << astr << ":" << ntohs(server_addr.sin_port));

	int connect_fd;
]]>
            </text>
        </set>
        <set lineCount="21" fingerprint="c17fba4029a9b95e6d3c06e01c689e37">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\velodyne\velodyne_pointcloud\include\velodyne_pointcloud\calibration.h" startLineNumber="12" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\libvectormap\include\vector_map.h" startLineNumber="75" endLineNumber="97"/>
            <text>
<![CDATA[  double cant;
  double lw;
  double rw;
}DTLane;

typedef struct{
  int lnid;
  int did;
  int blid;
  int flid;
  int bnid;
  int fnid;
  int jct;
  int blid2;
  int blid3;
  int blid4;
  int flid2;
  int flid3;
  int flid4;
  int clossid;
  double span;
  int lcnt;
  int lno;
]]>
            </text>
        </set>
        <set lineCount="21" fingerprint="7483378bb520ae0fd81c4e051f3ce335">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_trajectory\sample_trajectory.cpp" startLineNumber="89" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="622" endLineNumber="649"/>
            <text>
<![CDATA[void set_marker_data(visualization_msgs::Marker* marker,
		    double px, double py, double pz, double ox, double oy, double oz, double ow,
		    double sx, double sy, double sz, double r, double g, double b, double a)
{
  if(swap_x_y) {
    marker->pose.position.x = py;
    marker->pose.position.y = px;
    marker->pose.orientation.x = oy;
    marker->pose.orientation.y = ox;
  } else {
    marker->pose.position.x = px;
    marker->pose.position.y = py;
    marker->pose.orientation.x = ox;
    marker->pose.orientation.y = oy;
  }
  marker->pose.position.z = pz;

  marker->pose.orientation.z = oz;
  marker->pose.orientation.w = ow;

  marker->scale.x = sx;
  marker->scale.y = sy;
  marker->scale.z = sz;

  marker->color.r = r;
  marker->color.g = g;
  marker->color.b = b;
  marker->color.a = a;
]]>
            </text>
        </set>
        <set lineCount="21" fingerprint="cf2151833e99f21442476718d642a057">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\pointgrey\nodes\grasshopper3\grasshopper3.cpp" startLineNumber="212" endLineNumber="244"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\camera\packages\pointgrey\nodes\ladybug\ladybug.cpp" startLineNumber="85" endLineNumber="117"/>
            <text>
<![CDATA[void GetMatricesFromFile(ros::NodeHandle nh, sensor_msgs::CameraInfo &camerainfo_msg)
{
	//////////////////CAMERA INFO/////////////////////////////////////////
	cv::Mat  cameraExtrinsicMat;
	cv::Mat  cameraMat;
	cv::Mat  distCoeff;
	cv::Size imageSize;
	std::string filename;

	if (nh.getParam("calibrationfile", filename) && filename!="")
	{
		ROS_INFO("Trying to parse calibrationfile :");
		ROS_INFO("> %s", filename.c_str());
	}
	else
	{
		ROS_INFO("No calibrationfile param was received");
		return;
	}

	cv::FileStorage fs(filename, cv::FileStorage::READ);
	if (!fs.isOpened())
	{
		ROS_INFO("Cannot open %s", filename.c_str());;
		return;
	}
	else
	{
		fs["CameraMat"] >> cameraMat;
		fs["DistCoeff"] >> distCoeff;
		fs["ImageSize"] >> imageSize;
	}
	parseCameraInfo(cameraMat, distCoeff, imageSize, camerainfo_msg);
]]>
            </text>
        </set>
        <set lineCount="21" fingerprint="378f63171ec9e45501cd73a895bde737">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\correspondence_estimation.h" startLineNumber="207" endLineNumber="270"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="217" endLineNumber="278"/>
            <text>
<![CDATA[      inline PointCloudTargetConstPtr const 
      getInputTarget () { return (target_ ); }


      /** \brief Provide a pointer to the search object used to find correspondences in
        * the target cloud.
        * \param[in] tree a pointer to the spatial search object.
        * \param[in] force_no_recompute If set to true, this tree will NEVER be 
        * recomputed, regardless of calls to setInputTarget. Only use if you are 
        * confident that the tree will be set correctly.
        */
      inline void
      setSearchMethodTarget (const KdTreePtr &tree, 
                             bool force_no_recompute = false) 
      { 
        tree_ = tree; 
        if (force_no_recompute)
        {
          force_no_recompute_ = true;
        }
        // Since we just set a new tree, we need to check for updates
        target_cloud_updated_ = true;
      }

      /** \brief Get a pointer to the search method used to find correspondences in the
        * target cloud. */
      inline KdTreePtr
      getSearchMethodTarget () const
      {
        return (tree_);
      }

      /** \brief Provide a pointer to the search object used to find correspondences in
        * the source cloud (usually used by reciprocal correspondence finding).
        * \param[in] tree a pointer to the spatial search object.
        * \param[in] force_no_recompute If set to true, this tree will NEVER be 
        * recomputed, regardless of calls to setInputSource. Only use if you are 
        * extremely confident that the tree will be set correctly.
        */
      inline void
      setSearchMethodSource (const KdTreeReciprocalPtr &tree, 
                             bool force_no_recompute = false) 
      { 
        tree_reciprocal_ = tree; 
        if ( force_no_recompute )
        {
          force_no_recompute_reciprocal_ = true;
        }
        // Since we just set a new tree, we need to check for updates
        source_cloud_updated_ = true;
      }

      /** \brief Get a pointer to the search method used to find correspondences in the
        * source cloud. */
      inline KdTreeReciprocalPtr
      getSearchMethodSource () const
      {
        return (tree_reciprocal_);
      }

      /** \brief Get the final transformation matrix estimated by the registration method. */
      inline Matrix4
]]>
            </text>
        </set>
        <set lineCount="21" fingerprint="5c9085a63e98bf57d63af028d9ddf2a5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\load_model.cpp" startLineNumber="236" endLineNumber="270"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\load_model.cpp" startLineNumber="373" endLineNumber="408"/>
            <text>
<![CDATA[	fclose(file);
	return(PF);
}

GPUModel *dpm_ttic_gpu_load_model(FLOAT ratio, const char *com_csv, const char *root_csv, const char *part_csv)
{
	GPUModel *model = (GPUModel*)malloc(sizeof(GPUModel));

	// assign information into  model.OO
	model->MI = load_modelinfo(com_csv);
	model->RF = load_rootfilter(root_csv);
	model->PF = load_partfilter(part_csv);

	model->MI->ratio = ratio;

	/* added to reuse resized feature */
	model->MI->padx = 0;
	model->MI->pady = 0;

	return model;
}

//release model
void dpm_ttic_gpu_free_model(GPUModel *MO)
{
	//free model information
	for(int i=0; i < MO->MI->numcomponent; i++) {
		s_free(MO->MI->didx[i]);
		s_free(MO->MI->pidx[i]);
		s_free(MO->MI->psize[i]);
		s_free(MO->MI->x1[i]);
		s_free(MO->MI->x2[i]);
		s_free(MO->MI->y1[i]);
		s_free(MO->MI->y2[i]);
	}
	s_free(MO->MI->anchor);
]]>
            </text>
        </set>
        <set lineCount="21" fingerprint="cfcd208495d565ef66e7dff9f98764da">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="414" endLineNumber="437"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="413" endLineNumber="436"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="412" endLineNumber="435"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="411" endLineNumber="434"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="409" endLineNumber="433"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="408" endLineNumber="432"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="407" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="406" endLineNumber="429"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="405" endLineNumber="428"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="404" endLineNumber="427"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="407" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="406" endLineNumber="429"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="405" endLineNumber="428"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="404" endLineNumber="427"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="402" endLineNumber="426"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="401" endLineNumber="425"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="400" endLineNumber="423"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="399" endLineNumber="422"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="398" endLineNumber="421"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="397" endLineNumber="420"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\librcnn\include\rect_class_score.h" startLineNumber="25" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\include\rect_class_score.h" startLineNumber="25" endLineNumber="45"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="154" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="152" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="151" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="150" endLineNumber="176"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="149" endLineNumber="174"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="591" endLineNumber="611"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="590" endLineNumber="610"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="589" endLineNumber="609"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="588" endLineNumber="608"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="587" endLineNumber="607"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="586" endLineNumber="606"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="585" endLineNumber="605"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="584" endLineNumber="604"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="583" endLineNumber="603"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="582" endLineNumber="602"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="581" endLineNumber="601"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="580" endLineNumber="600"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="948" endLineNumber="968"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="947" endLineNumber="967"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="946" endLineNumber="966"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="945" endLineNumber="965"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="944" endLineNumber="964"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="943" endLineNumber="963"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="942" endLineNumber="962"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="941" endLineNumber="961"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="940" endLineNumber="960"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="939" endLineNumber="959"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="938" endLineNumber="958"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="937" endLineNumber="957"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="558" endLineNumber="578"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="557" endLineNumber="577"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="556" endLineNumber="576"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="555" endLineNumber="575"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="554" endLineNumber="574"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="553" endLineNumber="573"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="552" endLineNumber="572"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="551" endLineNumber="571"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="550" endLineNumber="570"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="549" endLineNumber="569"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="548" endLineNumber="568"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="547" endLineNumber="567"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="418" endLineNumber="438"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="417" endLineNumber="437"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="416" endLineNumber="436"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="415" endLineNumber="435"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="414" endLineNumber="434"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="413" endLineNumber="433"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="412" endLineNumber="432"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="411" endLineNumber="431"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="410" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="409" endLineNumber="429"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="408" endLineNumber="428"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="407" endLineNumber="427"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="484" endLineNumber="504"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="483" endLineNumber="503"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="482" endLineNumber="502"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="481" endLineNumber="501"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="480" endLineNumber="500"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="479" endLineNumber="499"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="478" endLineNumber="498"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="477" endLineNumber="497"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="476" endLineNumber="496"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="475" endLineNumber="495"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="474" endLineNumber="494"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="473" endLineNumber="493"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="154" endLineNumber="175"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="153" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="152" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="151" endLineNumber="171"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="150" endLineNumber="170"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="149" endLineNumber="169"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="148" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="147" endLineNumber="167"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="146" endLineNumber="166"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="145" endLineNumber="165"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="144" endLineNumber="164"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="143" endLineNumber="163"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="142" endLineNumber="162"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="141" endLineNumber="161"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="140" endLineNumber="160"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="139" endLineNumber="159"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="138" endLineNumber="158"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="137" endLineNumber="157"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="136" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="135" endLineNumber="155"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="134" endLineNumber="154"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="133" endLineNumber="153"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="132" endLineNumber="152"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="131" endLineNumber="151"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="130" endLineNumber="150"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="129" endLineNumber="149"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="128" endLineNumber="148"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="127" endLineNumber="147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="126" endLineNumber="146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="125" endLineNumber="145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="124" endLineNumber="144"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="123" endLineNumber="143"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="122" endLineNumber="142"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="120" endLineNumber="141"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="175" endLineNumber="311"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="169" endLineNumber="306"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="163" endLineNumber="298"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="157" endLineNumber="291"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="152" endLineNumber="285"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="147" endLineNumber="278"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="139" endLineNumber="271"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="134" endLineNumber="265"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="128" endLineNumber="254"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="123" endLineNumber="243"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="118" endLineNumber="233"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="109" endLineNumber="225"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="99" endLineNumber="219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="174" endLineNumber="314"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="168" endLineNumber="309"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="162" endLineNumber="301"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="156" endLineNumber="294"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="151" endLineNumber="288"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="146" endLineNumber="281"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="138" endLineNumber="274"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="133" endLineNumber="268"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="127" endLineNumber="257"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="122" endLineNumber="246"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="117" endLineNumber="235"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="108" endLineNumber="226"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="98" endLineNumber="219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="91" endLineNumber="212"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="85" endLineNumber="207"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="80" endLineNumber="202"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="75" endLineNumber="197"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="70" endLineNumber="192"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="65" endLineNumber="187"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="59" endLineNumber="180"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="54" endLineNumber="174"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="48" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="42" endLineNumber="162"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="36" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="506" endLineNumber="526"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="505" endLineNumber="525"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="504" endLineNumber="524"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="503" endLineNumber="523"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="502" endLineNumber="522"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="501" endLineNumber="521"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="500" endLineNumber="520"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="499" endLineNumber="519"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="498" endLineNumber="518"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="497" endLineNumber="517"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="496" endLineNumber="516"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="495" endLineNumber="515"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="163" endLineNumber="183"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="162" endLineNumber="182"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="159" endLineNumber="181"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="158" endLineNumber="180"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="157" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="156" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="153" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="152" endLineNumber="176"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="151" endLineNumber="175"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="150" endLineNumber="174"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="149" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="148" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="376" endLineNumber="396"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="375" endLineNumber="395"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="374" endLineNumber="394"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="373" endLineNumber="393"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="372" endLineNumber="392"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="371" endLineNumber="391"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="370" endLineNumber="390"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="369" endLineNumber="389"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="368" endLineNumber="388"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="367" endLineNumber="387"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="366" endLineNumber="386"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="365" endLineNumber="385"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="45" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="42" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="41" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="38" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="37" endLineNumber="61"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="36" endLineNumber="60"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="847" endLineNumber="867"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="846" endLineNumber="866"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="845" endLineNumber="865"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="844" endLineNumber="864"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="339" endLineNumber="359"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="338" endLineNumber="358"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="337" endLineNumber="357"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="336" endLineNumber="356"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="335" endLineNumber="355"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="334" endLineNumber="354"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="333" endLineNumber="353"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="332" endLineNumber="352"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="331" endLineNumber="351"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="330" endLineNumber="350"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="329" endLineNumber="349"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="328" endLineNumber="348"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_x11.cpp" startLineNumber="312" endLineNumber="332"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="119" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="118" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="117" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="116" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="115" endLineNumber="135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="114" endLineNumber="134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="113" endLineNumber="133"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="112" endLineNumber="132"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="111" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="110" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="109" endLineNumber="129"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="108" endLineNumber="128"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="106" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="105" endLineNumber="126"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="104" endLineNumber="125"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="103" endLineNumber="124"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="102" endLineNumber="123"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="101" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="100" endLineNumber="121"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="99" endLineNumber="120"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="98" endLineNumber="119"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="97" endLineNumber="118"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="96" endLineNumber="117"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="95" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="94" endLineNumber="115"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="93" endLineNumber="114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="92" endLineNumber="113"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="91" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="90" endLineNumber="111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="89" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="88" endLineNumber="109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="87" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="86" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="85" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="84" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="83" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="82" endLineNumber="102"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="81" endLineNumber="101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="80" endLineNumber="100"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="79" endLineNumber="99"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="78" endLineNumber="98"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="77" endLineNumber="97"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="76" endLineNumber="96"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="75" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1024" endLineNumber="1044"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1023" endLineNumber="1043"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1022" endLineNumber="1042"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1021" endLineNumber="1041"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1020" endLineNumber="1040"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1019" endLineNumber="1039"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1018" endLineNumber="1038"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1017" endLineNumber="1037"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1016" endLineNumber="1036"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1015" endLineNumber="1035"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1014" endLineNumber="1034"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1013" endLineNumber="1033"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\icp.h" startLineNumber="117" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1071" endLineNumber="1111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1069" endLineNumber="1109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1067" endLineNumber="1107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1065" endLineNumber="1105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1063" endLineNumber="1103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1061" endLineNumber="1101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1059" endLineNumber="1099"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="69" endLineNumber="118"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="67" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="65" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="63" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1720" endLineNumber="1740"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.cpp" startLineNumber="51" endLineNumber="81"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\core\batch_stats.h" startLineNumber="41" endLineNumber="70"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="451" endLineNumber="471"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="450" endLineNumber="470"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="449" endLineNumber="469"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="448" endLineNumber="468"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="447" endLineNumber="467"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="446" endLineNumber="466"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="445" endLineNumber="465"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="444" endLineNumber="464"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="443" endLineNumber="463"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="442" endLineNumber="462"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="441" endLineNumber="461"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="440" endLineNumber="460"/>
            <text>
<![CDATA[  std::vector<Point> findByFilter(const Filter<Point>& filter) const;
  std::vector<Vector> findByFilter(const Filter<Vector>& filter) const;
  std::vector<Line> findByFilter(const Filter<Line>& filter) const;
  std::vector<Area> findByFilter(const Filter<Area>& filter) const;
  std::vector<Pole> findByFilter(const Filter<Pole>& filter) const;
  std::vector<Box> findByFilter(const Filter<Box>& filter) const;
  std::vector<DTLane> findByFilter(const Filter<DTLane>& filter) const;
  std::vector<Node> findByFilter(const Filter<Node>& filter) const;
  std::vector<Lane> findByFilter(const Filter<Lane>& filter) const;
  std::vector<WayArea> findByFilter(const Filter<WayArea>& filter) const;
  std::vector<RoadEdge> findByFilter(const Filter<RoadEdge>& filter) const;
  std::vector<Gutter> findByFilter(const Filter<Gutter>& filter) const;
  std::vector<Curb> findByFilter(const Filter<Curb>& filter) const;
  std::vector<WhiteLine> findByFilter(const Filter<WhiteLine>& filter) const;
  std::vector<StopLine> findByFilter(const Filter<StopLine>& filter) const;
  std::vector<ZebraZone> findByFilter(const Filter<ZebraZone>& filter) const;
  std::vector<CrossWalk> findByFilter(const Filter<CrossWalk>& filter) const;
  std::vector<RoadMark> findByFilter(const Filter<RoadMark>& filter) const;
  std::vector<RoadPole> findByFilter(const Filter<RoadPole>& filter) const;
  std::vector<RoadSign> findByFilter(const Filter<RoadSign>& filter) const;
  std::vector<Signal> findByFilter(const Filter<Signal>& filter) const;
]]>
            </text>
        </set>
        <set lineCount="22" fingerprint="1421e09918659070eb6b45ef267b23ad">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="141" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_marker_publisher\waypoint_marker_publisher.cpp" startLineNumber="99" endLineNumber="126"/>
            <text>
<![CDATA[void createGlobalLaneArrayVelocityMarker(const waypoint_follower::LaneArray &lane_waypoints_array)
{
  visualization_msgs::MarkerArray tmp_marker_array;
  // display by markers the velocity of each waypoint.
  visualization_msgs::Marker velocity_marker;
  velocity_marker.header.frame_id = "map";
  velocity_marker.header.stamp = ros::Time();
  velocity_marker.type = visualization_msgs::Marker::TEXT_VIEW_FACING;
  velocity_marker.action = visualization_msgs::Marker::ADD;
  velocity_marker.scale.z = 0.4;
  velocity_marker.color.a = 1.0;
  velocity_marker.color.r = 1;
  velocity_marker.color.g = 1;
  velocity_marker.color.b = 1;
  velocity_marker.frame_locked = true;

  int count = 1;
  for (auto lane : lane_waypoints_array.lanes)
  {
    velocity_marker.ns = "global_velocity_lane_" + std::to_string(count);
    for (int i = 0; i < static_cast<int>(lane.waypoints.size()); i++)
    {
      //std::cout << _waypoints[i].GetX() << " " << _waypoints[i].GetY() << " " << _waypoints[i].GetZ() << " " << _waypoints[i].GetVelocity_kmh() << std::endl;
      velocity_marker.id = i;
      geometry_msgs::Point relative_p;
      relative_p.y = 0.5;
      velocity_marker.pose.position = calcAbsoluteCoordinate(relative_p, lane.waypoints[i].pose.pose);
      velocity_marker.pose.position.z += 0.2;
]]>
            </text>
        </set>
        <set lineCount="22" fingerprint="c3cce017fbe40bf006642f4b0d409131">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="98" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\lidar\packages\hokuyo\nodes\hokuyo_3d\hokuyo_3d.cpp" startLineNumber="44" endLineNumber="82"/>
            <text>
<![CDATA[    void cbPoint_field(
        const vssp::header &header,
        const vssp::range_header &range_header,
        const vssp::range_index &range_index,
        const boost::shared_array<vssp::xyzi> &points,
        const std::chrono::microseconds &delayRead,
        const vssp::data_range_size &data_range_size)
        {
            if(timestampBase == ros::Time(0)) return;
            if(cloud2.data.size() == 0)
            {
                cloud2.header.frame_id = frame_id;
                cloud2.header.stamp = timestampBase + ros::Duration(range_header.line_head_timestamp_ms * 0.001);
                ping();
            }

            cloud2.data.resize(((data_range_size.necho + points_size) * cloud2.point_step));

#if _INVALID_RANGE
            // Check invalid rang
            int i, invalid;
            for(i = 0, invalid = 0; i < data_range_size.necho; i++)
            {
                double distance= sqrt(points[i].x * points[i].x + points[i].y * points[i].y);
                if (distance < invalid_range){
                    invalid++;
                    std::vector<uint8_t>::iterator it = cloud2.data.end();
                    cloud2.data.erase(it - cloud2.point_step, it);
                    continue;
                }
                // Pack scan data
                memcpy (&cloud2.data[(i + points_size) * cloud2.point_step + cloud2.fields[0].offset], &points[i], sizeof (float) * cloud2.fields.size());
            }
            points_size += data_range_size.necho - invalid;
#else
            // Pack scan data
            memcpy (&cloud2.data[points_size * cloud2.point_step], &points[0], sizeof(float) * cloud2.fields.size() * data_range_size.necho);
            points_size += data_range_size.necho;
#endif
]]>
            </text>
        </set>
        <set lineCount="22" fingerprint="730bba1f44b2ec1228e6f95e5d676bde">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="285" endLineNumber="309"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.h" startLineNumber="224" endLineNumber="248"/>
            <text>
<![CDATA[    void projectPointsSlot();
signals:
    void velodyneRefreshedSignal();
    void velodyneRefreshedErrorSignal();
protected:
    virtual bool refreshVelodyne();
    bool removeCalibData();
    bool calibrateSensor();
    bool loadCalibResult(cv::FileStorage &fs);
    bool saveCalibResult(cv::FileStorage &fs);
};

class CalibrateCameraVelodyneChessboardROS : public CalibrateCameraVelodyneChessboardBase
{
    Q_OBJECT
public:
    CalibrateCameraVelodyneChessboardROS(QString cameraTopic, u_int32_t cameraQueueSize, int cameraInterval, QString velodyneTopic, u_int32_t velodyneQueueSize, int velodyneInterval, float maxRange, cv::Size2f patternSize, cv::Size2i patternNum, QWidget * parent=0);
    ~CalibrateCameraVelodyneChessboardROS();
protected:
    ROSSub<sensor_msgs::ImageConstPtr> * camerasub;
    ROSSub<sensor_msgs::PointCloud2ConstPtr> * velodynesub;
protected:
    bool refreshImage();
    bool refreshVelodyne();
    bool grabCalibData();
]]>
            </text>
        </set>
        <set lineCount="22" fingerprint="48627bad7b5578149aa5b9e95c42a19a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_preprocessor\nodes\ground_filter\ground_filter.cpp" startLineNumber="66" endLineNumber="95"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\euclidean_cluster\euclidean_cluster.cpp" startLineNumber="403" endLineNumber="432"/>
            <text>
<![CDATA[	pcl::SACSegmentation<pcl::PointXYZ> seg;
	pcl::PointIndices::Ptr inliers (new pcl::PointIndices);
	pcl::ModelCoefficients::Ptr coefficients (new pcl::ModelCoefficients);

	seg.setOptimizeCoefficients (true);
	seg.setModelType(pcl::SACMODEL_PERPENDICULAR_PLANE);
	seg.setMethodType(pcl::SAC_RANSAC);
	seg.setMaxIterations(100);
	seg.setAxis(Eigen::Vector3f(0,0,1));
	seg.setEpsAngle(in_floor_max_angle);

	seg.setDistanceThreshold (in_max_height);//floor distance
	seg.setOptimizeCoefficients(true);
	seg.setInputCloud(in_cloud_ptr);
	seg.segment(*inliers, *coefficients);
	if (inliers->indices.size () == 0)
	{
		std::cout << "Could not estimate a planar model for the given dataset." << std::endl;
	}

	/*REMOVE THE FLOOR FROM THE CLOUD*/
	pcl::ExtractIndices<pcl::PointXYZ> extract;
	extract.setInputCloud (in_cloud_ptr);
	extract.setIndices(inliers);
	extract.setNegative(true);//true removes the indices, false leaves only the indices
	extract.filter(*out_nofloor_cloud_ptr);

	/*EXTRACT THE FLOOR FROM THE CLOUD*/
	extract.setNegative(false);//true removes the indices, false leaves only the indices
	extract.filter(*out_onlyfloor_cloud_ptr);
]]>
            </text>
        </set>
        <set lineCount="22" fingerprint="3dfad33378d636d2ebde99af7df650b7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="472" endLineNumber="514"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\road_wizard\nodes\tlr_tuner\tunerBody.cpp" startLineNumber="495" endLineNumber="537"/>
            <text>
<![CDATA[    cv::FileNode nd_yellow = topNode[std::string("YELLOW")];
    {
      cv::FileNode nd_hue   = nd_yellow["Hue"];
      Yellow_set.hue.center = nd_hue["center"];
      Yellow_set.hue.range  = nd_hue["range"];
    }

    {
      cv::FileNode nd_sat   = nd_yellow["Saturation"];
      Yellow_set.sat.center = nd_sat["center"];
      Yellow_set.sat.range  = nd_sat["range"];
    }

    {
      cv::FileNode nd_val   = nd_yellow["Value"];
      Yellow_set.val.center = nd_val["center"];
      Yellow_set.val.range  = nd_val["range"];
    }

    Yellow_set.isUpdated = true;
  }

  {
    cv::FileNode nd_green = topNode[std::string("GREEN")];
    {
      cv::FileNode nd_hue  = nd_green["Hue"];
      Green_set.hue.center = nd_hue["center"];
      Green_set.hue.range  = nd_hue["range"];
    }

    {
      cv::FileNode nd_sat  = nd_green["Saturation"];
      Green_set.sat.center = nd_sat["center"];
      Green_set.sat.range  = nd_sat["range"];
    }

    {
      cv::FileNode nd_val  = nd_green["Value"];
      Green_set.val.center = nd_val["center"];
      Green_set.val.range  = nd_val["range"];
    }

    Green_set.isUpdated = true;
]]>
            </text>
        </set>
        <set lineCount="22" fingerprint="96684e1269559aa33bd3e87803f50091">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="29" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\lidar_tracker\nodes\obj_fusion\sync_obj_fusion.cpp" startLineNumber="51" endLineNumber="85"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\range_fusion\sync_range_fusion.cpp" startLineNumber="51" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\sync_obj_reproj.cpp" startLineNumber="51" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\kf_track\sync_track.cpp" startLineNumber="51" endLineNumber="84"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\dpm_sync_2.cpp" startLineNumber="30" endLineNumber="63"/>
            <text>
<![CDATA[pthread_mutex_t mutex;
pthread_mutex_t flag_mutex;
/* user var */
boost::circular_buffer<cv_tracker::image_obj> image_obj_ringbuf(10);
boost::circular_buffer<points2image::PointsImage> vscan_image_ringbuf(10);
ros::Publisher image_obj__pub;
ros::Publisher vscan_image__pub;
bool image_obj_ranged_flag;

/* ----function---- */
double fabs_time_diff(std_msgs::Header *timespec1, std_msgs::Header *timespec2) {
    double time1 = (double)timespec1->stamp.sec + (double)timespec1->stamp.nsec/1000000000L;
    double time2 = (double)timespec2->stamp.sec + (double)timespec2->stamp.nsec/1000000000L;

    return fabs(time1 - time2);
}

double get_time(const std_msgs::Header *timespec) {
    return (double)timespec->stamp.sec + (double)timespec->stamp.nsec/1000000000L;
}


#if _REQ_PUB
cv_tracker::image_obj* p_image_obj_buf;
points2image::PointsImage* p_vscan_image_buf;

void publish_msg(cv_tracker::image_obj* p_image_obj_buf, points2image::PointsImage* p_vscan_image_buf) {
    ROS_INFO("publish");
    image_obj__pub.publish(*p_image_obj_buf);
    vscan_image__pub.publish(*p_vscan_image_buf);
}

bool publish() {
    if (buf_flag) {
]]>
            </text>
        </set>
        <set lineCount="23" fingerprint="b572895a3b788cca6168625c29468328">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="465" endLineNumber="505"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\fconvsMT.cpp" startLineNumber="524" endLineNumber="562"/>
            <text>
<![CDATA[				if(pt->error_array[k] == lev)
					error_flag = 1;
			}

			for(int ii = 0; ii < pt->len; ii++) {

				if(error_flag == 1) {
					error_flag = 0;
					break;
				}

				C_dims0 = pt->A_SIZE[lev*3] - pt->B_dimension[ii*3] + 1;
				C_dims1 = pt->A_SIZE[lev*3+1] - pt->B_dimension[ii*3+1] + 1;

				if(C_dims0 < 1 || C_dims1 < 1) continue;

				C_x = C_dims1 / device_num;

				if(C_dims1 % device_num != 0) {
					C_x++;
				}

				if(pt->pid*C_x + C_x > C_dims1)
					x_size = (C_dims1-pt->pid*C_x)*C_dims0*sizeof(FLOAT);
				else
					x_size = C_x*C_dims0*sizeof(FLOAT);

				if(pt->pid*C_x < C_dims1){

					res = cuMemcpyDtoH((void *)(pointer_C+(unsigned long long int)(pt->pid*C_x*C_dims0*sizeof(FLOAT))), (CUdeviceptr)(part_pointer_dev+(unsigned long long int)(pt->pid*C_x*C_dims0*sizeof(FLOAT))), x_size);
					if(res != CUDA_SUCCESS) {
						printf("cuMemcpyDtoH(dst_C root) failed: res = %s\n", cuda_response_to_string(res));
						exit(1);
					}

				}

				pointer_C += (unsigned long long int)(C_dims0 * C_dims1 * sizeof(FLOAT));
				part_pointer_dev += (unsigned long long int)(C_dims0 * C_dims1 * sizeof(FLOAT));
]]>
            </text>
        </set>
        <set lineCount="23" fingerprint="071aa638c2184ad5729f057fb95e8c7c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="605" endLineNumber="630"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="633" endLineNumber="658"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="675" endLineNumber="700"/>
            <text>
<![CDATA[    localizer_q.setRPY(localizer_pose.roll, localizer_pose.pitch, localizer_pose.yaw);
    if (_use_local_transform == true)
    {
      tf::Vector3 v(localizer_pose.x, localizer_pose.y, localizer_pose.z);
      tf::Transform transform(localizer_q, v);
      localizer_pose_msg.header.frame_id = "/map";
      localizer_pose_msg.header.stamp = current_scan_time;
      localizer_pose_msg.pose.position.x = (local_transform * transform).getOrigin().getX();
      localizer_pose_msg.pose.position.y = (local_transform * transform).getOrigin().getY();
      localizer_pose_msg.pose.position.z = (local_transform * transform).getOrigin().getZ();
      localizer_pose_msg.pose.orientation.x = (local_transform * transform).getRotation().x();
      localizer_pose_msg.pose.orientation.y = (local_transform * transform).getRotation().y();
      localizer_pose_msg.pose.orientation.z = (local_transform * transform).getRotation().z();
      localizer_pose_msg.pose.orientation.w = (local_transform * transform).getRotation().w();
    }
    else
    {
      localizer_pose_msg.header.frame_id = "/map";
      localizer_pose_msg.header.stamp = current_scan_time;
      localizer_pose_msg.pose.position.x = localizer_pose.x;
      localizer_pose_msg.pose.position.y = localizer_pose.y;
      localizer_pose_msg.pose.position.z = localizer_pose.z;
      localizer_pose_msg.pose.orientation.x = localizer_q.x();
      localizer_pose_msg.pose.orientation.y = localizer_q.y();
      localizer_pose_msg.pose.orientation.z = localizer_q.z();
      localizer_pose_msg.pose.orientation.w = localizer_q.w();
]]>
            </text>
        </set>
        <set lineCount="23" fingerprint="ccb375d8690c5c9234b7dd584d915096">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\rcnn\rcnn_node.cpp" startLineNumber="156" endLineNumber="198"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\ssd_node.cpp" startLineNumber="139" endLineNumber="181"/>
            <text>
<![CDATA[public:
	void Run()
	{
		//ROS STUFF
		ros::NodeHandle private_node_handle("~");//to receive args

		//RECEIVE IMAGE TOPIC NAME
		std::string image_raw_topic_str;
		if (private_node_handle.getParam("image_raw_node", image_raw_topic_str))
		{
			ROS_INFO("Setting image node to %s", image_raw_topic_str.c_str());
		}
		else
		{
			ROS_INFO("No image node received, defaulting to /image_raw, you can use _image_raw_node:=YOUR_TOPIC");
			image_raw_topic_str = "/image_raw";
		}

		//RECEIVE CONVNET FILENAMES
		std::string network_definition_file;
		std::string pretrained_model_file;
		if (private_node_handle.getParam("network_definition_file", network_definition_file))
		{
			ROS_INFO("Network Definition File: %s", network_definition_file.c_str());
		}
		else
		{
			ROS_INFO("No Network Definition File was received. Finishing execution.");
			return;
		}
		if (private_node_handle.getParam("pretrained_model_file", pretrained_model_file))
		{
			ROS_INFO("Pretrained Model File: %s", pretrained_model_file.c_str());
		}
		else
		{
			ROS_INFO("No Pretrained Model File was received. Finishing execution.");
			return;
		}

		if (private_node_handle.getParam("score_threshold", score_threshold_))
		{
			ROS_INFO("Score Threshold: %f", score_threshold_);
]]>
            </text>
        </set>
        <set lineCount="23" fingerprint="9941c29f6123e6487fe598d1549aed82">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="438" endLineNumber="473"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="554" endLineNumber="591"/>
            <text>
<![CDATA[      visualization_msgs::Marker pole_marker = createPoleMarker("signal", id++, pole_color, vmap, pole);
      if (isValidMarker(pole_marker))
        marker_array.markers.push_back(pole_marker);
      else
        ROS_ERROR_STREAM("[createSignalMarkerArray] failed createPoleMarker: " << pole);
    }
  }
  return marker_array;
}

visualization_msgs::MarkerArray createStreetLightMarkerArray(const VectorMap& vmap, Color light_color,
                                                             Color pole_color)
{
  visualization_msgs::MarkerArray marker_array;
  int id = 0;
  for (const auto& street_light : vmap.findByFilter([](const StreetLight& street_light){return true;}))
  {
    if (street_light.lid == 0)
    {
      ROS_ERROR_STREAM("[createStreetLightMarkerArray] invalid street_light: " << street_light);
      continue;
    }

    Line line = vmap.findByKey(Key<Line>(street_light.lid));
    if (line.lid == 0)
    {
      ROS_ERROR_STREAM("[createStreetLightMarkerArray] invalid line: " << line);
      continue;
    }

    Pole pole;
    if (street_light.plid != 0)
    {
      pole = vmap.findByKey(Key<Pole>(street_light.plid));
      if (pole.plid == 0)
      {
        ROS_ERROR_STREAM("[createStreetLightMarkerArray] invalid pole: " << pole);
        continue;
]]>
            </text>
        </set>
        <set lineCount="23" fingerprint="b37a02d31ebadd14ac5335772d0302f0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\load_model.cpp" startLineNumber="197" endLineNumber="223"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\load_model.cpp" startLineNumber="299" endLineNumber="325"/>
            <text>
<![CDATA[	int SUM_SIZE_PART = 0;
	for (int i = 0; i < PF->NoP; i++) {
		fscanf(file,FLOAT_SCAN_FMT3,&t1,&t2,&t3);			//number of components

		PF->part_size[i]=(int*)malloc(sizeof(int)*3);
		PF->part_size[i][0]=(int)t1;
		PF->part_size[i][1]=(int)t2;
		PF->part_size[i][2]=(int)t3;
		//printf("***************%f  %f  %f\n",t1,t2,t3);
		int NUMB=PF->part_size[i][0]*PF->part_size[i][1]*PF->part_size[i][2];
#ifdef ORIGINAL
		PF->partfilter[i]=(FLOAT*)malloc(sizeof(FLOAT)*NUMB);				//weight of root filter
#else
#ifdef SEPARETE_MEM
		res = cuMemHostAlloc((void **)&(PF->partfilter[i]), sizeof(FLOAT)*NUMB, CU_MEMHOSTALLOC_DEVICEMAP);
		if(res != CUDA_SUCCESS){
			std::cerr << "Failed: cuMemHostAlloc(PF->partfilter): "
				  << cuda_response_to_string(res) << std::endl;
			std::exit(1);
		}
#else
		SUM_SIZE_PART += NUMB*sizeof(FLOAT);
#endif
#endif
		/* adjust the location of file-pointer */
		for(int j = 0; j < NUMB; j++) {
			fscanf(file,FLOAT_SCAN_FMT,&dummy_t1);  // this is dummy scan
]]>
            </text>
        </set>
        <set lineCount="23" fingerprint="7554ed16dcf8ae163e13b7885ee89b88">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\cpu\dpm_ocv_cpu.cpp" startLineNumber="561" endLineNumber="594"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\dpm_ocv_gpu.cpp" startLineNumber="400" endLineNumber="434"/>
            <text>
<![CDATA[    if (error != LATENT_SVM_OK)
    {
        return NULL;
    }
    // Clipping boxes
    clippingBoxes(image->width, image->height, points, kPoints);
    clippingBoxes(image->width, image->height, oppPoints, kPoints);
    // NMS procedure
    nonMaximumSuppression(kPoints, points, oppPoints, score, overlap_threshold,
                          &numBoxesOut, &pointsOut, &oppPointsOut, &scoreOut);

    result_seq = cvCreateSeq(0, sizeof(CvSeq), sizeof(CvObjectDetection),
                             storage);

    for (int i = 0; i < numBoxesOut; i++)
    {
        CvObjectDetection detection = {{ 0, 0, 0, 0 }, 0 };
        detection.score = scoreOut[i];
        CvRect bounding_box = { 0, 0, 0, 0 };
        bounding_box.x = pointsOut[i].x;
        bounding_box.y = pointsOut[i].y;
        bounding_box.width = oppPointsOut[i].x - pointsOut[i].x;
        bounding_box.height = oppPointsOut[i].y - pointsOut[i].y;
        detection.rect = bounding_box;
        cvSeqPush(result_seq, &detection);
    }

    if (image->nChannels == 3)
        cvCvtColor(image, image, CV_RGB2BGR);

    freeFeaturePyramidObject(&H);
    free(points);
    free(pointsOut);
    free(oppPointsOut);
    free(oppPoints);
]]>
            </text>
        </set>
        <set lineCount="23" fingerprint="061f250504310cd294409292f7b6af1a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="186" endLineNumber="232"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="260" endLineNumber="309"/>
            <text>
<![CDATA[	if(thread_num_y%device_num != 0){
		blockDimY++;
	}

	/* launch dt1d_x */
	if(pt->pid == 0){
		gettimeofday(&tv_kernel_start, NULL);
	}

	res = cuLaunchKernel(
		func_dt1d_x[pt->pid],    // call function
		block_num_x,    // gridDimX
		block_num_y,    // gridDimY
		pt->L_MAX-pt->interval, // gridDimZ
		thread_num_x,   // blockDimX
		blockDimY,   // blockDimY
		pt->NoC,            // blockDimZ
		sharedMemBytes, // sharedMemBytes
		NULL,           // hStream
		kernel_args_x,  // kernelParams
		NULL            // extra
		);
	if(res != CUDA_SUCCESS) {

		printf("block_num_x %d, block_num_y %d, thread_num_x %d, thread_num_y %d\n", block_num_x, block_num_y, thread_num_x, thread_num_y);

		printf("cuLaunchKernel(dt1d_x) failed : res = %s\n", cuda_response_to_string(res));
		exit(1);
	}

	res = cuCtxSynchronize();
	if(res != CUDA_SUCCESS) {
		printf("cuCtxSynchronize(dt1d_x) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
	}

	if(pt->pid == 0){
		gettimeofday(&tv_kernel_end, NULL);
		tvsub(&tv_kernel_end, &tv_kernel_start, &tv);
		time_kernel += tv.tv_sec * 1000.0 + (float)tv.tv_usec / 1000.0;
	}


	/* prepare for launch dt1d_y */
	void* kernel_args_y[] = {
		&tmpM_dev[pt->pid],                    // FLOAT *src_start
		&M_dev[pt->pid],                       // FLOAT *dst_start
		&tmpIx_dev[pt->pid],                   // int *ptr_start
		&DID_4_array_dev[pt->pid],             // int *DID_4_array,
		&def_array_dev[pt->pid],               // FLOAT *def_array,
]]>
            </text>
        </set>
        <set lineCount="23" fingerprint="a18b8f922ce69b85651df360db4b0cc3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\tracking.cpp" startLineNumber="23" endLineNumber="55"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\tracking.cpp" startLineNumber="22" endLineNumber="51"/>
            <text>
<![CDATA[static RESULT *create_result(int num)
{
	RESULT *result = (RESULT *)malloc(sizeof(RESULT));
	result->num = num;
	if(num==0) {
		result->point = nullptr;
		result->type = nullptr;
		result->score = nullptr;
		result->scale = nullptr;
		result->IM = nullptr;
		result->OR_point = nullptr;
	} else {
		result->point = (int *)calloc(num*4,sizeof(int));
		result->OR_point = (int *)calloc(num*4,sizeof(int));
		result->type = (int *)calloc(num,sizeof(int));
		result->score = (FLOAT *)calloc(num,sizeof(FLOAT));
		result->scale = (FLOAT *)calloc(num,sizeof(FLOAT));
		result->IM = (IplImage **)malloc(sizeof(IplImage *)*num);
	}
	return(result);
}

//get new_rectangle information
RESULT *dpm_ttic_gpu_get_new_rects(IplImage *Image,GPUModel *MO,FLOAT *boxes,int *NUM)
{
	const int *numpart = MO->MI->numpart;
	const int GL = (numpart[0]+1)*4+3;
	const FLOAT ratio = MO->MI->ratio;

	int LL = GL-3;
]]>
            </text>
        </set>
        <set lineCount="24" fingerprint="583f41d92a6c9c7b03caaaa757fb4376">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\scan_image_d_viewer\scan_image_d_viewer.cpp" startLineNumber="73" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="94" endLineNumber="160"/>
            <text>
<![CDATA[static void putDistance(IplImage *Image,
                        std::vector<cv_tracker::image_rect_ranged> objects,
                        int threshold_height,
                        const char* objectLabel)
{
  char distance_string[32];
  CvFont dfont;
  float hscale	    = 0.7f;
  float vscale	    = 0.7f;
  float italicscale = 0.0f;
  int	thickness   = 1;

  CvFont      dfont_label;
  float       hscale_label = 0.5f;
  float       vscale_label = 0.5f;
  CvSize      text_size;
  int         baseline     = 0;

  cvInitFont(&dfont_label, CV_FONT_HERSHEY_COMPLEX, hscale_label, vscale_label, italicscale, thickness, CV_AA);
  cvGetTextSize(objectLabel,
                &dfont_label,
                &text_size,
                &baseline);

  for (unsigned int i=0; i<objects.size(); i++)
    {
      if (objects.at(i).rect.y > threshold_height) // temporal way to avoid drawing detections in the sky
        {
          if (!isNearlyNODATA(objects.at(i).range))
            {

              /*put label */
              CvPoint labelOrg = cvPoint(objects.at(i).rect.x - OBJ_RECT_THICKNESS,
                                         objects.at(i).rect.y - baseline - OBJ_RECT_THICKNESS);

              cvRectangle(Image,
                          cvPoint(labelOrg.x + 0, labelOrg.y + baseline),
                          cvPoint(labelOrg.x + text_size.width, labelOrg.y - text_size.height),
                          CV_RGB(0, 0, 0), // label background is black
                          -1, 8, 0
                          );
              cvPutText(Image,
                        objectLabel,
                        labelOrg,
                        &dfont_label,
                        CV_RGB(255, 255, 255) // label text color is white
                        );

              /* put distance data */
              cvRectangle(Image,
                          cv::Point(objects.at(i).rect.x + (objects.at(i).rect.width/2) - (((int)log10(objects.at(i).range/100)+1) * 5 + 45),
                                    objects.at(i).rect.y + objects.at(i).rect.height + 5),
                          cv::Point(objects.at(i).rect.x + (objects.at(i).rect.width/2) + (((int)log10(objects.at(i).range/100)+1) * 8 + 38),
                                    objects.at(i).rect.y + objects.at(i).rect.height + 30),
                          cv::Scalar(255,255,255),
                          -1);

              cvInitFont (&dfont,
                          CV_FONT_HERSHEY_COMPLEX,
                          hscale,
                          vscale,
                          italicscale,
                          thickness,
                          CV_AA);

              sprintf(distance_string, "%.2f m", objects.at(i).range / 100); //unit of length is meter
              cvPutText(Image,
]]>
            </text>
        </set>
        <set lineCount="24" fingerprint="9a404aa6aedd947569ac4410786b6e23">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2291" endLineNumber="2324"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1977" endLineNumber="2010"/>
            <text>
<![CDATA[  obj.vid = std::stoi(columns[0]);
  obj.pid = std::stoi(columns[1]);
  obj.hang = std::stod(columns[2]);
  obj.vang = std::stod(columns[3]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::Line& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.lid = std::stoi(columns[0]);
  obj.bpid = std::stoi(columns[1]);
  obj.fpid = std::stoi(columns[2]);
  obj.blid = std::stoi(columns[3]);
  obj.flid = std::stoi(columns[4]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::Area& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.aid = std::stoi(columns[0]);
  obj.slid = std::stoi(columns[1]);
  obj.elid = std::stoi(columns[2]);
]]>
            </text>
        </set>
        <set lineCount="24" fingerprint="6bd6c60fc1b45b2658211efac0885530">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_downloader\pos_downloader.cpp" startLineNumber="223" endLineNumber="249"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\pos_db\nodes\pos_downloader\pos_downloader.cpp" startLineNumber="153" endLineNumber="179"/>
            <text>
<![CDATA[    marker.id = id;
    marker.type = visualization_msgs::Marker::MESH_RESOURCE;
    marker.mesh_resource = "package://pos_db/model/prius_model.dae";
    marker.mesh_use_embedded_materials = true;
    marker.lifetime = ros::Duration();
    marker.color.r = 0.0;
    marker.color.g = 0.0;
    marker.color.b = 0.0;
    marker.color.a = 0.0;
    marker.scale.x = 1.0;
    marker.scale.y = 1.0;
    marker.scale.z = 1.0;

    tf::Quaternion q1;
    q1.setRPY(M_PI/2, 0, M_PI);
    tf::Quaternion q2(marker.pose.orientation.x, marker.pose.orientation.y, marker.pose.orientation.z, marker.pose.orientation.w);
    tf::Quaternion q3;
    q3 = q2 * q1;

    marker.pose.position.z -= 2.0;
    marker.pose.orientation.x = q3.x();
    marker.pose.orientation.y = q3.y();
    marker.pose.orientation.z = q3.z();
    marker.pose.orientation.w = q3.w();

    pub.publish(marker);
    dbg_out_marker(marker);
]]>
            </text>
        </set>
        <set lineCount="24" fingerprint="84af247107cb1c2caaf283aa7ec560ab">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2043" endLineNumber="2076"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1945" endLineNumber="1978"/>
            <text>
<![CDATA[  return os;
}

std::istream& operator>>(std::istream& is, vector_map::Point& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.pid = std::stoi(columns[0]);
  obj.b = std::stod(columns[1]);
  obj.l = std::stod(columns[2]);
  obj.h = std::stod(columns[3]);
  obj.bx = std::stod(columns[4]);
  obj.ly = std::stod(columns[5]);
  obj.ref = std::stoi(columns[6]);
  obj.mcode1 = std::stoi(columns[7]);
  obj.mcode2 = std::stoi(columns[8]);
  obj.mcode3 = std::stoi(columns[9]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::Vector& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.vid = std::stoi(columns[0]);
  obj.pid = std::stoi(columns[1]);
]]>
            </text>
        </set>
        <set lineCount="24" fingerprint="984ac1db2fb38d47064fb33d4d13cde3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_x11.cpp" startLineNumber="342" endLineNumber="368"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\device\display_x11.cpp" startLineNumber="333" endLineNumber="359"/>
            <text>
<![CDATA[                case XK_Shift_L:
                case XK_Shift_R:
                    key = -1;
                    if(ev.type==KeyPress) {
                        pangolin::context->mouse_state |=  pangolin::KeyModifierShift;
                    }else{
                        pangolin::context->mouse_state &= ~pangolin::KeyModifierShift;
                    }
                    break;
                case XK_Control_L:
                case XK_Control_R:
                    key = -1;
                    if(ev.type==KeyPress) {
                        pangolin::context->mouse_state |=  pangolin::KeyModifierCtrl;
                    }else{
                        pangolin::context->mouse_state &= ~pangolin::KeyModifierCtrl;
                    }
                    break;
                case XK_Alt_L:
                case XK_Alt_R:
                    key = -1;
                    if(ev.type==KeyPress) {
                        pangolin::context->mouse_state |=  pangolin::KeyModifierAlt;
                    }else{
                        pangolin::context->mouse_state &= ~pangolin::KeyModifierAlt;
                    }
                    break;
]]>
            </text>
        </set>
        <set lineCount="24" fingerprint="ccb1c6c3a4c24d16a705e2f51463c047">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_seven_dof_expmap.cpp" startLineNumber="148" endLineNumber="192"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\g2o\g2o\types\types_seven_dof_expmap.cpp" startLineNumber="112" endLineNumber="156"/>
            <text>
<![CDATA[    for (int i=0; i<7; i++)
    {
      os  << v7[i] << " ";
    }
    for (int i=0; i<7; i++)
      for (int j=i; j<7; j++){
        os << " " <<  information()(i,j);
    }
    return os.good();
  }

  /**Sim3ProjectXYZ*/

  EdgeSim3ProjectXYZ::EdgeSim3ProjectXYZ() :
  BaseBinaryEdge<2, Vector2d, VertexSBAPointXYZ, VertexSim3Expmap>()
  {
  }

  bool EdgeSim3ProjectXYZ::read(std::istream& is)
  {
    for (int i=0; i<2; i++)
    {
      is >> _measurement[i];
    }

    for (int i=0; i<2; i++)
      for (int j=i; j<2; j++) {
  is >> information()(i,j);
      if (i!=j)
        information()(j,i)=information()(i,j);
    }
    return true;
  }

  bool EdgeSim3ProjectXYZ::write(std::ostream& os) const
  {
    for (int i=0; i<2; i++){
      os  << _measurement[i] << " ";
    }

    for (int i=0; i<2; i++)
      for (int j=i; j<2; j++){
  os << " " <<  information()(i,j);
    }
    return os.good();
]]>
            </text>
        </set>
        <set lineCount="24" fingerprint="5b3061237090a87e6152665f2b0d71a6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1963" endLineNumber="1996"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2152" endLineNumber="2185"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2008" endLineNumber="2041"/>
            <text>
<![CDATA[  obj.aid = std::stoi(columns[0]);
  obj.slid = std::stoi(columns[1]);
  obj.elid = std::stoi(columns[2]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::Pole& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.plid = std::stoi(columns[0]);
  obj.vid = std::stoi(columns[1]);
  obj.length = std::stod(columns[2]);
  obj.dim = std::stod(columns[3]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::Box& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.bid = std::stoi(columns[0]);
  obj.pid1 = std::stoi(columns[1]);
  obj.pid2 = std::stoi(columns[2]);
  obj.pid3 = std::stoi(columns[3]);
  obj.pid4 = std::stoi(columns[4]);
]]>
            </text>
        </set>
        <set lineCount="24" fingerprint="f811c62b0e31e1378d68f5b453b082f9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\resize_GPU.cpp" startLineNumber="55" endLineNumber="83"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="715" endLineNumber="743"/>
            <text>
<![CDATA[FLOAT *Ipl_to_FLOAT(IplImage *Input)	//get intensity data (FLOAT) of input
{
	const int width     = Input->width;
#ifdef PRINT_INFO
	printf("%d\n",width);
#endif
	const int height    = Input->height;
#ifdef PRINT_INFO
	printf("%d\n",height);
#endif
	const int nChannels = Input->nChannels;
#ifdef PRINT_INFO
	printf("%d\n",nChannels);
#endif
	const int SQ        = height*width;
	const int WS        = Input->widthStep;

	FLOAT *Output = (FLOAT *)malloc(sizeof(FLOAT)*height*width*nChannels);
#ifdef PRINT_INFO
	printf("%d",height*width*nChannels);
#endif

	FLOAT *R     = Output;
	FLOAT *G     = Output + SQ;
	FLOAT *B     = Output + 2*SQ;
	char  *IDATA = Input->imageData;

	//pick intensity of pixel (color)
	for(int x=0; x<width; x++)
]]>
            </text>
        </set>
        <set lineCount="24" fingerprint="1a97dc3a1a73ac289ef89031375dfc1a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="415" endLineNumber="448"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="321" endLineNumber="354"/>
            <text>
<![CDATA[  previous_pose.x = current_pose.x;
  previous_pose.y = current_pose.y;
  previous_pose.z = current_pose.z;
  previous_pose.roll = current_pose.roll;
  previous_pose.pitch = current_pose.pitch;
  previous_pose.yaw = current_pose.yaw;

  offset_x = 0.0;
  offset_y = 0.0;
  offset_z = 0.0;
  offset_yaw = 0.0;
}

static void points_callback(const sensor_msgs::PointCloud2::ConstPtr& input)
{
  if (map_loaded == 1 && init_pos_set == 1)
  {
    matching_start = std::chrono::system_clock::now();

    static tf::TransformBroadcaster br;
    tf::Transform transform;
    tf::Quaternion predict_q, icp_q, current_q, localizer_q;

    pcl::PointXYZ p;
    pcl::PointCloud<pcl::PointXYZ> filtered_scan;

    current_scan_time = input->header.stamp;

    pcl::fromROSMsg(*input, filtered_scan);
    pcl::PointCloud<pcl::PointXYZ>::Ptr filtered_scan_ptr(new pcl::PointCloud<pcl::PointXYZ>(filtered_scan));
    int scan_points_num = filtered_scan_ptr->size();

    Eigen::Matrix4f t(Eigen::Matrix4f::Identity());   // base_link
    Eigen::Matrix4f t2(Eigen::Matrix4f::Identity());  // localizer
]]>
            </text>
        </set>
        <set lineCount="24" fingerprint="0fdeea07bf0293031fe0f80e29c20b7d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2245" endLineNumber="2278"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1961" endLineNumber="1994"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2306" endLineNumber="2339"/>
            <text>
<![CDATA[  obj.id = std::stoi(columns[0]);
  obj.vid = std::stoi(columns[1]);
  obj.plid = std::stoi(columns[2]);
  obj.type = std::stoi(columns[3]);
  obj.linkid = std::stoi(columns[4]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::StreetLight& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.lid = std::stoi(columns[1]);
  obj.plid = std::stoi(columns[2]);
  obj.linkid = std::stoi(columns[3]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::UtilityPole& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.plid = std::stoi(columns[1]);
  obj.linkid = std::stoi(columns[2]);
]]>
            </text>
        </set>
        <set lineCount="24" fingerprint="b6f0b6b26df52d47c377d2224ad70ca7">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\sync_obj_reproj.cpp" startLineNumber="269" endLineNumber="306"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\dpm_sync_2.cpp" startLineNumber="239" endLineNumber="278"/>
            <text>
<![CDATA[            nanosleep(&sleep_time, NULL);
    }
    pthread_mutex_unlock(&flag_mutex);

    ros::spin();

    /* shutdown server thread */
    ROS_INFO("wait until shutdown a thread");
    pthread_kill(th, SIGINT);
    pthread_join(th, NULL);

    return 0;
}



#if 0
cv_tracker::image_obj image_obj_buf;
points2image::PointsImage vscan_image_buf;

void image_obj_callback(const cv_tracker::image_obj::ConstPtr& image_obj_msg) {
    pthread_mutex_lock(&mutex);
    image_obj_ringbuf.push_front(*image_obj_msg);

    //vscan_image is empty
    if (vscan_image_ringbuf.begin() == vscan_image_ringbuf.end()) {
        pthread_mutex_unlock(&mutex);
        ROS_INFO("vscan_image ring buffer is empty");
        return;
    }

    buf_flag = true;

    // image_obj > vscan_image
    if (get_time(&(image_obj_ringbuf.front().header)) >= get_time(&(vscan_image_ringbuf.front().header))) {
        vscan_image_buf = vscan_image_ringbuf.front();
        boost::circular_buffer<cv_tracker::image_obj>::iterator it = image_obj_ringbuf.begin();
        if (image_obj_ringbuf.size() == 1) {
            image_obj_buf = *it;
            pthread_mutex_unlock(&mutex);
]]>
            </text>
        </set>
        <set lineCount="24" fingerprint="bb83769c1928ba70eb28f269a90a4afe">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="633" endLineNumber="661"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="605" endLineNumber="633"/>
            <text>
<![CDATA[    predict_q.setRPY(predict_pose.roll, predict_pose.pitch, predict_pose.yaw);
    if (_use_local_transform == true)
    {
      tf::Vector3 v(predict_pose.x, predict_pose.y, predict_pose.z);
      tf::Transform transform(predict_q, v);
      predict_pose_msg.header.frame_id = "/map";
      predict_pose_msg.header.stamp = current_scan_time;
      predict_pose_msg.pose.position.x = (local_transform * transform).getOrigin().getX();
      predict_pose_msg.pose.position.y = (local_transform * transform).getOrigin().getY();
      predict_pose_msg.pose.position.z = (local_transform * transform).getOrigin().getZ();
      predict_pose_msg.pose.orientation.x = (local_transform * transform).getRotation().x();
      predict_pose_msg.pose.orientation.y = (local_transform * transform).getRotation().y();
      predict_pose_msg.pose.orientation.z = (local_transform * transform).getRotation().z();
      predict_pose_msg.pose.orientation.w = (local_transform * transform).getRotation().w();
    }
    else
    {
      predict_pose_msg.header.frame_id = "/map";
      predict_pose_msg.header.stamp = current_scan_time;
      predict_pose_msg.pose.position.x = predict_pose.x;
      predict_pose_msg.pose.position.y = predict_pose.y;
      predict_pose_msg.pose.position.z = predict_pose.z;
      predict_pose_msg.pose.orientation.x = predict_q.x();
      predict_pose_msg.pose.orientation.y = predict_q.y();
      predict_pose_msg.pose.orientation.z = predict_q.z();
      predict_pose_msg.pose.orientation.w = predict_q.w();
    }

    ndt_q.setRPY(ndt_pose.roll, ndt_pose.pitch, ndt_pose.yaw);
]]>
            </text>
        </set>
        <set lineCount="24" fingerprint="cfcd208495d565ef66e7dff9f98764da">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="448" endLineNumber="471"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="447" endLineNumber="470"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="446" endLineNumber="469"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="445" endLineNumber="468"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="444" endLineNumber="467"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="443" endLineNumber="466"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="442" endLineNumber="465"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="441" endLineNumber="464"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="440" endLineNumber="463"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\include\libtraj_gen.h" startLineNumber="63" endLineNumber="118"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1065" endLineNumber="1111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1063" endLineNumber="1109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1061" endLineNumber="1107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1059" endLineNumber="1105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1021" endLineNumber="1044"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1020" endLineNumber="1043"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1019" endLineNumber="1042"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1018" endLineNumber="1041"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1017" endLineNumber="1040"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1016" endLineNumber="1039"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1015" endLineNumber="1038"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1014" endLineNumber="1037"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1013" endLineNumber="1036"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="116" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="115" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="114" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="113" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="112" endLineNumber="135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="111" endLineNumber="134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="110" endLineNumber="133"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="109" endLineNumber="132"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="108" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="106" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="105" endLineNumber="129"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="104" endLineNumber="128"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="103" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="102" endLineNumber="126"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="101" endLineNumber="125"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="100" endLineNumber="124"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="99" endLineNumber="123"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="98" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="97" endLineNumber="121"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="96" endLineNumber="120"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="95" endLineNumber="119"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="94" endLineNumber="118"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="93" endLineNumber="117"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="92" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="91" endLineNumber="115"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="90" endLineNumber="114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="89" endLineNumber="113"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="88" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="87" endLineNumber="111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="86" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="85" endLineNumber="109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="84" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="83" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="82" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="81" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="80" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="79" endLineNumber="102"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="78" endLineNumber="101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="77" endLineNumber="100"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="76" endLineNumber="99"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="75" endLineNumber="98"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="336" endLineNumber="359"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="335" endLineNumber="358"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="334" endLineNumber="357"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="333" endLineNumber="356"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="332" endLineNumber="355"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="331" endLineNumber="354"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="330" endLineNumber="353"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="329" endLineNumber="352"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="328" endLineNumber="351"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="844" endLineNumber="867"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="38" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="37" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="36" endLineNumber="63"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="373" endLineNumber="396"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="372" endLineNumber="395"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="371" endLineNumber="394"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="370" endLineNumber="393"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="369" endLineNumber="392"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="368" endLineNumber="391"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="367" endLineNumber="390"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="366" endLineNumber="389"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="365" endLineNumber="388"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="158" endLineNumber="183"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="157" endLineNumber="182"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="156" endLineNumber="181"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="153" endLineNumber="180"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="152" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="151" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="150" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="149" endLineNumber="176"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="148" endLineNumber="175"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="503" endLineNumber="526"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="502" endLineNumber="525"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="501" endLineNumber="524"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="500" endLineNumber="523"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="499" endLineNumber="522"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="498" endLineNumber="521"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="497" endLineNumber="520"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="496" endLineNumber="519"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="495" endLineNumber="518"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="156" endLineNumber="314"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="151" endLineNumber="309"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="146" endLineNumber="301"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="138" endLineNumber="294"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="133" endLineNumber="288"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="127" endLineNumber="281"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="122" endLineNumber="274"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="117" endLineNumber="268"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="108" endLineNumber="257"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="98" endLineNumber="246"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="91" endLineNumber="235"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="85" endLineNumber="226"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="80" endLineNumber="219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="75" endLineNumber="212"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="70" endLineNumber="207"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="65" endLineNumber="202"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="59" endLineNumber="197"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="54" endLineNumber="192"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="48" endLineNumber="187"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="42" endLineNumber="180"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="36" endLineNumber="174"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="157" endLineNumber="311"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="152" endLineNumber="306"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="147" endLineNumber="298"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="139" endLineNumber="291"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="134" endLineNumber="285"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="128" endLineNumber="278"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="123" endLineNumber="271"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="118" endLineNumber="265"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="109" endLineNumber="254"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="99" endLineNumber="243"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="151" endLineNumber="175"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="150" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="149" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="148" endLineNumber="171"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="147" endLineNumber="170"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="146" endLineNumber="169"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="145" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="144" endLineNumber="167"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="143" endLineNumber="166"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="142" endLineNumber="165"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="141" endLineNumber="164"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="140" endLineNumber="163"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="139" endLineNumber="162"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="138" endLineNumber="161"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="137" endLineNumber="160"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="136" endLineNumber="159"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="135" endLineNumber="158"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="134" endLineNumber="157"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="133" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="132" endLineNumber="155"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="131" endLineNumber="154"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="130" endLineNumber="153"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="129" endLineNumber="152"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="128" endLineNumber="151"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="127" endLineNumber="150"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="126" endLineNumber="149"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="125" endLineNumber="148"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="124" endLineNumber="147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="123" endLineNumber="146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="122" endLineNumber="145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="120" endLineNumber="144"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="481" endLineNumber="504"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="480" endLineNumber="503"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="479" endLineNumber="502"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="478" endLineNumber="501"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="477" endLineNumber="500"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="476" endLineNumber="499"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="475" endLineNumber="498"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="474" endLineNumber="497"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="473" endLineNumber="496"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="415" endLineNumber="438"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="414" endLineNumber="437"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="413" endLineNumber="436"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="412" endLineNumber="435"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="411" endLineNumber="434"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="410" endLineNumber="433"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="409" endLineNumber="432"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="408" endLineNumber="431"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="407" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="555" endLineNumber="578"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="554" endLineNumber="577"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="553" endLineNumber="576"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="552" endLineNumber="575"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="551" endLineNumber="574"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="550" endLineNumber="573"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="549" endLineNumber="572"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="548" endLineNumber="571"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="547" endLineNumber="570"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="945" endLineNumber="968"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="944" endLineNumber="967"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="943" endLineNumber="966"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="942" endLineNumber="965"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="941" endLineNumber="964"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="940" endLineNumber="963"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="939" endLineNumber="962"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="938" endLineNumber="961"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="937" endLineNumber="960"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="588" endLineNumber="611"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="587" endLineNumber="610"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="586" endLineNumber="609"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="585" endLineNumber="608"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="584" endLineNumber="607"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="583" endLineNumber="606"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="582" endLineNumber="605"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="581" endLineNumber="604"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="580" endLineNumber="603"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="150" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="149" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="404" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="402" endLineNumber="429"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="401" endLineNumber="428"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="400" endLineNumber="427"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="399" endLineNumber="426"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="398" endLineNumber="425"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="397" endLineNumber="423"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="411" endLineNumber="437"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="409" endLineNumber="436"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="408" endLineNumber="435"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="407" endLineNumber="434"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="406" endLineNumber="433"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="405" endLineNumber="432"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="404" endLineNumber="430"/>
            <text>
<![CDATA[    previous_pose.x = 0.0;
    previous_pose.y = 0.0;
    previous_pose.z = 0.0;
    previous_pose.roll = 0.0;
    previous_pose.pitch = 0.0;
    previous_pose.yaw = 0.0;

    ndt_pose.x = 0.0;
    ndt_pose.y = 0.0;
    ndt_pose.z = 0.0;
    ndt_pose.roll = 0.0;
    ndt_pose.pitch = 0.0;
    ndt_pose.yaw = 0.0;

    current_pose.x = 0.0;
    current_pose.y = 0.0;
    current_pose.z = 0.0;
    current_pose.roll = 0.0;
    current_pose.pitch = 0.0;
    current_pose.yaw = 0.0;

    guess_pose.x = 0.0;
    guess_pose.y = 0.0;
    guess_pose.z = 0.0;
    guess_pose.roll = 0.0;
    guess_pose.pitch = 0.0;
    guess_pose.yaw = 0.0;
]]>
            </text>
        </set>
        <set lineCount="25" fingerprint="5f8d154ddff1360887d591c2bc679e44">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\load_model.cpp" startLineNumber="426" endLineNumber="457"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\load_model.cpp" startLineNumber="457" endLineNumber="489"/>
            <text>
<![CDATA[	s_free(MO->RF->rootsym);
	s_free(MO->RF);

	//free root-filter information
	for(int i = 0; i < MO->PF->NoP; i++)
	{
		s_free(MO->PF->part_size[i]);
#ifdef ORIGINAL
		s_free(MO->PF->partfilter[i]);
#else
#ifdef SEPARETE_MEM
		res = cuMemFreeHost((void *)MO->PF->partfilter[i]);
		if(res != CUDA_SUCCESS){
			std::cerr << "Failed: cuMemFreeHost(MO->PF->partfilter): "
				  << cuda_response_to_string(res) << std::endl;
			std::exit(1);
		}
#endif
#endif
	}

#ifndef ORIGINAL
#ifndef SEPARETE_MEM
	/* free heap region in a lump */
	res = cuMemFreeHost((void *)MO->PF->partfilter[0]);
	if(res != CUDA_SUCCESS){
		std::cerr << "Failed: cuMemFreeHost(MO->PF->partfilter[0]): "
			  << cuda_response_to_string(res) << std::endl;
		std::exit(1);
	}
#endif
#endif
	s_free(MO->PF->part_partner);
]]>
            </text>
        </set>
        <set lineCount="25" fingerprint="35a1f029b381ec79e8a34020b274dd2f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1804" endLineNumber="1840"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1841" endLineNumber="1877"/>
            <text>
<![CDATA[     << obj.type << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Signal& obj)
{
  os << obj.id << ","
     << obj.vid << ","
     << obj.plid << ","
     << obj.type << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::StreetLight& obj)
{
  os << obj.id << ","
     << obj.lid << ","
     << obj.plid << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::UtilityPole& obj)
{
  os << obj.id << ","
     << obj.plid << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::GuardRail& obj)
{
  os << obj.id << ","
     << obj.aid << ","
     << obj.type << ","
]]>
            </text>
        </set>
        <set lineCount="25" fingerprint="43cccd43eaa2602b02d31c422457394b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="411" endLineNumber="446"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_select\lane_select_core.cpp" startLineNumber="448" endLineNumber="483"/>
            <text>
<![CDATA[  for(const auto &em : std::get<0>(tuple_vec_.at(right_lane_idx_)).waypoints)
    marker.points.push_back(em.pose.pose.position);

  return marker;
}

visualization_msgs::Marker LaneSelectNode::createLeftLaneMarker()
{
  visualization_msgs::Marker marker;
  marker.header.frame_id = "map";
  marker.header.stamp = ros::Time();
  marker.ns = "left_lane_marker";

  if (left_lane_idx_ == -1 || std::get<0>(tuple_vec_.at(current_lane_idx_)).waypoints.empty())
  {
    marker.action = visualization_msgs::Marker::DELETE;
    return marker;
  }

  marker.type = visualization_msgs::Marker::LINE_STRIP;
  marker.action = visualization_msgs::Marker::ADD;
  marker.scale.x = 0.05;

  std_msgs::ColorRGBA color_neighbor;
  color_neighbor.r = 0.5;
  color_neighbor.b = 0.5;
  color_neighbor.g = 0.5;
  color_neighbor.a = 1.0;

  std_msgs::ColorRGBA color_neighbor_change;
  color_neighbor_change.b = 0.7;
  color_neighbor_change.g = 1.0;
  color_neighbor_change.a = 1.0;

  const ChangeFlag &change_flag = std::get<2>(tuple_vec_.at(current_lane_idx_));
  marker.color = change_flag == ChangeFlag::left ? color_neighbor_change : color_neighbor;
]]>
            </text>
        </set>
        <set lineCount="25" fingerprint="b6685f0308d7d0897a178215140bb555">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\map_tools\nodes\pcd_binarizer\pcd_binarizer.cpp" startLineNumber="28" endLineNumber="62"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\map_tools\nodes\pcd_binarizer\pcd_binarizer.cpp" startLineNumber="47" endLineNumber="81"/>
            <text>
<![CDATA[      pcl::PointCloud<pcl::PointXYZI>::Ptr input_cloud (new pcl::PointCloud<pcl::PointXYZI>);
      if (pcl::io::loadPCDFile<pcl::PointXYZI> (input, *input_cloud) == -1){
        std::cout << "Couldn't find " << input << "." << std::endl;
        break;
      }
      std::cout << "Input: " << input << std::endl;

      int tmp = input.find_last_of("/");
      std::string prefix = "bin_";
      std::string output = input.insert(tmp+1, prefix);

      if(pcl::io::savePCDFileBinary(output, *input_cloud) == -1){
        std::cout << "Failed saving " << output << std::endl;
        return -1;
      }
      std::cout << "Output: " << output << std::endl << std::endl;
    }

    else if(point_type == "PointXYZRGB"){
      pcl::PointCloud<pcl::PointXYZRGB>::Ptr input_cloud (new pcl::PointCloud<pcl::PointXYZRGB>);
      if (pcl::io::loadPCDFile<pcl::PointXYZRGB> (input, *input_cloud) == -1){
        std::cout << "Couldn't find " << input << "." << std::endl;
        break;
      }
      std::cout << "Input: " << input << std::endl;

      int tmp = input.find_last_of("/");
      std::string prefix = "bin_";
      std::string output = input.insert(tmp+1, prefix);

      if(pcl::io::savePCDFileBinary(output, *input_cloud) == -1){
        std::cout << "Failed saving " << output << std::endl;
        return -1;
      }
      std::cout << "Output: " << output << std::endl << std::endl;
]]>
            </text>
        </set>
        <set lineCount="25" fingerprint="252004ba25430a8cbbfc2f408c1119ff">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="288" endLineNumber="368"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="133" endLineNumber="194"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="121" endLineNumber="185"/>
            <text>
<![CDATA[        inline void
        setMaximumIterationsSimilarTransforms (const int nr_iterations) { max_iterations_similar_transforms_ = nr_iterations; }

        /** \brief Get the maximum number of iterations that the internal rotation, 
          * translation, and MSE differences are allowed to be similar, as set by the user.
          */
        inline int
        getMaximumIterationsSimilarTransforms () const { return (max_iterations_similar_transforms_); }

        /** \brief Set the maximum number of iterations the internal optimization should run for.
          * \param[in] nr_iterations the maximum number of iterations the internal optimization should run for
          */
        inline void
        setMaximumIterations (const int nr_iterations) { max_iterations_ = nr_iterations; }

        /** \brief Get the maximum number of iterations the internal optimization should run for, as set by the user. */
        inline int
        getMaximumIterations () const { return (max_iterations_); }

        /** \brief Specifies if the registration fails or converges when the maximum number of iterations is reached.
          * \param[in] failure_after_max_iter If true, the registration fails. If false, the registration is assumed to have converged.
          */
        inline void
        setFailureAfterMaximumIterations (const bool failure_after_max_iter) { failure_after_max_iter_ = failure_after_max_iter; }

        /** \brief Get whether the registration will fail or converge when the maximum number of iterations is reached. */
        inline bool
        getFailureAfterMaximumIterations () const { return (failure_after_max_iter_); }

        /** \brief Set the rotation threshold cosine angle (maximum allowable difference between two consecutive transformations) in order for an optimization to be considered as having converged to the final solution.
          * \param[in] threshold the rotation threshold in order for an optimization to be considered as having converged to the final solution.
          */
        inline void
        setRotationThreshold (const double threshold) { rotation_threshold_ = threshold; }

        /** \brief Get the rotation threshold cosine angle (maximum allowable difference between two consecutive transformations) as set by the user.
          */
        inline double
        getRotationThreshold () const { return (rotation_threshold_); }

        /** \brief Set the translation threshold (maximum allowable difference between two consecutive transformations) in order for an optimization to be considered as having converged to the final solution.
          * \param[in] threshold the translation threshold in order for an optimization to be considered as having converged to the final solution.
          */
        inline void
        setTranslationThreshold (const double threshold) { translation_threshold_ = threshold; }

        /** \brief Get the rotation threshold cosine angle (maximum allowable difference between two consecutive transformations) as set by the user.
          */
        inline double
        getTranslationThreshold () const { return (translation_threshold_); }

        /** \brief Set the relative MSE between two consecutive sets of correspondences.
          * \param[in] mse_relative the relative MSE threshold
          */
        inline void
        setRelativeMSE (const double mse_relative) { mse_threshold_relative_ = mse_relative; }

        /** \brief Get the relative MSE between two consecutive sets of correspondences. */
        inline double
        getRelativeMSE () const { return (mse_threshold_relative_); }

        /** \brief Set the absolute MSE between two consecutive sets of correspondences.
          * \param[in] mse_absolute the relative MSE threshold
          */
        inline void
]]>
            </text>
        </set>
        <set lineCount="25" fingerprint="cfcd208495d565ef66e7dff9f98764da">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\gl\compat\gl2engine.h" startLineNumber="149" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="587" endLineNumber="611"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="586" endLineNumber="610"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="585" endLineNumber="609"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="584" endLineNumber="608"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="583" endLineNumber="607"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="582" endLineNumber="606"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="581" endLineNumber="605"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="580" endLineNumber="604"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="944" endLineNumber="968"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="943" endLineNumber="967"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="942" endLineNumber="966"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="941" endLineNumber="965"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="940" endLineNumber="964"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="939" endLineNumber="963"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="938" endLineNumber="962"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="937" endLineNumber="961"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="554" endLineNumber="578"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="553" endLineNumber="577"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="552" endLineNumber="576"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="551" endLineNumber="575"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="550" endLineNumber="574"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="549" endLineNumber="573"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="548" endLineNumber="572"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="547" endLineNumber="571"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="414" endLineNumber="438"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="413" endLineNumber="437"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="412" endLineNumber="436"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="411" endLineNumber="435"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="410" endLineNumber="434"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="409" endLineNumber="433"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="408" endLineNumber="432"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="407" endLineNumber="431"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="480" endLineNumber="504"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="479" endLineNumber="503"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="478" endLineNumber="502"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="477" endLineNumber="501"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="476" endLineNumber="500"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="475" endLineNumber="499"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="474" endLineNumber="498"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="473" endLineNumber="497"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="150" endLineNumber="175"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="149" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="148" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="147" endLineNumber="171"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="146" endLineNumber="170"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="145" endLineNumber="169"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="144" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="143" endLineNumber="167"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="142" endLineNumber="166"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="141" endLineNumber="165"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="140" endLineNumber="164"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="139" endLineNumber="163"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="138" endLineNumber="162"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="137" endLineNumber="161"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="136" endLineNumber="160"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="135" endLineNumber="159"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="134" endLineNumber="158"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="133" endLineNumber="157"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="132" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="131" endLineNumber="155"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="130" endLineNumber="154"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="129" endLineNumber="153"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="128" endLineNumber="152"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="127" endLineNumber="151"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="126" endLineNumber="150"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="125" endLineNumber="149"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="124" endLineNumber="148"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="123" endLineNumber="147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="122" endLineNumber="146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="120" endLineNumber="145"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="152" endLineNumber="311"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="147" endLineNumber="306"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="139" endLineNumber="298"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="134" endLineNumber="291"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="128" endLineNumber="285"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="123" endLineNumber="278"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="118" endLineNumber="271"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="109" endLineNumber="265"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="99" endLineNumber="254"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="151" endLineNumber="314"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="146" endLineNumber="309"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="138" endLineNumber="301"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="133" endLineNumber="294"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="127" endLineNumber="288"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="122" endLineNumber="281"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="117" endLineNumber="274"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="108" endLineNumber="268"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="98" endLineNumber="257"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="91" endLineNumber="246"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="85" endLineNumber="235"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="80" endLineNumber="226"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="75" endLineNumber="219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="70" endLineNumber="212"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="65" endLineNumber="207"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="59" endLineNumber="202"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="54" endLineNumber="197"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="48" endLineNumber="192"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="42" endLineNumber="187"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="36" endLineNumber="180"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="502" endLineNumber="526"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="501" endLineNumber="525"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="500" endLineNumber="524"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="499" endLineNumber="523"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="498" endLineNumber="522"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="497" endLineNumber="521"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="496" endLineNumber="520"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="495" endLineNumber="519"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="157" endLineNumber="183"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="156" endLineNumber="182"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="153" endLineNumber="181"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="152" endLineNumber="180"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="151" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="150" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="149" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="148" endLineNumber="176"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="372" endLineNumber="396"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="371" endLineNumber="395"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="370" endLineNumber="394"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="369" endLineNumber="393"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="368" endLineNumber="392"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="367" endLineNumber="391"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="366" endLineNumber="390"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="365" endLineNumber="389"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="37" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="36" endLineNumber="64"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="335" endLineNumber="359"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="334" endLineNumber="358"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="333" endLineNumber="357"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="332" endLineNumber="356"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="331" endLineNumber="355"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="330" endLineNumber="354"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="329" endLineNumber="353"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="328" endLineNumber="352"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="115" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="114" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="113" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="112" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="111" endLineNumber="135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="110" endLineNumber="134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="109" endLineNumber="133"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="108" endLineNumber="132"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="106" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="105" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="104" endLineNumber="129"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="103" endLineNumber="128"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="102" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="101" endLineNumber="126"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="100" endLineNumber="125"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="99" endLineNumber="124"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="98" endLineNumber="123"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="97" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="96" endLineNumber="121"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="95" endLineNumber="120"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="94" endLineNumber="119"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="93" endLineNumber="118"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="92" endLineNumber="117"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="91" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="90" endLineNumber="115"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="89" endLineNumber="114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="88" endLineNumber="113"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="87" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="86" endLineNumber="111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="85" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="84" endLineNumber="109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="83" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="82" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="81" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="80" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="79" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="78" endLineNumber="102"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="77" endLineNumber="101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="76" endLineNumber="100"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="75" endLineNumber="99"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1020" endLineNumber="1044"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1019" endLineNumber="1043"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1018" endLineNumber="1042"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1017" endLineNumber="1041"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1016" endLineNumber="1040"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1015" endLineNumber="1039"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1014" endLineNumber="1038"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1013" endLineNumber="1037"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1063" endLineNumber="1111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1061" endLineNumber="1109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1059" endLineNumber="1107"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="447" endLineNumber="471"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="446" endLineNumber="470"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="445" endLineNumber="469"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="444" endLineNumber="468"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="443" endLineNumber="467"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="442" endLineNumber="466"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="441" endLineNumber="465"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="440" endLineNumber="464"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="409" endLineNumber="437"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="408" endLineNumber="436"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="407" endLineNumber="435"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="406" endLineNumber="434"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="405" endLineNumber="433"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="404" endLineNumber="432"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="402" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="401" endLineNumber="429"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="400" endLineNumber="428"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="399" endLineNumber="427"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="398" endLineNumber="426"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="397" endLineNumber="425"/>
            <text>
<![CDATA[  previous_pose.x = 0.0;
  previous_pose.y = 0.0;
  previous_pose.z = 0.0;
  previous_pose.roll = 0.0;
  previous_pose.pitch = 0.0;
  previous_pose.yaw = 0.0;

  ndt_pose.x = 0.0;
  ndt_pose.y = 0.0;
  ndt_pose.z = 0.0;
  ndt_pose.roll = 0.0;
  ndt_pose.pitch = 0.0;
  ndt_pose.yaw = 0.0;

  current_pose.x = 0.0;
  current_pose.y = 0.0;
  current_pose.z = 0.0;
  current_pose.roll = 0.0;
  current_pose.pitch = 0.0;
  current_pose.yaw = 0.0;

  guess_pose.x = 0.0;
  guess_pose.y = 0.0;
  guess_pose.z = 0.0;
  guess_pose.roll = 0.0;
  guess_pose.pitch = 0.0;
  guess_pose.yaw = 0.0;

  added_pose.x = 0.0;
]]>
            </text>
        </set>
        <set lineCount="26" fingerprint="aac3c515d7b4dd543cab254a0c2d21fe">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\vscan_lidar_track\mainwindow.cpp" startLineNumber="218" endLineNumber="261"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\vscan_lidar_track\mainwindow.cpp" startLineNumber="95" endLineNumber="138"/>
            <text>
<![CDATA[void InitTrackerView::wheelEvent(QWheelEvent *event)
{
    if(ctrlflag)
    {
        if(event->delta()>0)
        {
            sx*=1.1;sy*=1.1;
            this->scale(1.1,1.1);
        }
        else
        {
            sx*=0.9;sy*=0.9;
            this->scale(0.9,0.9);
        }
    }
    else
    {
        QGraphicsView::wheelEvent(event);
    }
}

void InitTrackerView::keyPressEvent(QKeyEvent *event)
{
    switch(event->key())
    {
    case Qt::Key_Control:
        ctrlflag=1;
        break;
    default:
        QGraphicsView::keyPressEvent(event);
        break;
    }
}

void InitTrackerView::keyReleaseEvent(QKeyEvent *event)
{
    switch(event->key())
    {
    case Qt::Key_Control:
        ctrlflag=0;
        break;
    default:
        QGraphicsView::keyReleaseEvent(event);
        break;
]]>
            </text>
        </set>
        <set lineCount="26" fingerprint="87adcddb2f15cc579cfb926f00d600f4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\ssd_node.cpp" startLineNumber="59" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\rcnn\rcnn_node.cpp" startLineNumber="65" endLineNumber="118"/>
            <text>
<![CDATA[	float slices_overlap_;

	//If GPU is enabled, stores the GPU Device to use
	unsigned int gpu_device_id_;

	//Sets whether or not use GPU acceleration
	bool use_gpu_;

	//vector of indices of the classes to search for
	std::vector<unsigned int> detect_classes_;

	void convert_rect_to_image_obj(std::vector< RectClassScore<float> >& in_objects, cv_tracker::image_obj& out_message, cv::Mat& in_image, std::string in_class)
	{
		for (unsigned int i = 0; i < in_objects.size(); ++i)
		{
			if ( (in_objects[i].score > score_threshold_)
				&& (	(in_class == "car" && (in_objects[i].class_type == Rcnn::CAR || in_objects[i].class_type == Rcnn::BUS))
						|| (in_class == "person" && (in_objects[i].class_type == Rcnn::PERSON || in_objects[i].class_type == Rcnn::BICYCLE))
					)

				)//check if the score is larger than minimum required
			{
				//std::cout << in_objects[i].toString() << std::endl;
				cv_tracker::image_rect rect;

				rect.x = in_objects[i].x;
				rect.y = in_objects[i].y;
				rect.width = in_objects[i].w;
				rect.height = in_objects[i].h;
				if (in_objects[i].x < 0)
					rect.x = 0;
				if (in_objects[i].y < 0)
					rect.y = 0;
				if (in_objects[i].w < 0)
					rect.width = 0;
				if (in_objects[i].h < 0)
					rect.height = 0;

				rect.score = in_objects[i].score;

				out_message.obj.push_back(rect);

			}
		}
	}

	void image_callback(const sensor_msgs::Image& image_source)
	{
		//Receive Image, convert it to OpenCV Mat
		cv_bridge::CvImagePtr cv_image = cv_bridge::toCvCopy(image_source, "bgr8");//toCvCopy(image_source, sensor_msgs::image_encodings::BGR8);
		cv::Mat image = cv_image->image;

		//Detect Object in image
		std::vector< RectClassScore<float> > detections;
]]>
            </text>
        </set>
        <set lineCount="26" fingerprint="189a1d50ea958015a3f03b661c824278">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="529" endLineNumber="559"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1683" endLineNumber="1713"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1202" endLineNumber="1232"/>
            <text>
<![CDATA[    calibimages.push_back(calibimage.clone());
    grid3dpoints.push_back(grid3dpoint);
    grid2dpoints.push_back(grid2dpoint);

    chessboardposes.push_back(cv::Mat::eye(4,4,CV_64F));
    QTableWidget * tmpchessboardtable=new QTableWidget;
    chessboardposeshow->addTab(tmpchessboardtable,QString("Chessboard_%1").arg(calibimages.size()-1));

    cv::Mat tmpimage=calibimages.back().clone();
    cv::drawChessboardCorners(tmpimage,patternnum,grid2dpoint,1);
    if(tmpimage.type()==CV_8UC3)
    {
        QImage img(tmpimage.data, tmpimage.cols, tmpimage.rows, tmpimage.step, QImage::Format_RGB888);
        img=img.rgbSwapped();
        QLabel * tmpcalibimageshow=new QLabel;
        tmpcalibimageshow->setPixmap(QPixmap::fromImage(img));
        QScrollArea * scrollarea=new QScrollArea;
        scrollarea->setWidget(tmpcalibimageshow);
        calibimagesshow->addTab(scrollarea,QString("Image_%1").arg(calibimages.size()-1));
        calibimagesshow->setCurrentWidget(scrollarea);
    }
    else if(tmpimage.type()==CV_8UC1)
    {
        QImage img(tmpimage.data, tmpimage.cols, tmpimage.rows, tmpimage.step, QImage::Format_Indexed8);
        img.setColorTable(colorTable);
        QLabel * tmpcalibimageshow=new QLabel;
        tmpcalibimageshow->setPixmap(QPixmap::fromImage(img));
        QScrollArea * scrollarea=new QScrollArea;
        scrollarea->setWidget(tmpcalibimageshow);
        calibimagesshow->addTab(scrollarea,QString("Image_%1").arg(calibimages.size()-1));
        calibimagesshow->setCurrentWidget(scrollarea);
]]>
            </text>
        </set>
        <set lineCount="26" fingerprint="4d62dd73089473f6b300fee5ed6ee779">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="281" endLineNumber="317"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="161" endLineNumber="197"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="393" endLineNumber="429"/>
            <text>
<![CDATA[    ret[id].hang = std::stod(tbl[i][2]);
    ret[id].vang = std::stod(tbl[i][3]);
  }
  return ret;
}

/* for line.csv */
struct LineClass {
  int lid;
  int bpid;
  int fpid;
  int blid;
  int flid;
};

std::vector<LineClass> read_lineclass(const char *filename)
{
  int max_id;
  Tbl tbl = read_csv(filename, &max_id);
  size_t i, n = tbl.size();
  std::vector<LineClass> ret(max_id + 1);
  for (i=0; i<n; i++) {
    int id = std::stoi(tbl[i][0]);
    ret[id].lid = id;
    ret[id].bpid = std::stoi(tbl[i][1]);
    ret[id].fpid = std::stoi(tbl[i][2]);
    ret[id].blid = std::stoi(tbl[i][3]);
    ret[id].flid = std::stoi(tbl[i][4]);
  }
  return ret;
}

/* for area.csv */
struct AreaClass {
  int aid;
  int slid;
  int elid;
]]>
            </text>
        </set>
        <set lineCount="26" fingerprint="cfcd208495d565ef66e7dff9f98764da">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="446" endLineNumber="471"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="445" endLineNumber="470"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="444" endLineNumber="469"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="443" endLineNumber="468"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="442" endLineNumber="467"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="441" endLineNumber="466"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="440" endLineNumber="465"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1061" endLineNumber="1111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1059" endLineNumber="1109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1019" endLineNumber="1044"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1018" endLineNumber="1043"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1017" endLineNumber="1042"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1016" endLineNumber="1041"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1015" endLineNumber="1040"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1014" endLineNumber="1039"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1013" endLineNumber="1038"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="114" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="113" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="112" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="111" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="110" endLineNumber="135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="109" endLineNumber="134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="108" endLineNumber="133"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="106" endLineNumber="132"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="105" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="104" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="103" endLineNumber="129"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="102" endLineNumber="128"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="101" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="100" endLineNumber="126"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="99" endLineNumber="125"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="98" endLineNumber="124"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="97" endLineNumber="123"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="96" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="95" endLineNumber="121"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="94" endLineNumber="120"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="93" endLineNumber="119"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="92" endLineNumber="118"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="91" endLineNumber="117"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="90" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="89" endLineNumber="115"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="88" endLineNumber="114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="87" endLineNumber="113"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="86" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="85" endLineNumber="111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="84" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="83" endLineNumber="109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="82" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="81" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="80" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="79" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="78" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="77" endLineNumber="102"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="76" endLineNumber="101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="75" endLineNumber="100"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="334" endLineNumber="359"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="333" endLineNumber="358"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="332" endLineNumber="357"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="331" endLineNumber="356"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="330" endLineNumber="355"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="329" endLineNumber="354"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="328" endLineNumber="353"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\include\pangolin\handler\handler_enums.h" startLineNumber="36" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="371" endLineNumber="396"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="370" endLineNumber="395"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="369" endLineNumber="394"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="368" endLineNumber="393"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="367" endLineNumber="392"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="366" endLineNumber="391"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="365" endLineNumber="390"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="156" endLineNumber="183"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="153" endLineNumber="182"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="152" endLineNumber="181"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="151" endLineNumber="180"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="150" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="149" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="148" endLineNumber="177"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="501" endLineNumber="526"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="500" endLineNumber="525"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="499" endLineNumber="524"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="498" endLineNumber="523"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="497" endLineNumber="522"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="496" endLineNumber="521"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="495" endLineNumber="520"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="146" endLineNumber="314"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="138" endLineNumber="309"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="133" endLineNumber="301"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="127" endLineNumber="294"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="122" endLineNumber="288"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="117" endLineNumber="281"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="108" endLineNumber="274"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="98" endLineNumber="268"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="91" endLineNumber="257"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="85" endLineNumber="246"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="80" endLineNumber="235"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="75" endLineNumber="226"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="70" endLineNumber="219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="65" endLineNumber="212"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="59" endLineNumber="207"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="54" endLineNumber="202"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="48" endLineNumber="197"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="42" endLineNumber="192"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="36" endLineNumber="187"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="147" endLineNumber="311"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="139" endLineNumber="306"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="134" endLineNumber="298"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="128" endLineNumber="291"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="123" endLineNumber="285"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="118" endLineNumber="278"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="109" endLineNumber="271"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="99" endLineNumber="265"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="149" endLineNumber="175"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="148" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="147" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="146" endLineNumber="171"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="145" endLineNumber="170"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="144" endLineNumber="169"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="143" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="142" endLineNumber="167"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="141" endLineNumber="166"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="140" endLineNumber="165"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="139" endLineNumber="164"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="138" endLineNumber="163"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="137" endLineNumber="162"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="136" endLineNumber="161"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="135" endLineNumber="160"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="134" endLineNumber="159"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="133" endLineNumber="158"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="132" endLineNumber="157"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="131" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="130" endLineNumber="155"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="129" endLineNumber="154"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="128" endLineNumber="153"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="127" endLineNumber="152"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="126" endLineNumber="151"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="125" endLineNumber="150"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="124" endLineNumber="149"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="123" endLineNumber="148"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="122" endLineNumber="147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="120" endLineNumber="146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="479" endLineNumber="504"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="478" endLineNumber="503"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="477" endLineNumber="502"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="476" endLineNumber="501"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="475" endLineNumber="500"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="474" endLineNumber="499"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="473" endLineNumber="498"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="413" endLineNumber="438"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="412" endLineNumber="437"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="411" endLineNumber="436"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="410" endLineNumber="435"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="409" endLineNumber="434"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="408" endLineNumber="433"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="407" endLineNumber="432"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="553" endLineNumber="578"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="552" endLineNumber="577"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="551" endLineNumber="576"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="550" endLineNumber="575"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="549" endLineNumber="574"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="548" endLineNumber="573"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="547" endLineNumber="572"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="943" endLineNumber="968"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="942" endLineNumber="967"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="941" endLineNumber="966"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="940" endLineNumber="965"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="939" endLineNumber="964"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="938" endLineNumber="963"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="937" endLineNumber="962"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="586" endLineNumber="611"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="585" endLineNumber="610"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="584" endLineNumber="609"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="583" endLineNumber="608"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="582" endLineNumber="607"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="581" endLineNumber="606"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="580" endLineNumber="605"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="401" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="400" endLineNumber="429"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="399" endLineNumber="428"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="398" endLineNumber="427"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="397" endLineNumber="426"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="408" endLineNumber="437"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="407" endLineNumber="436"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="406" endLineNumber="435"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="405" endLineNumber="434"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="404" endLineNumber="433"/>
            <text>
<![CDATA[    previous_pose.x = 0.0;
    previous_pose.y = 0.0;
    previous_pose.z = 0.0;
    previous_pose.roll = 0.0;
    previous_pose.pitch = 0.0;
    previous_pose.yaw = 0.0;

    ndt_pose.x = 0.0;
    ndt_pose.y = 0.0;
    ndt_pose.z = 0.0;
    ndt_pose.roll = 0.0;
    ndt_pose.pitch = 0.0;
    ndt_pose.yaw = 0.0;

    current_pose.x = 0.0;
    current_pose.y = 0.0;
    current_pose.z = 0.0;
    current_pose.roll = 0.0;
    current_pose.pitch = 0.0;
    current_pose.yaw = 0.0;

    guess_pose.x = 0.0;
    guess_pose.y = 0.0;
    guess_pose.z = 0.0;
    guess_pose.roll = 0.0;
    guess_pose.pitch = 0.0;
    guess_pose.yaw = 0.0;

    added_pose.x = 0.0;
    added_pose.y = 0.0;
]]>
            </text>
        </set>
        <set lineCount="27" fingerprint="d368973f62b2d55b6482e7c239f2d037">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="664" endLineNumber="700"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1346" endLineNumber="1382"/>
            <text>
<![CDATA[        camerapoints=camerapoints*invR.t()+cv::Mat::ones(m,1,CV_64F)*invT.t();
        cv::vector<cv::Point2d> planepoints;
        planepoints.resize(m);
        for(j=0;j<m;j++)
        {
            double tmpx=camerapoints.at<double>(j,0)/camerapoints.at<double>(j,2);
            double tmpy=camerapoints.at<double>(j,1)/camerapoints.at<double>(j,2);
            double r2=tmpx*tmpx+tmpy*tmpy;
            double tmpdist=1+distcoeff.at<double>(0)*r2+distcoeff.at<double>(1)*r2*r2+distcoeff.at<double>(4)*r2*r2*r2;
            planepoints[j].x=tmpx*tmpdist+2*distcoeff.at<double>(2)*tmpx*tmpy+distcoeff.at<double>(3)*(r2+2*tmpx*tmpx);
            planepoints[j].y=tmpy*tmpdist+distcoeff.at<double>(2)*(r2+2*tmpy*tmpy)+2*distcoeff.at<double>(3)*tmpx*tmpy;
            planepoints[j].x=cameramat.at<double>(0,0)*planepoints[j].x+cameramat.at<double>(0,2);
            planepoints[j].y=cameramat.at<double>(1,1)*planepoints[j].y+cameramat.at<double>(1,2);
            cv::circle(tmpimage,planepoints[j],2,cv::Scalar(0,0,255));
        }
        if(tmpimage.type()==CV_8UC3)
        {
            QImage img(tmpimage.data, tmpimage.cols, tmpimage.rows, tmpimage.step, QImage::Format_RGB888);
            img=img.rgbSwapped();
            QScrollArea * scrollarea=(QScrollArea *)(calibimagesshow->widget(i));
            QLabel * tmpcalibimageshow=(QLabel *)(scrollarea->widget());
            tmpcalibimageshow->setPixmap(QPixmap::fromImage(img));
        }
        else if(tmpimage.type()==CV_8UC1)
        {
            QImage img(tmpimage.data, tmpimage.cols, tmpimage.rows, tmpimage.step, QImage::Format_Indexed8);
            img.setColorTable(colorTable);
            QScrollArea * scrollarea=(QScrollArea *)(calibimagesshow->widget(i));
            QLabel * tmpcalibimageshow=(QLabel *)(scrollarea->widget());
            tmpcalibimageshow->setPixmap(QPixmap::fromImage(img));
        }
    }
}

bool CalibrateCameraLidarChessboardBase::refreshLidar()
{
    lidartab->setTabText(0,lidartimestamp.toString("HH:mm:ss:zzz"));
]]>
            </text>
        </set>
        <set lineCount="27" fingerprint="c7b9244df28fd0dda7b7fc3737ff0f98">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="566" endLineNumber="595"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="341" endLineNumber="370"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="503" endLineNumber="532"/>
            <text>
<![CDATA[  int did;
  double dist;
  int pid;
  double dir;
  int apara;
  double r;
  double slope;
  double cant;
  double lw;
  double rw;
};

std::vector<DTLane> read_dtlane(const char *filename)
{
  int max_id;
  Tbl tbl = read_csv(filename, &max_id);
  size_t i, n = tbl.size();
  std::vector<DTLane> ret(max_id + 1);
  for (i=0; i<n; i++) {
    int id = std::stoi(tbl[i][0]);
    ret[id].did = id;
    ret[id].dist = std::stod(tbl[i][1]);
    ret[id].pid = std::stoi(tbl[i][2]);
    ret[id].dir = std::stod(tbl[i][3]);
    ret[id].apara = std::stoi(tbl[i][4]);
    ret[id].r = std::stod(tbl[i][5]);
    ret[id].slope = std::stod(tbl[i][6]);
    ret[id].cant = std::stod(tbl[i][7]);
    ret[id].lw = std::stod(tbl[i][8]);
    ret[id].rw = std::stod(tbl[i][9]);
]]>
            </text>
        </set>
        <set lineCount="27" fingerprint="02472b492373a6ba610a46b4795f247a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1663" endLineNumber="1701"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1748" endLineNumber="1786"/>
            <text>
<![CDATA[     << obj.aid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::RoadEdge& obj)
{
  os << obj.id << ","
     << obj.lid << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Gutter& obj)
{
  os << obj.id << ","
     << obj.aid << ","
     << obj.type << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::Curb& obj)
{
  os << obj.id << ","
     << obj.lid << ","
     << obj.height << ","
     << obj.width << ","
     << obj.dir << ","
     << obj.linkid;
  return os;
}

std::ostream& operator<<(std::ostream& os, const vector_map::WhiteLine& obj)
{
  os << obj.id << ","
     << obj.lid << ","
     << obj.width << ","
     << obj.color << ","
     << obj.type << ","
]]>
            </text>
        </set>
        <set lineCount="27" fingerprint="57f309679d8baa982e8479939ceca942">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="217" endLineNumber="262"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="748" endLineNumber="792"/>
            <text>
<![CDATA[    if (isValidMarker(marker))
      marker_array.markers.push_back(marker);
    else
      ROS_ERROR_STREAM("[createCrossRoadMarkerArray] failed createAreaMarker: " << area);
  }
  return marker_array;
}

visualization_msgs::MarkerArray createSideStripMarkerArray(const VectorMap& vmap, Color color)
{
  visualization_msgs::MarkerArray marker_array;
  int id = 0;
  for (const auto& side_strip : vmap.findByFilter([](const SideStrip& side_strip){return true;}))
  {
    if (side_strip.lid == 0)
    {
      ROS_ERROR_STREAM("[createSideStripMarkerArray] invalid side_strip: " << side_strip);
      continue;
    }

    Line line = vmap.findByKey(Key<Line>(side_strip.lid));
    if (line.lid == 0)
    {
      ROS_ERROR_STREAM("[createSideStripMarkerArray] invalid line: " << line);
      continue;
    }

    if (line.blid == 0) // if beginning line
    {
      visualization_msgs::Marker marker = createLinkedLineMarker("side_strip", id++, color, vmap, line);
      if (isValidMarker(marker))
        marker_array.markers.push_back(marker);
      else
        ROS_ERROR_STREAM("[createSideStripMarkerArray] failed createLinkedLineMarker: " << line);
    }
  }
  return marker_array;
}

visualization_msgs::MarkerArray createCurveMirrorMarkerArray(const VectorMap& vmap, Color mirror_color,
                                                             Color pole_color)
{
  visualization_msgs::MarkerArray marker_array;
  int id = 0;
  for (const auto& curve_mirror : vmap.findByFilter([](const CurveMirror& curve_mirror){return true;}))
]]>
            </text>
        </set>
        <set lineCount="27" fingerprint="9619df1bdafbd81cf066241e40345796">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="81" endLineNumber="118"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="441" endLineNumber="478"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="307" endLineNumber="346"/>
            <text>
<![CDATA[    ret[id].type = std::stoi(tbl[i][3]);
    ret[id].linkid = std::stoi(tbl[i][4]);
  }
  return ret;
}

/* for streetlight.csv */
struct StreetLight {
  int id;
  int lid;
  int plid;
  int linkid;
};

std::vector<StreetLight> read_streetlight(const char *filename)
{
  int max_id;
  Tbl tbl = read_csv(filename, &max_id);
  size_t i, n = tbl.size();
  std::vector<StreetLight> ret(max_id + 1);
  for (i=0; i<n; i++) {
    int id = std::stoi(tbl[i][0]);
    ret[id].id = id;
    ret[id].lid = std::stoi(tbl[i][1]);
    ret[id].plid = std::stoi(tbl[i][2]);
    ret[id].linkid = std::stoi(tbl[i][3]);
  }
  return ret;
}


/* basic class */
/* for point.csv */
struct PointClass {
  int pid;
  double b;
  double l;
  double h;
  double bx;
  double ly;
]]>
            </text>
        </set>
        <set lineCount="27" fingerprint="03f43e410f41cba8c26df49dbb612a29">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\registration.h" startLineNumber="282" endLineNumber="368"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\registration\include\fast_pcl\registration\default_convergence_criteria.h" startLineNumber="127" endLineNumber="194"/>
            <text>
<![CDATA[        inline int
        getMaximumIterationsSimilarTransforms () const { return (max_iterations_similar_transforms_); }

        /** \brief Set the maximum number of iterations the internal optimization should run for.
          * \param[in] nr_iterations the maximum number of iterations the internal optimization should run for
          */
        inline void
        setMaximumIterations (const int nr_iterations) { max_iterations_ = nr_iterations; }

        /** \brief Get the maximum number of iterations the internal optimization should run for, as set by the user. */
        inline int
        getMaximumIterations () const { return (max_iterations_); }

        /** \brief Specifies if the registration fails or converges when the maximum number of iterations is reached.
          * \param[in] failure_after_max_iter If true, the registration fails. If false, the registration is assumed to have converged.
          */
        inline void
        setFailureAfterMaximumIterations (const bool failure_after_max_iter) { failure_after_max_iter_ = failure_after_max_iter; }

        /** \brief Get whether the registration will fail or converge when the maximum number of iterations is reached. */
        inline bool
        getFailureAfterMaximumIterations () const { return (failure_after_max_iter_); }

        /** \brief Set the rotation threshold cosine angle (maximum allowable difference between two consecutive transformations) in order for an optimization to be considered as having converged to the final solution.
          * \param[in] threshold the rotation threshold in order for an optimization to be considered as having converged to the final solution.
          */
        inline void
        setRotationThreshold (const double threshold) { rotation_threshold_ = threshold; }

        /** \brief Get the rotation threshold cosine angle (maximum allowable difference between two consecutive transformations) as set by the user.
          */
        inline double
        getRotationThreshold () const { return (rotation_threshold_); }

        /** \brief Set the translation threshold (maximum allowable difference between two consecutive transformations) in order for an optimization to be considered as having converged to the final solution.
          * \param[in] threshold the translation threshold in order for an optimization to be considered as having converged to the final solution.
          */
        inline void
        setTranslationThreshold (const double threshold) { translation_threshold_ = threshold; }

        /** \brief Get the rotation threshold cosine angle (maximum allowable difference between two consecutive transformations) as set by the user.
          */
        inline double
        getTranslationThreshold () const { return (translation_threshold_); }

        /** \brief Set the relative MSE between two consecutive sets of correspondences.
          * \param[in] mse_relative the relative MSE threshold
          */
        inline void
        setRelativeMSE (const double mse_relative) { mse_threshold_relative_ = mse_relative; }

        /** \brief Get the relative MSE between two consecutive sets of correspondences. */
        inline double
        getRelativeMSE () const { return (mse_threshold_relative_); }

        /** \brief Set the absolute MSE between two consecutive sets of correspondences.
          * \param[in] mse_absolute the relative MSE threshold
          */
        inline void
        setAbsoluteMSE (const double mse_absolute) { mse_threshold_absolute_ = mse_absolute; }

        /** \brief Get the absolute MSE between two consecutive sets of correspondences. */
        inline double
        getAbsoluteMSE () const { return (mse_threshold_absolute_); }


        /** \brief Check if convergence has been reached. */
        virtual bool
]]>
            </text>
        </set>
        <set lineCount="27" fingerprint="cfcd208495d565ef66e7dff9f98764da">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="585" endLineNumber="611"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="584" endLineNumber="610"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="583" endLineNumber="609"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="582" endLineNumber="608"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="581" endLineNumber="607"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="580" endLineNumber="606"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="942" endLineNumber="968"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="941" endLineNumber="967"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="940" endLineNumber="966"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="939" endLineNumber="965"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="938" endLineNumber="964"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="937" endLineNumber="963"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="552" endLineNumber="578"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="551" endLineNumber="577"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="550" endLineNumber="576"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="549" endLineNumber="575"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="548" endLineNumber="574"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="547" endLineNumber="573"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="412" endLineNumber="438"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="411" endLineNumber="437"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="410" endLineNumber="436"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="409" endLineNumber="435"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="408" endLineNumber="434"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="407" endLineNumber="433"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="478" endLineNumber="504"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="477" endLineNumber="503"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="476" endLineNumber="502"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="475" endLineNumber="501"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="474" endLineNumber="500"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="473" endLineNumber="499"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="148" endLineNumber="175"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="147" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="146" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="145" endLineNumber="171"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="144" endLineNumber="170"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="143" endLineNumber="169"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="142" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="141" endLineNumber="167"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="140" endLineNumber="166"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="139" endLineNumber="165"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="138" endLineNumber="164"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="137" endLineNumber="163"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="136" endLineNumber="162"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="135" endLineNumber="161"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="134" endLineNumber="160"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="133" endLineNumber="159"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="132" endLineNumber="158"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="131" endLineNumber="157"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="130" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="129" endLineNumber="155"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="128" endLineNumber="154"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="127" endLineNumber="153"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="126" endLineNumber="152"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="125" endLineNumber="151"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="124" endLineNumber="150"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="123" endLineNumber="149"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="122" endLineNumber="148"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="120" endLineNumber="147"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="139" endLineNumber="311"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="134" endLineNumber="306"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="128" endLineNumber="298"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="123" endLineNumber="291"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="118" endLineNumber="285"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="109" endLineNumber="278"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="99" endLineNumber="271"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="138" endLineNumber="314"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="133" endLineNumber="309"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="127" endLineNumber="301"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="122" endLineNumber="294"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="117" endLineNumber="288"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="108" endLineNumber="281"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="98" endLineNumber="274"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="91" endLineNumber="268"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="85" endLineNumber="257"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="80" endLineNumber="246"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="75" endLineNumber="235"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="70" endLineNumber="226"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="65" endLineNumber="219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="59" endLineNumber="212"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="54" endLineNumber="207"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="48" endLineNumber="202"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="42" endLineNumber="197"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="36" endLineNumber="192"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="500" endLineNumber="526"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="499" endLineNumber="525"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="498" endLineNumber="524"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="497" endLineNumber="523"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="496" endLineNumber="522"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="495" endLineNumber="521"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="153" endLineNumber="183"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="152" endLineNumber="182"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="151" endLineNumber="181"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="150" endLineNumber="180"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="149" endLineNumber="179"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="148" endLineNumber="178"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="370" endLineNumber="396"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="369" endLineNumber="395"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="368" endLineNumber="394"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="367" endLineNumber="393"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="366" endLineNumber="392"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="365" endLineNumber="391"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="333" endLineNumber="359"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="332" endLineNumber="358"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="331" endLineNumber="357"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="330" endLineNumber="356"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="329" endLineNumber="355"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="328" endLineNumber="354"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="113" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="112" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="111" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="110" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="109" endLineNumber="135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="108" endLineNumber="134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="106" endLineNumber="133"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="105" endLineNumber="132"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="104" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="103" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="102" endLineNumber="129"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="101" endLineNumber="128"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="100" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="99" endLineNumber="126"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="98" endLineNumber="125"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="97" endLineNumber="124"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="96" endLineNumber="123"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="95" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="94" endLineNumber="121"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="93" endLineNumber="120"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="92" endLineNumber="119"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="91" endLineNumber="118"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="90" endLineNumber="117"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="89" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="88" endLineNumber="115"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="87" endLineNumber="114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="86" endLineNumber="113"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="85" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="84" endLineNumber="111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="83" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="82" endLineNumber="109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="81" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="80" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="79" endLineNumber="105"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="78" endLineNumber="104"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="77" endLineNumber="103"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="76" endLineNumber="102"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="75" endLineNumber="101"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1018" endLineNumber="1044"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1017" endLineNumber="1043"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1016" endLineNumber="1042"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1015" endLineNumber="1041"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1014" endLineNumber="1040"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1013" endLineNumber="1039"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="1059" endLineNumber="1111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="445" endLineNumber="471"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="444" endLineNumber="470"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="443" endLineNumber="469"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="442" endLineNumber="468"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="441" endLineNumber="467"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="440" endLineNumber="466"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="407" endLineNumber="437"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="406" endLineNumber="436"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="405" endLineNumber="435"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="404" endLineNumber="434"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="400" endLineNumber="430"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="399" endLineNumber="429"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="398" endLineNumber="428"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="397" endLineNumber="427"/>
            <text>
<![CDATA[  previous_pose.x = 0.0;
  previous_pose.y = 0.0;
  previous_pose.z = 0.0;
  previous_pose.roll = 0.0;
  previous_pose.pitch = 0.0;
  previous_pose.yaw = 0.0;

  ndt_pose.x = 0.0;
  ndt_pose.y = 0.0;
  ndt_pose.z = 0.0;
  ndt_pose.roll = 0.0;
  ndt_pose.pitch = 0.0;
  ndt_pose.yaw = 0.0;

  current_pose.x = 0.0;
  current_pose.y = 0.0;
  current_pose.z = 0.0;
  current_pose.roll = 0.0;
  current_pose.pitch = 0.0;
  current_pose.yaw = 0.0;

  guess_pose.x = 0.0;
  guess_pose.y = 0.0;
  guess_pose.z = 0.0;
  guess_pose.roll = 0.0;
  guess_pose.pitch = 0.0;
  guess_pose.yaw = 0.0;

  added_pose.x = 0.0;
  added_pose.y = 0.0;
  added_pose.z = 0.0;
]]>
            </text>
        </set>
        <set lineCount="28" fingerprint="0ef2f1c9ce403518bccad3d4453488a8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="288" endLineNumber="332"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="211" endLineNumber="254"/>
            <text>
<![CDATA[      marker = createAreaMarker("gutter", id++, grating_color, vmap, area);
      break;
    default:
      ROS_ERROR_STREAM("[createGutterMarkerArray] unknown gutter.type: " << gutter);
      continue;
    }
    if (isValidMarker(marker))
      marker_array.markers.push_back(marker);
    else
      ROS_ERROR_STREAM("[createGutterMarkerArray] failed createAreaMarker: " << area);
  }
  return marker_array;
}

visualization_msgs::MarkerArray createCurbMarkerArray(const VectorMap& vmap, Color color)
{
  visualization_msgs::MarkerArray marker_array;
  int id = 0;
  for (const auto& curb : vmap.findByFilter([](const Curb& curb){return true;}))
  {
    if (curb.lid == 0)
    {
      ROS_ERROR_STREAM("[createCurbMarkerArray] invalid curb: " << curb);
      continue;
    }

    Line line = vmap.findByKey(Key<Line>(curb.lid));
    if (line.lid == 0)
    {
      ROS_ERROR_STREAM("[createCurbMarkerArray] invalid line: " << line);
      continue;
    }

    if (line.blid == 0) // if beginning line
    {
      visualization_msgs::Marker marker = createLinkedLineMarker("curb", id++, color, vmap, line);
      // XXX: The visualization_msgs::Marker::LINE_STRIP is difficult to deal with curb.width and curb.height.
      if (isValidMarker(marker))
        marker_array.markers.push_back(marker);
      else
        ROS_ERROR_STREAM("[createCurbMarkerArray] failed createLinkedLineMarker: " << line);
    }
  }
  return marker_array;
]]>
            </text>
        </set>
        <set lineCount="28" fingerprint="8138628686de35ab15f7e64974cfdc2b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\libvelocity_set.h" startLineNumber="64" endLineNumber="114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\libvelocity_set.h" startLineNumber="67" endLineNumber="117"/>
            <text>
<![CDATA[  int getSize() const
  {
    return detection_points_.size();
  }
  std::vector<int> getBDID() const
  {
    return bdID_;
  }
  CrossWalkPoints getDetectionPoints(const int &id) const
  {
    return detection_points_.at(id);
  }
  void setDetectionWaypoint(const int &num)
  {
    detection_waypoint_ = num;
  }
  int getDetectionWaypoint() const
  {
    return detection_waypoint_;
  }
  void setDetectionCrossWalkID(const int &id)
  {
    detection_crosswalk_id_ = id;
  }
  int getDetectionCrossWalkID() const
  {
    return detection_crosswalk_id_;
  }

  CrossWalk()
    : detection_waypoint_(-1)
    , detection_crosswalk_id_(-1)
    , loaded_crosswalk(false)
    , loaded_area(false)
    , loaded_line(false)
    , loaded_point(false)
    , loaded_all(false)
    , set_points(false)
  {
  }
};

//////////////////////////////////////
// for visualization of obstacles
//////////////////////////////////////
class ObstaclePoints
{
private:
  std::vector<geometry_msgs::Point> stop_points_;
  std::vector<geometry_msgs::Point> decelerate_points_;
  geometry_msgs::Point previous_detection_;
]]>
            </text>
        </set>
        <set lineCount="28" fingerprint="19f0626335a67343721695fe94dc77c9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="297" endLineNumber="337"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\get_boxes.cpp" startLineNumber="291" endLineNumber="331"/>
            <text>
<![CDATA[	res = cuMemFree(ac_score_dev);
	if(res != CUDA_SUCCESS) {
		printf("cuMemFree(ac_score_dev) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
	}

	res = cuMemFree(score_dev);
	if(res != CUDA_SUCCESS) {
		printf("cuMemFree(score_dev) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
	}

	res = cuMemFree(ssize_dev);
	if(res != CUDA_SUCCESS) {
		printf("cuMemFree(ssize_dev) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
	}

	res = cuMemFree(size_score_dev);
	if(res != CUDA_SUCCESS) {
		printf("cuMemFree(size_score_dev) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
	}

	res = cuMemFree(RY_dev);
	if(res != CUDA_SUCCESS) {
		printf("cuMemFree(RY_dev) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
	}

	res = cuMemFree(RX_dev);
	if(res != CUDA_SUCCESS) {
		printf("cuMemFree(RX_dev) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
	}

	/* free CPU memory */
	res = cuMemFreeHost(RY_array);
	if(res != CUDA_SUCCESS) {
		printf("cuMemFreeHost(RY_array) failed: res = %s\n", cuda_response_to_string(res));
		exit(1);
]]>
            </text>
        </set>
        <set lineCount="28" fingerprint="a03e150eec242b5c7a088384605711b8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\copy.cpp" startLineNumber="313" endLineNumber="349"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\copy.cpp" startLineNumber="286" endLineNumber="322"/>
            <text>
<![CDATA[void obj_person__image_obj_callback(const cv_tracker::image_obj::ConstPtr& image_obj_msg) {
    if (obj_person__image_obj_flag) {
        obj_person__image_obj_flag = false;
        obj_car__image_obj_flag = false;
        points_image_flag = false;
        vscan_image_flag = false;
        return;
    }

    obj_person__image_obj_flag = true;
    if ((points_image_flag || vscan_image_flag) && obj_car__image_obj_flag) {
        ROS_INFO("catch publish request");
        if(!publish()) {
            /* when to publish is failure, republish */
            struct timespec sleep_time;
            sleep_time.tv_sec = 0;
            sleep_time.tv_nsec = 200000000; //5Hz
            while (!publish() || ros::ok())
                nanosleep(&sleep_time, NULL);
        }
        obj_person__image_obj_flag = false;
        obj_car__image_obj_flag = false;
        points_image_flag = false;
        vscan_image_flag = false;
    }
}

void obj_car__image_obj_callback(const cv_tracker::image_obj::ConstPtr& image_obj_msg) {
    if (obj_car__image_obj_flag) {
        obj_person__image_obj_flag = false;
        obj_car__image_obj_flag = false;
        points_image_flag = false;
        vscan_image_flag = false;
        return;
    }

    obj_car__image_obj_flag = true;
]]>
            </text>
        </set>
        <set lineCount="28" fingerprint="143cdcd987de32d8e80fc7b94df8e6f6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="305" endLineNumber="345"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="367" endLineNumber="405"/>
            <text>
<![CDATA[    ret[id].ref = std::stod(tbl[i][6]);
    ret[id].mcode1 = std::stoi(tbl[i][7]);
    ret[id].mcode2 = std::stod(tbl[i][8]);
    ret[id].mcode3 = std::stod(tbl[i][9]);
  }
  return ret;
}

/* for vector.csv */
struct VectorClass {
  int vid;
  int pid;
  double hang;
  double vang;
};

std::vector<VectorClass> read_vectorclass(const char *filename)
{
  int max_id;
  Tbl tbl = read_csv(filename, &max_id);
  size_t i, n = tbl.size();
  std::vector<VectorClass> ret(max_id + 1);
  for (i=0; i<n; i++) {
    int id = std::stoi(tbl[i][0]);
    ret[id].vid = id;
    ret[id].pid = std::stoi(tbl[i][1]);
    ret[id].hang = std::stod(tbl[i][2]);
    ret[id].vang = std::stod(tbl[i][3]);
  }
  return ret;
}

/* for line.csv */
struct LineClass {
  int lid;
  int bpid;
  int fpid;
  int blid;
  int flid;
]]>
            </text>
        </set>
        <set lineCount="29" fingerprint="17e91f99612960160a5b70aa243ceee0">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_viewer\points_image_viewer.cpp" startLineNumber="52" endLineNumber="88"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_viewer\vscan_image_viewer.cpp" startLineNumber="51" endLineNumber="87"/>
            <text>
<![CDATA[static void show(void)
{
	if(!existImage || !existPoints){
		return;
	}
	const auto& encoding = sensor_msgs::image_encodings::BGR8;
	cv_bridge::CvImagePtr cv_image = cv_bridge::toCvCopy(image_msg, encoding);
	IplImage frame = cv_image->image;

	cv::Mat matImage(&frame, false);

	int w = matImage.size().width;
	int h = matImage.size().height;
	int n = w * h;

	float min_d, max_d;
	min_d = max_d = points_msg->distance[0];
	for(int i=1; i<n; i++){
		float di = points_msg->distance[i];
		max_d = di > max_d ? di : max_d;
		min_d = di < min_d ? di : min_d;
	}
	float wid_d = max_d - min_d;

	for(int y=0; y<h; y++){
		for(int x=0; x<w; x++){
			int j = y * w + x;
			float distance = points_msg->distance[j];
			if(distance == 0){
				continue;
			}
			int colorid= wid_d ? ( (distance - min_d) * 255 / wid_d ) : 128;
			cv::Vec3b color=colormap.at<cv::Vec3b>(colorid);
			int g = color[1];
			int b = color[2];
			int r = color[0];
			cvRectangle(&frame, cvPoint(x, y), cvPoint(x+1, y+1), CV_RGB(r, g, b));
]]>
            </text>
        </set>
        <set lineCount="29" fingerprint="76df2ab9f06c9ee10ebf6e11556ea16b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\kf_lidar_track\kf_lidar_track.cpp" startLineNumber="20" endLineNumber="66"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\lidar_tracker\nodes\pf_lidar_track\pf_lidar_track.cpp" startLineNumber="20" endLineNumber="66"/>
            <text>
<![CDATA[class PfTrack
{
public:
	PfTrack();

private:

	ros::NodeHandle node_handle_;
	ros::Subscriber cloud_clusters_sub_;
	ros::Publisher detected_objects_pub_;

	void CloudClustersCallback(const lidar_tracker::CloudClusterArray::Ptr& in_cloud_cluster_array_ptr);
};

PfTrack::PfTrack() :
		node_handle_("~")
{
	cloud_clusters_sub_ = node_handle_.subscribe("/cloud_clusters_class", 10, &PfTrack::CloudClustersCallback, this);
	detected_objects_pub_ = node_handle_.advertise<lidar_tracker::DetectedObjectArray>( "/detected_objects", 10);
}

void PfTrack::CloudClustersCallback(const lidar_tracker::CloudClusterArray::Ptr& in_cloud_cluster_array_ptr)
{
	lidar_tracker::DetectedObjectArray detected_objects;
	detected_objects.header = in_cloud_cluster_array_ptr->header;
	for (auto i = in_cloud_cluster_array_ptr->clusters.begin(); i != in_cloud_cluster_array_ptr->clusters.end(); i++)
	{
		lidar_tracker::DetectedObject detected_object;
		detected_object.header 		= i->header;
		detected_object.id 			= i->id;
		detected_object.label 		= i->label;
		detected_object.dimensions 	= i->bounding_box.dimensions;
		detected_object.pose 		= i->bounding_box.pose;

		detected_objects.objects.push_back(detected_object);
	}
	detected_objects_pub_.publish(detected_objects);
}

int main(int argc, char **argv)
{

	ros::init(argc, argv, "pf_lidar_detect");
	PfTrack node;
	ros::spin();

	return 0;
]]>
            </text>
        </set>
        <set lineCount="29" fingerprint="8465728e217a335730a5f8e99b8907da">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="259" endLineNumber="331"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\time_monitor.cpp" startLineNumber="254" endLineNumber="325"/>
            <text>
<![CDATA[void TimeManager::image_raw_callback(const sensor_msgs::Image::ConstPtr& image_raw_msg) {
//    ROS_INFO("image_raw: \t\t\t%d.%d", image_raw_msg->header.stamp.sec, image_raw_msg->header.stamp.nsec);
    image_raw_.push_front(image_raw_msg->header.stamp, get_walltime_now());
}

void TimeManager::points_raw_callback(const sensor_msgs::PointCloud2::ConstPtr& points_raw_msg) {
//    ROS_INFO("points_raw: \t\t\t%d.%d", points_raw_msg->header.stamp.sec, points_raw_msg->header.stamp.nsec);
    points_raw_.push_front(points_raw_msg->header.stamp, get_walltime_now());
}

void TimeManager::points_image_callback(const points2image::PointsImage::ConstPtr& points_image_msg) {
//    ROS_INFO("vscan_image: \t\t\t%d.%d", vscan_image_msg->header.stamp.sec, vscan_image_msg->header.stamp.nsec);
    points_image_.push_front(points_image_msg->header.stamp, get_walltime_now());
}

void TimeManager::vscan_points_callback(const sensor_msgs::PointCloud2::ConstPtr& vscan_points_msg) {
//    ROS_INFO("vscan_points: \t\t\t%d.%d", vscan_points_msg->header.stamp.sec, vscan_points_msg->header.stamp.nsec);
    vscan_points_.push_front(vscan_points_msg->header.stamp, get_walltime_now());
}

void TimeManager::vscan_image_callback(const points2image::PointsImage::ConstPtr& vscan_image_msg) {
//    ROS_INFO("vscan_image: \t\t\t%d.%d", vscan_image_msg->header.stamp.sec, vscan_image_msg->header.stamp.nsec);
    vscan_image_.push_front(vscan_image_msg->header.stamp, get_walltime_now());
}

void TimeManager::image_obj_callback(const cv_tracker::image_obj::ConstPtr& image_obj_msg) {
//    ROS_INFO("image_obj: \t\t\t%d.%d", image_obj_msg->header.stamp.sec, image_obj_msg->header.stamp.nsec);
    image_obj_.push_front(image_obj_msg->header.stamp, get_walltime_now());
}

void TimeManager::image_obj_ranged_callback(const cv_tracker::image_obj_ranged::ConstPtr& image_obj_ranged_msg) {
//    ROS_INFO("image_obj_ranged: \t\t%d.%d", image_obj_ranged_msg->header.stamp.sec, image_obj_ranged_msg->header.stamp.nsec);
    image_obj_ranged_.push_front(image_obj_ranged_msg->header.stamp, get_walltime_now());
}

void TimeManager::image_obj_tracked_callback(const cv_tracker::image_obj_tracked::ConstPtr& image_obj_tracked_msg) {
//    ROS_INFO("image_obj_tracked: \t\t%d.%d", image_obj_tracked_msg->header.stamp.sec, image_obj_tracked_msg->header.stamp.nsec);
    image_obj_tracked_.push_front(image_obj_tracked_msg->header.stamp, get_walltime_now());
}

void TimeManager::current_pose_callback(const geometry_msgs::PoseStamped::ConstPtr& current_pose_msg) {
//    ROS_INFO("current_pose: \t\t\t%d.%d", current_pose_msg->header.stamp.sec, current_pose_msg->header.stamp.nsec);
    current_pose_.push_front(current_pose_msg->header.stamp, get_walltime_now());
}

void TimeManager::obj_label_callback(const cv_tracker::obj_label::ConstPtr& obj_label_msg) {
//    ROS_INFO("obj_label: \t\t\t%d.%d", obj_label_msg->header.stamp.sec, obj_label_msg->header.stamp.nsec);
    obj_label_.push_front(obj_label_msg->header.stamp, get_walltime_now());
}

void TimeManager::cluster_centroids_callback(const lidar_tracker::centroids::ConstPtr& cluster_centroids_msg) {
//    ROS_INFO("cluster_centroids: \t\t%d.%d", cluster_centroids_msg->header.stamp.sec, cluster_centroids_msg->header.stamp.nsec);
    cluster_centroids_.push_front(cluster_centroids_msg->header.stamp, get_walltime_now());
}

/* sync */
void TimeManager::sync_image_obj_ranged_callback(const cv_tracker::image_obj::ConstPtr& sync_image_obj_msg) {
//    ROS_INFO("sync_image_obj_ranged: \t\t%d.%d", sync_image_obj_msg->header.stamp.sec, sync_image_obj_msg->header.stamp.nsec);
    sync_image_obj_ranged_.push_front(sync_image_obj_msg->header.stamp, get_walltime_now());
}

void TimeManager::sync_image_obj_tracked_callback(const cv_tracker::image_obj_ranged::ConstPtr& sync_image_obj_ranged_msg) {
//    ROS_INFO("sync_image_obj_tracked: \t%d.%d", sync_image_obj_ranged_msg->header.stamp.sec, sync_image_obj_ranged_msg->header.stamp.nsec);
    sync_image_obj_tracked_.push_front(sync_image_obj_ranged_msg->header.stamp, get_walltime_now());
}

void TimeManager::sync_obj_label_callback(const cv_tracker::image_obj_tracked::ConstPtr& sync_image_obj_tracked_msg) {
//    ROS_INFO("sync_obj_label: \t\t%d.%d", sync_image_obj_tracked_msg->header.stamp.sec, sync_image_obj_tracked_msg->header.stamp.nsec);
    sync_obj_label_.push_front(sync_image_obj_tracked_msg->header.stamp, get_walltime_now());
}

void TimeManager::sync_obj_pose_callback(const cv_tracker::obj_label::ConstPtr& sync_obj_label_msg) {
]]>
            </text>
        </set>
        <set lineCount="30" fingerprint="abc5f4b91f2dafa7b02eba62a88e26b9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\nms.cpp" startLineNumber="115" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\nms.cpp" startLineNumber="122" endLineNumber="179"/>
            <text>
<![CDATA[			if(w>0&&h>0)
			{
				FLOAT o = w*h/R_AREA;			//compute overlap
				if(o>overlap)
				{
					checked[B]=-1;	//suppress
					cnum--;
				}
			}
			//full over-lap
			else if(Ay1<P[0]&&Ax1<P[1]&&Ay2>P[2]&&Ax2>P[3])
			{
				checked[B]=-1;	//suppress
				cnum--;
			}
			else if(Ay1>P[0]&&Ax1>P[1]&&Ay2<P[2]&&Ax2<P[3])
			{
				checked[B]=-1;	//suppress
				cnum--;
			}
		}

		//decide next current
		for(int kk=cur;kk<NUM;kk++)
		{
			if(checked[sorted_orders[kk]]==0)
			{
				cur=kk;
				break;
			}
		}

	}

	//get result (rectangle-box coordinate)
	FLOAT *Out = (FLOAT*)calloc(pi_num*GL,sizeof(FLOAT));
	int count =0,ii=0;
	FLOAT *Pout =Out;

	while(count<pi_num)
	{
		if(checked[ii]==1)
		{
			P = boxes+GL*ii;
			memcpy(Pout, P,sizeof(FLOAT)*GL);
			Pout+=GL;
			count++;
		}
		ii++;
	}
	//release
	free(area);
	free(scores);
	free(sorted_orders);
	free(checked);

	//Output
	*num = pi_num;
]]>
            </text>
        </set>
        <set lineCount="30" fingerprint="a6b1986a29983f38e1e518732dd927d4">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="159" endLineNumber="193"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\fconvsMT.cpp" startLineNumber="61" endLineNumber="95"/>
            <text>
<![CDATA[					switch(B_dims[0])
					{
					case 20: val += A_off[19] * B_off[19];
					case 19: val += A_off[18] * B_off[18];
					case 18: val += A_off[17] * B_off[17];
					case 17: val += A_off[16] * B_off[16];
					case 16: val += A_off[15] * B_off[15];
					case 15: val += A_off[14] * B_off[14];
					case 14: val += A_off[13] * B_off[13];
					case 13: val += A_off[12] * B_off[12];
					case 12: val += A_off[11] * B_off[11];
					case 11: val += A_off[10] * B_off[10];
					case 10: val += A_off[9] * B_off[9];
					case 9: val += A_off[8] * B_off[8];
					case 8: val += A_off[7] * B_off[7];
					case 7: val += A_off[6] * B_off[6];
					case 6: val += A_off[5] * B_off[5];
					case 5: val += A_off[4] * B_off[4];
					case 4: val += A_off[3] * B_off[3];
					case 3: val += A_off[2] * B_off[2];
					case 2: val += A_off[1] * B_off[1];
					case 1: val += A_off[0] * B_off[0];
						break;
					default:
						FLOAT *A_temp = A_off;
						FLOAT *B_temp = B_off;
						for (int yp = 0; yp < B_dims[0]; yp++)
						{
							val += *(A_temp++) * *(B_temp++);
						}
					}
					A_off+=A_dims[0];
					B_off+=B_dims[0];
				}
				*(dst++) += val;
]]>
            </text>
        </set>
        <set lineCount="30" fingerprint="2c00993e03cf0be04196cafea57401df">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="862" endLineNumber="908"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="677" endLineNumber="723"/>
            <text>
<![CDATA[  private_nh.getParam("use_gnss", _use_gnss);
  private_nh.getParam("queue_size", _queue_size);
  private_nh.getParam("offset", _offset);

  if (nh.getParam("localizer", _localizer) == false)
  {
    std::cout << "localizer is not set." << std::endl;
    return 1;
  }

  if (nh.getParam("tf_x", _tf_x) == false)
  {
    std::cout << "tf_x is not set." << std::endl;
    return 1;
  }
  if (nh.getParam("tf_y", _tf_y) == false)
  {
    std::cout << "tf_y is not set." << std::endl;
    return 1;
  }
  if (nh.getParam("tf_z", _tf_z) == false)
  {
    std::cout << "tf_z is not set." << std::endl;
    return 1;
  }
  if (nh.getParam("tf_roll", _tf_roll) == false)
  {
    std::cout << "tf_roll is not set." << std::endl;
    return 1;
  }
  if (nh.getParam("tf_pitch", _tf_pitch) == false)
  {
    std::cout << "tf_pitch is not set." << std::endl;
    return 1;
  }
  if (nh.getParam("tf_yaw", _tf_yaw) == false)
  {
    std::cout << "tf_yaw is not set." << std::endl;
    return 1;
  }

  std::cout << "-----------------------------------------------------------------" << std::endl;
  std::cout << "Log file: " << filename << std::endl;
  std::cout << "use_gnss: " << _use_gnss << std::endl;
  std::cout << "queue_size: " << _queue_size << std::endl;
  std::cout << "offset: " << _offset << std::endl;
  std::cout << "localizer: " << _localizer << std::endl;
]]>
            </text>
        </set>
        <set lineCount="30" fingerprint="19471ba6d4d1c9cbaa54cbc16ae63a61">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="323" endLineNumber="352"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_rule\lane_rule.cpp" startLineNumber="328" endLineNumber="357"/>
            <text>
<![CDATA[	case 1:
		color.r = 0;
		color.g = 0;
		color.b = 1;
		break;
	case 2:
		color.r = 0;
		color.g = 1;
		color.b = 0;
		break;
	case 3:
		color.r = 0;
		color.g = 1;
		color.b = 1;
		break;
	case 4:
		color.r = 1;
		color.g = 0;
		color.b = 0;
		break;
	case 5:
		color.r = 1;
		color.g = 0;
		color.b = 1;
		break;
	case 6:
		color.r = 1;
		color.g = 1;
		color.b = 0;
		break;
]]>
            </text>
        </set>
        <set lineCount="30" fingerprint="958497dc5e15895aa208f255a9b5a2fc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="136" endLineNumber="181"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="128" endLineNumber="173"/>
            <text>
<![CDATA[static double exe_time = 0.0;
static double fitness_score = 0.0;

static double diff = 0.0;
static double diff_x = 0.0, diff_y = 0.0, diff_z = 0.0, diff_yaw;

static double current_velocity = 0.0, previous_velocity = 0.0, previous_previous_velocity = 0.0;  // [m/s]
static double current_velocity_x = 0.0, previous_velocity_x = 0.0;
static double current_velocity_y = 0.0, previous_velocity_y = 0.0;
static double current_velocity_z = 0.0, previous_velocity_z = 0.0;
// static double current_velocity_yaw = 0.0, previous_velocity_yaw = 0.0;
static double current_velocity_smooth = 0.0;

static double current_accel = 0.0, previous_accel = 0.0;  // [m/s^2]
static double current_accel_x = 0.0;
static double current_accel_y = 0.0;
static double current_accel_z = 0.0;
// static double current_accel_yaw = 0.0;

static double angular_velocity = 0.0;

static int use_predict_pose = 0;

static ros::Publisher estimated_vel_mps_pub, estimated_vel_kmph_pub, estimated_vel_pub;
static std_msgs::Float32 estimated_vel_mps, estimated_vel_kmph, previous_estimated_vel_kmph;

static std::chrono::time_point<std::chrono::system_clock> matching_start, matching_end;

static ros::Publisher time_icp_matching_pub;
static std_msgs::Float32 time_icp_matching;

static int _queue_size = 1000;

static ros::Publisher icp_stat_pub;
static icp_localizer::icp_stat icp_stat_msg;

static double predict_pose_error = 0.0;

static double _tf_x, _tf_y, _tf_z, _tf_roll, _tf_pitch, _tf_yaw;
static Eigen::Matrix4f tf_btol, tf_ltob;

static std::string _localizer = "velodyne";
static std::string _offset = "linear";  // linear, zero, quadratic

static std::ofstream ofs;
static std::string filename;
]]>
            </text>
        </set>
        <set lineCount="30" fingerprint="e6e95a34b31669b87c400dbd914014cd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1432" endLineNumber="1476"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="857" endLineNumber="901"/>
            <text>
<![CDATA[    cv::Mat vmat(1,3,CV_64F);
    vmat.at<double>(0)=x[0];vmat.at<double>(1)=x[1];vmat.at<double>(2)=x[2];

    int chessboardnum=calibdata->velodynepoints.size();

    cv::Mat normals=calibdata->chessboardnormals*rmat.t();
    cv::Mat points=calibdata->chessboardpoints*rmat.t()+cv::Mat::ones(chessboardnum,1,CV_64F)*vmat;

    double error=0;
    int i,n=chessboardnum;
    int count=0;
    for(i=0;i<n;i++)
    {
        if(calibdata->velodynepoints[i].cols==1)
        {
            continue;
        }
        int pointsnum=calibdata->velodynepoints[i].rows;
        count+=pointsnum;

        cv::Mat duppoints=cv::Mat::ones(pointsnum,1,CV_64F)*points.row(i);
        cv::Mat dists=(calibdata->velodynepoints[i]-duppoints)*(normals.row(i).t());
        cv::Mat tmperror=(dists.t())*dists;
        double delta=tmperror.at<double>(0);
        error+=delta;
    }
    error/=count;
    //qDebug()<<error<<x[0]<<x[1]<<x[2];
    return error;
}

bool CalibrateCameraVelodyneChessboardBase::calibrateSensor()
{
    if(!CalibrateCameraChessboardBase::calibrateSensor())
    {
        return 0;
    }

    CameraVelodyneCalibrationData calibrationdata;
    cv::Mat normal=cv::Mat(1,3,CV_64F);
    normal.at<double>(0)=0;normal.at<double>(1)=0;normal.at<double>(2)=1;
    int i,n=calibvelodynespoints.size();
    calibrationdata.chessboardnormals=cv::Mat(n,3,CV_64F);
    calibrationdata.chessboardpoints=cv::Mat(n,3,CV_64F);
    calibrationdata.velodynepoints.resize(n);
]]>
            </text>
        </set>
        <set lineCount="30" fingerprint="b33b20dc16886bbafcfb64a178445053">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="505" endLineNumber="536"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="494" endLineNumber="525"/>
            <text>
<![CDATA[    predict_q.setRPY(predict_pose.roll, predict_pose.pitch, predict_pose.yaw);
    predict_pose_msg.header.frame_id = "/map";
    predict_pose_msg.header.stamp = current_scan_time;
    predict_pose_msg.pose.position.x = predict_pose.x;
    predict_pose_msg.pose.position.y = predict_pose.y;
    predict_pose_msg.pose.position.z = predict_pose.z;
    predict_pose_msg.pose.orientation.x = predict_q.x();
    predict_pose_msg.pose.orientation.y = predict_q.y();
    predict_pose_msg.pose.orientation.z = predict_q.z();
    predict_pose_msg.pose.orientation.w = predict_q.w();

    icp_q.setRPY(icp_pose.roll, icp_pose.pitch, icp_pose.yaw);
    icp_pose_msg.header.frame_id = "/map";
    icp_pose_msg.header.stamp = current_scan_time;
    icp_pose_msg.pose.position.x = icp_pose.x;
    icp_pose_msg.pose.position.y = icp_pose.y;
    icp_pose_msg.pose.position.z = icp_pose.z;
    icp_pose_msg.pose.orientation.x = icp_q.x();
    icp_pose_msg.pose.orientation.y = icp_q.y();
    icp_pose_msg.pose.orientation.z = icp_q.z();
    icp_pose_msg.pose.orientation.w = icp_q.w();

    current_q.setRPY(current_pose.roll, current_pose.pitch, current_pose.yaw);
    current_pose_msg.header.frame_id = "/map";
    current_pose_msg.header.stamp = current_scan_time;
    current_pose_msg.pose.position.x = current_pose.x;
    current_pose_msg.pose.position.y = current_pose.y;
    current_pose_msg.pose.position.z = current_pose.z;
    current_pose_msg.pose.orientation.x = current_q.x();
    current_pose_msg.pose.orientation.y = current_q.y();
    current_pose_msg.pose.orientation.z = current_q.z();
    current_pose_msg.pose.orientation.w = current_q.w();
]]>
            </text>
        </set>
        <set lineCount="30" fingerprint="9bd3d0b65150ff13aaa29e174ce1d552">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\sync_car_dpm.cpp" startLineNumber="362" endLineNumber="407"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\car_dpm_sync.cpp" startLineNumber="362" endLineNumber="407"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\copy.cpp" startLineNumber="420" endLineNumber="465"/>
            <text>
<![CDATA[            ROS_INFO("timeout");
            if(!publish()) {
                /* when to publish is failure, republish */
                struct timespec sleep_time;
                sleep_time.tv_sec = 0;
                sleep_time.tv_nsec = 200000000; //5Hz
                while (!publish() || ros::ok())
                    nanosleep(&sleep_time, NULL);
            }
        }
    }
    return NULL;
}

int main(int argc, char **argv) {
    ros::init(argc, argv, "sync_server");
    ros::NodeHandle nh;

    ros::Subscriber image_raw_sub = nh.subscribe("/image_raw", 1, image_raw_callback);
    ros::Subscriber points_raw_sub = nh.subscribe("/points_raw", 1, points_raw_callback);
    image_raw_pub = nh.advertise<sensor_msgs::Image>("/image_raw_", 5);
    points_raw_pub = nh.advertise<sensor_msgs::PointCloud2>("/points_raw_", 5);
    while (!buf_flag) {
        ros::spinOnce();
    }
    /* create server thread */
    pthread_t th;
    pthread_create(&th, NULL, thread, (void *)NULL );

    if(!publish()) {
        /* when to publish is failure, republish */
        struct timespec sleep_time;
        sleep_time.tv_sec = 0;
        sleep_time.tv_nsec = 200000000; //5Hz
        while (!publish() || ros::ok())
            nanosleep(&sleep_time, NULL);
    }

    ros::spin();

    /* shutdown server thread */
    ROS_INFO("wait until shutdown a thread");
    pthread_kill(th, SIGINT);
    pthread_join(th, NULL);

    return 0;
]]>
            </text>
        </set>
        <set lineCount="31" fingerprint="8885c90c6860654c5418833f4530a21c">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2308" endLineNumber="2353"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2247" endLineNumber="2292"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2337" endLineNumber="2382"/>
            <text>
<![CDATA[  obj.id = std::stoi(columns[0]);
  obj.plid = std::stoi(columns[1]);
  obj.linkid = std::stoi(columns[2]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::GuardRail& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  obj.type = std::stoi(columns[2]);
  obj.linkid = std::stoi(columns[3]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::SideWalk& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  obj.linkid = std::stoi(columns[2]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::DriveOnPortion& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  obj.linkid = std::stoi(columns[2]);
]]>
            </text>
        </set>
        <set lineCount="31" fingerprint="ec9a4faa0d37c8467258cf1914dbbddc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="51" endLineNumber="92"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\include\ndt.h" startLineNumber="64" endLineNumber="104"/>
            <text>
<![CDATA[#define MAP_CENTER_Z 70
#define MAP_ROTATION 0.7
//map size
#define MAP_X 1600
#define MAP_Y 1600
#define MAP_Z 200
#endif

//tctslc map
#if 0
#define MAP_CENTER_X 3702
#define MAP_CENTER_Y -99430
#define MAP_CENTER_Z 85
#define MAP_ROTATION 0
//map size
#define MAP_X 1600
#define MAP_Y 1600
#define MAP_Z 200
#endif

#if 0
//map offset
#define MAP_CENTER_X 0
#define MAP_CENTER_Y 0
#define MAP_CENTER_Z 0
#define MAP_ROTATION 0
//map size
#define MAP_X 1600
#define MAP_Y 1600
#define MAP_Z 200
#endif

//initial position
//meidai IB (141117_run01,run02)
#if 0
#define INITIAL_X -18354.1
#define INITIAL_Y -93693.4
#define INITIAL_Z 43
#define INITIAL_ROLL  0
#define INITIAL_PITCH 0
#define INITIAL_YAW -0.5
]]>
            </text>
        </set>
        <set lineCount="31" fingerprint="5782eeabd5c896eea5b6a39bc8e08c66">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\copy.cpp" startLineNumber="324" endLineNumber="363"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\copy.cpp" startLineNumber="351" endLineNumber="390"/>
            <text>
<![CDATA[        ROS_INFO("catch publish request");
        if(!publish()) {
            /* when to publish is failure, republish */
            struct timespec sleep_time;
            sleep_time.tv_sec = 0;
            sleep_time.tv_nsec = 200000000; //5Hz
            while (!publish() || ros::ok())
                nanosleep(&sleep_time, NULL);
        }
        obj_person__image_obj_flag = false;
        obj_car__image_obj_flag = false;
        points_image_flag = false;
        vscan_image_flag = false;
    }
}

void vscan_image_callback(const points2image::PointsImage::ConstPtr& points_image_msg) {
    if (vscan_image_flag) {
        obj_person__image_obj_flag = false;
        obj_car__image_obj_flag = false;
        points_image_flag = false;
        vscan_image_flag = false;
        return;
    }

    vscan_image_flag = true;
    if (obj_person__image_obj_flag && obj_car__image_obj_flag) {
        ROS_INFO("catch publish request");
        if(!publish()) {
            /* when to publish is failure, republish */
            struct timespec sleep_time;
            sleep_time.tv_sec = 0;
            sleep_time.tv_nsec = 200000000; //5Hz
            while (!publish() || ros::ok())
                nanosleep(&sleep_time, NULL);
        }
        obj_person__image_obj_flag = false;
        obj_car__image_obj_flag = false;
        points_image_flag = false;
        vscan_image_flag = false;
]]>
            </text>
        </set>
        <set lineCount="31" fingerprint="0e47cee5529eb304dd1cb44df853c4a8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\mission\packages\lane_planner\nodes\lane_navi\lane_navi.cpp" startLineNumber="190" endLineNumber="237"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="107" endLineNumber="154"/>
            <text>
<![CDATA[void cache_point(const vector_map::PointArray& msg)
{
	all_vmap.points = msg.data;
	update_values();
}

void cache_lane(const vector_map::LaneArray& msg)
{
	all_vmap.lanes = msg.data;
	update_values();
}

void cache_node(const vector_map::NodeArray& msg)
{
	all_vmap.nodes = msg.data;
	update_values();
}

} // namespace

int main(int argc, char **argv)
{
	ros::init(argc, argv, "waypoint_clicker");

	ros::NodeHandle n;

	int sub_vmap_queue_size;
	n.param<int>("/waypoint_clicker/sub_vmap_queue_size", sub_vmap_queue_size, 1);
	int sub_pose_queue_size;
	n.param<int>("/waypoint_clicker/sub_pose_queue_size", sub_pose_queue_size, 1);
	int pub_marker_queue_size;
	n.param<int>("/waypoint_clicker/pub_marker_queue_size", pub_marker_queue_size, 10);
	bool pub_marker_latch;
	n.param<bool>("/waypoint_clicker/pub_marker_latch", pub_marker_latch, true);

	n.param<int>("/waypoint_clicker/waypoint_max", waypoint_max, 10000);
	n.param<double>("/waypoint_clicker/search_radius", search_radius, 10);
	n.param<double>("/waypoint_clicker/velocity", velocity, 40);
	n.param<std::string>("/waypoint_clicker/frame_id", frame_id, "map");
	n.param<std::string>("/waypoint_clicker/output_file", output_file, "/tmp/lane_waypoint.csv");

	if (output_file.empty()) {
		ROS_ERROR_STREAM("output filename is empty");
		return EXIT_FAILURE;
	}
	if (output_file.back() == '/') {
		ROS_ERROR_STREAM(output_file << " is directory");
		return EXIT_FAILURE;
]]>
            </text>
        </set>
        <set lineCount="32" fingerprint="cdd27764ce84ee20674da1814dc65d71">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2322" endLineNumber="2368"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1993" endLineNumber="2039"/>
            <text>
<![CDATA[  obj.bpid = std::stoi(columns[1]);
  obj.fpid = std::stoi(columns[2]);
  obj.blid = std::stoi(columns[3]);
  obj.flid = std::stoi(columns[4]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::Area& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.aid = std::stoi(columns[0]);
  obj.slid = std::stoi(columns[1]);
  obj.elid = std::stoi(columns[2]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::Pole& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.plid = std::stoi(columns[0]);
  obj.vid = std::stoi(columns[1]);
  obj.length = std::stod(columns[2]);
  obj.dim = std::stod(columns[3]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::Box& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.bid = std::stoi(columns[0]);
  obj.pid1 = std::stoi(columns[1]);
  obj.pid2 = std::stoi(columns[2]);
]]>
            </text>
        </set>
        <set lineCount="32" fingerprint="19cee78c5bd27a21a08b7ce67dcfeb72">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1979" endLineNumber="2025"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2202" endLineNumber="2248"/>
            <text>
<![CDATA[  obj.type = std::stoi(columns[4]);
  obj.linkid = std::stoi(columns[5]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::StopLine& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.lid = std::stoi(columns[1]);
  obj.tlid = std::stoi(columns[2]);
  obj.signid = std::stoi(columns[3]);
  obj.linkid = std::stoi(columns[4]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::ZebraZone& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  obj.linkid = std::stoi(columns[2]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::CrossWalk& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  obj.type = std::stoi(columns[2]);
  obj.bdid = std::stoi(columns[3]);
]]>
            </text>
        </set>
        <set lineCount="32" fingerprint="c821ffcdc4af43f3bda54232ba10a794">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2423" endLineNumber="2469"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2351" endLineNumber="2397"/>
            <text>
<![CDATA[  obj.id = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  obj.type = std::stoi(columns[2]);
  obj.linkid = std::stoi(columns[3]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::SideWalk& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  obj.linkid = std::stoi(columns[2]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::DriveOnPortion& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  obj.linkid = std::stoi(columns[2]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::CrossRoad& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  obj.linkid = std::stoi(columns[2]);
  return is;
]]>
            </text>
        </set>
        <set lineCount="32" fingerprint="ddf5d232b2529647582df11928fd3a3e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1978" endLineNumber="2024"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2408" endLineNumber="2454"/>
            <text>
<![CDATA[  obj.id = std::stoi(columns[0]);
  obj.lid = std::stoi(columns[1]);
  obj.linkid = std::stoi(columns[2]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::CurveMirror& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.vid = std::stoi(columns[1]);
  obj.plid = std::stoi(columns[2]);
  obj.type = std::stoi(columns[3]);
  obj.linkid = std::stoi(columns[4]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::Wall& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  obj.linkid = std::stoi(columns[2]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::Fence& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  obj.linkid = std::stoi(columns[2]);
]]>
            </text>
        </set>
        <set lineCount="32" fingerprint="7578c15f9ee353a9e240f413014391dc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2394" endLineNumber="2440"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2217" endLineNumber="2263"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2262" endLineNumber="2308"/>
            <text>
<![CDATA[  obj.aid = std::stoi(columns[1]);
  obj.type = std::stoi(columns[2]);
  obj.linkid = std::stoi(columns[3]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::RoadPole& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.plid = std::stoi(columns[1]);
  obj.linkid = std::stoi(columns[2]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::RoadSign& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.vid = std::stoi(columns[1]);
  obj.plid = std::stoi(columns[2]);
  obj.type = std::stoi(columns[3]);
  obj.linkid = std::stoi(columns[4]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::Signal& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.vid = std::stoi(columns[1]);
  obj.plid = std::stoi(columns[2]);
]]>
            </text>
        </set>
        <set lineCount="32" fingerprint="cfcd208495d565ef66e7dff9f98764da">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="440" endLineNumber="471"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1013" endLineNumber="1044"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="108" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="106" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="105" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="104" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="103" endLineNumber="135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="102" endLineNumber="134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="101" endLineNumber="133"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="100" endLineNumber="132"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="99" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="98" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="97" endLineNumber="129"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="96" endLineNumber="128"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="95" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="94" endLineNumber="126"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="93" endLineNumber="125"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="92" endLineNumber="124"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="91" endLineNumber="123"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="90" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="89" endLineNumber="121"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="88" endLineNumber="120"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="87" endLineNumber="119"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="86" endLineNumber="118"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="85" endLineNumber="117"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="84" endLineNumber="116"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="83" endLineNumber="115"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="82" endLineNumber="114"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="81" endLineNumber="113"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="80" endLineNumber="112"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="79" endLineNumber="111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="78" endLineNumber="110"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="77" endLineNumber="109"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="76" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="75" endLineNumber="106"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="328" endLineNumber="359"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="365" endLineNumber="396"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="148" endLineNumber="183"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="495" endLineNumber="526"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="108" endLineNumber="314"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="98" endLineNumber="309"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="91" endLineNumber="301"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="85" endLineNumber="294"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="80" endLineNumber="288"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="75" endLineNumber="281"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="70" endLineNumber="274"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="65" endLineNumber="268"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="59" endLineNumber="257"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="54" endLineNumber="246"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="48" endLineNumber="235"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="42" endLineNumber="226"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="36" endLineNumber="219"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="109" endLineNumber="311"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="99" endLineNumber="306"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="143" endLineNumber="175"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="142" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="141" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="140" endLineNumber="171"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="139" endLineNumber="170"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="138" endLineNumber="169"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="137" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="136" endLineNumber="167"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="135" endLineNumber="166"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="134" endLineNumber="165"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="133" endLineNumber="164"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="132" endLineNumber="163"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="131" endLineNumber="162"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="130" endLineNumber="161"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="129" endLineNumber="160"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="128" endLineNumber="159"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="127" endLineNumber="158"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="126" endLineNumber="157"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="125" endLineNumber="156"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="124" endLineNumber="155"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="123" endLineNumber="154"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="122" endLineNumber="153"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="120" endLineNumber="152"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="473" endLineNumber="504"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="407" endLineNumber="438"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="547" endLineNumber="578"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="937" endLineNumber="968"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="580" endLineNumber="611"/>
            <text>
<![CDATA[std::istream& operator>>(std::istream& is, vector_map::Point& obj);
std::istream& operator>>(std::istream& is, vector_map::Vector& obj);
std::istream& operator>>(std::istream& is, vector_map::Line& obj);
std::istream& operator>>(std::istream& is, vector_map::Area& obj);
std::istream& operator>>(std::istream& is, vector_map::Pole& obj);
std::istream& operator>>(std::istream& is, vector_map::Box& obj);
std::istream& operator>>(std::istream& is, vector_map::DTLane& obj);
std::istream& operator>>(std::istream& is, vector_map::Node& obj);
std::istream& operator>>(std::istream& is, vector_map::Lane& obj);
std::istream& operator>>(std::istream& is, vector_map::WayArea& obj);
std::istream& operator>>(std::istream& is, vector_map::RoadEdge& obj);
std::istream& operator>>(std::istream& is, vector_map::Gutter& obj);
std::istream& operator>>(std::istream& is, vector_map::Curb& obj);
std::istream& operator>>(std::istream& is, vector_map::WhiteLine& obj);
std::istream& operator>>(std::istream& is, vector_map::StopLine& obj);
std::istream& operator>>(std::istream& is, vector_map::ZebraZone& obj);
std::istream& operator>>(std::istream& is, vector_map::CrossWalk& obj);
std::istream& operator>>(std::istream& is, vector_map::RoadMark& obj);
std::istream& operator>>(std::istream& is, vector_map::RoadPole& obj);
std::istream& operator>>(std::istream& is, vector_map::RoadSign& obj);
std::istream& operator>>(std::istream& is, vector_map::Signal& obj);
std::istream& operator>>(std::istream& is, vector_map::StreetLight& obj);
std::istream& operator>>(std::istream& is, vector_map::UtilityPole& obj);
std::istream& operator>>(std::istream& is, vector_map::GuardRail& obj);
std::istream& operator>>(std::istream& is, vector_map::SideWalk& obj);
std::istream& operator>>(std::istream& is, vector_map::DriveOnPortion& obj);
std::istream& operator>>(std::istream& is, vector_map::CrossRoad& obj);
std::istream& operator>>(std::istream& is, vector_map::SideStrip& obj);
std::istream& operator>>(std::istream& is, vector_map::CurveMirror& obj);
std::istream& operator>>(std::istream& is, vector_map::Wall& obj);
std::istream& operator>>(std::istream& is, vector_map::Fence& obj);
std::istream& operator>>(std::istream& is, vector_map::RailCrossing& obj);
]]>
            </text>
        </set>
        <set lineCount="33" fingerprint="580360a3670427d80f66e29da2b3bded">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="719" endLineNumber="758"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="907" endLineNumber="946"/>
            <text>
<![CDATA[  std::cout << "offset: " << _offset << std::endl;
  std::cout << "use_openmp: " << _use_openmp << std::endl;
  std::cout << "get_height: " << _get_height << std::endl;
  std::cout << "use_local_transform: " << _use_local_transform << std::endl;
  std::cout << "localizer: " << _localizer << std::endl;
  std::cout << "(tf_x,tf_y,tf_z,tf_roll,tf_pitch,tf_yaw): (" << _tf_x << ", " << _tf_y << ", " << _tf_z << ", "
            << _tf_roll << ", " << _tf_pitch << ", " << _tf_yaw << ")" << std::endl;
  std::cout << "-----------------------------------------------------------------" << std::endl;

  Eigen::Translation3f tl_btol(_tf_x, _tf_y, _tf_z);                 // tl: translation
  Eigen::AngleAxisf rot_x_btol(_tf_roll, Eigen::Vector3f::UnitX());  // rot: rotation
  Eigen::AngleAxisf rot_y_btol(_tf_pitch, Eigen::Vector3f::UnitY());
  Eigen::AngleAxisf rot_z_btol(_tf_yaw, Eigen::Vector3f::UnitZ());
  tf_btol = (tl_btol * rot_z_btol * rot_y_btol * rot_x_btol).matrix();

  Eigen::Translation3f tl_ltob((-1.0) * _tf_x, (-1.0) * _tf_y, (-1.0) * _tf_z);  // tl: translation
  Eigen::AngleAxisf rot_x_ltob((-1.0) * _tf_roll, Eigen::Vector3f::UnitX());     // rot: rotation
  Eigen::AngleAxisf rot_y_ltob((-1.0) * _tf_pitch, Eigen::Vector3f::UnitY());
  Eigen::AngleAxisf rot_z_ltob((-1.0) * _tf_yaw, Eigen::Vector3f::UnitZ());
  tf_ltob = (tl_ltob * rot_z_ltob * rot_y_ltob * rot_x_ltob).matrix();

  // Updated in initialpose_callback or gnss_callback
  initial_pose.x = 0.0;
  initial_pose.y = 0.0;
  initial_pose.z = 0.0;
  initial_pose.roll = 0.0;
  initial_pose.pitch = 0.0;
  initial_pose.yaw = 0.0;

  // Publishers
  predict_pose_pub = nh.advertise<geometry_msgs::PoseStamped>("/predict_pose", 1000);
  ndt_pose_pub = nh.advertise<geometry_msgs::PoseStamped>("/ndt_pose", 1000);
  // current_pose_pub = nh.advertise<geometry_msgs::PoseStamped>("/current_pose", 1000);
  localizer_pose_pub = nh.advertise<geometry_msgs::PoseStamped>("/localizer_pose", 1000);
  estimate_twist_pub = nh.advertise<geometry_msgs::TwistStamped>("/estimate_twist", 1000);
  estimated_vel_mps_pub = nh.advertise<std_msgs::Float32>("/estimated_vel_mps", 1000);
  estimated_vel_kmph_pub = nh.advertise<std_msgs::Float32>("/estimated_vel_kmph", 1000);
  estimated_vel_pub = nh.advertise<geometry_msgs::Vector3Stamped>("/estimated_vel", 1000);
  time_ndt_matching_pub = nh.advertise<std_msgs::Float32>("/time_ndt_matching", 1000);
  ndt_stat_pub = nh.advertise<ndt_localizer::ndt_stat>("/ndt_stat", 1000);
]]>
            </text>
        </set>
        <set lineCount="33" fingerprint="3992060c78994ad27e6f806b5f816e11">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="452" endLineNumber="501"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="443" endLineNumber="492"/>
            <text>
<![CDATA[  private_nh.getParam("use_openmp", _use_openmp);
  std::cout << "use_openmp: " << _use_openmp << std::endl;

  if (nh.getParam("tf_x", _tf_x) == false)
  {
    std::cout << "tf_x is not set." << std::endl;
    return 1;
  }
  if (nh.getParam("tf_y", _tf_y) == false)
  {
    std::cout << "tf_y is not set." << std::endl;
    return 1;
  }
  if (nh.getParam("tf_z", _tf_z) == false)
  {
    std::cout << "tf_z is not set." << std::endl;
    return 1;
  }
  if (nh.getParam("tf_roll", _tf_roll) == false)
  {
    std::cout << "tf_roll is not set." << std::endl;
    return 1;
  }
  if (nh.getParam("tf_pitch", _tf_pitch) == false)
  {
    std::cout << "tf_pitch is not set." << std::endl;
    return 1;
  }
  if (nh.getParam("tf_yaw", _tf_yaw) == false)
  {
    std::cout << "tf_yaw is not set." << std::endl;
    return 1;
  }

  std::cout << "(tf_x,tf_y,tf_z,tf_roll,tf_pitch,tf_yaw): (" << _tf_x << ", " << _tf_y << ", " << _tf_z << ", "
            << _tf_roll << ", " << _tf_pitch << ", " << _tf_yaw << ")" << std::endl;

  Eigen::Translation3f tl_btol(_tf_x, _tf_y, _tf_z);                 // tl: translation
  Eigen::AngleAxisf rot_x_btol(_tf_roll, Eigen::Vector3f::UnitX());  // rot: rotation
  Eigen::AngleAxisf rot_y_btol(_tf_pitch, Eigen::Vector3f::UnitY());
  Eigen::AngleAxisf rot_z_btol(_tf_yaw, Eigen::Vector3f::UnitZ());
  tf_btol = (tl_btol * rot_z_btol * rot_y_btol * rot_x_btol).matrix();

  Eigen::Translation3f tl_ltob((-1.0) * _tf_x, (-1.0) * _tf_y, (-1.0) * _tf_z);  // tl: translation
  Eigen::AngleAxisf rot_x_ltob((-1.0) * _tf_roll, Eigen::Vector3f::UnitX());     // rot: rotation
  Eigen::AngleAxisf rot_y_ltob((-1.0) * _tf_pitch, Eigen::Vector3f::UnitY());
  Eigen::AngleAxisf rot_z_ltob((-1.0) * _tf_yaw, Eigen::Vector3f::UnitZ());
  tf_ltob = (tl_ltob * rot_z_ltob * rot_y_ltob * rot_x_ltob).matrix();

  map.header.frame_id = "map";
]]>
            </text>
        </set>
        <set lineCount="33" fingerprint="643efbfa18f646267fc1476e9573c851">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1244" endLineNumber="1276"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1249" endLineNumber="1281"/>
            <text>
<![CDATA[    break;
  case LIGHT_RED:
    color_rgba.r = COLOR_VALUE_LIGHT_HIGH;
    color_rgba.g = COLOR_VALUE_LIGHT_LOW;
    color_rgba.b = COLOR_VALUE_LIGHT_LOW;
    break;
  case LIGHT_GREEN:
    color_rgba.r = COLOR_VALUE_LIGHT_LOW;
    color_rgba.g = COLOR_VALUE_LIGHT_HIGH;
    color_rgba.b = COLOR_VALUE_LIGHT_LOW;
    break;
  case LIGHT_BLUE:
    color_rgba.r = COLOR_VALUE_LIGHT_LOW;
    color_rgba.g = COLOR_VALUE_LIGHT_LOW;
    color_rgba.b = COLOR_VALUE_LIGHT_HIGH;
    break;
  case LIGHT_YELLOW:
    color_rgba.r = COLOR_VALUE_LIGHT_HIGH;
    color_rgba.g = COLOR_VALUE_LIGHT_HIGH;
    color_rgba.b = COLOR_VALUE_LIGHT_LOW;
    break;
  case LIGHT_CYAN:
    color_rgba.r = COLOR_VALUE_LIGHT_LOW;
    color_rgba.g = COLOR_VALUE_LIGHT_HIGH;
    color_rgba.b = COLOR_VALUE_LIGHT_HIGH;
    break;
  case LIGHT_MAGENTA:
    color_rgba.r = COLOR_VALUE_LIGHT_HIGH;
    color_rgba.g = COLOR_VALUE_LIGHT_LOW;
    color_rgba.b = COLOR_VALUE_LIGHT_HIGH;
    break;
  case RED:
    color_rgba.r = COLOR_VALUE_MAX;
]]>
            </text>
        </set>
        <set lineCount="33" fingerprint="04923eab8d75d06aecc7f1dfc9652d9b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_mapping\orb_mapping.cpp" startLineNumber="122" endLineNumber="199"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\nodes\orb_matching\orb_matching.cpp" startLineNumber="78" endLineNumber="155"/>
            <text>
<![CDATA[	void imageCallback (const sensor_msgs::ImageConstPtr& msg)
	{
		// Activate this timer if you need time logging
		ptime rT1, rT2;
		rT1 = microsec_clock::local_time();

		// Copy the ros image message to cv::Mat.
		cv_bridge::CvImageConstPtr cv_ptr;
		try
		{
			cv_ptr = cv_bridge::toCvShare(msg);
		}
		catch (cv_bridge::Exception& e)
		{
			ROS_ERROR("cv_bridge exception: %s", e.what());
			return;
		}

		cv::Mat image;
		// Check if we need debayering
		if (enc::isBayer(msg->encoding)) {
			int code=-1;
			if (msg->encoding == enc::BAYER_RGGB8 ||
				msg->encoding == enc::BAYER_RGGB16) {
				code = cv::COLOR_BayerBG2BGR;
			}
			else if (msg->encoding == enc::BAYER_BGGR8 ||
					 msg->encoding == enc::BAYER_BGGR16) {
				code = cv::COLOR_BayerRG2BGR;
			}
			else if (msg->encoding == enc::BAYER_GBRG8 ||
					 msg->encoding == enc::BAYER_GBRG16) {
				code = cv::COLOR_BayerGR2BGR;
			}
			else if (msg->encoding == enc::BAYER_GRBG8 ||
					 msg->encoding == enc::BAYER_GRBG16) {
				code = cv::COLOR_BayerGB2BGR;
			}
			cv::cvtColor(cv_ptr->image, image, code);
		}
		else
			image = cv_ptr->image;

		const double imageTime = msg->header.stamp.toSec();
		lastImageTimestamp = imageTime;

		if (gotFirstFrame==false) {
			double fx2, fy2, cx2, cy2;
			recomputeNewCameraParameter (
				(double)SLAMSystem.fsSettings["Camera.fx"],
				(double)SLAMSystem.fsSettings["Camera.fy"],
				(double)SLAMSystem.fsSettings["Camera.cx"],
				(double)SLAMSystem.fsSettings["Camera.cy"],
				fx2, fy2, cx2, cy2,
				msg->width, msg->height,
				(int)SLAMSystem.fsSettings["Camera.WorkingResolution.Width"],
				(int)SLAMSystem.fsSettings["Camera.WorkingResolution.Height"]);
			// send camera parameters to tracker
			SLAMSystem.getTracker()->ChangeCalibration (fx2, fy2, cx2, cy2);
			gotFirstFrame = true;
		}

		// Processing before sending image to tracker
		// Do Resizing and cropping here
		cv::resize(image, image,
			cv::Size(
				(int)SLAMSystem.fsSettings["Camera.WorkingResolution.Width"],
				(int)SLAMSystem.fsSettings["Camera.WorkingResolution.Height"]
			));
		image = image(
			cv::Rect(
				(int)SLAMSystem.fsSettings["Camera.ROI.x0"],
				(int)SLAMSystem.fsSettings["Camera.ROI.y0"],
				(int)SLAMSystem.fsSettings["Camera.ROI.width"],
				(int)SLAMSystem.fsSettings["Camera.ROI.height"]
			)).clone();

		SLAMSystem.TrackMonocular(image, imageTime);
]]>
            </text>
        </set>
        <set lineCount="33" fingerprint="47dcb69cff7de3a4d4b97d1449afd732">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="763" endLineNumber="812"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1411" endLineNumber="1460"/>
            <text>
<![CDATA[        caliblidarpointstab->setTabText(i,QString("LIDAR_%1").arg(i));
        caliblidarsshow->setTabText(i,QString("LIDAR_%1").arg(i));
    }

    return 1;
}

double calibrationCameraLidarChessboardObjectiveFunc(const std::vector<double> &x, std::vector<double> &grad, void * data)
{
    CalibrateCameraLidarChessboardBase::CameraLidarCalibrationData * calibdata=reinterpret_cast<CalibrateCameraLidarChessboardBase::CameraLidarCalibrationData *>(data);

    Eigen::Matrix3d rotation;
    rotation=Eigen::AngleAxisd(x[2],Eigen::Vector3d::UnitZ())
            *Eigen::AngleAxisd(x[1],Eigen::Vector3d::UnitY())
            *Eigen::AngleAxisd(x[0],Eigen::Vector3d::UnitX());

    cv::Mat rmat(3,3,CV_64F);
    rmat.at<double>(0,0)=rotation(0,0);rmat.at<double>(0,1)=rotation(0,1);rmat.at<double>(0,2)=rotation(0,2);
    rmat.at<double>(1,0)=rotation(1,0);rmat.at<double>(1,1)=rotation(1,1);rmat.at<double>(1,2)=rotation(1,2);
    rmat.at<double>(2,0)=rotation(2,0);rmat.at<double>(2,1)=rotation(2,1);rmat.at<double>(2,2)=rotation(2,2);

    cv::Mat vmat(1,3,CV_64F);
    vmat.at<double>(0)=x[3];vmat.at<double>(1)=x[4];vmat.at<double>(2)=x[5];

    int chessboardnum=calibdata->lidarpoints.size();

    cv::Mat normals=calibdata->chessboardnormals*rmat.t();
    cv::Mat points=calibdata->chessboardpoints*rmat.t()+cv::Mat::ones(chessboardnum,1,CV_64F)*vmat;

    double error=0;
    int i,n=chessboardnum;
    int count=0;
    for(i=0;i<n;i++)
    {
        if(calibdata->lidarpoints[i].cols==1)
        {
            continue;
        }
        int pointsnum=calibdata->lidarpoints[i].rows;
        count+=pointsnum;

        cv::Mat duppoints=cv::Mat::ones(pointsnum,1,CV_64F)*points.row(i);
        cv::Mat dists=(calibdata->lidarpoints[i]-duppoints)*(normals.row(i).t());
        cv::Mat tmperror=(dists.t())*dists;
        double delta=tmperror.at<double>(0);
        error+=delta;
    }
    error/=count;
    //qDebug()<<error<<x[0]<<x[1]<<x[2]<<x[3]<<x[4]<<x[5];
    return error;
]]>
            </text>
        </set>
        <set lineCount="33" fingerprint="ee6b8b927f6e3e7842bbd2e66894e679">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\featurepyramid.cpp" startLineNumber="47" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\featurepyramid.cpp" startLineNumber="79" endLineNumber="143"/>
            <text>
<![CDATA[static inline int max_i(int x,int y)
{
	return (x >= y ? x : y);
}

//return minimum number (integer)
static inline int min_i(int x,int y)
{
	return (x <= y ? x : y);
}

//return minimum number (FLOAT)
static inline FLOAT min_2(FLOAT x)
{
	return (x <= 0.2 ? x :0.2);
}

//initialization functions

//initialize scales
FLOAT *gpu_init_scales(Model_info *MI,IplImage *IM,int X,int Y) //X,Y length of image
{
	int interval,max_scale;

	if(MI->ini)
	{
		//calculate max scale
		//MI->interval/=2;	//reduce calculation time
		const int sbin = MI->sbin;
		interval = MI->interval;
		const FLOAT sc = pow(2.0,(1/(double)interval));// represent down-scale rate
		const int numcomponent = MI->numcomponent;
		//max_scale = 1+int(floor(log(minsize/(5*FLOAT(sbin)))/log(sc)));
		max_scale = 36;
		const int L_NUM = interval+max_scale;

		FLOAT MRY =(FLOAT)MI->rsize[0];
		FLOAT MRX =(FLOAT)MI->rsize[1];

		for(int kk=1;kk<numcomponent;kk++)
		{
			if(MI->rsize[kk*2]<MRY) MRY=MI->rsize[kk*2];
			if(MI->rsize[kk*2+1]<MRX) MRX=MI->rsize[kk*2+1];
		}

		MRY/=2;
		MRX/=2;

		FLOAT height =(FLOAT)IM->height/(FLOAT)sbin;
		FLOAT width = (FLOAT)IM->width/(FLOAT)sbin;
		FLOAT sc_step =1/sc;   // down-scale rate

		for(int kk=0;kk<L_NUM;kk++)
		{
			height*=sc_step;
			width*=sc_step;
			if(height<MRY || width<MRX)
			{
				max_scale = kk-interval-1;
				break;
			}
		}

		if(max_scale<interval) max_scale = interval;
		MI->max_scale=max_scale;
]]>
            </text>
        </set>
        <set lineCount="34" fingerprint="4ce95a52a33a370499529aa63896456e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\vscan2image\vscan2image.cpp" startLineNumber="40" endLineNumber="96"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\points2image\nodes\points2image\points2image.cpp" startLineNumber="40" endLineNumber="101"/>
            <text>
<![CDATA[#define CAMERAEXTRINSICMAT "CameraExtrinsicMat"
#define CAMERAMAT "CameraMat"
#define DISTCOEFF "DistCoeff"
#define IMAGESIZE "ImageSize"

static cv::Mat cameraExtrinsicMat;
static cv::Mat cameraMat;
static cv::Mat distCoeff;
static cv::Size imageSize;

static ros::Publisher pub;

static void projection_callback(const calibration_camera_lidar::projection_matrix& msg)
{
	cameraExtrinsicMat = cv::Mat(4,4,CV_64F);
	for (int row=0; row<4; row++) {
		for (int col=0; col<4; col++) {
			cameraExtrinsicMat.at<double>(row, col) = msg.projection_matrix[row * 4 + col];
		}
	}
}

static void intrinsic_callback(const sensor_msgs::CameraInfo& msg)
{
	imageSize.height = msg.height;
	imageSize.width = msg.width;

	cameraMat = cv::Mat(3,3, CV_64F);
	for (int row=0; row<3; row++) {
		for (int col=0; col<3; col++) {
			cameraMat.at<double>(row, col) = msg.K[row * 3 + col];
		}
	}

	distCoeff = cv::Mat(1,5,CV_64F);
	for (int col=0; col<5; col++) {
		distCoeff.at<double>(col) = msg.D[col];
	}
}

static void callback(const sensor_msgs::PointCloud2ConstPtr& msg)
{
	if (cameraExtrinsicMat.empty() || cameraMat.empty() || distCoeff.empty() || imageSize.height == 0 || imageSize.width == 0)
	{
		ROS_INFO("Looks like /camera/camera_info or /projection_matrix are not being published.. Please check that both are running..");
		return;
	}

	points2image::PointsImage pub_msg
		= pointcloud2_to_image(msg, cameraExtrinsicMat, cameraMat,
				       distCoeff, imageSize);
	pub.publish(pub_msg);

	/*points2image::CameraExtrinsic cpub_msg
		= pointcloud2_to_3d_calibration(msg, cameraExtrinsicMat);
	cpub.publish(cpub_msg);*/
}

int main(int argc, char *argv[])
{
	ros::init(argc, argv, "points2image");
	ros::NodeHandle n;
]]>
            </text>
        </set>
        <set lineCount="34" fingerprint="d8e8e3f7fe9c9c236e6b9642f028b76d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2216" endLineNumber="2264"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2261" endLineNumber="2309"/>
            <text>
<![CDATA[  obj.id = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  obj.type = std::stoi(columns[2]);
  obj.linkid = std::stoi(columns[3]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::RoadPole& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.plid = std::stoi(columns[1]);
  obj.linkid = std::stoi(columns[2]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::RoadSign& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.vid = std::stoi(columns[1]);
  obj.plid = std::stoi(columns[2]);
  obj.type = std::stoi(columns[3]);
  obj.linkid = std::stoi(columns[4]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::Signal& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.vid = std::stoi(columns[1]);
  obj.plid = std::stoi(columns[2]);
  obj.type = std::stoi(columns[3]);
]]>
            </text>
        </set>
        <set lineCount="35" fingerprint="875376af567308f912818c7237bc9a28">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\ring_filter\ring_filter.cpp" startLineNumber="138" endLineNumber="188"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\distance_filter\distance_filter.cpp" startLineNumber="117" endLineNumber="167"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\random_filter\random_filter.cpp" startLineNumber="100" endLineNumber="150"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\voxel_grid_filter\voxel_grid_filter.cpp" startLineNumber="110" endLineNumber="160"/>
            <text>
<![CDATA[  points_downsampler_info_msg.exe_time = std::chrono::duration_cast<std::chrono::microseconds>(filter_end - filter_start).count() / 1000.0;
  points_downsampler_info_pub.publish(points_downsampler_info_msg);

  if(_output_log == true){
	  if(!ofs){
		  std::cerr << "Could not open " << filename << "." << std::endl;
		  exit(1);
	  }
	  ofs << points_downsampler_info_msg.header.seq << ","
		  << points_downsampler_info_msg.header.stamp << ","
		  << points_downsampler_info_msg.header.frame_id << ","
		  << points_downsampler_info_msg.filter_name << ","
		  << points_downsampler_info_msg.original_points_size << ","
		  << points_downsampler_info_msg.filtered_points_size << ","
		  << points_downsampler_info_msg.original_ring_size << ","
		  << points_downsampler_info_msg.filtered_ring_size << ","
		  << points_downsampler_info_msg.exe_time << ","
		  << std::endl;
  }

}

int main(int argc, char** argv)
{
  ros::init(argc, argv, "voxel_grid_filter");

  ros::NodeHandle nh;
  ros::NodeHandle private_nh("~");

  private_nh.getParam("points_topic", POINTS_TOPIC);
  private_nh.getParam("output_log", _output_log);
  if(_output_log == true){
	  char buffer[80];
	  std::time_t now = std::time(NULL);
	  std::tm *pnow = std::localtime(&now);
	  std::strftime(buffer,80,"%Y%m%d_%H%M%S",pnow);
	  filename = "voxel_grid_filter_" + std::string(buffer) + ".csv";
	  ofs.open(filename.c_str(), std::ios::app);
  }

  // Publishers
  filtered_points_pub = nh.advertise<sensor_msgs::PointCloud2>("/filtered_points", 10);
  points_downsampler_info_pub = nh.advertise<points_downsampler::PointsDownsamplerInfo>("/points_downsampler_info", 1000);

  // Subscribers
  ros::Subscriber config_sub = nh.subscribe("config/voxel_grid_filter", 10, config_callback);
  ros::Subscriber scan_sub = nh.subscribe(POINTS_TOPIC, 10, scan_callback);

  ros::spin();

  return 0;
]]>
            </text>
        </set>
        <set lineCount="35" fingerprint="2b11862152a79f4a2963e2b80e9d0613">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="512" endLineNumber="552"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="559" endLineNumber="599"/>
            <text>
<![CDATA[      l[2] = L[0][0];
      v[0][2] = V[0][0];
      v[1][2] = V[1][0];
      v[2][2] = V[2][0];
      if (fabs(L[1][1]) > fabs(L[2][2]))
      {
        l[0] = L[1][1];
        v[0][0] = V[0][1];
        v[1][0] = V[1][1];
        v[2][0] = V[2][1];
        l[1] = L[2][2];
        v[0][1] = V[0][2];
        v[1][1] = V[1][2];
        v[2][1] = V[2][2];
      }
      else
      {
        l[0] = L[2][2];
        v[0][0] = V[0][2];
        v[1][0] = V[1][2];
        v[2][0] = V[2][2];
        l[1] = L[1][1];
        v[0][1] = V[0][1];
        v[1][1] = V[1][1];
        v[2][1] = V[2][1];
      }
    }
    else
    {
      l[0] = L[1][1];
      v[0][0] = V[0][1];
      v[1][0] = V[1][1];
      v[2][0] = V[2][1];
      l[1] = L[0][0];
      v[0][1] = V[0][0];
      v[1][1] = V[1][0];
      v[2][1] = V[2][0];
      l[2] = L[2][2];
      v[0][2] = V[0][2];
      v[1][2] = V[1][2];
      v[2][2] = V[2][2];
]]>
            </text>
        </set>
        <set lineCount="36" fingerprint="e1659a7891bdc821b266b022809e08c3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\newton.cpp" startLineNumber="432" endLineNumber="499"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\newton.cpp" startLineNumber="344" endLineNumber="411"/>
            <text>
<![CDATA[      p.x = x * sc[0][0] + y * sc[0][1] + z * sc[0][2] + pose->x;
      p.y = x * sc[1][0] + y * sc[1][1] + z * sc[1][2] + pose->y;
      p.z = x * sc[2][0] + y * sc[2][1] + z * sc[2][2] + pose->z;

      /*锟斤拷锟较ワ拷锟斤拷锟斤拷锟剿わ拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷*/
      if (ndmode == 1)
        layer = 1;  // layer_select;
      if (ndmode == 0)
        layer = 0;  // layer_select;
      nd_map = NDmap;

      while (layer > 0)
      {
        if (nd_map->next)
          nd_map = nd_map->next;
        layer--;
      }

      /*锟斤拷锟斤拷锟叫憋拷锟斤拷锟斤拷ND锟杰ワ拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷票锟斤拷锟剿硷拷锟斤拷锟斤拷锟斤拷ND锟杰ワ拷锟斤拷锟斤拷蚬箍锟斤拷锟?
        锟劫わ拷锟斤拷锟轿わ拷膜锟斤拷锟斤拷锟斤拷婴锟斤拷锟侥わ拷膜锟斤拷锟斤拷锟?*/

      if (!get_ND(nd_map, &p, nd, target))
        continue;

      /*q锟轿办肌锟斤拷尸(锟窖诧拷锟斤拷锟斤拷锟斤拷韦锟?)*/
      work = (double *)sc_d;
      for (m = 0; m < 3; m++)
      {
        for (k = 0; k < 3; k++)
        {
          // qd3[txtytzabg][xyz]
          qd3[m + 3][k] = x * (*work) + y * (*(work + 1)) + z * (*(work + 2));
          // x*sc_d[m][k][0] + y*sc_d[m][k][1] + z*sc_d[m][k][2];
          work += 3;
        }
      }

      /*q锟斤拷锟斤拷锟斤拷尸锟斤拷锟窖诧拷锟斤拷锟斤拷锟斤拷韦摺锟?*/
      work = (double *)sc_dd;
      for (n = 0; n < 3; n++)
      {
        for (m = 0; m < 3; m++)
        {
          for (k = 0; k < 3; k++)
          {
            qdd3[n + 3][m + 3][k] = (*work * x + *(work + 1) * y + *(work + 2) * z - qd3[m + 3][k]) / E_THETA;
            work += 3;
          }
        }
      }

      /*锟斤拷锟斤拷锟教纷伙拷*/
      if (nd[j])
      {
        if (nd[j]->num > 10 && nd[j]->sign == 1)
        {
          //	double e;
          esum += calc_summand3d(&p, nd[j], pose, g, hH, qd3, dist);
          add_matrix6d(Hsumh, hH, Hsumh);

          //	  dist =1;
          gsum[0] += g[0];                //*nd[j]->w;
          gsum[1] += g[1];                //*nd[j]->w;
          gsum[2] += g[2] + pose->z * 0;  //*nd[j]->w;
          gsum[3] += g[3];                //*nd[j]->w;
          gsum[4] += g[4];                //+(pose->theta2-(0.0))*1;//*nd[j]->w;
          gsum[5] += g[5];                //*nd[j]->w;
          gnum += 1;  // nd[j]->w;
]]>
            </text>
        </set>
        <set lineCount="36" fingerprint="d3c29395295c3ba90167bb911df6ec4f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="492" endLineNumber="540"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="330" endLineNumber="378"/>
            <text>
<![CDATA[    ret[id].lid = std::stoi(tbl[i][1]);
    ret[id].plid = std::stoi(tbl[i][2]);
    ret[id].linkid = std::stoi(tbl[i][3]);
  }
  return ret;
}


/* basic class */
/* for point.csv */
struct PointClass {
  int pid;
  double b;
  double l;
  double h;
  double bx;
  double ly;
  double ref;
  int mcode1;
  int mcode2;
  int mcode3;
};

std::vector<PointClass> read_pointclass(const char *filename)
{
  int max_id;
  Tbl tbl = read_csv(filename, &max_id);
  size_t i, n = tbl.size();
  std::vector<PointClass> ret(max_id + 1);
  for (i=0; i<n; i++) {
    int id = std::stoi(tbl[i][0]);
    ret[id].pid = id;
    ret[id].b = std::stod(tbl[i][1]);
    ret[id].l = std::stod(tbl[i][2]);
    ret[id].h = std::stod(tbl[i][3]);
    ret[id].bx = std::stod(tbl[i][4]);
    ret[id].ly = std::stod(tbl[i][5]);
    ret[id].ref = std::stod(tbl[i][6]);
    ret[id].mcode1 = std::stoi(tbl[i][7]);
    ret[id].mcode2 = std::stod(tbl[i][8]);
    ret[id].mcode3 = std::stod(tbl[i][9]);
  }
  return ret;
}

/* for vector.csv */
struct VectorClass {
  int vid;
  int pid;
]]>
            </text>
        </set>
        <set lineCount="37" fingerprint="9992d90910c19345953afeb152af1be1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\velocity_set.cpp" startLineNumber="95" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\lattice_velocity_set.cpp" startLineNumber="427" endLineNumber="469"/>
            <text>
<![CDATA[  visualization_msgs::MarkerArray marker_array;
  visualization_msgs::Marker crosswalk_marker;
  visualization_msgs::Marker waypoint_marker_stop;
  visualization_msgs::Marker waypoint_marker_decelerate;
  visualization_msgs::Marker stop_line;
  crosswalk_marker.header.frame_id = "/map";
  crosswalk_marker.header.stamp = ros::Time();
  crosswalk_marker.id = 0;
  crosswalk_marker.type = visualization_msgs::Marker::SPHERE_LIST;
  crosswalk_marker.action = visualization_msgs::Marker::ADD;
  waypoint_marker_stop = crosswalk_marker;
  waypoint_marker_decelerate = crosswalk_marker;
  stop_line = crosswalk_marker;
  stop_line.type = visualization_msgs::Marker::CUBE;

  // set each namespace
  crosswalk_marker.ns = "Crosswalk Detection";
  waypoint_marker_stop.ns = "Stop Detection";
  waypoint_marker_decelerate.ns = "Decelerate Detection";
  stop_line.ns = "Stop Line";

  // set scale and color
  double scale = 2 * g_detection_range;
  waypoint_marker_stop.scale.x = scale;
  waypoint_marker_stop.scale.y = scale;
  waypoint_marker_stop.scale.z = scale;
  waypoint_marker_stop.color.a = 0.2;
  waypoint_marker_stop.color.r = 0.0;
  waypoint_marker_stop.color.g = 1.0;
  waypoint_marker_stop.color.b = 0.0;
  waypoint_marker_stop.frame_locked = true;

  scale = 2 * (g_detection_range + g_deceleration_range);
  waypoint_marker_decelerate.scale.x = scale;
  waypoint_marker_decelerate.scale.y = scale;
  waypoint_marker_decelerate.scale.z = scale;
  waypoint_marker_decelerate.color.a = 0.15;
  waypoint_marker_decelerate.color.r = 1.0;
  waypoint_marker_decelerate.color.g = 1.0;
  waypoint_marker_decelerate.color.b = 0.0;
  waypoint_marker_decelerate.frame_locked = true;

  if (g_obstacle_waypoint > -1)
]]>
            </text>
        </set>
        <set lineCount="37" fingerprint="c8fb9d50a424e564c7879e7be53ae5b1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="686" endLineNumber="755"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\ndt_tku\src\algebra.cpp" startLineNumber="755" endLineNumber="824"/>
            <text>
<![CDATA[  return 1;
}

int ginverse_matrix6d(double mat[6][6], double inv[6][6])
{
  double p, d, max, dumy, A[6][6];
  int i, j, k, s;

  identity_matrix6d(inv);
  for (i = 0; i < 6; i++)
  {
    for (j = 0; j < 6; j++)
    {
      A[i][j] = mat[i][j];
    }
  }

  for (k = 0; k < 6; k++)
  {
    max = -100000000;
    s = k;
    for (j = k; j < 6; j++)
    {
      if (fabs(A[j][k]) > max)
      {
        max = fabs(A[j][k]);
        s = j;
      }
    }
    if (max == 100000000)
      return 0;

    for (j = 0; j < 6; j++)
    {
      dumy = A[k][j];
      A[k][j] = A[s][j];
      A[s][j] = dumy;

      dumy = inv[k][j];
      inv[k][j] = inv[s][j];
      inv[s][j] = dumy;
    }

    p = A[k][k];
    for (j = k; j < 6; j++)
    {
      A[k][j] = A[k][j] / p;
    }
    for (j = 0; j < 6; j++)
    {
      inv[k][j] = inv[k][j] / p;
    }

    for (i = 0; i < 6; i++)
    {
      if (i != k)
      {
        d = A[i][k];
        for (j = 0; j < 6; j++)
        {
          inv[i][j] = inv[i][j] - d * inv[k][j];
        }
        for (j = k; j < 6; j++)
        {
          A[i][j] = A[i][j] - d * A[k][j];
        }
      }
    }
  }
  return 1;
]]>
            </text>
        </set>
        <set lineCount="37" fingerprint="64f249264c247054726b454fe01ce49a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\map_tools\nodes\pcd_filter\pcd_filter.cpp" startLineNumber="31" endLineNumber="79"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\map_tools\nodes\pcd_filter\pcd_filter.cpp" startLineNumber="57" endLineNumber="105"/>
            <text>
<![CDATA[      pcl::PointCloud<pcl::PointXYZI>::Ptr input_cloud (new pcl::PointCloud<pcl::PointXYZI>);
      if (pcl::io::loadPCDFile<pcl::PointXYZI> (input, *input_cloud) == -1){
        std::cout << "Couldn't find " << input << "." << std::endl;
        break;
      }
      std::cout << "Input: " << input << " (" << input_cloud->size () << " points) " << std::endl;

      // Filtering input scan
      pcl::PointCloud<pcl::PointXYZI>::Ptr filtered_cloud (new pcl::PointCloud<pcl::PointXYZI>);
      pcl::VoxelGrid<pcl::PointXYZI> voxel_grid_filter;
      voxel_grid_filter.setLeafSize (leaf_size, leaf_size, leaf_size);
      voxel_grid_filter.setInputCloud (input_cloud);
      voxel_grid_filter.filter (*filtered_cloud);

      int tmp = input.find_last_of("/");
      std::string prefix = std::to_string(leaf_size);
      prefix = prefix.substr(0, 4);
      prefix += "_";
      std::string output = input.insert(tmp+1, prefix);

      pcl::io::savePCDFileBinary(output, *filtered_cloud);
      std::cout << "Output: " << output << " (" << filtered_cloud->size () << " points) " << std::endl;
      std::cout << "Voxel Leaf Size: " << leaf_size << std::endl << std::endl;
    }

    else if(point_type == "PointXYZRGB"){
      pcl::PointCloud<pcl::PointXYZRGB>::Ptr input_cloud (new pcl::PointCloud<pcl::PointXYZRGB>);
      if (pcl::io::loadPCDFile<pcl::PointXYZRGB> (input, *input_cloud) == -1){
        std::cout << "Couldn't find " << input << "." << std::endl;
        break;
      }
      std::cout << "Input: " << input << " (" << input_cloud->size () << " points) " << std::endl;

      // Filtering input scan
      pcl::PointCloud<pcl::PointXYZRGB>::Ptr filtered_cloud (new pcl::PointCloud<pcl::PointXYZRGB>);
      pcl::VoxelGrid<pcl::PointXYZRGB> voxel_grid_filter;
      voxel_grid_filter.setLeafSize (leaf_size, leaf_size, leaf_size);
      voxel_grid_filter.setInputCloud (input_cloud);
      voxel_grid_filter.filter (*filtered_cloud);

      int tmp = input.find_last_of("/");
      std::string prefix = std::to_string(leaf_size);
      prefix = prefix.substr(0, 4);
      prefix += "_";
      std::string output = input.insert(tmp+1, prefix);

      pcl::io::savePCDFileBinary(output, *filtered_cloud);
      std::cout << "Output: " << output << " (" << filtered_cloud->size () << " points) " << std::endl;
      std::cout << "Voxel Leaf Size: " << leaf_size << std::endl << std::endl;
]]>
            </text>
        </set>
        <set lineCount="37" fingerprint="e21a7da698071afd1726dbdc25cfa98a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\can\packages\kvaser\nodes\can_converter\can_converter.cpp" startLineNumber="6" endLineNumber="48"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\drivers\can\packages\kvaser\nodes\can_draw\can_draw.cpp" startLineNumber="10" endLineNumber="52"/>
            <text>
<![CDATA[void chatterCallback(const kvaser::CANPacket::ConstPtr& msg)
{
  unsigned short w;
  static int enc_sum;
  short diff;
  static short steer,shift,speed2,speed3,brake;
  static char  speed;
  static short enc,enc_p,enc_diff;
  static short wheel1,wheel2,wheel3,wheel4;
  static short gyro,accy,accz;
  static char accx; 
  static FILE* log_fp;


  int changed=0;
  if(msg->id==0x24){
    w=msg->dat[0]*256+msg->dat[1];
    gyro=w;
    w=msg->dat[2]*256+msg->dat[3];
    accy=w;
    w=msg->dat[4]*256+msg->dat[5];
    accz=w;
    w=msg->dat[7];
    accx=w;
    changed=1;
  }
  if(msg->id==0x25){
    w=msg->dat[0]*4096+msg->dat[1]*16;
    steer=w;
    steer=steer/16;
    changed=1;
  }

  if(msg->id==0xaa){
    w=msg->dat[0]*256+msg->dat[1];
    wheel1=w;
    w=msg->dat[2]*256+msg->dat[3];
    wheel2=w;
    w=msg->dat[4]*256+msg->dat[5];
    wheel3=w;
    w=msg->dat[6]*256+msg->dat[7];
    wheel4=w;
    changed=1;
]]>
            </text>
        </set>
        <set lineCount="37" fingerprint="2a617da9b57c3bed6eeadaab8ecd848a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\opengl_render_state.cpp" startLineNumber="485" endLineNumber="533"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\display\opengl_render_state.cpp" startLineNumber="533" endLineNumber="580"/>
            <text>
<![CDATA[OpenGlMatrix ModelViewLookAtRDF(GLprecision ex, GLprecision ey, GLprecision ez, GLprecision lx, GLprecision ly, GLprecision lz, GLprecision ux, GLprecision uy, GLprecision uz)
{
    OpenGlMatrix mat;
    GLprecision* m = mat.m;
    
    const GLprecision u_o[3] = {ux,uy,uz};
    
    GLprecision x[3], y[3];
    GLprecision z[] = {lx - ex, ly - ey, lz - ez};
    Normalise<3>(z);
    
    CrossProduct(x,z,u_o);
    CrossProduct(y,z,x);
    
    // Normalize x, y
    const GLprecision lenx = Length<3>(x);
    const GLprecision leny = Length<3>(y);
    
    if( lenx > 0 && leny > 0) {
        for(size_t r = 0; r < 3; ++r ) {
            x[r] /= lenx;
            y[r] /= leny;
        }        
    #define M(row,col)  m[col*4+row]
        M(0,0) = x[0];
        M(0,1) = x[1];
        M(0,2) = x[2];
        M(1,0) = y[0];
        M(1,1) = y[1];
        M(1,2) = y[2];
        M(2,0) = z[0];
        M(2,1) = z[1];
        M(2,2) = z[2];
        M(3,0) = 0.0;
        M(3,1) = 0.0;
        M(3,2) = 0.0;
        M(0,3) = -(M(0,0)*ex + M(0,1)*ey + M(0,2)*ez);
        M(1,3) = -(M(1,0)*ex + M(1,1)*ey + M(1,2)*ez);
        M(2,3) = -(M(2,0)*ex + M(2,1)*ey + M(2,2)*ez);
        M(3,3) = 1.0;
    #undef M
        return mat;
    }else{
        throw std::invalid_argument("'Look' and 'up' vectors cannot be parallel when calling ModelViewLookAt.");
    }
}

OpenGlMatrix ModelViewLookAt(GLprecision ex, GLprecision ey, GLprecision ez, GLprecision lx, GLprecision ly, GLprecision lz, GLprecision ux, GLprecision uy, GLprecision uz)
]]>
            </text>
        </set>
        <set lineCount="37" fingerprint="c9a1e0adc0272f24fe2c0456ff947747">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\librcnn\include\rect_class_score.h" startLineNumber="1" endLineNumber="52"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\cv_tracker\nodes\ssd\include\rect_class_score.h" startLineNumber="1" endLineNumber="52"/>
            <text>
<![CDATA[#ifndef RECTCLASSSCORE_H_
#define RECTCLASSSCORE_H_

#include <sstream>
#include <string>

template<typename _Tp> class RectClassScore
{
public:
	_Tp x, y, w, h;
	_Tp score;
	unsigned int class_type;
	bool enabled;

	inline std::string toString()
	{
		std::ostringstream out;
		out << "P(" << GetClassString() << ") at " << "(x:" << x << ", y:" << y << ", w:" << w << ", h:" << h << ") =" << score;
		return out.str();
	}
	inline std::string GetClassString()
	{
		switch (class_type)
		{
			case 0: return "nothing";
			case 1: return "plane";
			case 2: return "bicycle";
			case 3: return "bird";
			case 4: return "boat";
			case 5: return "bottle";
			case 6: return "bus";
			case 7: return "car";
			case 8: return "cat";
			case 9: return "chair";
			case 10:return "cow";
			case 11:return "table";
			case 12:return "dog";
			case 13:return "horse";
			case 14:return "motorbike";
			case 15:return "person";
			case 16:return "plant";
			case 17:return "sheep";
			case 18:return "sofa";
			case 19:return "train";
			case 20:return "tv";
			default:return "error";
		}
	}
};


#endif /* RECTCLASSSCORE_H_ */
]]>
            </text>
        </set>
        <set lineCount="38" fingerprint="a3719fe45b8ca9e7d417f06978110349">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\voxel_grid_filter\voxel_grid_filter.cpp" startLineNumber="106" endLineNumber="160"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\random_filter\random_filter.cpp" startLineNumber="97" endLineNumber="150"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\distance_filter\distance_filter.cpp" startLineNumber="114" endLineNumber="167"/>
            <text>
<![CDATA[  points_downsampler_info_msg.filtered_points_size = filtered_scan_ptr->size();
  points_downsampler_info_msg.original_ring_size = 0;
  points_downsampler_info_msg.original_ring_size = 0;
  points_downsampler_info_msg.exe_time = std::chrono::duration_cast<std::chrono::microseconds>(filter_end - filter_start).count() / 1000.0;
  points_downsampler_info_pub.publish(points_downsampler_info_msg);

  if(_output_log == true){
	  if(!ofs){
		  std::cerr << "Could not open " << filename << "." << std::endl;
		  exit(1);
	  }
	  ofs << points_downsampler_info_msg.header.seq << ","
		  << points_downsampler_info_msg.header.stamp << ","
		  << points_downsampler_info_msg.header.frame_id << ","
		  << points_downsampler_info_msg.filter_name << ","
		  << points_downsampler_info_msg.original_points_size << ","
		  << points_downsampler_info_msg.filtered_points_size << ","
		  << points_downsampler_info_msg.original_ring_size << ","
		  << points_downsampler_info_msg.filtered_ring_size << ","
		  << points_downsampler_info_msg.exe_time << ","
		  << std::endl;
  }

}

int main(int argc, char** argv)
{
  ros::init(argc, argv, "distance_filter");

  ros::NodeHandle nh;
  ros::NodeHandle private_nh("~");

  private_nh.getParam("points_topic", POINTS_TOPIC);
  private_nh.getParam("output_log", _output_log);
  if(_output_log == true){
	  char buffer[80];
	  std::time_t now = std::time(NULL);
	  std::tm *pnow = std::localtime(&now);
	  std::strftime(buffer,80,"%Y%m%d_%H%M%S",pnow);
	  filename = "distance_filter_" + std::string(buffer) + ".csv";
	  ofs.open(filename.c_str(), std::ios::app);
  }

  // Publishers
  filtered_points_pub = nh.advertise<sensor_msgs::PointCloud2>("/filtered_points", 10);
  points_downsampler_info_pub = nh.advertise<points_downsampler::PointsDownsamplerInfo>("/points_downsampler_info", 1000);

  // Subscribers
  ros::Subscriber config_sub = nh.subscribe("config/distance_filter", 10, config_callback);
  ros::Subscriber scan_sub = nh.subscribe(POINTS_TOPIC, 10, scan_callback);

  ros::spin();

  return 0;
]]>
            </text>
        </set>
        <set lineCount="38" fingerprint="89d7cd6356a13dcd75fd176bb0ac1662">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\libvelocity_set.h" startLineNumber="18" endLineNumber="65"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\libvelocity_set.h" startLineNumber="16" endLineNumber="63"/>
            <text>
<![CDATA[  KEEP = -1,
  STOP = 1,
  DECELERATE = 2,
  OTHERS = 3,
};

struct CrossWalkPoints
{
  std::vector<geometry_msgs::Point> points;
  geometry_msgs::Point center;
  double width;
};

class CrossWalk
{
private:
  // detection_points_[bdID] has information of each crosswalk
  std::unordered_map<int, CrossWalkPoints> detection_points_;
  int detection_waypoint_;
  int detection_crosswalk_id_;
  std::vector<geometry_msgs::Point> obstacle_points_;
  std::vector<int> bdID_;

public:
  bool loaded_crosswalk;
  bool loaded_area;
  bool loaded_line;
  bool loaded_point;
  bool loaded_all;
  bool set_points;
  vector_map::CrossWalkArray crosswalk_;
  vector_map::AreaArray area_;
  vector_map::LineArray line_;
  vector_map::PointArray point_;

  void crossWalkCallback(const vector_map::CrossWalkArray &msg);
  void areaCallback(const vector_map::AreaArray &msg);
  void lineCallback(const vector_map::LineArray &msg);
  void pointCallback(const vector_map::PointArray &msg);

  int countAreaSize() const;
  void getAID(std::unordered_map<int, std::vector<int>> &aid_crosswalk) const;
  void calcDetectionArea(const std::unordered_map<int, std::vector<int>> &bdid2aid_map);
  geometry_msgs::Point calcCenterofGravity(const int &aid) const;
  double calcCrossWalkWidth(const int &aid) const;
  geometry_msgs::Point getPoint(const int &pid) const;
  void calcCenterPoints();
  void setCrossWalkPoints();
]]>
            </text>
        </set>
        <set lineCount="39" fingerprint="a1288038258655a285530b51e274267a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="153" endLineNumber="209"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="147" endLineNumber="203"/>
            <text>
<![CDATA[		if(res != CUDA_SUCCESS){
			printf("\ncuModuleLoad failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuModuleGetFunction(&func_process_root[i], module[i], "process_root");
		if(res != CUDA_SUCCESS){
			printf("\ncuGetFunction(process_root) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuModuleGetFunction(&func_process_part[i], module[i], "process_part");
		if(res != CUDA_SUCCESS){
			printf("\ncuGetFunction(process_part) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuModuleGetFunction(&func_inverse_Q[i], module[i], "inverse_Q");
		if(res != CUDA_SUCCESS){
			printf("\ncuGetFunction(inverse_Q) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuModuleGetFunction(&func_dt1d_x[i], module[i], "dt1d_x");
		if(res != CUDA_SUCCESS){
			printf("\ncuGetFunction(dt1d_x) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuModuleGetFunction(&func_dt1d_y[i], module[i], "dt1d_y");
		if(res != CUDA_SUCCESS){
			printf("\ncuGetFunction(dt1d_y) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuModuleGetFunction(&func_calc_a_score[i], module[i], "calc_a_score");
		if(res != CUDA_SUCCESS){
			printf("\ncuGetFunction(calc_a_score) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuModuleGetFunction(&func_calc_hist[i], module[i], "calc_hist");
		if(res != CUDA_SUCCESS){
			printf("\ncuGetFunction(calc_hist) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuModuleGetFunction(&func_calc_norm[i], module[i], "calc_norm");
		if(res != CUDA_SUCCESS){
			printf("\ncuGetFunction(calc_norm) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuModuleGetFunction(&func_calc_feat[i], module[i], "calc_feat");
		if(res != CUDA_SUCCESS){
			printf("\ncuGetFunction(calc_feat) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
]]>
            </text>
        </set>
        <set lineCount="39" fingerprint="aadcd8a82c765150e9ee939d45c193e5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2366" endLineNumber="2424"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2352" endLineNumber="2410"/>
            <text>
<![CDATA[  obj.aid = std::stoi(columns[1]);
  obj.type = std::stoi(columns[2]);
  obj.linkid = std::stoi(columns[3]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::SideWalk& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  obj.linkid = std::stoi(columns[2]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::DriveOnPortion& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  obj.linkid = std::stoi(columns[2]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::CrossRoad& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  obj.linkid = std::stoi(columns[2]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::SideStrip& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.lid = std::stoi(columns[1]);
  obj.linkid = std::stoi(columns[2]);
]]>
            </text>
        </set>
        <set lineCount="39" fingerprint="421597146c8a4fc3d93c3892edf3308a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="260" endLineNumber="316"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="188" endLineNumber="244"/>
            <text>
<![CDATA[    ret[id].linkid = std::stoi(tbl[i][4]);
  }
  return ret;
}

/* for zebrazone.csv, sidewalk.csv, crossroads.csv */
struct ZebraZone {
	int id;
	int aid;
	int linkid;
};

std::vector<ZebraZone> read_zebrazone(const char* filename)
{
  int max_id;
  Tbl tbl = read_csv(filename, &max_id);
  size_t i, n = tbl.size();
  std::vector<ZebraZone> ret(max_id + 1);
  for (i=0; i<n; i++) {
    int id = std::stoi(tbl[i][0]);
    ret[id].id = id;
    ret[id].aid = std::stoi(tbl[i][1]);
    ret[id].linkid = std::stoi(tbl[i][2]);
  }
  return ret;
}

/* for crosswalk.csv */
struct CrossWalk {
	int id;
	int aid;
	int type;
	int bdid;
	int linkid;
};

std::vector<CrossWalk> read_crosswalk(const char* filename)
{
  int max_id;
  Tbl tbl = read_csv(filename, &max_id);
  size_t i, n = tbl.size();
  std::vector<CrossWalk> ret(max_id + 1);
  for (i=0; i<n; i++) {
    int id = std::stoi(tbl[i][0]);
    ret[id].id = id;
    ret[id].aid = std::stoi(tbl[i][1]);
    ret[id].type = std::stoi(tbl[i][2]);
    ret[id].bdid = std::stoi(tbl[i][3]);
    ret[id].linkid = std::stoi(tbl[i][4]);
  }
  return ret;
}

/* for road_surface_mark.csv */
struct RoadSurfaceMark {
  int id;
  int aid;
]]>
            </text>
        </set>
        <set lineCount="40" fingerprint="bb10582fa54801fdf1989b19a4426859">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_client\vector_map_client.cpp" startLineNumber="128" endLineNumber="188"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_client\vector_map_client.cpp" startLineNumber="152" endLineNumber="212"/>
            <text>
<![CDATA[    vector_map_server::GetStopLine stop_line_srv;
    stop_line_srv.request.pose = vmc.getPose();
    stop_line_srv.request.waypoints = vmc.getWaypoints();
    if (stop_line_cli.call(stop_line_srv))
    {
      for (const auto& stop_line : stop_line_srv.response.objects.data)
      {
        if (stop_line.lid == 0)
          continue;

        Line line = vmap.findByKey(Key<Line>(stop_line.lid));
        if (line.lid == 0)
          continue;

        visualization_msgs::Marker marker = createLineMarker("stop_line", id++, Color::RED, vmap, line);
        if (isValidMarker(marker))
        {
          marker.scale.x = 0.4;
          marker.color.a = 0.4;
          marker_array_buffer.markers.push_back(marker);
        }
      }
    }

    vector_map_server::GetCrossWalk cross_walk_srv;
    cross_walk_srv.request.pose = vmc.getPose();
    cross_walk_srv.request.waypoints = vmc.getWaypoints();
    if (cross_walk_cli.call(cross_walk_srv))
    {
      for (const auto& cross_walk : cross_walk_srv.response.objects.data)
      {
        if (cross_walk.aid == 0)
          continue;

        Area area = vmap.findByKey(Key<Area>(cross_walk.aid));
        if (area.aid == 0)
          continue;

        visualization_msgs::Marker marker = createAreaMarker("cross_walk", id++, Color::BLUE, vmap, area);
        if (isValidMarker(marker))
        {
          marker.scale.x = 0.4;
          marker.color.a = 0.4;
          marker_array_buffer.markers.push_back(marker);
        }
      }
    }

    vector_map_server::GetSignal signal_srv;
    signal_srv.request.pose = vmc.getPose();
    signal_srv.request.waypoints = vmc.getWaypoints();
    if (signal_cli.call(signal_srv))
    {
      for (const auto& signal : signal_srv.response.objects.data)
      {
        if (signal.vid == 0)
          continue;

        Vector vector = vmap.findByKey(Key<Vector>(signal.vid));
        if (vector.vid == 0)
          continue;
]]>
            </text>
        </set>
        <set lineCount="41" fingerprint="097604edc616bac1dc048b559da122ae">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\nms.cpp" startLineNumber="55" endLineNumber="111"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\nms.cpp" startLineNumber="47" endLineNumber="104"/>
            <text>
<![CDATA[	if (first_index < i - 1)
		quickSort(data , Order,first_index , i - 1);

	if (last_index > j + 1)
		quickSort(data , Order,j + 1 , last_index);
}

FLOAT *dpm_ttic_gpu_nms(FLOAT *boxes,FLOAT overlap,int *num,GPUModel *MO)
{
	int NUM = *num;
	if(NUM<=0)
		return nullptr;

	const int *numpart = MO->MI->numpart;
	const int GL = (numpart[0]+1)*4+3;
	FLOAT *area = (FLOAT*)calloc(NUM,sizeof(FLOAT));
	FLOAT *scores = (FLOAT*)calloc(NUM,sizeof(FLOAT));
	int *sorted_orders = (int *)calloc(NUM,sizeof(int));
	FLOAT *P=boxes;
	//calculate area of each boundary-box

	FLOAT *score_t = scores;
	int *so_t =sorted_orders;
	for(int ii=0;ii<NUM;ii++)
	{
		area[ii]=(P[3]-P[1]+1.0)*(P[2]-P[0]+1.0);
		*(score_t++) = P[GL-2];
		//??printf("amari %f\n",P[GL-1]);
		*(so_t++)=ii;
		P+=GL;
	}

	quickSort(scores,sorted_orders,0,NUM-1);	//sort score of detected rectangle

	int *checked = (int *)calloc(NUM,sizeof(int));		//cheked flags (picked =1,non-checked =0,suppressed =-1)
	int cnum =NUM-1;
	int cur=0;
	int pi_num=0;

	while(cnum>0)
	{
		int A=sorted_orders[cur];
		P=boxes+GL*A;
		FLOAT Ay1 = P[0];
		FLOAT Ax1 = P[1];
		FLOAT Ay2 = P[2];
		FLOAT Ax2 = P[3];
		checked[A]=1;
		cnum--;
		cur++;
		pi_num++;

		for(int kk=cur;kk<NUM;kk++)
		{
			int B = sorted_orders[kk];
			if(checked[B]!=0) continue;

			P=boxes+GL*B;
]]>
            </text>
        </set>
        <set lineCount="42" fingerprint="b8392041f6ece28900a111f1544beca2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="161" endLineNumber="220"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="393" endLineNumber="452"/>
            <text>
<![CDATA[    ret[id].hang = std::stod(tbl[i][2]);
    ret[id].vang = std::stod(tbl[i][3]);
  }
  return ret;
}

/* for line.csv */
struct LineClass {
  int lid;
  int bpid;
  int fpid;
  int blid;
  int flid;
};

std::vector<LineClass> read_lineclass(const char *filename)
{
  int max_id;
  Tbl tbl = read_csv(filename, &max_id);
  size_t i, n = tbl.size();
  std::vector<LineClass> ret(max_id + 1);
  for (i=0; i<n; i++) {
    int id = std::stoi(tbl[i][0]);
    ret[id].lid = id;
    ret[id].bpid = std::stoi(tbl[i][1]);
    ret[id].fpid = std::stoi(tbl[i][2]);
    ret[id].blid = std::stoi(tbl[i][3]);
    ret[id].flid = std::stoi(tbl[i][4]);
  }
  return ret;
}

/* for area.csv */
struct AreaClass {
  int aid;
  int slid;
  int elid;
};

std::vector<AreaClass> read_areaclass(const char *filename)
{
  int max_id;
  Tbl tbl = read_csv(filename, &max_id);
  size_t i, n = tbl.size();
  std::vector<AreaClass> ret(max_id + 1);
  for (i=0; i<n; i++) {
    int id = std::stoi(tbl[i][0]);
    ret[id].aid = id;
    ret[id].slid = std::stod(tbl[i][1]);
    ret[id].elid = std::stod(tbl[i][2]);
  }
  return ret;
}

/* for pole.csv */
struct PoleClass {
  int plid;
  int vid;
  double length;
  double dim;
]]>
            </text>
        </set>
        <set lineCount="42" fingerprint="39b9217b0958dc62ce09a9333a15c5e3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\sync_obj_reproj.cpp" startLineNumber="295" endLineNumber="357"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\sync_obj_reproj.cpp" startLineNumber="367" endLineNumber="429"/>
            <text>
<![CDATA[        return;
    }

    buf_flag = true;

    // image_obj_tracked > current_pose
    if (get_time(&(image_obj_tracked_ringbuf.front().header)) >= get_time(&(current_pose_ringbuf.front().header))) {
        current_pose_buf = current_pose_ringbuf.front();
        boost::circular_buffer<cv_tracker::image_obj_tracked>::iterator it = image_obj_tracked_ringbuf.begin();
        if (image_obj_tracked_ringbuf.size() == 1) {
            image_obj_tracked_buf = *it;
            pthread_mutex_unlock(&mutex);
            pthread_mutex_lock(&mutex);
            if (obj_label_flag == true) {
                publish();
            }
            pthread_mutex_unlock(&mutex);
            return;
        } else {
            for (it++; it != image_obj_tracked_ringbuf.end(); it++) {
                if (fabs_time_diff(&(current_pose_ringbuf.front().header), &((it-1)->header))
                    < fabs_time_diff(&(current_pose_ringbuf.front().header), &(it->header))) {
                    image_obj_tracked_buf = *(it-1);
                    break;
                }
            }
            if (it == image_obj_tracked_ringbuf.end()) {
                image_obj_tracked_buf = image_obj_tracked_ringbuf.back();
            }
        }

    } else {
        image_obj_tracked_buf = image_obj_tracked_ringbuf.front();
        boost::circular_buffer<geometry_msgs::PoseStamped>::iterator it = current_pose_ringbuf.begin();
        if (current_pose_ringbuf.size() == 1) {
            current_pose_buf = *it;
            pthread_mutex_unlock(&mutex);
            pthread_mutex_lock(&mutex);
            if (obj_label_flag == true) {
                publish();
            }
            pthread_mutex_unlock(&mutex);
            return;
        }

        for (it++; it != current_pose_ringbuf.end(); it++) {
            if (fabs_time_diff(&(image_obj_tracked_ringbuf.front().header), &((it-1)->header))
                < fabs_time_diff(&(image_obj_tracked_ringbuf.front().header), &(it->header))) {
                current_pose_buf = *(it-1);
                break;
            }
        }

        if (it == current_pose_ringbuf.end()) {
            current_pose_buf = current_pose_ringbuf.back();
        }
    }
    pthread_mutex_unlock(&mutex);
    pthread_mutex_lock(&mutex);
    if (obj_label_flag == true) {
        publish();
    }
    pthread_mutex_unlock(&mutex);
]]>
            </text>
        </set>
        <set lineCount="42" fingerprint="2312baa2683ba0528d2eb165d8df1af3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\load_model.cpp" startLineNumber="53" endLineNumber="108"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\load_model.cpp" startLineNumber="43" endLineNumber="99"/>
            <text>
<![CDATA[	MI->numcomponent=(int)t1;			//number of components
	fscanf(file,FLOAT_SCAN_FMT,&t1);
	MI->sbin=(int)t1;				//sbin
	fscanf(file,FLOAT_SCAN_FMT,&t1);
	MI->interval=(int)t1;				//interval
	fscanf(file,FLOAT_SCAN_FMT,&t1);
	MI->max_Y=(int)t1;				//max_Y
	fscanf(file,FLOAT_SCAN_FMT,&t1);
	MI->max_X=(int)t1;				//max_X

	//root filter information
	MI->ridx = (int*)malloc(sizeof(int)*MI->numcomponent);
	MI->oidx = (int*)malloc(sizeof(int)*MI->numcomponent);
	MI->offw = (FLOAT*)malloc(sizeof(FLOAT)*MI->numcomponent);
	MI->rsize = (int*)malloc(sizeof(int)*MI->numcomponent*2);
	MI->numpart = (int*)malloc(sizeof(int)*MI->numcomponent);

	//part filter information
	MI->pidx = (int**)malloc(sizeof(int*)*MI->numcomponent);
	MI->didx = (int**)malloc(sizeof(int*)*MI->numcomponent);
	MI->psize = (int**)malloc(sizeof(int*)*MI->numcomponent);

	for(int ii=0;ii<MI->numcomponent;ii++)	//LOOP (component)
	{
		fscanf(file,FLOAT_SCAN_FMT,&t1);
		MI->ridx[ii]=(int)t1-1;			//root index
		fscanf(file,FLOAT_SCAN_FMT,&t1);
		MI->oidx[ii]=(int)t1-1;			//offset index
		fscanf(file,FLOAT_SCAN_FMT,&t1);
		MI->offw[ii]=t1;				//offset weight (FLOAT)
		fscanf(file,FLOAT_SCAN_FMT2,&t1,&t2);
		MI->rsize[ii*2]=(int)t1;			//rsize (Y)
		MI->rsize[ii*2+1]=(int)t2;		//rsize (X)
		fscanf(file,FLOAT_SCAN_FMT,&t1);
		MI->numpart[ii]=(int)t1;			//number of part filter


		MI->pidx[ii]=(int*)malloc(sizeof(int)*MI->numpart[ii]);
		MI->didx[ii]=(int*)malloc(sizeof(int)*MI->numpart[ii]);
		MI->psize[ii]=(int*)malloc(sizeof(int)*MI->numpart[ii]*2);

		for(int jj=0;jj<MI->numpart[ii];jj++)	//LOOP (part-filter)
		{
			fscanf(file,FLOAT_SCAN_FMT,&t1);
			MI->pidx[ii][jj]=(int)t1-1;		//part index
			fscanf(file,FLOAT_SCAN_FMT,&t1);
			MI->didx[ii][jj]=(int)t1-1;		//define-index of part
			fscanf(file,FLOAT_SCAN_FMT2,&t1,&t2);
			MI->psize[ii][jj*2]=(int)t1;
			MI->psize[ii][jj*2+1]=(int)t2;
		}
	}

	//get defs information
	fscanf(file,FLOAT_SCAN_FMT,&t1);

	int DefL = int(t1);
]]>
            </text>
        </set>
        <set lineCount="42" fingerprint="b2b08a0bacb7d09c6290fb65848fddb6">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\glpangoglu.cpp" startLineNumber="175" endLineNumber="260"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\Thirdparty\Pangolin\src\gl\glpangoglu.cpp" startLineNumber="90" endLineNumber="175"/>
            <text>
<![CDATA[    return GL_TRUE;
}

// Based on glu implementation
GLint glProject(
    float objx, float objy, float objz,
    const float modelMatrix[16],
    const float projMatrix[16],
    const GLint viewport[4],
    float* winx, float* winy, float* winz)
{
    float t1[4] = {objx, objy, objz, 1.0f};
    float t2[4];

    MatMul<4,4,1,float>(t2, modelMatrix, t1);
    MatMul<4,4,1,float>(t1, projMatrix, t2);

    if (t1[3] == 0.0) {
        return(GL_FALSE);
    }

    // Normalise
    t1[0]/=t1[3];
    t1[1]/=t1[3];
    t1[2]/=t1[3];

    // Map x, y and z to range 0-1
    t1[0]=t1[0]*0.5f+0.5f;
    t1[1]=t1[1]*0.5f+0.5f;
    t1[2]=t1[2]*0.5f+0.5f;

    // Map x,y to viewport
    t1[0]=t1[0] * viewport[2] + viewport[0];
    t1[1]=t1[1] * viewport[3] + viewport[1];

    *winx=t1[0];
    *winy=t1[1];
    *winz=t1[2];

    return GL_TRUE;
}

// Based on glu implementation
GLint glUnProject(
    float winx, float winy, float winz,
    const float mv[16],
    const float proj[16],
    const GLint viewport[4],
    float* objx, float* objy, float* objz)
{
    float t1[16];

    MatMul<4,4,4,float>(t1, proj, mv);

    if (!InvertMatrix<float>(t1, t1)) {
        return(GL_FALSE);
    }

    // Map x and y from window coordinates
    float in[4] = {winx, winy, winz, 1.0f};
    in[0] = (in[0] - viewport[0]) / viewport[2];
    in[1] = (in[1] - viewport[1]) / viewport[3];

    // Map to range -1 to 1
    in[0] = in[0] * 2 - 1;
    in[1] = in[1] * 2 - 1;
    in[2] = in[2] * 2 - 1;

    float out[4];
    MatMul<4,4,1,float>(out, t1, in);

    if (out[3] == 0.0) {
        return(GL_FALSE);
    }

    // Normalise
    out[0] /= out[3];
    out[1] /= out[3];
    out[2] /= out[3];

    // Copy out
    *objx = out[0];
    *objy = out[1];
    *objz = out[2];

    return GL_TRUE;
]]>
            </text>
        </set>
        <set lineCount="42" fingerprint="fb0ca101773fa9c98671f094f0829ed8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1995" endLineNumber="2056"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2139" endLineNumber="2200"/>
            <text>
<![CDATA[  obj.waid = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::RoadEdge& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.lid = std::stoi(columns[1]);
  obj.linkid = std::stoi(columns[2]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::Gutter& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  obj.type = std::stoi(columns[2]);
  obj.linkid = std::stoi(columns[3]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::Curb& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.lid = std::stoi(columns[1]);
  obj.height = std::stod(columns[2]);
  obj.width = std::stod(columns[3]);
  obj.dir = std::stoi(columns[4]);
  obj.linkid = std::stoi(columns[5]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::WhiteLine& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.lid = std::stoi(columns[1]);
  obj.width = std::stod(columns[2]);
]]>
            </text>
        </set>
        <set lineCount="43" fingerprint="b063421bbc9b692ed7ea41d52993491a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2292" endLineNumber="2354"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="2231" endLineNumber="2293"/>
            <text>
<![CDATA[  obj.id = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  obj.linkid = std::stoi(columns[2]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::CrossWalk& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  obj.type = std::stoi(columns[2]);
  obj.bdid = std::stoi(columns[3]);
  obj.linkid = std::stoi(columns[4]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::RoadMark& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.aid = std::stoi(columns[1]);
  obj.type = std::stoi(columns[2]);
  obj.linkid = std::stoi(columns[3]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::RoadPole& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.plid = std::stoi(columns[1]);
  obj.linkid = std::stoi(columns[2]);
  return is;
}

std::istream& operator>>(std::istream& is, vector_map::RoadSign& obj)
{
  std::vector<std::string> columns;
  std::string column;
  while (std::getline(is, column, ','))
  {
    columns.push_back(column);
  }
  obj.id = std::stoi(columns[0]);
  obj.vid = std::stoi(columns[1]);
  obj.plid = std::stoi(columns[2]);
  obj.type = std::stoi(columns[3]);
]]>
            </text>
        </set>
        <set lineCount="43" fingerprint="bea56dc2e938158b5c8d7aa55800074b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="98" endLineNumber="335"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ocv\gpu\drvapi_error_string.h" startLineNumber="99" endLineNumber="331"/>
            <text>
<![CDATA[                { "CUDA_ERROR_INVALID_IMAGE", 200 },

                /**
                 * This most frequently indicates that there is no context bound to the
                 * current thread. This can also be returned if the context passed to an
                 * API call is not a valid handle (such as a context that has had
                 * ::cuCtxDestroy() invoked on it). This can also be returned if a user
                 * mixes different API versions (i.e. 3010 context with 3020 API calls).
                 * See ::cuCtxGetApiVersion() for more details.
                 */
                { "CUDA_ERROR_INVALID_CONTEXT", 201 },

                /**
                 * This indicated that the context being supplied as a parameter to the
                 * API call was already the active context.
                 * \deprecated
                 * This error return is deprecated as of CUDA 3.2. It is no longer an
                 * error to attempt to push the active context via ::cuCtxPushCurrent().
                 */
                { "CUDA_ERROR_CONTEXT_ALREADY_CURRENT", 202 },

                /**
                 * This indicates that a map or register operation has failed.
                 */
                { "CUDA_ERROR_MAP_FAILED", 205 },

                /**
                 * This indicates that an unmap or unregister operation has failed.
                 */
                { "CUDA_ERROR_UNMAP_FAILED", 206 },

                /**
                 * This indicates that the specified array is currently mapped and thus
                 * cannot be destroyed.
                 */
                { "CUDA_ERROR_ARRAY_IS_MAPPED", 207 },

                /**
                 * This indicates that the resource is already mapped.
                 */
                { "CUDA_ERROR_ALREADY_MAPPED", 208 },

                /**
                 * This indicates that there is no kernel image available that is suitable
                 * for the device. This can occur when a user specifies code generation
                 * options for a particular CUDA source file that do not include the
                 * corresponding device configuration.
                 */
                { "CUDA_ERROR_NO_BINARY_FOR_GPU", 209 },

                /**
                 * This indicates that a resource has already been acquired.
                 */
                { "CUDA_ERROR_ALREADY_ACQUIRED", 210 },

                /**
                 * This indicates that a resource is not mapped.
                 */
                { "CUDA_ERROR_NOT_MAPPED", 211 },

                /**
                 * This indicates that a mapped resource is not available for access as an
                 * array.
                 */
                { "CUDA_ERROR_NOT_MAPPED_AS_ARRAY", 212 },

                /**
                 * This indicates that a mapped resource is not available for access as a
                 * pointer.
                 */
                { "CUDA_ERROR_NOT_MAPPED_AS_POINTER", 213 },

                /**
                 * This indicates that an uncorrectable ECC error was detected during
                 * execution.
                 */
                { "CUDA_ERROR_ECC_UNCORRECTABLE", 214 },

                /**
                 * This indicates that the ::CUlimit passed to the API call is not
                 * supported by the active device.
                 */
                { "CUDA_ERROR_UNSUPPORTED_LIMIT", 215 },

                /**
                 * This indicates that the ::CUcontext passed to the API call can
                 * only be bound to a single CPU thread at a time but is already
                 * bound to a CPU thread.
                 */
                { "CUDA_ERROR_CONTEXT_ALREADY_IN_USE", 216 },

                /**
                 * This indicates that the device kernel source is invalid.
                 */
                { "CUDA_ERROR_INVALID_SOURCE", 300 },

                /**
                 * This indicates that the file specified was not found.
                 */
                { "CUDA_ERROR_FILE_NOT_FOUND", 301 },

                /**
                 * This indicates that a link to a shared object failed to resolve.
                 */
                { "CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND", 302 },

                /**
                 * This indicates that initialization of a shared object failed.
                 */
                { "CUDA_ERROR_SHARED_OBJECT_INIT_FAILED", 303 },

                /**
                 * This indicates that an OS call failed.
                 */
                { "CUDA_ERROR_OPERATING_SYSTEM", 304 },

                /**
                 * This indicates that a resource handle passed to the API call was not
                 * valid. Resource handles are opaque types like ::CUstream and ::CUevent.
                 */
                { "CUDA_ERROR_INVALID_HANDLE", 400 },

                /**
                 * This indicates that a named symbol was not found. Examples of symbols
                 * are global/constant variable names, texture names }, and surface names.
                 */
                { "CUDA_ERROR_NOT_FOUND", 500 },

                /**
                 * This indicates that asynchronous operations issued previously have not
                 * completed yet. This result is not actually an error, but must be indicated
                 * differently than ::CUDA_SUCCESS (which indicates completion). Calls that
                 * may return this value include ::cuEventQuery() and ::cuStreamQuery().
                 */
                { "CUDA_ERROR_NOT_READY", 600 },

                /**
                 * An exception occurred on the device while executing a kernel. Common
                 * causes include dereferencing an invalid device pointer and accessing
                 * out of bounds shared memory. The context cannot be used }, so it must
                 * be destroyed (and a new one should be created). All existing device
                 * memory allocations from this context are invalid and must be
                 * reconstructed if the program is to continue using CUDA.
                 */
                { "CUDA_ERROR_LAUNCH_FAILED", 700 },

                /**
                 * This indicates that a launch did not occur because it did not have
                 * appropriate resources. This error usually indicates that the user has
                 * attempted to pass too many arguments to the device kernel, or the
                 * kernel launch specifies too many threads for the kernel's register
                 * count. Passing arguments of the wrong size (i.e. a 64-bit pointer
                 * when a 32-bit int is expected) is equivalent to passing too many
                 * arguments and can also result in this error.
                 */
                { "CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES", 701 },

                /**
                 * This indicates that the device kernel took too long to execute. This can
                 * only occur if timeouts are enabled - see the device attribute
                 * ::CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT for more information. The
                 * context cannot be used (and must be destroyed similar to
                 * ::CUDA_ERROR_LAUNCH_FAILED). All existing device memory allocations from
                 * this context are invalid and must be reconstructed if the program is to
                 * continue using CUDA.
                 */
                { "CUDA_ERROR_LAUNCH_TIMEOUT", 702 },

                /**
                 * This error indicates a kernel launch that uses an incompatible texturing
                 * mode.
                 */
                { "CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING", 703 },

                /**
                 * This error indicates that a call to ::cuCtxEnablePeerAccess() is
                 * trying to re-enable peer access to a context which has already
                 * had peer access to it enabled.
                 */
                { "CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED", 704 },

                /**
                 * This error indicates that ::cuCtxDisablePeerAccess() is
                 * trying to disable peer access which has not been enabled yet
                 * via ::cuCtxEnablePeerAccess().
                 */
                { "CUDA_ERROR_PEER_ACCESS_NOT_ENABLED", 705 },

                /**
                 * This error indicates that the primary context for the specified device
                 * has already been initialized.
                 */
                { "CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE", 708 },

                /**
                 * This error indicates that the context current to the calling thread
                 * has been destroyed using ::cuCtxDestroy }, or is a primary context which
                 * has not yet been initialized.
                 */
                { "CUDA_ERROR_CONTEXT_IS_DESTROYED", 709 },

                /**
                 * A device-side assert triggered during kernel execution. The context
                 * cannot be used anymore, and must be destroyed. All existing device
                 * memory allocations from this context are invalid and must be
                 * reconstructed if the program is to continue using CUDA.
                 */
                { "CUDA_ERROR_ASSERT", 710 },

                /**
                 * This indicates that an unknown internal error has occurred.
                 */
                { "CUDA_ERROR_UNKNOWN", 999 },
                { NULL, -1 } };

// This is just a linear search through the array, since the error_id's are not
// always ocurring consecutively
inline const char * getCudaDrvErrorString(CUresult error_id)
{
    int index = 0;
    while (sCudaDrvErrorString[index].error_id != error_id
            && sCudaDrvErrorString[index].error_id != -1)
    {
        index++;
    }

    if (sCudaDrvErrorString[index].error_id == error_id)
        return (const char *) sCudaDrvErrorString[index].error_string;
    else
        return (const char *) "CUDA_ERROR not found!";
}

#endif
]]>
            </text>
        </set>
        <set lineCount="43" fingerprint="03b8727f7075c3deefebef9fd8f16810">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="252" endLineNumber="315"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="320" endLineNumber="383"/>
            <text>
<![CDATA[    map_loaded = 1;
  }
}

static void gnss_callback(const geometry_msgs::PoseStamped::ConstPtr& input)
{
  tf::Quaternion gnss_q(input->pose.orientation.x, input->pose.orientation.y, input->pose.orientation.z,
                        input->pose.orientation.w);
  tf::Matrix3x3 gnss_m(gnss_q);
  current_gnss_pose.x = input->pose.position.x;
  current_gnss_pose.y = input->pose.position.y;
  current_gnss_pose.z = input->pose.position.z;
  gnss_m.getRPY(current_gnss_pose.roll, current_gnss_pose.pitch, current_gnss_pose.yaw);

  if ((_use_gnss == 1 && init_pos_set == 0) || fitness_score >= 500.0)
  {
    previous_pose.x = previous_gnss_pose.x;
    previous_pose.y = previous_gnss_pose.y;
    previous_pose.z = previous_gnss_pose.z;
    previous_pose.roll = previous_gnss_pose.roll;
    previous_pose.pitch = previous_gnss_pose.pitch;
    previous_pose.yaw = previous_gnss_pose.yaw;

    current_pose.x = current_gnss_pose.x;
    current_pose.y = current_gnss_pose.y;
    current_pose.z = current_gnss_pose.z;
    current_pose.roll = current_gnss_pose.roll;
    current_pose.pitch = current_gnss_pose.pitch;
    current_pose.yaw = current_gnss_pose.yaw;

    offset_x = current_pose.x - previous_pose.x;
    offset_y = current_pose.y - previous_pose.y;
    offset_z = current_pose.z - previous_pose.z;
    offset_yaw = current_pose.yaw - previous_pose.yaw;

    init_pos_set = 1;
  }

  previous_gnss_pose.x = current_gnss_pose.x;
  previous_gnss_pose.y = current_gnss_pose.y;
  previous_gnss_pose.z = current_gnss_pose.z;
  previous_gnss_pose.roll = current_gnss_pose.roll;
  previous_gnss_pose.pitch = current_gnss_pose.pitch;
  previous_gnss_pose.yaw = current_gnss_pose.yaw;
}

static void initialpose_callback(const geometry_msgs::PoseWithCovarianceStamped::ConstPtr& input)
{
  tf::TransformListener listener;
  tf::StampedTransform transform;
  try
  {
    ros::Time now = ros::Time(0);
    listener.waitForTransform("/map", "/world", now, ros::Duration(10.0));
    listener.lookupTransform("/map", "world", now, transform);
  }
  catch (tf::TransformException& ex)
  {
    ROS_ERROR("%s", ex.what());
  }

  tf::Quaternion q(input->pose.pose.orientation.x, input->pose.pose.orientation.y, input->pose.pose.orientation.z,
                   input->pose.pose.orientation.w);
  tf::Matrix3x3 m(q);
]]>
            </text>
        </set>
        <set lineCount="44" fingerprint="cfcd208495d565ef66e7dff9f98764da">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="95" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="94" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="93" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="92" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="91" endLineNumber="135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="90" endLineNumber="134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="89" endLineNumber="133"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="88" endLineNumber="132"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="87" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="86" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="85" endLineNumber="129"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="84" endLineNumber="128"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="83" endLineNumber="127"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="82" endLineNumber="126"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="81" endLineNumber="125"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="80" endLineNumber="124"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="79" endLineNumber="123"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="78" endLineNumber="122"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="77" endLineNumber="121"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="76" endLineNumber="120"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="75" endLineNumber="119"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\drvapi_error_string.h" startLineNumber="36" endLineNumber="314"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="131" endLineNumber="175"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="130" endLineNumber="173"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="129" endLineNumber="172"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="128" endLineNumber="171"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="127" endLineNumber="170"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="126" endLineNumber="169"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="125" endLineNumber="168"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="124" endLineNumber="167"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="123" endLineNumber="166"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="122" endLineNumber="165"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="120" endLineNumber="164"/>
            <text>
<![CDATA[  oss << "INSERT INTO CAN(";

  oss << "tm,";
  oss << "devmode,";
  oss << "drvcontmode,";
  oss << "drvoverridemode,";
  oss << "drvservo,";
  oss << "drivepedal,";
  oss << "targetpedalstr,";
  oss << "inputpedalstr,";
  oss << "targetveloc,";
  oss << "speed,";
  oss << "driveshift,";
  oss << "targetshift,";
  oss << "inputshift,";
  oss << "strmode,";
  oss << "strcontmode,";
  oss << "stroverridemode,";
  oss << "strservo,";
  oss << "targettorque,";
  oss << "torque,";
  oss << "angle,";
  oss << "targetangle,";
  oss << "bbrakepress,";
  oss << "brakepedal,";
  oss << "brtargetpedalstr,";
  oss << "brinputpedalstr,";
  oss << "battery,";
  oss << "voltage,";
  oss << "anp,";
  oss << "battmaxtemparature,";
  oss << "battmintemparature,";
  oss << "maxchgcurrent,";
  oss << "maxdischgcurrent,";
  oss << "sideacc,";
  oss << "accellfromp,";
  oss << "anglefromp,";
  oss << "brakepedalfromp,";
  oss << "speedfr,";
  oss << "speedfl,";
  oss << "speedrr,";
  oss << "speedrl,";
  oss << "velocfromp2,";
  oss << "drvmode,";
  oss << "devpedalstrfromp,";
]]>
            </text>
        </set>
        <set lineCount="44" fingerprint="765b600404c3a1eee93a1ec1b832b0ef">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="389" endLineNumber="444"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="395" endLineNumber="451"/>
            <text>
<![CDATA[    std::cout << "Transformation Matrix:" << std::endl;
    std::cout << t_localizer << std::endl;
    std::cout << "shift: " << shift << std::endl;
    std::cout << "-----------------------------------------------------------------" << std::endl;
    
}

int main(int argc, char **argv)
{
    previous_pose.x = 0.0;
    previous_pose.y = 0.0;
    previous_pose.z = 0.0;
    previous_pose.roll = 0.0;
    previous_pose.pitch = 0.0;
    previous_pose.yaw = 0.0;

    ndt_pose.x = 0.0;
    ndt_pose.y = 0.0;
    ndt_pose.z = 0.0;
    ndt_pose.roll = 0.0;
    ndt_pose.pitch = 0.0;
    ndt_pose.yaw = 0.0;

    current_pose.x = 0.0;
    current_pose.y = 0.0;
    current_pose.z = 0.0;
    current_pose.roll = 0.0;
    current_pose.pitch = 0.0;
    current_pose.yaw = 0.0;

    guess_pose.x = 0.0;
    guess_pose.y = 0.0;
    guess_pose.z = 0.0;
    guess_pose.roll = 0.0;
    guess_pose.pitch = 0.0;
    guess_pose.yaw = 0.0;

    added_pose.x = 0.0;
    added_pose.y = 0.0;
    added_pose.z = 0.0;
    added_pose.roll = 0.0;
    added_pose.pitch = 0.0;
    added_pose.yaw = 0.0;

    offset_x = 0.0;
    offset_y = 0.0;
    offset_z = 0.0;
    offset_yaw = 0.0;

    ros::init(argc, argv, "lazy_ndt_mapping");

    ros::NodeHandle nh;
    ros::NodeHandle private_nh("~");

    // setting parameters
    private_nh.getParam("reference_map_size", REFERENCE_MAP_SIZE);
    std::cout << "REFERENCE_MAP_SIZE: " << REFERENCE_MAP_SIZE << std::endl;
]]>
            </text>
        </set>
        <set lineCount="44" fingerprint="479c0a5fbcf8115b008a5d12ca0585d8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="157" endLineNumber="203"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\waypoint_maker\nodes\waypoint_clicker\waypoint_clicker.cpp" startLineNumber="169" endLineNumber="215"/>
            <text>
<![CDATA[	branching_marker.header.frame_id = frame_id;
	branching_marker.ns = "branching";
	branching_marker.id = 0;
	branching_marker.type = visualization_msgs::Marker::SPHERE_LIST;
	branching_marker.scale.x = 0.3;
	branching_marker.scale.y = 0.3;
	branching_marker.color.r = 0;
	branching_marker.color.g = 1;
	branching_marker.color.b = 0;
	branching_marker.color.a = 1;
	branching_marker.frame_locked = true;

	merging_marker.header.frame_id = frame_id;
	merging_marker.ns = "merging";
	merging_marker.id = 0;
	merging_marker.type = visualization_msgs::Marker::SPHERE_LIST;
	merging_marker.scale.x = 0.3;
	merging_marker.scale.y = 0.3;
	merging_marker.color.r = 1;
	merging_marker.color.g = 0;
	merging_marker.color.b = 0;
	merging_marker.color.a = 1;
	merging_marker.frame_locked = true;

	selection_marker.header.frame_id = frame_id;
	selection_marker.ns = "selection";
	selection_marker.id = 0;
	selection_marker.type = visualization_msgs::Marker::SPHERE_LIST;
	selection_marker.scale.x = 0.4;
	selection_marker.scale.y = 0.4;
	selection_marker.color.r = 1;
	selection_marker.color.g = 1;
	selection_marker.color.b = 0;
	selection_marker.color.a = 1;
	selection_marker.frame_locked = true;

	route_marker.header.frame_id = frame_id;
	route_marker.ns = "route";
	route_marker.id = 0;
	route_marker.type = visualization_msgs::Marker::LINE_STRIP;
	route_marker.scale.x = 0.2;
	route_marker.scale.y = 0.2;
	route_marker.color.r = 1;
	route_marker.color.g = 1;
	route_marker.color.b = 0;
	route_marker.color.a = 1;
	route_marker.frame_locked = true;
]]>
            </text>
        </set>
        <set lineCount="44" fingerprint="6b038c5296a22b04ce9ecdc939f49946">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="203" endLineNumber="268"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\lidar_tracker\nodes\obj_fusion\sync_obj_fusion.cpp" startLineNumber="227" endLineNumber="292"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\sync_obj_reproj.cpp" startLineNumber="287" endLineNumber="352"/>
            <text>
<![CDATA[void image_obj_tracked_callback(const cv_tracker::image_obj_tracked::ConstPtr& image_obj_tracked_msg) {
    pthread_mutex_lock(&mutex);
    image_obj_tracked_ringbuf.push_front(*image_obj_tracked_msg);

    //current_pose is empty
    if (current_pose_ringbuf.begin() == current_pose_ringbuf.end()) {
        pthread_mutex_unlock(&mutex);
        ROS_INFO("current_pose ring buffer is empty");
        return;
    }

    buf_flag = true;

    // image_obj_tracked > current_pose
    if (get_time(&(image_obj_tracked_ringbuf.front().header)) >= get_time(&(current_pose_ringbuf.front().header))) {
        current_pose_buf = current_pose_ringbuf.front();
        boost::circular_buffer<cv_tracker::image_obj_tracked>::iterator it = image_obj_tracked_ringbuf.begin();
        if (image_obj_tracked_ringbuf.size() == 1) {
            image_obj_tracked_buf = *it;
            pthread_mutex_unlock(&mutex);
            pthread_mutex_lock(&mutex);
            if (obj_label_flag == true) {
                publish();
            }
            pthread_mutex_unlock(&mutex);
            return;
        } else {
            for (it++; it != image_obj_tracked_ringbuf.end(); it++) {
                if (fabs_time_diff(&(current_pose_ringbuf.front().header), &((it-1)->header))
                    < fabs_time_diff(&(current_pose_ringbuf.front().header), &(it->header))) {
                    image_obj_tracked_buf = *(it-1);
                    break;
                }
            }
            if (it == image_obj_tracked_ringbuf.end()) {
                image_obj_tracked_buf = image_obj_tracked_ringbuf.back();
            }
        }

    } else {
        image_obj_tracked_buf = image_obj_tracked_ringbuf.front();
        boost::circular_buffer<geometry_msgs::PoseStamped>::iterator it = current_pose_ringbuf.begin();
        if (current_pose_ringbuf.size() == 1) {
            current_pose_buf = *it;
            pthread_mutex_unlock(&mutex);
            pthread_mutex_lock(&mutex);
            if (obj_label_flag == true) {
                publish();
            }
            pthread_mutex_unlock(&mutex);
            return;
        }

        for (it++; it != current_pose_ringbuf.end(); it++) {
            if (fabs_time_diff(&(image_obj_tracked_ringbuf.front().header), &((it-1)->header))
                < fabs_time_diff(&(image_obj_tracked_ringbuf.front().header), &(it->header))) {
                current_pose_buf = *(it-1);
                break;
            }
        }

        if (it == current_pose_ringbuf.end()) {
            current_pose_buf = current_pose_ringbuf.back();
        }
    }
    pthread_mutex_unlock(&mutex);
]]>
            </text>
        </set>
        <set lineCount="45" fingerprint="3293af31f57524c8418b2ca28afc5df3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\sync_obj_reproj.cpp" startLineNumber="357" endLineNumber="424"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\lidar_tracker\nodes\obj_fusion\sync_obj_fusion.cpp" startLineNumber="292" endLineNumber="359"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="268" endLineNumber="335"/>
            <text>
<![CDATA[    pthread_mutex_unlock(&mutex);
}

void cluster_centroids_callback(const lidar_tracker::centroids::ConstPtr& cluster_centroids_msg) {
    pthread_mutex_lock(&mutex);
    cluster_centroids_ringbuf.push_front(*cluster_centroids_msg);
    //obj_label is empty
    if (obj_label_ringbuf.begin() == obj_label_ringbuf.end()) {
        ROS_INFO("obj_label ring buffer is empty");
        pthread_mutex_unlock(&mutex);
        return;
    }

    buf_flag = true;

    // obj_label > cluster_centroids
    if (get_time(&(obj_label_ringbuf.front().header)) >= get_time(&(cluster_centroids_ringbuf.front().header))) {
        cluster_centroids_buf = cluster_centroids_ringbuf.front();
        boost::circular_buffer<cv_tracker::obj_label>::iterator it = obj_label_ringbuf.begin();
        if (obj_label_ringbuf.size() == 1) {
            obj_label_buf = *it;
            pthread_mutex_unlock(&mutex);
            pthread_mutex_lock(&mutex);
            if (obj_pose_flag == true) {
                publish();
            }
            pthread_mutex_unlock(&mutex);
            return;
        } else {
            for (it++; it != obj_label_ringbuf.end(); it++) {
                if (fabs_time_diff(&(cluster_centroids_ringbuf.front().header), &((it-1)->header))
                    < fabs_time_diff(&(cluster_centroids_ringbuf.front().header), &(it->header))) {
                    obj_label_buf = *(it-1);
                    break;
                }
            }
            if (it == obj_label_ringbuf.end()) {
                obj_label_buf = obj_label_ringbuf.back();
            }
        }

    } else {
        obj_label_buf = obj_label_ringbuf.front();
        boost::circular_buffer<lidar_tracker::centroids>::iterator it = cluster_centroids_ringbuf.begin();
        if (cluster_centroids_ringbuf.size() == 1) {
            cluster_centroids_buf = *it;
            pthread_mutex_unlock(&mutex);
            pthread_mutex_lock(&mutex);
            if (obj_pose_flag == true) {
                publish();
            }
            pthread_mutex_unlock(&mutex);
            return;
        }

        for (it++; it != cluster_centroids_ringbuf.end(); it++) {
            if (fabs_time_diff(&(obj_label_ringbuf.front().header), &((it-1)->header))
                < fabs_time_diff(&(obj_label_ringbuf.front().header), &(it->header))) {
                cluster_centroids_buf = *(it-1);
                break;
            }
        }

        if (it == cluster_centroids_ringbuf.end()) {
            cluster_centroids_buf = cluster_centroids_ringbuf.back();
        }
    }
    pthread_mutex_unlock(&mutex);
]]>
            </text>
        </set>
        <set lineCount="45" fingerprint="159ff78f505576c4b1918e74324d47c5">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\dpm_sync_2.cpp" startLineNumber="56" endLineNumber="125"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\copy.cpp" startLineNumber="71" endLineNumber="141"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\car_dpm_sync.cpp" startLineNumber="84" endLineNumber="154"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\sync_car_dpm.cpp" startLineNumber="84" endLineNumber="154"/>
            <text>
<![CDATA[void publish_msg(sensor_msgs::Image* p_image_raw_buf, sensor_msgs::PointCloud2* p_points_raw_buf)
{
    ROS_INFO("publish");
    image_raw_pub.publish(*p_image_raw_buf);
    points_raw_pub.publish(*p_points_raw_buf);
}

bool publish() {
    if (buf_flag) {
        pthread_mutex_lock(&mutex);

        //image_raw is empty
        if (image_raw_ringbuf.begin() == image_raw_ringbuf.end()) {
            pthread_mutex_unlock(&mutex);
            ROS_INFO("image_raw ring buffer is empty");
            return false;
        }

        //points_raw is empty
        if (points_raw_ringbuf.begin() == points_raw_ringbuf.end()) {
            pthread_mutex_unlock(&mutex);
            ROS_INFO("points_raw ring buffer is empty");
            return false;
        }

        // image_raw > points_raw
        if (get_time(&(image_raw_ringbuf.front().header)) >= get_time(&(points_raw_ringbuf.front().header))) {
            p_points_raw_buf = &(points_raw_ringbuf.front());
            boost::circular_buffer<sensor_msgs::Image>::iterator it = image_raw_ringbuf.begin();
            if (image_raw_ringbuf.size() == 1) {
                p_image_raw_buf = &*it;
                publish_msg(p_image_raw_buf, p_points_raw_buf);
                pthread_mutex_unlock(&mutex);
                return true;
            } else {
                for (it++; it != image_raw_ringbuf.end(); it++) {
                    if (fabs_time_diff(&(points_raw_ringbuf.front().header), &((it-1)->header))
                        < fabs_time_diff(&(points_raw_ringbuf.front().header), &(it->header))) {
                        p_image_raw_buf = &*(it-1);
                        break;
                    }
                }
                if (it == image_raw_ringbuf.end()) {
                    p_image_raw_buf = &(image_raw_ringbuf.back());
                }
            }
        }
        // image_raw < points_raw
        else {
            p_image_raw_buf = &(image_raw_ringbuf.front());
            boost::circular_buffer<sensor_msgs::PointCloud2>::iterator it = points_raw_ringbuf.begin();
            if (points_raw_ringbuf.size() == 1) {
                p_points_raw_buf = &*it;
                publish_msg(p_image_raw_buf, p_points_raw_buf);
                pthread_mutex_unlock(&mutex);
                return true;
            }

            for (it++; it != points_raw_ringbuf.end(); it++) {
                if (fabs_time_diff(&(image_raw_ringbuf.front().header), &((it-1)->header))
                    < fabs_time_diff(&(image_raw_ringbuf.front().header), &(it->header))) {
                    p_points_raw_buf = &*(it-1);
                    break;
                }
            }

            if (it == points_raw_ringbuf.end()) {
                p_points_raw_buf = &(points_raw_ringbuf.back());
            }
        }
        publish_msg(p_image_raw_buf, p_points_raw_buf);
]]>
            </text>
        </set>
        <set lineCount="45" fingerprint="303aeb1d2c8128d9eabf4cceb8ee27e3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\cpu\MODEL_info.h" startLineNumber="7" endLineNumber="85"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\MODEL_info.h" startLineNumber="1" endLineNumber="73"/>
            <text>
<![CDATA[#ifndef _MODEL_INFO_H_
#define _MODEL_INFO_H_

#include "switch_float.h"

//struct for model component information
struct Model_info {
	//basic information
	//from xxxcomp.csv
	int numcomponent;           //number of component
	int sbin;                   //cell size
	int interval;               //interval (for hierachical detection)
	int max_X;
	int max_Y;
	//from calculation
	int padx;                   //pad information
	int pady;
	int max_scale;
	//image size information
	int IM_WIDTH;
	int IM_HEIGHT;

//per root
	int *ridx;                  //root index information
	int *oidx;                  //offsetindex information
	FLOAT *offw;                //offset weight
	int *rsize;                 //root size
	int *numpart;               //number of part filter per component

//per part
	int **pidx;                 //part index information
	int **didx;                 //define index of part
	int **psize;

//defs
	FLOAT *def;                 //defs
	int *anchor;                //anchor

//least_square info
	FLOAT **x1;
	FLOAT **y1;
	FLOAT **x2;
	FLOAT **y2;

	bool ini;                   //flag for initialization
	FLOAT ratio;                //ratio of zooming image
};

//struct for root_filter_information
struct Rootfilters {
	int NoR;                    //number of root filter
	int **root_size;            //size of root filter
	FLOAT **rootfilter;         //weight of root filter
	int *rootsym;               //symmetric information
};

//struct for part_filter_information
struct Partfilters {
	int NoP;                    //number of part filter
	int **part_size;            //size of part filter
	FLOAT **partfilter;         //weight of root filter
	int *part_partner;          //symmetric-partner information
	int *part_sym;              //symmetric information of part filter
};

//model information
struct GPUModel {
	Model_info *MI;
	Rootfilters *RF;
	Partfilters *PF;
};

#endif /* _MODEL_INFO_H_ */
]]>
            </text>
        </set>
        <set lineCount="46" fingerprint="fafe7f6ddea4ed766dac8a33e10365a3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\random_filter\random_filter.cpp" startLineNumber="86" endLineNumber="150"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\filters\packages\points_downsampler\nodes\distance_filter\distance_filter.cpp" startLineNumber="103" endLineNumber="167"/>
            <text>
<![CDATA[  sensor_msgs::PointCloud2 filtered_msg;
  pcl::toROSMsg(*filtered_scan_ptr, filtered_msg);

  filter_end = std::chrono::system_clock::now();

  filtered_msg.header = input->header;
  filtered_points_pub.publish(filtered_msg);

  points_downsampler_info_msg.header = input->header;
  points_downsampler_info_msg.filter_name = "distance_filter";
  points_downsampler_info_msg.original_points_size = points_num;
  points_downsampler_info_msg.filtered_points_size = filtered_scan_ptr->size();
  points_downsampler_info_msg.original_ring_size = 0;
  points_downsampler_info_msg.original_ring_size = 0;
  points_downsampler_info_msg.exe_time = std::chrono::duration_cast<std::chrono::microseconds>(filter_end - filter_start).count() / 1000.0;
  points_downsampler_info_pub.publish(points_downsampler_info_msg);

  if(_output_log == true){
	  if(!ofs){
		  std::cerr << "Could not open " << filename << "." << std::endl;
		  exit(1);
	  }
	  ofs << points_downsampler_info_msg.header.seq << ","
		  << points_downsampler_info_msg.header.stamp << ","
		  << points_downsampler_info_msg.header.frame_id << ","
		  << points_downsampler_info_msg.filter_name << ","
		  << points_downsampler_info_msg.original_points_size << ","
		  << points_downsampler_info_msg.filtered_points_size << ","
		  << points_downsampler_info_msg.original_ring_size << ","
		  << points_downsampler_info_msg.filtered_ring_size << ","
		  << points_downsampler_info_msg.exe_time << ","
		  << std::endl;
  }

}

int main(int argc, char** argv)
{
  ros::init(argc, argv, "distance_filter");

  ros::NodeHandle nh;
  ros::NodeHandle private_nh("~");

  private_nh.getParam("points_topic", POINTS_TOPIC);
  private_nh.getParam("output_log", _output_log);
  if(_output_log == true){
	  char buffer[80];
	  std::time_t now = std::time(NULL);
	  std::tm *pnow = std::localtime(&now);
	  std::strftime(buffer,80,"%Y%m%d_%H%M%S",pnow);
	  filename = "distance_filter_" + std::string(buffer) + ".csv";
	  ofs.open(filename.c_str(), std::ios::app);
  }

  // Publishers
  filtered_points_pub = nh.advertise<sensor_msgs::PointCloud2>("/filtered_points", 10);
  points_downsampler_info_pub = nh.advertise<points_downsampler::PointsDownsamplerInfo>("/points_downsampler_info", 1000);

  // Subscribers
  ros::Subscriber config_sub = nh.subscribe("config/distance_filter", 10, config_callback);
  ros::Subscriber scan_sub = nh.subscribe(POINTS_TOPIC, 10, scan_callback);

  ros::spin();

  return 0;
]]>
            </text>
        </set>
        <set lineCount="47" fingerprint="b731dad3c94d792ab71221ca72ca5070">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\voxel_grid.h" startLineNumber="352" endLineNumber="489"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\voxel_grid.h" startLineNumber="701" endLineNumber="844"/>
            <text>
<![CDATA[        return (neighbors);
      }

      /** \brief Returns the layout of the leafs for fast access to cells relative to current position.
        * \note position at (i-min_x) + (j-min_y)*div_x + (k-min_z)*div_x*div_y holds the index of the element at coordinates (i,j,k) in the grid (-1 if empty)
        */
      inline std::vector<int> 
      getLeafLayout () { return (leaf_layout_); }

      /** \brief Returns the corresponding (i,j,k) coordinates in the grid of point (x,y,z).
        * \param[in] x the X point coordinate to get the (i, j, k) index at
        * \param[in] y the Y point coordinate to get the (i, j, k) index at
        * \param[in] z the Z point coordinate to get the (i, j, k) index at
        */
      inline Eigen::Vector3i 
      getGridCoordinates (float x, float y, float z) 
      { 
        return (Eigen::Vector3i (static_cast<int> (floor (x * inverse_leaf_size_[0])), 
                                 static_cast<int> (floor (y * inverse_leaf_size_[1])), 
                                 static_cast<int> (floor (z * inverse_leaf_size_[2])))); 
      }

      /** \brief Returns the index in the downsampled cloud corresponding to a given set of coordinates.
        * \param[in] ijk the coordinates (i,j,k) in the grid (-1 if empty)
        */
      inline int 
      getCentroidIndexAt (const Eigen::Vector3i &ijk)
      {
        int idx = ((Eigen::Vector4i() << ijk, 0).finished() - min_b_).dot (divb_mul_);
        if (idx < 0 || idx >= static_cast<int> (leaf_layout_.size ())) // this checks also if leaf_layout_.size () == 0 i.e. everything was computed as needed
        {
          //if (verbose)
          //  PCL_ERROR ("[pcl::%s::getCentroidIndexAt] Specified coordinate is outside grid bounds, or leaf layout is not saved, make sure to call setSaveLeafLayout(true) and filter(output) first!\n", getClassName ().c_str ());
          return (-1);
        }
        return (leaf_layout_[idx]);
      }

      /** \brief Provide the name of the field to be used for filtering data. In conjunction with  \a setFilterLimits,
        * points having values outside this interval will be discarded.
        * \param[in] field_name the name of the field that contains values used for filtering
        */
      inline void
      setFilterFieldName (const std::string &field_name)
      {
        filter_field_name_ = field_name;
      }

      /** \brief Get the name of the field used for filtering. */
      inline std::string const
      getFilterFieldName ()
      {
        return (filter_field_name_);
      }

      /** \brief Set the field filter limits. All points having field values outside this interval will be discarded.
        * \param[in] limit_min the minimum allowed field value
        * \param[in] limit_max the maximum allowed field value
        */
      inline void
      setFilterLimits (const double &limit_min, const double &limit_max)
      {
        filter_limit_min_ = limit_min;
        filter_limit_max_ = limit_max;
      }

      /** \brief Get the field filter limits (min/max) set by the user. The default values are -FLT_MAX, FLT_MAX. 
        * \param[out] limit_min the minimum allowed field value
        * \param[out] limit_max the maximum allowed field value
        */
      inline void
      getFilterLimits (double &limit_min, double &limit_max)
      {
        limit_min = filter_limit_min_;
        limit_max = filter_limit_max_;
      }

      /** \brief Set to true if we want to return the data outside the interval specified by setFilterLimits (min, max).
        * Default: false.
        * \param[in] limit_negative return data inside the interval (false) or outside (true)
        */
      inline void
      setFilterLimitsNegative (const bool limit_negative)
      {
        filter_limit_negative_ = limit_negative;
      }

      /** \brief Get whether the data outside the interval (min/max) is to be returned (true) or inside (false). 
        * \param[out] limit_negative true if data \b outside the interval [min; max] is to be returned, false otherwise
        */
      inline void
      getFilterLimitsNegative (bool &limit_negative)
      {
        limit_negative = filter_limit_negative_;
      }

      /** \brief Get whether the data outside the interval (min/max) is to be returned (true) or inside (false). 
        * \return true if data \b outside the interval [min; max] is to be returned, false otherwise
        */
      inline bool
      getFilterLimitsNegative ()
      {
        return (filter_limit_negative_);
      }

    protected:
      /** \brief The size of a leaf. */
      Eigen::Vector4f leaf_size_;

      /** \brief Internal leaf sizes stored as 1/leaf_size_ for efficiency reasons. */ 
      Eigen::Array4f inverse_leaf_size_;

      /** \brief Set to true if all fields need to be downsampled, or false if just XYZ. */
      bool downsample_all_data_;

      /** \brief Set to true if leaf layout information needs to be saved in \a
        * leaf_layout. 
        */
      bool save_leaf_layout_;

      /** \brief The leaf layout information for fast access to cells relative
        * to current position 
        */
      std::vector<int> leaf_layout_;

      /** \brief The minimum and maximum bin coordinates, the number of
        * divisions, and the division multiplier. 
        */
      Eigen::Vector4i min_b_, max_b_, div_b_, divb_mul_;

      /** \brief The desired user filter field name. */
      std::string filter_field_name_;

      /** \brief The minimum allowed filter value a point will be considered from. */
      double filter_limit_min_;

      /** \brief The maximum allowed filter value a point will be considered from. */
      double filter_limit_max_;

      /** \brief Set to true if we want to return the data outside (\a filter_limit_min_;\a filter_limit_max_). Default: false. */
      bool filter_limit_negative_;

      /** \brief Minimum number of points per voxel for the centroid to be computed */
      unsigned int min_points_per_voxel_;
]]>
            </text>
        </set>
        <set lineCount="48" fingerprint="7f0c29314d0db5a09e69d0683fc0e603">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="267" endLineNumber="344"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="263" endLineNumber="334"/>
            <text>
<![CDATA[    t3_end = ros::Time::now();
    d3 = t3_end - t3_start;
    
    t4_start = ros::Time::now();

    pcl::PointCloud<pcl::PointXYZI>::Ptr output_cloud(new pcl::PointCloud<pcl::PointXYZI>);
#ifdef USE_FAST_PCL
    if(_use_openmp == true){
    	ndt.omp_align(*output_cloud, init_guess);
    	fitness_score = ndt.omp_getFitnessScore();
    }else{
#endif
    	ndt.align(*output_cloud, init_guess);
    	fitness_score = ndt.getFitnessScore();
#ifdef USE_FAST_PCL
    }
#endif
    
    t_localizer = ndt.getFinalTransformation();
    t_base_link = t_localizer * tf_ltob;

    pcl::transformPointCloud(*scan_ptr, *transformed_scan_ptr, t_localizer);

    tf::Matrix3x3 mat_l, mat_b;

    mat_l.setValue(static_cast<double>(t_localizer(0, 0)), static_cast<double>(t_localizer(0, 1)), static_cast<double>(t_localizer(0, 2)),
		  static_cast<double>(t_localizer(1, 0)), static_cast<double>(t_localizer(1, 1)), static_cast<double>(t_localizer(1, 2)),
		  static_cast<double>(t_localizer(2, 0)), static_cast<double>(t_localizer(2, 1)), static_cast<double>(t_localizer(2, 2)));
    
    
    mat_b.setValue(static_cast<double>(t_base_link(0, 0)), static_cast<double>(t_base_link(0, 1)), static_cast<double>(t_base_link(0, 2)),
		  static_cast<double>(t_base_link(1, 0)), static_cast<double>(t_base_link(1, 1)), static_cast<double>(t_base_link(1, 2)),
		  static_cast<double>(t_base_link(2, 0)), static_cast<double>(t_base_link(2, 1)), static_cast<double>(t_base_link(2, 2)));
    
    // Update localizer_pose.
    localizer_pose.x = t_localizer(0, 3);
    localizer_pose.y = t_localizer(1, 3);
    localizer_pose.z = t_localizer(2, 3);
    mat_l.getRPY(localizer_pose.roll, localizer_pose.pitch, localizer_pose.yaw, 1);
    
    // Update ndt_pose.
    ndt_pose.x = t_base_link(0, 3);
    ndt_pose.y = t_base_link(1, 3);
    ndt_pose.z = t_base_link(2, 3);
    mat_b.getRPY(ndt_pose.roll, ndt_pose.pitch, ndt_pose.yaw, 1);
    
    current_pose.x = ndt_pose.x;
    current_pose.y = ndt_pose.y;
    current_pose.z = ndt_pose.z;
    current_pose.roll = ndt_pose.roll;
    current_pose.pitch = ndt_pose.pitch;
    current_pose.yaw = ndt_pose.yaw;

    transform.setOrigin(tf::Vector3(current_pose.x, current_pose.y, current_pose.z));
    q.setRPY(current_pose.roll, current_pose.pitch, current_pose.yaw);
    transform.setRotation(q);
    
    br.sendTransform(tf::StampedTransform(transform, scan_time, "map", "base_link"));
    
    // Calculate the offset (curren_pos - previous_pos)
    offset_x = current_pose.x - previous_pose.x;
    offset_y = current_pose.y - previous_pose.y;
    offset_z = current_pose.z - previous_pose.z;
    offset_yaw = current_pose.yaw - previous_pose.yaw;
    
    // Update position and posture. current_pos -> previous_pos
    previous_pose.x = current_pose.x;
    previous_pose.y = current_pose.y;
    previous_pose.z = current_pose.z;
    previous_pose.roll = current_pose.roll;
    previous_pose.pitch = current_pose.pitch;
    previous_pose.yaw = current_pose.yaw;
]]>
            </text>
        </set>
        <set lineCount="49" fingerprint="af29e1a09defbcae03cae99d4eae2694">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="609" endLineNumber="679"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="791" endLineNumber="861"/>
            <text>
<![CDATA[    std::cout << "(x,y,z,roll,pitch,yaw): " << std::endl;
    std::cout << "(" << current_pose.x << ", " << current_pose.y << ", " << current_pose.z << ", " << current_pose.roll
              << ", " << current_pose.pitch << ", " << current_pose.yaw << ")" << std::endl;
    std::cout << "Transformation Matrix: " << std::endl;
    std::cout << t << std::endl;
    std::cout << "-----------------------------------------------------------------" << std::endl;

    // Update offset
    if (_offset == "linear")
    {
      offset_x = diff_x;
      offset_y = diff_y;
      offset_z = diff_z;
      offset_yaw = diff_yaw;
    }
    else if (_offset == "quadratic")
    {
      offset_x = (current_velocity_x + current_accel_x * secs) * secs;
      offset_y = (current_velocity_y + current_accel_y * secs) * secs;
      offset_z = diff_z;
      offset_yaw = diff_yaw;
    }
    else if (_offset == "zero")
    {
      offset_x = 0.0;
      offset_y = 0.0;
      offset_z = 0.0;
      offset_yaw = 0.0;
    }

    // Update previous_***
    previous_pose.x = current_pose.x;
    previous_pose.y = current_pose.y;
    previous_pose.z = current_pose.z;
    previous_pose.roll = current_pose.roll;
    previous_pose.pitch = current_pose.pitch;
    previous_pose.yaw = current_pose.yaw;

    previous_scan_time.sec = current_scan_time.sec;
    previous_scan_time.nsec = current_scan_time.nsec;

    previous_previous_velocity = previous_velocity;
    previous_velocity = current_velocity;
    previous_velocity_x = current_velocity_x;
    previous_velocity_y = current_velocity_y;
    previous_velocity_z = current_velocity_z;
    previous_accel = current_accel;

    previous_estimated_vel_kmph.data = estimated_vel_kmph.data;
  }
}

int main(int argc, char** argv)
{
  ros::init(argc, argv, "ndt_matching");

  ros::NodeHandle nh;
  ros::NodeHandle private_nh("~");

  // Set log file name.
  char buffer[80];
  std::time_t now = std::time(NULL);
  std::tm* pnow = std::localtime(&now);
  std::strftime(buffer, 80, "%Y%m%d_%H%M%S", pnow);
  filename = "ndt_matching_" + std::string(buffer) + ".csv";
  ofs.open(filename.c_str(), std::ios::app);

  // Geting parameters
  private_nh.getParam("use_gnss", _use_gnss);
  private_nh.getParam("queue_size", _queue_size);
  private_nh.getParam("offset", _offset);
]]>
            </text>
        </set>
        <set lineCount="50" fingerprint="f329b8cf6882298b310a7e32dd7ea23d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\vscan_image_d_viewer\vscan_image_d_viewer.cpp" startLineNumber="187" endLineNumber="278"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\packages\viewers\nodes\points_image_d_viewer\points_image_d_viewer.cpp" startLineNumber="312" endLineNumber="390"/>
            <text>
<![CDATA[static void image_cb(const sensor_msgs::Image& msg)
{
  image_msg = msg;
  existImage = true;
  show();
}

static void points_cb(const points2image::PointsImageConstPtr& msg)
{
  points_msg = msg;
  existPoints = true;
  show();
}

int main(int argc, char **argv)
{
  /* create resizable window */
  cvNamedWindow(window_name, CV_WINDOW_NORMAL);
  cvStartWindowThread();

  ros::init(argc, argv, "points_image_d_viewer");
  ros::NodeHandle n;
  ros::NodeHandle private_nh("~");

  std::string image_topic_name;
  std::string car_node;
  std::string pedestrian_node;
  std::string points_node;

  if (private_nh.getParam("image_raw_topic", image_topic_name)) {
    ROS_INFO("Setting image topic to %s", image_topic_name.c_str());
  } else {
    ROS_INFO("No image topic received, defaulting to image_raw, you can use _image_raw_topic:=YOUR_NODE");
    image_topic_name = "/image_raw";
  }

  if (private_nh.getParam("car_node", car_node)) {
    ROS_INFO("Setting car positions node to %s", car_node.c_str());
  } else {
    ROS_INFO("No car positions node received, defaulting to car_pixel_xyz, you can use _car_node:=YOUR_TOPIC");
    car_node = "/obj_car/image_obj_ranged";
  }

  if (private_nh.getParam("pedestrian_node", pedestrian_node)) {
    ROS_INFO("Setting pedestrian positions node to %s", pedestrian_node.c_str());
  } else {
    ROS_INFO("No pedestrian positions node received, defaulting to pedestrian_pixel_xyz, you can use _pedestrian_node:=YOUR_TOPIC");
    pedestrian_node = "/obj_person/image_obj_ranged";
  }

  if (private_nh.getParam("points_node", points_node)) {
    ROS_INFO("Setting pedestrian positions node to %s", points_node.c_str());
  } else {
    ROS_INFO("No points node received, defaulting to points_image, you can use _points_node:=YOUR_TOPIC");
    points_node = "/points_image";
  }

  cv::generateColors(_colors, 25);

  ros::Subscriber scriber = n.subscribe(image_topic_name, 1,
                                        image_cb);
  ros::Subscriber scriber_car = n.subscribe(car_node, 1,
                                            car_updater_callback);
  ros::Subscriber scriber_ped = n.subscribe(pedestrian_node, 1,
                                            ped_updater_callback);
  ros::Subscriber scriber_points = n.subscribe(points_node, 1,
                                               points_cb);

  cv::Mat grayscale(256,1,CV_8UC1);
  for(int i=0;i<256;i++) {
    grayscale.at<uchar>(i)=i;
  }
  cv::applyColorMap(grayscale,colormap,cv::COLORMAP_JET);

  ros::spin();

  cvDestroyWindow(window_name);

  return 0;
]]>
            </text>
        </set>
        <set lineCount="53" fingerprint="a9e69271968dec0b9a6cf269775ba5f9">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\voxel_grid.h" startLineNumber="195" endLineNumber="320"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\lib\fast_pcl\filters\include\fast_pcl\filters\voxel_grid.h" startLineNumber="522" endLineNumber="646"/>
            <text>
<![CDATA[    public:
      /** \brief Empty constructor. */
      VoxelGrid () : 
        leaf_size_ (Eigen::Vector4f::Zero ()),
        inverse_leaf_size_ (Eigen::Array4f::Zero ()),
        downsample_all_data_ (true), 
        save_leaf_layout_ (false),
        leaf_layout_ (),
        min_b_ (Eigen::Vector4i::Zero ()),
        max_b_ (Eigen::Vector4i::Zero ()),
        div_b_ (Eigen::Vector4i::Zero ()),
        divb_mul_ (Eigen::Vector4i::Zero ()),
        filter_field_name_ (""), 
        filter_limit_min_ (-FLT_MAX), 
        filter_limit_max_ (FLT_MAX),
        filter_limit_negative_ (false),
        min_points_per_voxel_ (0)
      {
        filter_name_ = "VoxelGrid";
      }

      /** \brief Destructor. */
      virtual ~VoxelGrid ()
      {
      }

      /** \brief Set the voxel grid leaf size.
        * \param[in] leaf_size the voxel grid leaf size
        */
      inline void 
      setLeafSize (const Eigen::Vector4f &leaf_size) 
      { 
        leaf_size_ = leaf_size; 
        // Avoid division errors
        if (leaf_size_[3] == 0)
          leaf_size_[3] = 1;
        // Use multiplications instead of divisions
        inverse_leaf_size_ = Eigen::Array4f::Ones () / leaf_size_.array ();
      }

      /** \brief Set the voxel grid leaf size.
        * \param[in] lx the leaf size for X
        * \param[in] ly the leaf size for Y
        * \param[in] lz the leaf size for Z
        */
      inline void
      setLeafSize (float lx, float ly, float lz)
      {
        leaf_size_[0] = lx; leaf_size_[1] = ly; leaf_size_[2] = lz;
        // Avoid division errors
        if (leaf_size_[3] == 0)
          leaf_size_[3] = 1;
        // Use multiplications instead of divisions
        inverse_leaf_size_ = Eigen::Array4f::Ones () / leaf_size_.array ();
      }

      /** \brief Get the voxel grid leaf size. */
      inline Eigen::Vector3f 
      getLeafSize () { return (leaf_size_.head<3> ()); }

      /** \brief Set to true if all fields need to be downsampled, or false if just XYZ.
        * \param[in] downsample the new value (true/false)
        */
      inline void 
      setDownsampleAllData (bool downsample) { downsample_all_data_ = downsample; }

      /** \brief Get the state of the internal downsampling parameter (true if
        * all fields need to be downsampled, false if just XYZ). 
        */
      inline bool 
      getDownsampleAllData () { return (downsample_all_data_); }

      /** \brief Set the minimum number of points required for a voxel to be used.
        * \param[in] min_points_per_voxel the minimum number of points for required for a voxel to be used
        */
      inline void 
      setMinimumPointsNumberPerVoxel (unsigned int min_points_per_voxel) { min_points_per_voxel_ = min_points_per_voxel; }

	  /** \brief Return the minimum number of points required for a voxel to be used.
       */
	  inline unsigned int
	  getMinimumPointsNumberPerVoxel () { return min_points_per_voxel_; }

      /** \brief Set to true if leaf layout information needs to be saved for later access.
        * \param[in] save_leaf_layout the new value (true/false)
        */
      inline void 
      setSaveLeafLayout (bool save_leaf_layout) { save_leaf_layout_ = save_leaf_layout; }

      /** \brief Returns true if leaf layout information will to be saved for later access. */
      inline bool 
      getSaveLeafLayout () { return (save_leaf_layout_); }

      /** \brief Get the minimum coordinates of the bounding box (after
        * filtering is performed). 
        */
      inline Eigen::Vector3i 
      getMinBoxCoordinates () { return (min_b_.head<3> ()); }

      /** \brief Get the minimum coordinates of the bounding box (after
        * filtering is performed). 
        */
      inline Eigen::Vector3i 
      getMaxBoxCoordinates () { return (max_b_.head<3> ()); }

      /** \brief Get the number of divisions along all 3 axes (after filtering
        * is performed). 
        */
      inline Eigen::Vector3i 
      getNrDivisions () { return (div_b_.head<3> ()); }

      /** \brief Get the multipliers to be applied to the grid coordinates in
        * order to find the centroid index (after filtering is performed). 
        */
      inline Eigen::Vector3i 
      getDivisionMultiplier () { return (divb_mul_.head<3> ()); }

      /** \brief Returns the index in the resulting downsampled cloud of the specified point.
        * \note for efficiency, user must make sure that the saving of the leaf layout is enabled and filtering performed,
        * and that the point is inside the grid, to avoid invalid access (or use getGridCoordinates+getCentroidIndexAt)
        * \param[in] x the X point coordinate to get the index at
        * \param[in] y the Y point coordinate to get the index at
        * \param[in] z the Z point coordinate to get the index at
        */
      inline int 
]]>
            </text>
        </set>
        <set lineCount="54" fingerprint="cfcd208495d565ef66e7dff9f98764da">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="85" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="84" endLineNumber="138"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="83" endLineNumber="137"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="82" endLineNumber="136"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="81" endLineNumber="135"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="80" endLineNumber="134"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="79" endLineNumber="133"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="78" endLineNumber="132"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="77" endLineNumber="131"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="76" endLineNumber="130"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="75" endLineNumber="129"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\obj_db\nodes\can_uploader\can_uploader.cpp" startLineNumber="120" endLineNumber="175"/>
            <text>
<![CDATA[  oss << "INSERT INTO CAN(";

  oss << "tm,";
  oss << "devmode,";
  oss << "drvcontmode,";
  oss << "drvoverridemode,";
  oss << "drvservo,";
  oss << "drivepedal,";
  oss << "targetpedalstr,";
  oss << "inputpedalstr,";
  oss << "targetveloc,";
  oss << "speed,";
  oss << "driveshift,";
  oss << "targetshift,";
  oss << "inputshift,";
  oss << "strmode,";
  oss << "strcontmode,";
  oss << "stroverridemode,";
  oss << "strservo,";
  oss << "targettorque,";
  oss << "torque,";
  oss << "angle,";
  oss << "targetangle,";
  oss << "bbrakepress,";
  oss << "brakepedal,";
  oss << "brtargetpedalstr,";
  oss << "brinputpedalstr,";
  oss << "battery,";
  oss << "voltage,";
  oss << "anp,";
  oss << "battmaxtemparature,";
  oss << "battmintemparature,";
  oss << "maxchgcurrent,";
  oss << "maxdischgcurrent,";
  oss << "sideacc,";
  oss << "accellfromp,";
  oss << "anglefromp,";
  oss << "brakepedalfromp,";
  oss << "speedfr,";
  oss << "speedfl,";
  oss << "speedrr,";
  oss << "speedrl,";
  oss << "velocfromp2,";
  oss << "drvmode,";
  oss << "devpedalstrfromp,";
  oss << "rpm,";
  oss << "velocflfromp,";
  oss << "ev_mode,";
  oss << "temp,";
  oss << "shiftfrmprius,";
  oss << "light,";
  oss << "gaslevel,";
  oss << "door,";
  oss << "cluise";

  oss << ") VALUES(";
]]>
            </text>
        </set>
        <set lineCount="54" fingerprint="1115668d0dcf91ad9f635961da95a91e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\lidar_tracker\nodes\obj_fusion\sync_obj_fusion.cpp" startLineNumber="362" endLineNumber="436"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\sync_obj_reproj.cpp" startLineNumber="205" endLineNumber="280"/>
            <text>
<![CDATA[#endif

void obj_label_callback(const cv_tracker::obj_label::ConstPtr& obj_label_msg) {
    pthread_mutex_lock(&mutex);
    obj_label_flag = true;
    ROS_INFO("catch publish request");
    if (publish() == false) {
        ROS_INFO("waitting...");
    }
    pthread_mutex_unlock(&mutex);}

void* thread(void* args)
{
    ros::NodeHandle nh_rcv;
    ros::CallbackQueue rcv_callbackqueue;
    nh_rcv.setCallbackQueue(&rcv_callbackqueue);
    ros::Subscriber obj_label_sub = nh_rcv.subscribe("/obj_label", 5, obj_label_callback);
    while (nh_rcv.ok()) {
        rcv_callbackqueue.callAvailable(ros::WallDuration(1.0f));
        pthread_mutex_lock(&mutex);
        bool flag = (obj_label_flag == false && buf_flag == true);
        if (flag) {
            ROS_INFO("timeout");
            if(!publish()) {
                /* when to publish is failure, republish */
                struct timespec sleep_time;
                sleep_time.tv_sec = 0;
                sleep_time.tv_nsec = 200000000; //5Hz
                while (!publish() && ros::ok())
                    nanosleep(&sleep_time, NULL);
            }
        }
        pthread_mutex_unlock(&mutex);
    }
    return NULL;
}

int main(int argc, char **argv) {
    /* init */
    buf_flag = false;
    obj_label_flag = false;
    ros::init(argc, argv, "sync_reprojection");
    ros::NodeHandle nh;

    /* create server thread */
    pthread_t th;
    pthread_create(&th, NULL, thread, (void *)NULL );

    ros::Subscriber image_obj_tracked_sub = nh.subscribe("/image_obj_tracked", 1, image_obj_tracked_callback);
    ros::Subscriber current_pose_sub = nh.subscribe("/current_pose", 1, current_pose_callback);
    image_obj_tracked__pub = nh.advertise<cv_tracker::image_obj_tracked>("/sync_reprojection/image_obj_tracked", 5);
    current_pose__pub = nh.advertise<geometry_msgs::PoseStamped>("/sync_reprojection/current_pose", 5);

    while (!buf_flag && ros::ok()) {
        ros::spinOnce();
        usleep(100000);
    }
    pthread_mutex_lock(&mutex);
    if(!publish()) {
        /* when to publish is failure, republish */
        struct timespec sleep_time;
        sleep_time.tv_sec = 0;
        sleep_time.tv_nsec = 200000000; //5Hz
        while (!publish() && ros::ok())
            nanosleep(&sleep_time, NULL);
    }
    pthread_mutex_unlock(&mutex);

    ros::spin();

    /* shutdown server thread */
    ROS_INFO("wait until shutdown a thread");
    pthread_kill(th, SIGINT);
    pthread_join(th, NULL);

    return 0;
]]>
            </text>
        </set>
        <set lineCount="56" fingerprint="9dfc7da08fad6902b15a80da53b6a0a2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching\ndt_matching.cpp" startLineNumber="516" endLineNumber="605"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\icp_localizer\nodes\icp_matching\icp_matching.cpp" startLineNumber="405" endLineNumber="494"/>
            <text>
<![CDATA[    tf::Matrix3x3 mat_l;  // localizer
    mat_l.setValue(static_cast<double>(t(0, 0)), static_cast<double>(t(0, 1)), static_cast<double>(t(0, 2)),
                   static_cast<double>(t(1, 0)), static_cast<double>(t(1, 1)), static_cast<double>(t(1, 2)),
                   static_cast<double>(t(2, 0)), static_cast<double>(t(2, 1)), static_cast<double>(t(2, 2)));

    // Update localizer_pose
    localizer_pose.x = t(0, 3);
    localizer_pose.y = t(1, 3);
    localizer_pose.z = t(2, 3);
    mat_l.getRPY(localizer_pose.roll, localizer_pose.pitch, localizer_pose.yaw, 1);

    tf::Matrix3x3 mat_b;  // base_link
    mat_b.setValue(static_cast<double>(t2(0, 0)), static_cast<double>(t2(0, 1)), static_cast<double>(t2(0, 2)),
                   static_cast<double>(t2(1, 0)), static_cast<double>(t2(1, 1)), static_cast<double>(t2(1, 2)),
                   static_cast<double>(t2(2, 0)), static_cast<double>(t2(2, 1)), static_cast<double>(t2(2, 2)));

    // Update ndt_pose
    icp_pose.x = t2(0, 3);
    icp_pose.y = t2(1, 3);
    icp_pose.z = t2(2, 3);
    mat_b.getRPY(icp_pose.roll, icp_pose.pitch, icp_pose.yaw, 1);

    // Calculate the difference between ndt_pose and predict_pose
    predict_pose_error = sqrt((icp_pose.x - predict_pose.x) * (icp_pose.x - predict_pose.x) +
                              (icp_pose.y - predict_pose.y) * (icp_pose.y - predict_pose.y) +
                              (icp_pose.z - predict_pose.z) * (icp_pose.z - predict_pose.z));

    if (predict_pose_error <= PREDICT_POSE_THRESHOLD)
    {
      use_predict_pose = 0;
    }
    else
    {
      use_predict_pose = 1;
    }
    use_predict_pose = 0;

    if (use_predict_pose == 0)
    {
      current_pose.x = icp_pose.x;
      current_pose.y = icp_pose.y;
      current_pose.z = icp_pose.z;
      current_pose.roll = icp_pose.roll;
      current_pose.pitch = icp_pose.pitch;
      current_pose.yaw = icp_pose.yaw;
    }
    else
    {
      current_pose.x = predict_pose.x;
      current_pose.y = predict_pose.y;
      current_pose.z = predict_pose.z;
      current_pose.roll = predict_pose.roll;
      current_pose.pitch = predict_pose.pitch;
      current_pose.yaw = predict_pose.yaw;
    }

    // Compute the velocity and acceleration
    scan_duration = current_scan_time - previous_scan_time;
    double secs = scan_duration.toSec();
    diff_x = current_pose.x - previous_pose.x;
    diff_y = current_pose.y - previous_pose.y;
    diff_z = current_pose.z - previous_pose.z;
    diff_yaw = current_pose.yaw - previous_pose.yaw;
    diff = sqrt(diff_x * diff_x + diff_y * diff_y + diff_z * diff_z);

    current_velocity = diff / secs;
    current_velocity_x = diff_x / secs;
    current_velocity_y = diff_y / secs;
    current_velocity_z = diff_z / secs;
    angular_velocity = diff_yaw / secs;

    current_velocity_smooth = (current_velocity + previous_velocity + previous_previous_velocity) / 3.0;
    if (current_velocity_smooth < 0.2)
    {
      current_velocity_smooth = 0.0;
    }

    current_accel = (current_velocity - previous_velocity) / secs;
    current_accel_x = (current_velocity_x - previous_velocity_x) / secs;
    current_accel_y = (current_velocity_y - previous_velocity_y) / secs;
    current_accel_z = (current_velocity_z - previous_velocity_z) / secs;

    estimated_vel_mps.data = current_velocity;
    estimated_vel_kmph.data = current_velocity * 3.6;

    estimated_vel_mps_pub.publish(estimated_vel_mps);
    estimated_vel_kmph_pub.publish(estimated_vel_kmph);

    // Set values for publishing pose
    predict_q.setRPY(predict_pose.roll, predict_pose.pitch, predict_pose.yaw);
]]>
            </text>
        </set>
        <set lineCount="57" fingerprint="79f43ad95b6bbab54f51c03919cd668e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="354" endLineNumber="444"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="325" endLineNumber="416"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="820" endLineNumber="910"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="663" endLineNumber="753"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="635" endLineNumber="725"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="606" endLineNumber="697"/>
            <text>
<![CDATA[      visualization_msgs::Marker pole_marker = createPoleMarker("street_light", id++, pole_color, vmap, pole);
      if (isValidMarker(pole_marker))
        marker_array.markers.push_back(pole_marker);
      else
        ROS_ERROR_STREAM("[createStreetLightMarkerArray] failed createPoleMarker: " << pole);
    }
  }
  return marker_array;
}

visualization_msgs::MarkerArray createUtilityPoleMarkerArray(const VectorMap& vmap, Color color)
{
  visualization_msgs::MarkerArray marker_array;
  int id = 0;
  for (const auto& utility_pole : vmap.findByFilter([](const UtilityPole& utility_pole){return true;}))
  {
    if (utility_pole.plid == 0)
    {
      ROS_ERROR_STREAM("[createUtilityPoleMarkerArray] invalid utility_pole: " << utility_pole);
      continue;
    }

    Pole pole = vmap.findByKey(Key<Pole>(utility_pole.plid));
    if (pole.plid == 0)
    {
      ROS_ERROR_STREAM("[createUtilityPoleMarkerArray] invalid pole: " << pole);
      continue;
    }

    visualization_msgs::Marker marker = createPoleMarker("utility_pole", id++, color, vmap, pole);
    if (isValidMarker(marker))
      marker_array.markers.push_back(marker);
    else
      ROS_ERROR_STREAM("[createUtilityPoleMarkerArray] failed createPoleMarker: " << pole);
  }
  return marker_array;
}

visualization_msgs::MarkerArray createGuardRailMarkerArray(const VectorMap& vmap, Color color)
{
  visualization_msgs::MarkerArray marker_array;
  int id = 0;
  for (const auto& guard_rail : vmap.findByFilter([](const GuardRail& guard_rail){return true;}))
  {
    if (guard_rail.aid == 0)
    {
      ROS_ERROR_STREAM("[createGuardRailMarkerArray] invalid guard_rail: " << guard_rail);
      continue;
    }

    Area area = vmap.findByKey(Key<Area>(guard_rail.aid));
    if (area.aid == 0)
    {
      ROS_ERROR_STREAM("[createGuardRailMarkerArray] invalid area: " << area);
      continue;
    }

    visualization_msgs::Marker marker = createAreaMarker("guard_rail", id++, color, vmap, area);
    if (isValidMarker(marker))
      marker_array.markers.push_back(marker);
    else
      ROS_ERROR_STREAM("[createGuardRailMarkerArray] failed createAreaMarker: " << area);
  }
  return marker_array;
}

visualization_msgs::MarkerArray createSideWalkMarkerArray(const VectorMap& vmap, Color color)
{
  visualization_msgs::MarkerArray marker_array;
  int id = 0;
  for (const auto& side_walk : vmap.findByFilter([](const SideWalk& side_walk){return true;}))
  {
    if (side_walk.aid == 0)
    {
      ROS_ERROR_STREAM("[createSideWalkMarkerArray] invalid side_walk: " << side_walk);
      continue;
    }

    Area area = vmap.findByKey(Key<Area>(side_walk.aid));
    if (area.aid == 0)
    {
      ROS_ERROR_STREAM("[createSideWalkMarkerArray] invalid area: " << area);
      continue;
    }

    visualization_msgs::Marker marker = createAreaMarker("side_walk", id++, color, vmap, area);
    if (isValidMarker(marker))
      marker_array.markers.push_back(marker);
    else
      ROS_ERROR_STREAM("[createSideWalkMarkerArray] failed createAreaMarker: " << area);
  }
  return marker_array;
]]>
            </text>
        </set>
        <set lineCount="57" fingerprint="21259c4e8e198dfd39d60e27ad2a711e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="387" endLineNumber="471"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="381" endLineNumber="465"/>
            <text>
<![CDATA[			exit(1);
		}

		res = cuMemFree(featp2_dev[i]);
		if(res != CUDA_SUCCESS) {
			printf("cuMemFree(featp2_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemFree(A_SIZE_dev[i]);
		if(res != CUDA_SUCCESS) {
			printf("cuMemFree(A_SIZE_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemFree(B_dev[i]);
		if(res != CUDA_SUCCESS) {
			printf("cuMemFree(B_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemFree(B_dims_dev[i]);
		if(res != CUDA_SUCCESS) {
			printf("cuMemFree(B_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemFree(fconvs_error_array_dev[i]);
		if(res != CUDA_SUCCESS) {
			printf("cuMemFree(fconvs_error_array_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemFree(fconvs_C_dev[i]);
		if(res != CUDA_SUCCESS) {
			printf("cuMemFree(fconvs_C_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemFree(part_C_dev[i]);
		if(res != CUDA_SUCCESS) {
			printf("cuMemFree(part_C_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemFree(part_error_array_dev[i]);
		if(res != CUDA_SUCCESS) {
			printf("cuMemFree(part_error_array_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemFree(pm_size_array_dev[i]);
		if(res != CUDA_SUCCESS){
			printf("cuMemFree(pm_size_array_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemFree(def_array_dev[i]);
		if(res != CUDA_SUCCESS) {
			printf("cuMemFree(def_array_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemFree(numpart_dev[i]);
		if(res != CUDA_SUCCESS) {
			printf("cuMemFree(numpart_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemFree(M_dev[i]);
		if(res != CUDA_SUCCESS) {
			printf("cuMemFree(M_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemFree(tmpM_dev[i]);
		if(res != CUDA_SUCCESS) {
			printf("cuMemFree(tmpM_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemFree(tmpIx_dev[i]);
		if(res != CUDA_SUCCESS) {
			printf("cuMemFree(tmpIx_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
]]>
            </text>
        </set>
        <set lineCount="60" fingerprint="e2f8e1ca1dbdcec762f7229139f23872">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\range_fusion\sync_range_fusion.cpp" startLineNumber="174" endLineNumber="256"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\kf_track\sync_track.cpp" startLineNumber="174" endLineNumber="256"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\sync_obj_reproj.cpp" startLineNumber="174" endLineNumber="256"/>
            <text>
<![CDATA[        return;
    }
    buf_flag = true;
    pthread_mutex_unlock(&mutex);
    pthread_mutex_lock(&mutex);
    if (obj_label_flag == true) {
        publish();
    }
    pthread_mutex_unlock(&mutex);
}

void current_pose_callback(const geometry_msgs::PoseStamped::ConstPtr& current_pose_msg) {
    pthread_mutex_lock(&mutex);
    current_pose_ringbuf.push_front(*current_pose_msg);
    //image_obj_tracked is empty
    if (image_obj_tracked_ringbuf.begin() == image_obj_tracked_ringbuf.end()) {
        ROS_INFO("image_obj_tracked ring buffer is empty");
        buf_flag = false;
        pthread_mutex_unlock(&mutex);
        return;
    }
    buf_flag = true;
    pthread_mutex_unlock(&mutex);
    pthread_mutex_lock(&mutex);
    if (obj_label_flag == true) {
        publish();
    }
    pthread_mutex_unlock(&mutex);
}

#else
#endif

void obj_label_callback(const cv_tracker::obj_label::ConstPtr& obj_label_msg) {
    pthread_mutex_lock(&mutex);
    obj_label_flag = true;
    ROS_INFO("catch publish request");
    if (publish() == false) {
        ROS_INFO("waitting...");
    }
    pthread_mutex_unlock(&mutex);}

void* thread(void* args)
{
    ros::NodeHandle nh_rcv;
    ros::CallbackQueue rcv_callbackqueue;
    nh_rcv.setCallbackQueue(&rcv_callbackqueue);
    ros::Subscriber obj_label_sub = nh_rcv.subscribe("/obj_label", 5, obj_label_callback);
    while (nh_rcv.ok()) {
        rcv_callbackqueue.callAvailable(ros::WallDuration(1.0f));
        pthread_mutex_lock(&mutex);
        bool flag = (obj_label_flag == false && buf_flag == true);
        if (flag) {
            ROS_INFO("timeout");
            if(!publish()) {
                /* when to publish is failure, republish */
                struct timespec sleep_time;
                sleep_time.tv_sec = 0;
                sleep_time.tv_nsec = 200000000; //5Hz
                while (!publish() && ros::ok())
                    nanosleep(&sleep_time, NULL);
            }
        }
        pthread_mutex_unlock(&mutex);
    }
    return NULL;
}

int main(int argc, char **argv) {
    /* init */
    buf_flag = false;
    obj_label_flag = false;
    ros::init(argc, argv, "sync_reprojection");
    ros::NodeHandle nh;

    /* create server thread */
    pthread_t th;
    pthread_create(&th, NULL, thread, (void *)NULL );

    ros::Subscriber image_obj_tracked_sub = nh.subscribe("/image_obj_tracked", 1, image_obj_tracked_callback);
    ros::Subscriber current_pose_sub = nh.subscribe("/current_pose", 1, current_pose_callback);
    image_obj_tracked__pub = nh.advertise<cv_tracker::image_obj_tracked>("/sync_reprojection/image_obj_tracked", 5);
    current_pose__pub = nh.advertise<geometry_msgs::PoseStamped>("/sync_reprojection/current_pose", 5);
]]>
            </text>
        </set>
        <set lineCount="61" fingerprint="8dad6532013838e3a7be6e3ee4778b29">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="62" endLineNumber="146"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\util\packages\sample_data\nodes\sample_vector_map\sample_vector_map.cpp" startLineNumber="422" endLineNumber="508"/>
            <text>
<![CDATA[  return ret;
}

/* for area.csv */
struct AreaClass {
  int aid;
  int slid;
  int elid;
};

std::vector<AreaClass> read_areaclass(const char *filename)
{
  int max_id;
  Tbl tbl = read_csv(filename, &max_id);
  size_t i, n = tbl.size();
  std::vector<AreaClass> ret(max_id + 1);
  for (i=0; i<n; i++) {
    int id = std::stoi(tbl[i][0]);
    ret[id].aid = id;
    ret[id].slid = std::stod(tbl[i][1]);
    ret[id].elid = std::stod(tbl[i][2]);
  }
  return ret;
}

/* for pole.csv */
struct PoleClass {
  int plid;
  int vid;
  double length;
  double dim;
};

std::vector<PoleClass> read_poleclass(const char *filename)
{
  int max_id;
  Tbl tbl = read_csv(filename, &max_id);
  size_t i, n = tbl.size();
  std::vector<PoleClass> ret(max_id + 1);
  for (i=0; i<n; i++) {
    int id = std::stoi(tbl[i][0]);
    ret[id].plid = id;
    ret[id].vid = std::stoi(tbl[i][1]);
    ret[id].length = std::stod(tbl[i][2]);
    ret[id].dim = std::stod(tbl[i][3]);
  }
  return ret;
}

/* for box.csv */
struct BoxClass {
  int bid;
  int pid1;
  int pid2;
  int pid3;
  int pid4;
  double height;
};

std::vector<BoxClass> read_boxclass(const char *filename)
{
  int max_id;
  Tbl tbl = read_csv(filename, &max_id);
  size_t i, n = tbl.size();
  std::vector<BoxClass> ret(max_id + 1);
  for (i=0; i<n; i++) {
    int id = std::stoi(tbl[i][0]);
    ret[id].bid = id;
    ret[id].pid1 = std::stoi(tbl[i][1]);
    ret[id].pid2 = std::stoi(tbl[i][2]);
    ret[id].pid3 = std::stoi(tbl[i][3]);
    ret[id].pid4 = std::stoi(tbl[i][4]);
    ret[id].height = std::stod(tbl[i][5]);
  }
  return ret;
}


/* Road data */
/* for dtlane.csv */
struct DTLane {
  int did;
  double dist;
  int pid;
  double dir;
  int apara;
  double r;
]]>
            </text>
        </set>
        <set lineCount="62" fingerprint="53a8bbc213774e984f1e9eab565134a8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="752" endLineNumber="904"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="747" endLineNumber="899"/>
            <text>
<![CDATA[Point VectorMap::findByKey(const Key<Point>& key) const
{
  return point_.findByKey(key);
}

Vector VectorMap::findByKey(const Key<Vector>& key) const
{
  return vector_.findByKey(key);
}

Line VectorMap::findByKey(const Key<Line>& key) const
{
  return line_.findByKey(key);
}

Area VectorMap::findByKey(const Key<Area>& key) const
{
  return area_.findByKey(key);
}

Pole VectorMap::findByKey(const Key<Pole>& key) const
{
  return pole_.findByKey(key);
}

Box VectorMap::findByKey(const Key<Box>& key) const
{
  return box_.findByKey(key);
}

DTLane VectorMap::findByKey(const Key<DTLane>& key) const
{
  return dtlane_.findByKey(key);
}

Node VectorMap::findByKey(const Key<Node>& key) const
{
  return node_.findByKey(key);
}

Lane VectorMap::findByKey(const Key<Lane>& key) const
{
  return lane_.findByKey(key);
}

WayArea VectorMap::findByKey(const Key<WayArea>& key) const
{
  return way_area_.findByKey(key);
}

RoadEdge VectorMap::findByKey(const Key<RoadEdge>& key) const
{
  return road_edge_.findByKey(key);
}

Gutter VectorMap::findByKey(const Key<Gutter>& key) const
{
  return gutter_.findByKey(key);
}

Curb VectorMap::findByKey(const Key<Curb>& key) const
{
  return curb_.findByKey(key);
}

WhiteLine VectorMap::findByKey(const Key<WhiteLine>& key) const
{
  return white_line_.findByKey(key);
}

StopLine VectorMap::findByKey(const Key<StopLine>& key) const
{
  return stop_line_.findByKey(key);
}

ZebraZone VectorMap::findByKey(const Key<ZebraZone>& key) const
{
  return zebra_zone_.findByKey(key);
}

CrossWalk VectorMap::findByKey(const Key<CrossWalk>& key) const
{
  return cross_walk_.findByKey(key);
}

RoadMark VectorMap::findByKey(const Key<RoadMark>& key) const
{
  return road_mark_.findByKey(key);
}

RoadPole VectorMap::findByKey(const Key<RoadPole>& key) const
{
  return road_pole_.findByKey(key);
}

RoadSign VectorMap::findByKey(const Key<RoadSign>& key) const
{
  return road_sign_.findByKey(key);
}

Signal VectorMap::findByKey(const Key<Signal>& key) const
{
  return signal_.findByKey(key);
}

StreetLight VectorMap::findByKey(const Key<StreetLight>& key) const
{
  return street_light_.findByKey(key);
}

UtilityPole VectorMap::findByKey(const Key<UtilityPole>& key) const
{
  return utility_pole_.findByKey(key);
}

GuardRail VectorMap::findByKey(const Key<GuardRail>& key) const
{
  return guard_rail_.findByKey(key);
}

SideWalk VectorMap::findByKey(const Key<SideWalk>& id) const
{
  return side_walk_.findByKey(id);
}

DriveOnPortion VectorMap::findByKey(const Key<DriveOnPortion>& key) const
{
  return drive_on_portion_.findByKey(key);
}

CrossRoad VectorMap::findByKey(const Key<CrossRoad>& key) const
{
  return cross_road_.findByKey(key);
}

SideStrip VectorMap::findByKey(const Key<SideStrip>& id) const
{
  return side_strip_.findByKey(id);
}

CurveMirror VectorMap::findByKey(const Key<CurveMirror>& key) const
{
  return curve_mirror_.findByKey(key);
}

Wall VectorMap::findByKey(const Key<Wall>& key) const
{
  return wall_.findByKey(key);
}

Fence VectorMap::findByKey(const Key<Fence>& key) const
{
  return fence_.findByKey(key);
]]>
            </text>
        </set>
        <set lineCount="62" fingerprint="502e0e8df2f5eb7596e8d6aa47f9cae2">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1072" endLineNumber="1224"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="1067" endLineNumber="1219"/>
            <text>
<![CDATA[void VectorMap::registerCallback(const Callback<PointArray>& cb)
{
  point_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<VectorArray>& cb)
{
  vector_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<LineArray>& cb)
{
  line_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<AreaArray>& cb)
{
  area_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<PoleArray>& cb)
{
  pole_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<BoxArray>& cb)
{
  box_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<DTLaneArray>& cb)
{
  dtlane_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<NodeArray>& cb)
{
  node_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<LaneArray>& cb)
{
  lane_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<WayAreaArray>& cb)
{
  way_area_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<RoadEdgeArray>& cb)
{
  road_edge_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<GutterArray>& cb)
{
  gutter_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<CurbArray>& cb)
{
  curb_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<WhiteLineArray>& cb)
{
  white_line_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<StopLineArray>& cb)
{
  stop_line_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<ZebraZoneArray>& cb)
{
  zebra_zone_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<CrossWalkArray>& cb)
{
  cross_walk_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<RoadMarkArray>& cb)
{
  road_mark_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<RoadPoleArray>& cb)
{
  road_pole_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<RoadSignArray>& cb)
{
  road_sign_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<SignalArray>& cb)
{
  signal_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<StreetLightArray>& cb)
{
  street_light_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<UtilityPoleArray>& cb)
{
  utility_pole_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<GuardRailArray>& cb)
{
  guard_rail_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<SideWalkArray>& cb)
{
  side_walk_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<DriveOnPortionArray>& cb)
{
  drive_on_portion_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<CrossRoadArray>& cb)
{
  cross_road_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<SideStripArray>& cb)
{
  side_strip_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<CurveMirrorArray>& cb)
{
  curve_mirror_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<WallArray>& cb)
{
  wall_.registerCallback(cb);
}

void VectorMap::registerCallback(const Callback<FenceArray>& cb)
{
  fence_.registerCallback(cb);
]]>
            </text>
        </set>
        <set lineCount="63" fingerprint="97b8094d153e33cd8ff794060999f1dd">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapObjectSerialization.h" startLineNumber="244" endLineNumber="309"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\orb_localizer\include\MapObjectSerialization.h" startLineNumber="347" endLineNumber="412"/>
            <text>
<![CDATA[template <class Archive>
void load (Archive & ar, ORB_SLAM2::KeyFrame &keyframe, const unsigned int version)
{
	ar &
		keyframe.mnId &
		keyframe.mnFrameId &
		keyframe.mTimeStamp &
		keyframe.mnGridCols &
		keyframe.mnGridRows &
		keyframe.mfGridElementWidthInv &
		keyframe.mfGridElementHeightInv &
		keyframe.mnTrackReferenceForFrame &
		keyframe.mnFuseTargetForKF &
		keyframe.mnBALocalForKF &
		keyframe.mnBAFixedForKF &
		keyframe.mnLoopQuery &
		keyframe.mnLoopWords &
		keyframe.mLoopScore &
		keyframe.mnRelocQuery &
		keyframe.mnRelocWords &
		keyframe.mRelocScore;
	ar &
		keyframe.mTcwGBA &
		keyframe.mTcwBefGBA &
		keyframe.mnBAGlobalForKF;
	ar &
		keyframe.fx & keyframe.fy & keyframe.cx & keyframe.cy &
		keyframe.invfx & keyframe.invfy &
		keyframe.mbf & keyframe.mb &
		keyframe.mThDepth;
	ar &
		keyframe.N;
	ar &
		keyframe.mvKeys &
		keyframe.mvKeysUn &
		keyframe.mvuRight &
		keyframe.mvDepth &
		keyframe.mDescriptors;
	ar &
		keyframe.mBowVec &
		keyframe.mFeatVec;
	ar &
		keyframe.mTcp;
	ar &
		keyframe.mnScaleLevels &
		keyframe.mfScaleFactor &
		keyframe.mfLogScaleFactor &
		keyframe.mvScaleFactors &
		keyframe.mvLevelSigma2 &
		keyframe.mvInvLevelSigma2;
	ar &
		keyframe.mnMinX &
		keyframe.mnMinY &
		keyframe.mnMaxX &
		keyframe.mnMaxY &
		keyframe.mK;

#ifdef MAP_SAVE_IMAGE
	ar & keyframe.im;
#endif

	ar &
		keyframe.Tcw &
		keyframe.Twc &
		keyframe.Ow &
		keyframe.Cw;
]]>
            </text>
        </set>
        <set lineCount="63" fingerprint="502334697879814a6125944655166832">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="909" endLineNumber="1064"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="904" endLineNumber="1059"/>
            <text>
<![CDATA[  return rail_crossing_.findByKey(key);
}

std::vector<Point> VectorMap::findByFilter(const Filter<Point>& filter) const
{
  return point_.findByFilter(filter);
}

std::vector<Vector> VectorMap::findByFilter(const Filter<Vector>& filter) const
{
  return vector_.findByFilter(filter);
}

std::vector<Line> VectorMap::findByFilter(const Filter<Line>& filter) const
{
  return line_.findByFilter(filter);
}

std::vector<Area> VectorMap::findByFilter(const Filter<Area>& filter) const
{
  return area_.findByFilter(filter);
}

std::vector<Pole> VectorMap::findByFilter(const Filter<Pole>& filter) const
{
  return pole_.findByFilter(filter);
}

std::vector<Box> VectorMap::findByFilter(const Filter<Box>& filter) const
{
  return box_.findByFilter(filter);
}

std::vector<DTLane> VectorMap::findByFilter(const Filter<DTLane>& filter) const
{
  return dtlane_.findByFilter(filter);
}

std::vector<Node> VectorMap::findByFilter(const Filter<Node>& filter) const
{
  return node_.findByFilter(filter);
}

std::vector<Lane> VectorMap::findByFilter(const Filter<Lane>& filter) const
{
  return lane_.findByFilter(filter);
}

std::vector<WayArea> VectorMap::findByFilter(const Filter<WayArea>& filter) const
{
  return way_area_.findByFilter(filter);
}

std::vector<RoadEdge> VectorMap::findByFilter(const Filter<RoadEdge>& filter) const
{
  return road_edge_.findByFilter(filter);
}

std::vector<Gutter> VectorMap::findByFilter(const Filter<Gutter>& filter) const
{
  return gutter_.findByFilter(filter);
}

std::vector<Curb> VectorMap::findByFilter(const Filter<Curb>& filter) const
{
  return curb_.findByFilter(filter);
}

std::vector<WhiteLine> VectorMap::findByFilter(const Filter<WhiteLine>& filter) const
{
  return white_line_.findByFilter(filter);
}

std::vector<StopLine> VectorMap::findByFilter(const Filter<StopLine>& filter) const
{
  return stop_line_.findByFilter(filter);
}

std::vector<ZebraZone> VectorMap::findByFilter(const Filter<ZebraZone>& filter) const
{
  return zebra_zone_.findByFilter(filter);
}

std::vector<CrossWalk> VectorMap::findByFilter(const Filter<CrossWalk>& filter) const
{
  return cross_walk_.findByFilter(filter);
}

std::vector<RoadMark> VectorMap::findByFilter(const Filter<RoadMark>& filter) const
{
  return road_mark_.findByFilter(filter);
}

std::vector<RoadPole> VectorMap::findByFilter(const Filter<RoadPole>& filter) const
{
  return road_pole_.findByFilter(filter);
}

std::vector<RoadSign> VectorMap::findByFilter(const Filter<RoadSign>& filter) const
{
  return road_sign_.findByFilter(filter);
}

std::vector<Signal> VectorMap::findByFilter(const Filter<Signal>& filter) const
{
  return signal_.findByFilter(filter);
}

std::vector<StreetLight> VectorMap::findByFilter(const Filter<StreetLight>& filter) const
{
  return street_light_.findByFilter(filter);
}

std::vector<UtilityPole> VectorMap::findByFilter(const Filter<UtilityPole>& filter) const
{
  return utility_pole_.findByFilter(filter);
}

std::vector<GuardRail> VectorMap::findByFilter(const Filter<GuardRail>& filter) const
{
  return guard_rail_.findByFilter(filter);
}

std::vector<SideWalk> VectorMap::findByFilter(const Filter<SideWalk>& filter) const
{
  return side_walk_.findByFilter(filter);
}

std::vector<DriveOnPortion> VectorMap::findByFilter(const Filter<DriveOnPortion>& filter) const
{
  return drive_on_portion_.findByFilter(filter);
}

std::vector<CrossRoad> VectorMap::findByFilter(const Filter<CrossRoad>& filter) const
{
  return cross_road_.findByFilter(filter);
}

std::vector<SideStrip> VectorMap::findByFilter(const Filter<SideStrip>& filter) const
{
  return side_strip_.findByFilter(filter);
}

std::vector<CurveMirror> VectorMap::findByFilter(const Filter<CurveMirror>& filter) const
{
  return curve_mirror_.findByFilter(filter);
}

std::vector<Wall> VectorMap::findByFilter(const Filter<Wall>& filter) const
{
  return wall_.findByFilter(filter);
}

std::vector<Fence> VectorMap::findByFilter(const Filter<Fence>& filter) const
{
  return fence_.findByFilter(filter);
]]>
            </text>
        </set>
        <set lineCount="63" fingerprint="cfcd208495d565ef66e7dff9f98764da">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="76" endLineNumber="139"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\include\vector_map\vector_map.h" startLineNumber="75" endLineNumber="138"/>
            <text>
<![CDATA[using vector_map_msgs::Point;
using vector_map_msgs::Vector;
using vector_map_msgs::Line;
using vector_map_msgs::Area;
using vector_map_msgs::Pole;
using vector_map_msgs::Box;
using vector_map_msgs::DTLane;
using vector_map_msgs::Node;
using vector_map_msgs::Lane;
using vector_map_msgs::WayArea;
using vector_map_msgs::RoadEdge;
using vector_map_msgs::Gutter;
using vector_map_msgs::Curb;
using vector_map_msgs::WhiteLine;
using vector_map_msgs::StopLine;
using vector_map_msgs::ZebraZone;
using vector_map_msgs::CrossWalk;
using vector_map_msgs::RoadMark;
using vector_map_msgs::RoadPole;
using vector_map_msgs::RoadSign;
using vector_map_msgs::Signal;
using vector_map_msgs::StreetLight;
using vector_map_msgs::UtilityPole;
using vector_map_msgs::GuardRail;
using vector_map_msgs::SideWalk;
using vector_map_msgs::DriveOnPortion;
using vector_map_msgs::CrossRoad;
using vector_map_msgs::SideStrip;
using vector_map_msgs::CurveMirror;
using vector_map_msgs::Wall;
using vector_map_msgs::Fence;
using vector_map_msgs::RailCrossing;

using vector_map_msgs::PointArray;
using vector_map_msgs::VectorArray;
using vector_map_msgs::LineArray;
using vector_map_msgs::AreaArray;
using vector_map_msgs::PoleArray;
using vector_map_msgs::BoxArray;
using vector_map_msgs::DTLaneArray;
using vector_map_msgs::NodeArray;
using vector_map_msgs::LaneArray;
using vector_map_msgs::WayAreaArray;
using vector_map_msgs::RoadEdgeArray;
using vector_map_msgs::GutterArray;
using vector_map_msgs::CurbArray;
using vector_map_msgs::WhiteLineArray;
using vector_map_msgs::StopLineArray;
using vector_map_msgs::ZebraZoneArray;
using vector_map_msgs::CrossWalkArray;
using vector_map_msgs::RoadMarkArray;
using vector_map_msgs::RoadPoleArray;
using vector_map_msgs::RoadSignArray;
using vector_map_msgs::SignalArray;
using vector_map_msgs::StreetLightArray;
using vector_map_msgs::UtilityPoleArray;
using vector_map_msgs::GuardRailArray;
using vector_map_msgs::SideWalkArray;
using vector_map_msgs::DriveOnPortionArray;
using vector_map_msgs::CrossRoadArray;
using vector_map_msgs::SideStripArray;
using vector_map_msgs::CurveMirrorArray;
using vector_map_msgs::WallArray;
using vector_map_msgs::FenceArray;
]]>
            </text>
        </set>
        <set lineCount="65" fingerprint="9574351fc59acd8d5723c9c485e0fe52">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="243" endLineNumber="340"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\GPU_init.cpp" startLineNumber="237" endLineNumber="334"/>
            <text>
<![CDATA[			exit(1);
		}

		res = cuMemAlloc(&featp2_dev[i], SIZE_FEATP2);
		if(res != CUDA_SUCCESS) {
			printf("cuMemAlloc(featp2_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}


		res = cuMemAlloc(&A_SIZE_dev[i], SIZE_A_SIZE);
		if(res != CUDA_SUCCESS) {
			printf("cuMemAlloc(A_SIZE_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemAlloc(&B_dev[i], SIZE_B);
		if(res != CUDA_SUCCESS) {
			printf("cuMemAlloc(B_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemAlloc(&B_dims_dev[i], SIZE_B_DIMS);
		if(res != CUDA_SUCCESS) {
			printf("cuMemAlloc(B_dims_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemAlloc(&fconvs_error_array_dev[i], SIZE_ERROR_ARRAY);
		if(res != CUDA_SUCCESS) {
			printf("cuMemAlloc(fconvs_error_array_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemAlloc(&fconvs_C_dev[i], SIZE_C);
		if(res != CUDA_SUCCESS) {
			printf("cuMemAlloc(fconvs_C_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemAlloc(&part_C_dev[i], SIZE_C);
		if(res != CUDA_SUCCESS) {
			printf("cuMemAlloc(part_C_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemAlloc(&part_error_array_dev[i], SIZE_ERROR_ARRAY);
		if(res != CUDA_SUCCESS) {
			printf("cuMemAlloc(part_error_array_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemAlloc(&pm_size_array_dev[i], SIZE_PM);
		if(res != CUDA_SUCCESS) {
			printf("cuMemAlloc(pm_size_array_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemAlloc(&def_array_dev[i], SIZE_DEF);
		if(res != CUDA_SUCCESS) {
			printf("cuMemAlloc(def_array_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemAlloc(&numpart_dev[i], SIZE_NUMPART);
		if(res != CUDA_SUCCESS) {
			printf("cuMemAlloc(numpart_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemAlloc(&PIDX_array_dev[i], SIZE_PIDX);
		if(res != CUDA_SUCCESS) {
			printf("cuMemAlloc(PIDX_array_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemAlloc(&DID_4_array_dev[i], SIZE_DID);
		if(res != CUDA_SUCCESS) {
			printf("cuMemAlloc(DID_4__array_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemAlloc(&M_dev[i], SIZE_M);
		if(res != CUDA_SUCCESS){
			printf("cuMemAlloc(M_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemAlloc(&tmpM_dev[i], SIZE_TMPM);
		if(res != CUDA_SUCCESS){
			printf("cuMemAlloc(tmpM_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
		}

		res = cuMemAlloc(&tmpIx_dev[i], SIZE_TMPIX);
		if(res != CUDA_SUCCESS){
			printf("cuMemAlloc(tmpIx_dev) failed: res = %s\n", getCudaDrvErrorString(res));
			exit(1);
]]>
            </text>
        </set>
        <set lineCount="66" fingerprint="d05ad84995497d37c102bf2d7ec48ed8">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\state\state_machine\nodes\state_machine\state_machine.h" startLineNumber="93" endLineNumber="221"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\state\state_machine\nodes\state_machine\state_machine.h" startLineNumber="115" endLineNumber="243"/>
            <text>
<![CDATA[class StateTrafficLightStop : public BaseState
{
public:
  void update(StateContext *context) override;
  int32_t getStateName() override
  {
    return enumToInteger(StateList::TRAFFIC_LIGHT_STOP);
  }
  std::unique_ptr<std::string> getStateNameString() override
  {
    return std::unique_ptr<std::string>(new std::string("TRAFFIC_LIGHT_STOP"));
  }
  static std::unique_ptr<BaseState> create()
  {
    return std::unique_ptr<BaseState>(new StateTrafficLightStop);
  };

private:
  StateTrafficLightStop() = default;
};

// State : LANE_CHANGE
class StateLaneChange : public BaseState
{
public:
  void update(StateContext *context) override;
  int32_t getStateName() override
  {
    return enumToInteger(StateList::LANE_CHANGE);
  }
  std::unique_ptr<std::string> getStateNameString() override
  {
    return std::unique_ptr<std::string>(new std::string("LANE_CHANGE"));
  }
  static std::unique_ptr<BaseState> create()
  {
    return std::unique_ptr<BaseState>(new StateLaneChange);
  };

private:
  StateLaneChange() = default;
};

// State : STOP_SIGN_STOP
class StateStopSignStop : public BaseState
{
 public:
  void update(StateContext *context) override;
  int32_t getStateName() override
  {
    return enumToInteger(StateList::STOP_SIGN_STOP);
  }
  std::unique_ptr<std::string> getStateNameString() override
  {
    return std::unique_ptr<std::string>(new std::string("STOP_SIGN_STOP"));
  }
  static std::unique_ptr<BaseState> create()
  {
    return std::unique_ptr<BaseState>(new StateStopSignStop);
  };

 private:
  StateStopSignStop() = default;
};

// State : Obstacle Avoidance
class StateObstacleAvoidance : public BaseState
{
 public:
  void update(StateContext *context) override;
  int32_t getStateName() override
  {
    return enumToInteger(StateList::STOP_SIGN_STOP);
  }
  std::unique_ptr<std::string> getStateNameString() override
  {
    return std::unique_ptr<std::string>(new std::string("OBSTACLE_AVOIDANCE"));
  }
  static std::unique_ptr<BaseState> create()
  {
    return std::unique_ptr<BaseState>(new StateObstacleAvoidance);
  };

 private:
  StateObstacleAvoidance() = default;
};

// State : EMERGENCY
class StateEmergency : public BaseState
{
public:
  void update(StateContext *context) override;
  int32_t getStateName() override
  {
    return enumToInteger(StateList::EMERGENCY);
  }
  std::unique_ptr<std::string> getStateNameString() override
  {
    return std::unique_ptr<std::string>(new std::string("EMERGENCY"));
  }
  static std::unique_ptr<BaseState> create()
  {
    return std::unique_ptr<BaseState>(new StateEmergency);
  };

private:
  StateEmergency() = default;
};

// State : MISSION_COMPLETE
class StateMissionComplete : public BaseState
{
public:
  void update(StateContext *context) override;
  int32_t getStateName() override
  {
    return enumToInteger(StateList::MISSION_COMPLETE);
  }
  std::unique_ptr<std::string> getStateNameString() override
  {
    return std::unique_ptr<std::string>(new std::string("MISSION_COMPLETE"));
  }
  static std::unique_ptr<BaseState> create()
  {
    return std::unique_ptr<BaseState>(new StateMissionComplete);
  };

private:
  StateMissionComplete() = default;
]]>
            </text>
        </set>
        <set lineCount="70" fingerprint="f35676455d99e8fcacc4f53bfb9df51f">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping\ndt_mapping.cpp" startLineNumber="119" endLineNumber="224"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\lazy_ndt_mapping\lazy_ndt_mapping.cpp" startLineNumber="124" endLineNumber="221"/>
            <text>
<![CDATA[static bool _use_openmp = false;

static double fitness_score;

static void param_callback(const runtime_manager::ConfigNdtMapping::ConstPtr& input)
{
  ndt_res = input->resolution;
  step_size = input->step_size;
  trans_eps = input->trans_epsilon;
  max_iter = input->max_iterations;
  voxel_leaf_size = input->leaf_size;
  min_scan_range = input->min_scan_range;
  min_add_scan_shift = input->min_add_scan_shift;

  std::cout << "param_callback" << std::endl;
  std::cout << "ndt_res: " << ndt_res << std::endl;
  std::cout << "step_size: " << step_size << std::endl;
  std::cout << "trans_epsilon: " << trans_eps << std::endl;
  std::cout << "max_iter: " << max_iter << std::endl;
  std::cout << "voxel_leaf_size: " << voxel_leaf_size << std::endl;
  std::cout << "min_scan_range: " << min_scan_range << std::endl;
  std::cout << "min_add_scan_shift: " << min_add_scan_shift << std::endl;
}

static void output_callback(const runtime_manager::ConfigNdtMappingOutput::ConstPtr& input)
{
  double filter_res = input->filter_res;
  std::string filename = input->filename;
  std::cout << "output_callback" << std::endl;
  std::cout << "filter_res: " << filter_res << std::endl;
  std::cout << "filename: " << filename << std::endl;

  pcl::PointCloud<pcl::PointXYZI>::Ptr map_ptr(new pcl::PointCloud<pcl::PointXYZI>(map));
  pcl::PointCloud<pcl::PointXYZI>::Ptr map_filtered(new pcl::PointCloud<pcl::PointXYZI>());
  map_ptr->header.frame_id = "map";
  map_filtered->header.frame_id = "map";
  sensor_msgs::PointCloud2::Ptr map_msg_ptr(new sensor_msgs::PointCloud2);

  // Apply voxelgrid filter
  if(filter_res == 0.0){
    std::cout << "Original: " << map_ptr->points.size() << " points." << std::endl;
    pcl::toROSMsg(*map_ptr, *map_msg_ptr);
  }else{
    pcl::VoxelGrid<pcl::PointXYZI> voxel_grid_filter;
    voxel_grid_filter.setLeafSize(filter_res, filter_res, filter_res);
    voxel_grid_filter.setInputCloud(map_ptr);
    voxel_grid_filter.filter(*map_filtered);
    std::cout << "Original: " << map_ptr->points.size() << " points." << std::endl;
    std::cout << "Filtered: " << map_filtered->points.size() << " points." << std::endl;
    pcl::toROSMsg(*map_filtered, *map_msg_ptr);
  }

  ndt_map_pub.publish(*map_msg_ptr);

  // Writing Point Cloud data to PCD file
  if(filter_res == 0.0){
    pcl::io::savePCDFileASCII(filename, *map_ptr);
    std::cout << "Saved " << map_ptr->points.size() << " data points to " << filename << "." << std::endl;
  }else{
    pcl::io::savePCDFileASCII(filename, *map_filtered);
    std::cout << "Saved " << map_filtered->points.size() << " data points to " << filename << "." << std::endl;
  }    
}

static void points_callback(const sensor_msgs::PointCloud2::ConstPtr& input)
{
    double r;
    pcl::PointXYZI p; 
    pcl::PointCloud<pcl::PointXYZI> tmp, scan;
    pcl::PointCloud<pcl::PointXYZI>::Ptr filtered_scan_ptr (new pcl::PointCloud<pcl::PointXYZI>());
    pcl::PointCloud<pcl::PointXYZI>::Ptr transformed_scan_ptr (new pcl::PointCloud<pcl::PointXYZI>());
    tf::Quaternion q;

    Eigen::Matrix4f t_localizer(Eigen::Matrix4f::Identity());
    Eigen::Matrix4f t_base_link(Eigen::Matrix4f::Identity());
    tf::TransformBroadcaster br;
    tf::Transform transform;

    ros::Time scan_time = input->header.stamp;

    pcl::fromROSMsg(*input, tmp);

    for (pcl::PointCloud<pcl::PointXYZI>::const_iterator item = tmp.begin(); item != tmp.end(); item++){
    	p.x = (double) item->x;
    	p.y = (double) item->y;
    	p.z = (double) item->z;
    	p.intensity = (double) item->intensity;

    	r = sqrt(pow(p.x, 2.0) + pow(p.y, 2.0));
    	if(r > min_scan_range){
    		scan.push_back(p);
    	}
    }

    pcl::PointCloud<pcl::PointXYZI>::Ptr scan_ptr(new pcl::PointCloud<pcl::PointXYZI>(scan));
    
    // Add initial point cloud to velodyne_map
    if(initial_scan_loaded == 0){
]]>
            </text>
        </set>
        <set lineCount="72" fingerprint="bbece3f90ce0be80e88e2cc461e2af73">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="440" endLineNumber="571"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\dt_GPU.cpp" startLineNumber="540" endLineNumber="668"/>
            <text>
<![CDATA[			sum_part_size += part_size;
			sum_pointer_size += pointer_size;


			if(pt->pid*part_y < pt->numpart[jj]){

				if(pt->pid == 0){
					gettimeofday(&tv_memcpy_start, NULL);
				}


				res = cuMemcpyDtoH((void *)(pointer_dst_tmpIx+(unsigned long long int)(pointer_size*sizeof(int))), (CUdeviceptr)(pointer_tmpIx_dev+(unsigned long long int)(pointer_size*sizeof(int))), part_size*sizeof(int));
				if(res != CUDA_SUCCESS) {
					printf("error pid = %d\n",pt->pid);
					printf("cuMemcpyDtoH(tmpIx) failed: res = %s\n", cuda_response_to_string(res));
					exit(1);
				}

				if(pt->pid == 0){
					gettimeofday(&tv_memcpy_end, NULL);
					tvsub(&tv_memcpy_end, &tv_memcpy_start, &tv);
					time_memcpy += tv.tv_sec * 1000.0 + (float)tv.tv_usec / 1000.0;
				}

			}

			pointer_dst_tmpIx += (unsigned long long int)(move_size * sizeof(int));
			pointer_tmpIx_dev += (unsigned long long int)(move_size * sizeof(int));

			part_size = 0;
			pointer_size = 0;
			move_size = 0;

		}

	}


	/* downloads tmpIy from GPU */

	sum_part_size = 0;
	sum_pointer_size = 0;
	part_size = 0;
	pointer_size = 0;
	part_y = 0;
	move_size = 0;
	start_kk = 0;
	end_kk = 0;
	part_end_kk = 0;
	unsigned long long int pointer_dst_tmpIy = (unsigned long long int)pt->dst_tmpIy;
	unsigned long long int pointer_tmpIy_dev = (unsigned long long int)tmpIy_dev[pt->pid];


	for(int L=0; L<(pt->L_MAX-pt->interval); L++) {

		/**************************************************************************/
		/* loop condition */
		if( (pt->FSIZE[(L+pt->interval)*2]+2*pt->pady < pt->max_Y) || (pt->FSIZE[(L+pt->interval)*2+1]+2*pt->padx < pt->max_X) )
		{
			continue;
		}
		/* loop conditon */
		/**************************************************************************/


		for(int jj=0; jj<pt->NoC; jj++) {

			part_y = pt->numpart[jj] / device_num;
			if(pt->numpart[jj]%device_num != 0){
				part_y++;
			}

			start_kk = part_y * pt->pid;
			end_kk = part_y * (pt->pid + 1);

			if(end_kk > pt->numpart[jj]){
				end_kk = pt->numpart[jj];
			}

			if(pt->pid > 0){
				part_end_kk = part_y * pt->pid;
			}

			for(int kk=0; kk<pt->numpart[jj]; kk++) {

				int PIDX = pt->PIDX_array[L][jj][kk];
				int dims0 = pt->size_array[L][PIDX*2];
				int dims1 = pt->size_array[L][PIDX*2+1];
				if(start_kk <= kk && kk < end_kk){
					part_size += dims0 * dims1;
				}
				if(pt->pid > 0){
					if(0 <= kk && kk < part_end_kk){
						pointer_size += dims0 * dims1;
					}
				}
				move_size += dims0 * dims1;
			}

			sum_part_size += part_size;
			sum_pointer_size += pointer_size;

			if(pt->pid*part_y < pt->numpart[jj]){

				if(pt->pid == 0){
					gettimeofday(&tv_memcpy_start, NULL);
				}

				res = cuMemcpyDtoH((void *)(pointer_dst_tmpIy+(unsigned long long int)(pointer_size*sizeof(int))), (CUdeviceptr)(pointer_tmpIy_dev+(unsigned long long int)(pointer_size*sizeof(int))), part_size*sizeof(int));
				if(res != CUDA_SUCCESS) {
					printf("error pid = %d\n",pt->pid);
					printf("cuMemcpyDtoH(tmpIy) failed: res = %s\n", cuda_response_to_string(res));
					exit(1);
				}

				if(pt->pid == 0){
					gettimeofday(&tv_memcpy_end, NULL);
					tvsub(&tv_memcpy_end, &tv_memcpy_start, &tv);
					time_memcpy += tv.tv_sec * 1000.0 + (float)tv.tv_usec / 1000.0;
				}

			}

			pointer_dst_tmpIy += (unsigned long long int)(move_size * sizeof(int));
			pointer_tmpIy_dev += (unsigned long long int)(move_size * sizeof(int));

			part_size = 0;
			pointer_size = 0;
			move_size = 0;
]]>
            </text>
        </set>
        <set lineCount="74" fingerprint="184b7b9731bac3a324920f569ebc545b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1605" endLineNumber="1713"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\sensing\fusion\packages\calibration_camera_lidar\CalibrationToolkit\calibrationtoolkit.cpp" startLineNumber="1123" endLineNumber="1232"/>
            <text>
<![CDATA[    return 1;
}

//=========================================================================

CalibrateCameraVelodyneChessboardROS::CalibrateCameraVelodyneChessboardROS(QString cameraTopic, u_int32_t cameraQueueSize, int cameraInterval, QString velodyneTopic, u_int32_t velodyneQueueSize, int velodyneInterval, float maxRange, cv::Size2f patternSize, cv::Size2i patternNum, QWidget *parent)
    : CalibrateCameraVelodyneChessboardBase(maxRange,patternSize,patternNum,parent)
{
    camerasub=new ROSSub<sensor_msgs::ImageConstPtr>(cameraTopic,cameraQueueSize,cameraInterval);
    connect(camerasub,SIGNAL(receiveMessageSignal()),this,SLOT(refreshImageSlot()));
    velodynesub=new ROSSub<sensor_msgs::PointCloud2ConstPtr>(velodyneTopic,velodyneQueueSize,velodyneInterval);
    connect(velodynesub,SIGNAL(receiveMessageSignal()),this,SLOT(refreshVelodyneSlot()));
    camerasub->startReceiveSlot();
    velodynesub->startReceiveSlot();
}


CalibrateCameraVelodyneChessboardROS::~CalibrateCameraVelodyneChessboardROS()
{
    delete camerasub;
    delete velodynesub;
}

bool CalibrateCameraVelodyneChessboardROS::refreshImage()
{
    sensor_msgs::ImageConstPtr msg=camerasub->getMessage();
    if(msg==NULL)
    {
        return 0;
    }
    imagesize.height=msg->height;
    imagesize.width=msg->width;
    cameratimestamp=QTime::fromMSecsSinceStartOfDay((msg->header.stamp.sec%(24*60*60))*1000+msg->header.stamp.nsec/1000000);

    cv_bridge::CvImagePtr cv_image = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::BGR8);
    calibimage = cv_image->image.clone();

    return CalibrateCameraBase::refreshImage();
}

bool CalibrateCameraVelodyneChessboardROS::refreshVelodyne()
{
    sensor_msgs::PointCloud2ConstPtr msg=velodynesub->getMessage();
    if(msg==NULL)
    {
        return 0;
    }
    velodynetimestamp=QTime::fromMSecsSinceStartOfDay((msg->header.stamp.sec%(24*60*60))*1000+msg->header.stamp.nsec/1000000);
    calibvelodyne=msg;
    return CalibrateCameraVelodyneChessboardBase::refreshVelodyne();
}

bool CalibrateCameraVelodyneChessboardROS::grabCalibData()
{
    camerasub->stopReceiveSlot();
    velodynesub->stopReceiveSlot();

    cv::vector<cv::Point2f> grid2dpoint;
    CHESSBOARDTYPE boardtype=CHESSBOARDTYPE(chessboardtype->currentIndex());
    bool found=false;
    switch(boardtype)
    {
    case BoxGrid:
        found=cv::findChessboardCorners(calibimage,patternnum,grid2dpoint);
        break;
    case CircleGrid:
        found=cv::findCirclesGrid(calibimage,patternnum,grid2dpoint);
        break;
    }
    if(!found)
    {
        camerasub->startReceiveSlot();
        velodynesub->startReceiveSlot();
        return 0;
    }
    if(calibvelodyne==NULL)
    {
        return 0;
    }
    calibimages.push_back(calibimage.clone());
    grid3dpoints.push_back(grid3dpoint);
    grid2dpoints.push_back(grid2dpoint);

    chessboardposes.push_back(cv::Mat::eye(4,4,CV_64F));
    QTableWidget * tmpchessboardtable=new QTableWidget;
    chessboardposeshow->addTab(tmpchessboardtable,QString("Chessboard_%1").arg(calibimages.size()-1));

    cv::Mat tmpimage=calibimages.back().clone();
    cv::drawChessboardCorners(tmpimage,patternnum,grid2dpoint,1);
    if(tmpimage.type()==CV_8UC3)
    {
        QImage img(tmpimage.data, tmpimage.cols, tmpimage.rows, tmpimage.step, QImage::Format_RGB888);
        img=img.rgbSwapped();
        QLabel * tmpcalibimageshow=new QLabel;
        tmpcalibimageshow->setPixmap(QPixmap::fromImage(img));
        QScrollArea * scrollarea=new QScrollArea;
        scrollarea->setWidget(tmpcalibimageshow);
        calibimagesshow->addTab(scrollarea,QString("Image_%1").arg(calibimages.size()-1));
        calibimagesshow->setCurrentWidget(scrollarea);
    }
    else if(tmpimage.type()==CV_8UC1)
    {
        QImage img(tmpimage.data, tmpimage.cols, tmpimage.rows, tmpimage.step, QImage::Format_Indexed8);
        img.setColorTable(colorTable);
        QLabel * tmpcalibimageshow=new QLabel;
        tmpcalibimageshow->setPixmap(QPixmap::fromImage(img));
        QScrollArea * scrollarea=new QScrollArea;
        scrollarea->setWidget(tmpcalibimageshow);
        calibimagesshow->addTab(scrollarea,QString("Image_%1").arg(calibimages.size()-1));
        calibimagesshow->setCurrentWidget(scrollarea);
]]>
            </text>
        </set>
        <set lineCount="74" fingerprint="2fbd33aed308cd27698fd064df28eb6e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="635" endLineNumber="753"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="606" endLineNumber="725"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="325" endLineNumber="444"/>
            <text>
<![CDATA[      visualization_msgs::Marker marker = createLinkedLineMarker("stop_line", id++, color, vmap, line);
      if (isValidMarker(marker))
        marker_array.markers.push_back(marker);
      else
        ROS_ERROR_STREAM("[createStopLineMarkerArray] failed createLinkedLineMarker: " << line);
    }
  }
  return marker_array;
}

visualization_msgs::MarkerArray createZebraZoneMarkerArray(const VectorMap& vmap, Color color)
{
  visualization_msgs::MarkerArray marker_array;
  int id = 0;
  for (const auto& zebra_zone : vmap.findByFilter([](const ZebraZone& zebra_zone){return true;}))
  {
    if (zebra_zone.aid == 0)
    {
      ROS_ERROR_STREAM("[createZebraZoneMarkerArray] invalid zebra_zone: " << zebra_zone);
      continue;
    }

    Area area = vmap.findByKey(Key<Area>(zebra_zone.aid));
    if (area.aid == 0)
    {
      ROS_ERROR_STREAM("[createZebraZoneMarkerArray] invalid area: " << area);
      continue;
    }

    visualization_msgs::Marker marker = createAreaMarker("zebra_zone", id++, color, vmap, area);
    if (isValidMarker(marker))
      marker_array.markers.push_back(marker);
    else
      ROS_ERROR_STREAM("[createZebraZoneMarkerArray] failed createAreaMarker: " << area);
  }
  return marker_array;
}

visualization_msgs::MarkerArray createCrossWalkMarkerArray(const VectorMap& vmap, Color color)
{
  visualization_msgs::MarkerArray marker_array;
  int id = 0;
  for (const auto& cross_walk : vmap.findByFilter([](const CrossWalk& cross_walk){return true;}))
  {
    if (cross_walk.aid == 0)
    {
      ROS_ERROR_STREAM("[createCrossWalkMarkerArray] invalid cross_walk: " << cross_walk);
      continue;
    }

    Area area = vmap.findByKey(Key<Area>(cross_walk.aid));
    if (area.aid == 0)
    {
      ROS_ERROR_STREAM("[createCrossWalkMarkerArray] invalid area: " << area);
      continue;
    }

    visualization_msgs::Marker marker = createAreaMarker("cross_walk", id++, color, vmap, area);
    if (isValidMarker(marker))
      marker_array.markers.push_back(marker);
    else
      ROS_ERROR_STREAM("[createCrossWalkMarkerArray] failed createAreaMarker: " << area);
  }
  return marker_array;
}

visualization_msgs::MarkerArray createRoadMarkMarkerArray(const VectorMap& vmap, Color color)
{
  visualization_msgs::MarkerArray marker_array;
  int id = 0;
  for (const auto& road_mark : vmap.findByFilter([](const RoadMark& road_mark){return true;}))
  {
    if (road_mark.aid == 0)
    {
      ROS_ERROR_STREAM("[createRoadMarkMarkerArray] invalid road_mark: " << road_mark);
      continue;
    }

    Area area = vmap.findByKey(Key<Area>(road_mark.aid));
    if (area.aid == 0)
    {
      ROS_ERROR_STREAM("[createRoadMarkMarkerArray] invalid area: " << area);
      continue;
    }

    visualization_msgs::Marker marker = createAreaMarker("road_mark", id++, color, vmap, area);
    if (isValidMarker(marker))
      marker_array.markers.push_back(marker);
    else
      ROS_ERROR_STREAM("[createRoadMarkMarkerArray] failed createAreaMarker: " << area);
  }
  return marker_array;
}

visualization_msgs::MarkerArray createRoadPoleMarkerArray(const VectorMap& vmap, Color color)
{
  visualization_msgs::MarkerArray marker_array;
  int id = 0;
  for (const auto& road_pole : vmap.findByFilter([](const RoadPole& road_pole){return true;}))
  {
    if (road_pole.plid == 0)
    {
      ROS_ERROR_STREAM("[createRoadPoleMarkerArray] invalid road_pole: " << road_pole);
      continue;
    }

    Pole pole = vmap.findByKey(Key<Pole>(road_pole.plid));
    if (pole.plid == 0)
    {
      ROS_ERROR_STREAM("[createRoadPoleMarkerArray] invalid pole: " << pole);
      continue;
    }

    visualization_msgs::Marker marker = createPoleMarker("road_pole", id++, color, vmap, pole);
    if (isValidMarker(marker))
      marker_array.markers.push_back(marker);
    else
      ROS_ERROR_STREAM("[createRoadPoleMarkerArray] failed createPoleMarker: " << pole);
  }
  return marker_array;
]]>
            </text>
        </set>
        <set lineCount="79" fingerprint="00336751231a51f5b11aa1d7cd80b862">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\kf_track\sync_track.cpp" startLineNumber="47" endLineNumber="170"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\sync_obj_reproj.cpp" startLineNumber="47" endLineNumber="170"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\range_fusion\sync_range_fusion.cpp" startLineNumber="47" endLineNumber="170"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\lidar_tracker\nodes\obj_fusion\sync_obj_fusion.cpp" startLineNumber="47" endLineNumber="170"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="25" endLineNumber="148"/>
            <text>
<![CDATA[#define _REQ_PUB 1

/* ----var---- */
/* common var */
bool buf_flag;
pthread_mutex_t mutex;
/* user var */
boost::circular_buffer<cv_tracker::obj_label> obj_label_ringbuf(10);
boost::circular_buffer<lidar_tracker::centroids> cluster_centroids_ringbuf(10);
ros::Publisher obj_label__pub;
ros::Publisher cluster_centroids__pub;
bool obj_pose_flag;

/* ----function---- */
double fabs_time_diff(std_msgs::Header *timespec1, std_msgs::Header *timespec2) {
    double time1 = (double)timespec1->stamp.sec + (double)timespec1->stamp.nsec/1000000000L;
    double time2 = (double)timespec2->stamp.sec + (double)timespec2->stamp.nsec/1000000000L;

    return fabs(time1 - time2);
}

double get_time(const std_msgs::Header *timespec) {
    return (double)timespec->stamp.sec + (double)timespec->stamp.nsec/1000000000L;
}


#if _REQ_PUB
cv_tracker::obj_label* p_obj_label_buf;
lidar_tracker::centroids* p_cluster_centroids_buf;

void publish_msg(cv_tracker::obj_label* p_obj_label_buf, lidar_tracker::centroids* p_cluster_centroids_buf)
{
    ROS_INFO("publish");
    obj_label__pub.publish(*p_obj_label_buf);
    cluster_centroids__pub.publish(*p_cluster_centroids_buf);
}

bool publish() {
    if (buf_flag) {
        //obj_label is empty
        if (obj_label_ringbuf.begin() == obj_label_ringbuf.end()) {
            ROS_INFO("obj_label ring buffer is empty");
            return false;
        }

        //cluster_centroids is empty
        if (cluster_centroids_ringbuf.begin() == cluster_centroids_ringbuf.end()) {
            ROS_INFO("cluster_centroids ring buffer is empty");
            return false;
        }

        // obj_label > cluster_centroids
        if (get_time(&(obj_label_ringbuf.front().header)) >= get_time(&(cluster_centroids_ringbuf.front().header))) {
            p_cluster_centroids_buf = &(cluster_centroids_ringbuf.front());
            boost::circular_buffer<cv_tracker::obj_label>::iterator it = obj_label_ringbuf.begin();
            if (obj_label_ringbuf.size() == 1) {
                p_obj_label_buf = &*it;
                publish_msg(p_obj_label_buf, p_cluster_centroids_buf);
                if (obj_pose_flag == true){
                    buf_flag = false;
                    obj_pose_flag = false;
                    obj_label_ringbuf.clear();
                    cluster_centroids_ringbuf.clear();
                }
                return true;
            } else {
                for (it++; it != obj_label_ringbuf.end(); it++) {
                    if (fabs_time_diff(&(cluster_centroids_ringbuf.front().header), &((it-1)->header))
                        < fabs_time_diff(&(cluster_centroids_ringbuf.front().header), &(it->header))) {
                        p_obj_label_buf = &*(it-1);
                        break;
                    }
                }
                if (it == obj_label_ringbuf.end()) {
                    p_obj_label_buf = &(obj_label_ringbuf.back());
                }
            }
        }
        // obj_label < cluster_centroids
        else {
            p_obj_label_buf = &(obj_label_ringbuf.front());
            boost::circular_buffer<lidar_tracker::centroids>::iterator it = cluster_centroids_ringbuf.begin();
            if (cluster_centroids_ringbuf.size() == 1) {
                p_cluster_centroids_buf = &*it;
                publish_msg(p_obj_label_buf, p_cluster_centroids_buf);
                if (obj_pose_flag == true){
                    buf_flag = false;
                    obj_pose_flag = false;
                    obj_label_ringbuf.clear();
                    cluster_centroids_ringbuf.clear();
                }
                return true;
            }

            for (it++; it != cluster_centroids_ringbuf.end(); it++) {
                if (fabs_time_diff(&(obj_label_ringbuf.front().header), &((it-1)->header))
                    < fabs_time_diff(&(obj_label_ringbuf.front().header), &(it->header))) {
                    p_cluster_centroids_buf = &*(it-1);
                    break;
                }
            }

            if (it == cluster_centroids_ringbuf.end()) {
                p_cluster_centroids_buf = &(cluster_centroids_ringbuf.back());
            }
        }
        publish_msg(p_obj_label_buf, p_cluster_centroids_buf);
        if (obj_pose_flag == true){
            buf_flag = false;
            obj_pose_flag = false;
            obj_label_ringbuf.clear();
            cluster_centroids_ringbuf.clear();
        }
        return true;
    } else {
        return false;
    }
}

void obj_label_callback(const cv_tracker::obj_label::ConstPtr& obj_label_msg) {
    pthread_mutex_lock(&mutex);
    obj_label_ringbuf.push_front(*obj_label_msg);
    //cluster_centroids is empty
    if (cluster_centroids_ringbuf.begin() == cluster_centroids_ringbuf.end()) {
]]>
            </text>
        </set>
        <set lineCount="84" fingerprint="e2089e00cfc9ecf9730d3466fa27cd14">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_sender\tablet_sender.cpp" startLineNumber="118" endLineNumber="246"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\socket\packages\tablet_socket\nodes\tablet_sender\tablet_sender.cpp" startLineNumber="151" endLineNumber="279"/>
            <text>
<![CDATA[static void subscribe_can_info(const vehicle_socket::CanInfo& msg)
{
	can_request request(msg);
	int response;
	ssize_t nbytes;

	std::lock_guard<std::mutex> lock(mtx);

	nbytes = send(connfd, &request, sizeof(request), 0);
	if (nbytes < 0) {
		ROS_ERROR("send: %s", strerror(errno));
		socket_ok = false;
		return;
	}
	if ((size_t)nbytes < sizeof(request)) {
		ROS_WARN("send: %zd bytes remaining",
			 sizeof(request) - nbytes);
		return;
	}

	nbytes = recv(connfd, &response, sizeof(response), 0);
	if (nbytes < 0) {
		ROS_ERROR("recv: %s", strerror(errno));
		socket_ok = false;
		return;
	}
	if ((size_t)nbytes < sizeof(response)) {
		ROS_WARN("recv: %zd bytes remaining",
			 sizeof(response) - nbytes);
		return;
	}
}

static void subscribe_mode_info(const tablet_socket::mode_info& msg)
{
	mode_request request(msg);
	int response;
	ssize_t nbytes;

	std::lock_guard<std::mutex> lock(mtx);

	nbytes = send(connfd, &request, sizeof(request), 0);
	if (nbytes < 0) {
		ROS_ERROR("send: %s", strerror(errno));
		socket_ok = false;
		return;
	}
	if ((size_t)nbytes < sizeof(request)) {
		ROS_WARN("send: %zd bytes remaining",
			 sizeof(request) - nbytes);
		return;
	}

	nbytes = recv(connfd, &response, sizeof(response), 0);
	if (nbytes < 0) {
		ROS_ERROR("recv: %s", strerror(errno));
		socket_ok = false;
		return;
	}
	if ((size_t)nbytes < sizeof(response)) {
		ROS_WARN("recv: %zd bytes remaining",
			 sizeof(response) - nbytes);
		return;
	}
}

static void subscribe_ndt_stat(const ndt_localizer::ndt_stat& msg)
{
	ndt_request request(msg);
	int response;
	ssize_t nbytes;

	std::lock_guard<std::mutex> lock(mtx);

	nbytes = send(connfd, &request, sizeof(request), 0);
	if (nbytes < 0) {
		ROS_ERROR("send: %s", strerror(errno));
		socket_ok = false;
		return;
	}
	if ((size_t)nbytes < sizeof(request)) {
		ROS_WARN("send: %zd bytes remaining",
			 sizeof(request) - nbytes);
		return;
	}

	nbytes = recv(connfd, &response, sizeof(response), 0);
	if (nbytes < 0) {
		ROS_ERROR("recv: %s", strerror(errno));
		socket_ok = false;
		return;
	}
	if ((size_t)nbytes < sizeof(response)) {
		ROS_WARN("recv: %zd bytes remaining",
			 sizeof(response) - nbytes);
		return;
	}
}

static void subscribe_lf_stat(const std_msgs::Bool& msg)
{
	lf_request request(msg);
	int response;
	ssize_t nbytes;

	std::lock_guard<std::mutex> lock(mtx);

	nbytes = send(connfd, &request, sizeof(request), 0);
	if (nbytes < 0) {
		ROS_ERROR("send: %s", strerror(errno));
		socket_ok = false;
		return;
	}
	if ((size_t)nbytes < sizeof(request)) {
		ROS_WARN("send: %zd bytes remaining",
			 sizeof(request) - nbytes);
		return;
	}

	nbytes = recv(connfd, &response, sizeof(response), 0);
	if (nbytes < 0) {
		ROS_ERROR("recv: %s", strerror(errno));
		socket_ok = false;
		return;
	}
	if ((size_t)nbytes < sizeof(response)) {
		ROS_WARN("recv: %zd bytes remaining",
			 sizeof(response) - nbytes);
		return;
]]>
            </text>
        </set>
        <set lineCount="85" fingerprint="9acc7bd7907311bf429e63c6bb88bd14">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="606" endLineNumber="744"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="635" endLineNumber="772"/>
            <text>
<![CDATA[    visualization_msgs::Marker marker = createPoleMarker("utility_pole", id++, color, vmap, pole);
    if (isValidMarker(marker))
      marker_array.markers.push_back(marker);
    else
      ROS_ERROR_STREAM("[createUtilityPoleMarkerArray] failed createPoleMarker: " << pole);
  }
  return marker_array;
}

visualization_msgs::MarkerArray createGuardRailMarkerArray(const VectorMap& vmap, Color color)
{
  visualization_msgs::MarkerArray marker_array;
  int id = 0;
  for (const auto& guard_rail : vmap.findByFilter([](const GuardRail& guard_rail){return true;}))
  {
    if (guard_rail.aid == 0)
    {
      ROS_ERROR_STREAM("[createGuardRailMarkerArray] invalid guard_rail: " << guard_rail);
      continue;
    }

    Area area = vmap.findByKey(Key<Area>(guard_rail.aid));
    if (area.aid == 0)
    {
      ROS_ERROR_STREAM("[createGuardRailMarkerArray] invalid area: " << area);
      continue;
    }

    visualization_msgs::Marker marker = createAreaMarker("guard_rail", id++, color, vmap, area);
    if (isValidMarker(marker))
      marker_array.markers.push_back(marker);
    else
      ROS_ERROR_STREAM("[createGuardRailMarkerArray] failed createAreaMarker: " << area);
  }
  return marker_array;
}

visualization_msgs::MarkerArray createSideWalkMarkerArray(const VectorMap& vmap, Color color)
{
  visualization_msgs::MarkerArray marker_array;
  int id = 0;
  for (const auto& side_walk : vmap.findByFilter([](const SideWalk& side_walk){return true;}))
  {
    if (side_walk.aid == 0)
    {
      ROS_ERROR_STREAM("[createSideWalkMarkerArray] invalid side_walk: " << side_walk);
      continue;
    }

    Area area = vmap.findByKey(Key<Area>(side_walk.aid));
    if (area.aid == 0)
    {
      ROS_ERROR_STREAM("[createSideWalkMarkerArray] invalid area: " << area);
      continue;
    }

    visualization_msgs::Marker marker = createAreaMarker("side_walk", id++, color, vmap, area);
    if (isValidMarker(marker))
      marker_array.markers.push_back(marker);
    else
      ROS_ERROR_STREAM("[createSideWalkMarkerArray] failed createAreaMarker: " << area);
  }
  return marker_array;
}

visualization_msgs::MarkerArray createDriveOnPortionMarkerArray(const VectorMap& vmap, Color color)
{
  visualization_msgs::MarkerArray marker_array;
  int id = 0;
  for (const auto& drive_on_portion : vmap.findByFilter([](const DriveOnPortion& drive_on_portion){return true;}))
  {
    if (drive_on_portion.aid == 0)
    {
      ROS_ERROR_STREAM("[createDriveOnPortionMarkerArray] invalid drive_on_portion: " << drive_on_portion);
      continue;
    }

    Area area = vmap.findByKey(Key<Area>(drive_on_portion.aid));
    if (area.aid == 0)
    {
      ROS_ERROR_STREAM("[createDriveOnPortionMarkerArray] invalid area: " << area);
      continue;
    }

    visualization_msgs::Marker marker = createAreaMarker("drive_on_portion", id++, color, vmap, area);
    if (isValidMarker(marker))
      marker_array.markers.push_back(marker);
    else
      ROS_ERROR_STREAM("[createDriveOnPortionMarkerArray] failed createAreaMarker: " << area);
  }
  return marker_array;
}

visualization_msgs::MarkerArray createCrossRoadMarkerArray(const VectorMap& vmap, Color color)
{
  visualization_msgs::MarkerArray marker_array;
  int id = 0;
  for (const auto& cross_road : vmap.findByFilter([](const CrossRoad& cross_road){return true;}))
  {
    if (cross_road.aid == 0)
    {
      ROS_ERROR_STREAM("[createCrossRoadMarkerArray] invalid cross_road: " << cross_road);
      continue;
    }

    Area area = vmap.findByKey(Key<Area>(cross_road.aid));
    if (area.aid == 0)
    {
      ROS_ERROR_STREAM("[createCrossRoadMarkerArray] invalid area: " << area);
      continue;
    }

    visualization_msgs::Marker marker = createAreaMarker("cross_road", id++, color, vmap, area);
    if (isValidMarker(marker))
      marker_array.markers.push_back(marker);
    else
      ROS_ERROR_STREAM("[createCrossRoadMarkerArray] failed createAreaMarker: " << area);
  }
  return marker_array;
}

visualization_msgs::MarkerArray createSideStripMarkerArray(const VectorMap& vmap, Color color)
{
  visualization_msgs::MarkerArray marker_array;
  int id = 0;
  for (const auto& side_strip : vmap.findByFilter([](const SideStrip& side_strip){return true;}))
  {
    if (side_strip.lid == 0)
    {
      ROS_ERROR_STREAM("[createSideStripMarkerArray] invalid side_strip: " << side_strip);
      continue;
    }

    Line line = vmap.findByKey(Key<Line>(side_strip.lid));
    if (line.lid == 0)
    {
      ROS_ERROR_STREAM("[createSideStripMarkerArray] invalid line: " << line);
      continue;
]]>
            </text>
        </set>
        <set lineCount="85" fingerprint="cfcd208495d565ef66e7dff9f98764da">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\cuda_util.cpp" startLineNumber="35" endLineNumber="119"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\gpu\cuda_util.cpp" startLineNumber="34" endLineNumber="118"/>
            <text>
<![CDATA[	case 0:
		return "CUDA_SUCCESS";
	case 1:
		return "CUDA_ERROR_INVALID_VALUE";
	case 2:
		return "CUDA_ERROR_OUT_OF_MEMORY";
	case 3:
		return "CUDA_ERROR_NOT_INITIALIZED";
	case 4:
		return "CUDA_ERROR_DEINITIALIZED";
	case 5:
		return "CUDA_ERROR_PROFILER_DESABLED";
	case 6:
		return "CUDA_ERROR_PROFILER_NOT_INITIALIZED";
	case 7:
		return "CUDA_ERROR_PROFILER_ALREADY_STARTED";
	case 8:
		return "CUDA_ERROR_PROFILER_ALREADY_STOPPED";
	case 100:
		return "CUDA_ERROR_NO_DEVICE";
	case 101:
		return "CUDA_ERROR_INVALID_DEVICE";
	case 200:
		return "CUDA_ERROR_INVALID_IMAGE";
	case 201:
		return "CUDA_ERROR_INVALID_CONTEXT";
	case 202:
		return "CUDA_ERROR_CONTEXT_ALREADY_CURRENT";
	case 205:
		return "CUDA_ERROR_MAP_FAILD";
	case 206:
		return "CUDA_ERROR_UNMAP_FAILED";
	case 207:
		return "CUDA_ERROR_ARRAY_IS_MAPPED";
	case 208:
		return "CUDA_ERROR_ALREADY_MAPPED";
	case 209:
		return "CUDA_ERROR_NO_BINARY_FOR_GPU";
	case 210:
		return "CUDA_ERROR_ALREADY_ACQUIRED";
	case 211:
		return "CUDA_ERROR_NOT_MAPPED";
	case 212:
		return "CUDA_ERROR_NOT_MAPPED_AS_ARRAY";
	case 213:
		return "CUDA_ERROR_NOT_MAPPED_AS_POINTER";
	case 214:
		return "CUDA_ERROR_ECC_UNCORRECTABLE";
	case 215:
		return "CUDA_ERROR_UNSUPPORTED_LIMIT";
	case 216:
		return "CUDA_ERROR_CONTEXT_ALREADY_IN_USE";
	case 300:
		return "CUDA_ERROR_INVALID_SOURCE";
	case 301:
		return "CUDA_ERROR_FILE_NOT_FOUND";
	case 302:
		return "CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND";
	case 303:
		return "CUDA_ERROR_SHARED_OBJECT_INIT_FAILED";
	case 304:
		return "CUDA_ERROR_OPERATING_SYSTEM";
	case 400:
		return "CUDA_ERROR_INVALID_HANDLE";
	case 500:
		return "CUDA_ERROR_NOT_FOUND";
	case 600:
		return "CUDA_ERROR_NOT_READY";
	case 700:
		return "CUDA_ERROR_LAUNCH_FAILED";
	case 701:
		return "CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES";
	case 702:
		return "CUDA_ERROR_LAUNCH_TIMEOUT";
	case 703:
		return "CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING";
	case 704:
		return "CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED";
	case 705:
		return "CUDA_ERROR_PEER_ACCESS_NOT_ENABLED";
	case 708:
		return "CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE";
	case 709:
		return "CUDA_ERROR_CONTEXT_IS_DESTROYED";
	case 999:
]]>
            </text>
        </set>
        <set lineCount="91" fingerprint="77358771ce58a94e9ad4489b9f39b898">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\kf_track\sync_track.cpp" startLineNumber="277" endLineNumber="423"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\range_fusion\sync_range_fusion.cpp" startLineNumber="277" endLineNumber="423"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\dpm_sync_2.cpp" startLineNumber="246" endLineNumber="392"/>
            <text>
<![CDATA[    ROS_INFO("wait until shutdown a thread");
    pthread_kill(th, SIGINT);
    pthread_join(th, NULL);

    return 0;
}



#if 0
cv_tracker::image_obj image_obj_buf;
points2image::PointsImage vscan_image_buf;

void image_obj_callback(const cv_tracker::image_obj::ConstPtr& image_obj_msg) {
    pthread_mutex_lock(&mutex);
    image_obj_ringbuf.push_front(*image_obj_msg);

    //vscan_image is empty
    if (vscan_image_ringbuf.begin() == vscan_image_ringbuf.end()) {
        pthread_mutex_unlock(&mutex);
        ROS_INFO("vscan_image ring buffer is empty");
        return;
    }

    buf_flag = true;

    // image_obj > vscan_image
    if (get_time(&(image_obj_ringbuf.front().header)) >= get_time(&(vscan_image_ringbuf.front().header))) {
        vscan_image_buf = vscan_image_ringbuf.front();
        boost::circular_buffer<cv_tracker::image_obj>::iterator it = image_obj_ringbuf.begin();
        if (image_obj_ringbuf.size() == 1) {
            image_obj_buf = *it;
            pthread_mutex_unlock(&mutex);
            return;
        } else {
            for (it++; it != image_obj_ringbuf.end(); it++) {
                if (fabs_time_diff(&(vscan_image_ringbuf.front().header), &((it-1)->header))
                    < fabs_time_diff(&(vscan_image_ringbuf.front().header), &(it->header))) {
                    image_obj_buf = *(it-1);
                    break;
                }
            }
            if (it == image_obj_ringbuf.end()) {
                image_obj_buf = image_obj_ringbuf.back();
            }
        }

    } else {
        image_obj_buf = image_obj_ringbuf.front();
        boost::circular_buffer<points2image::PointsImage>::iterator it = vscan_image_ringbuf.begin();
        if (vscan_image_ringbuf.size() == 1) {
            vscan_image_buf = *it;
            pthread_mutex_unlock(&mutex);
            return;
        }

        for (it++; it != vscan_image_ringbuf.end(); it++) {
            if (fabs_time_diff(&(image_obj_ringbuf.front().header), &((it-1)->header))
                < fabs_time_diff(&(image_obj_ringbuf.front().header), &(it->header))) {
                vscan_image_buf = *(it-1);
                break;
            }
        }

        if (it == vscan_image_ringbuf.end()) {
            vscan_image_buf = vscan_image_ringbuf.back();
        }
    }
    pthread_mutex_unlock(&mutex);
}

void vscan_image_callback(const points2image::PointsImage::ConstPtr& vscan_image_msg) {
    pthread_mutex_lock(&mutex);
    vscan_image_ringbuf.push_front(*vscan_image_msg);
    //image_obj is empty
    if (image_obj_ringbuf.begin() == image_obj_ringbuf.end()) {
        ROS_INFO("image_obj ring buffer is empty");
        pthread_mutex_unlock(&mutex);
        return;
    }

    buf_flag = true;

    // image_obj > vscan_image
    if (get_time(&(image_obj_ringbuf.front().header)) >= get_time(&(vscan_image_ringbuf.front().header))) {
        vscan_image_buf = vscan_image_ringbuf.front();
        boost::circular_buffer<cv_tracker::image_obj>::iterator it = image_obj_ringbuf.begin();
        if (image_obj_ringbuf.size() == 1) {
            image_obj_buf = *it;
            pthread_mutex_unlock(&mutex);
            return;
        } else {
            for (it++; it != image_obj_ringbuf.end(); it++) {
                if (fabs_time_diff(&(vscan_image_ringbuf.front().header), &((it-1)->header))
                    < fabs_time_diff(&(vscan_image_ringbuf.front().header), &(it->header))) {
                    image_obj_buf = *(it-1);
                    break;
                }
            }
            if (it == image_obj_ringbuf.end()) {
                image_obj_buf = image_obj_ringbuf.back();
            }
        }

    } else {
        image_obj_buf = image_obj_ringbuf.front();
        boost::circular_buffer<points2image::PointsImage>::iterator it = vscan_image_ringbuf.begin();
        if (vscan_image_ringbuf.size() == 1) {
            vscan_image_buf = *it;
            pthread_mutex_unlock(&mutex);
            return;
        }

        for (it++; it != vscan_image_ringbuf.end(); it++) {
            if (fabs_time_diff(&(image_obj_ringbuf.front().header), &((it-1)->header))
                < fabs_time_diff(&(image_obj_ringbuf.front().header), &(it->header))) {
                vscan_image_buf = *(it-1);
                break;
            }
        }

        if (it == vscan_image_ringbuf.end()) {
            vscan_image_buf = vscan_image_ringbuf.back();
        }
    }
    pthread_mutex_unlock(&mutex);
}

bool publish() {
    if (buf_flag) {
        pthread_mutex_lock(&mutex);
        // scan_ringbuf.clear();
        // image_ringbuf.clear();
        // scan_ringbuf.push_front(scan_buf);
        // image_ringbuf.push_front(image_buf);
        ROS_INFO("publish");
        image_obj__pub.publish(image_obj_buf);
        vscan_image__pub.publish(vscan_image_buf);
        pthread_mutex_unlock(&mutex);
        return true;
    } else {
        ROS_INFO("publish failed");
        return false;
    }
}

#endif
]]>
            </text>
        </set>
        <set lineCount="93" fingerprint="6f6f3d1753fc0074d46b6321b816912d">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1072" endLineNumber="1225"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\map_file\nodes\vector_map_loader\vector_map_loader.cpp" startLineNumber="1077" endLineNumber="1230"/>
            <text>
<![CDATA[    else if (file_name == "vector.csv")
    {
      vector_pub.publish(createObjectArray<Vector, VectorArray>(file_path));
      category |= Category::VECTOR;
    }
    else if (file_name == "line.csv")
    {
      line_pub.publish(createObjectArray<Line, LineArray>(file_path));
      category |= Category::LINE;
    }
    else if (file_name == "area.csv")
    {
      area_pub.publish(createObjectArray<Area, AreaArray>(file_path));
      category |= Category::AREA;
    }
    else if (file_name == "pole.csv")
    {
      pole_pub.publish(createObjectArray<Pole, PoleArray>(file_path));
      category |= Category::POLE;
    }
    else if (file_name == "box.csv")
    {
      box_pub.publish(createObjectArray<Box, BoxArray>(file_path));
      category |= Category::BOX;
    }
    else if (file_name == "dtlane.csv")
    {
      dtlane_pub.publish(createObjectArray<DTLane, DTLaneArray>(file_path));
      category |= Category::DTLANE;
    }
    else if (file_name == "node.csv")
    {
      node_pub.publish(createObjectArray<Node, NodeArray>(file_path));
      category |= Category::NODE;
    }
    else if (file_name == "lane.csv")
    {
      lane_pub.publish(createObjectArray<Lane, LaneArray>(file_path));
      category |= Category::LANE;
    }
    else if (file_name == "wayarea.csv")
    {
      way_area_pub.publish(createObjectArray<WayArea, WayAreaArray>(file_path));
      category |= Category::WAY_AREA;
    }
    else if (file_name == "roadedge.csv")
    {
      road_edge_pub.publish(createObjectArray<RoadEdge, RoadEdgeArray>(file_path));
      category |= Category::ROAD_EDGE;
    }
    else if (file_name == "gutter.csv")
    {
      gutter_pub.publish(createObjectArray<Gutter, GutterArray>(file_path));
      category |= Category::GUTTER;
    }
    else if (file_name == "curb.csv")
    {
      curb_pub.publish(createObjectArray<Curb, CurbArray>(file_path));
      category |= Category::CURB;
    }
    else if (file_name == "whiteline.csv")
    {
      white_line_pub.publish(createObjectArray<WhiteLine, WhiteLineArray>(file_path));
      category |= Category::WHITE_LINE;
    }
    else if (file_name == "stopline.csv")
    {
      stop_line_pub.publish(createObjectArray<StopLine, StopLineArray>(file_path));
      category |= Category::STOP_LINE;
    }
    else if (file_name == "zebrazone.csv")
    {
      zebra_zone_pub.publish(createObjectArray<ZebraZone, ZebraZoneArray>(file_path));
      category |= Category::ZEBRA_ZONE;
    }
    else if (file_name == "crosswalk.csv")
    {
      cross_walk_pub.publish(createObjectArray<CrossWalk, CrossWalkArray>(file_path));
      category |= Category::CROSS_WALK;
    }
    else if (file_name == "road_surface_mark.csv")
    {
      road_mark_pub.publish(createObjectArray<RoadMark, RoadMarkArray>(file_path));
      category |= Category::ROAD_MARK;
    }
    else if (file_name == "poledata.csv")
    {
      road_pole_pub.publish(createObjectArray<RoadPole, RoadPoleArray>(file_path));
      category |= Category::ROAD_POLE;
    }
    else if (file_name == "roadsign.csv")
    {
      road_sign_pub.publish(createObjectArray<RoadSign, RoadSignArray>(file_path));
      category |= Category::ROAD_SIGN;
    }
    else if (file_name == "signaldata.csv")
    {
      signal_pub.publish(createObjectArray<Signal, SignalArray>(file_path));
      category |= Category::SIGNAL;
    }
    else if (file_name == "streetlight.csv")
    {
      street_light_pub.publish(createObjectArray<StreetLight, StreetLightArray>(file_path));
      category |= Category::STREET_LIGHT;
    }
    else if (file_name == "utilitypole.csv")
    {
      utility_pole_pub.publish(createObjectArray<UtilityPole, UtilityPoleArray>(file_path));
      category |= Category::UTILITY_POLE;
    }
    else if (file_name == "guardrail.csv")
    {
      guard_rail_pub.publish(createObjectArray<GuardRail, GuardRailArray>(file_path));
      category |= Category::GUARD_RAIL;
    }
    else if (file_name == "sidewalk.csv")
    {
      side_walk_pub.publish(createObjectArray<SideWalk, SideWalkArray>(file_path));
      category |= Category::SIDE_WALK;
    }
    else if (file_name == "driveon_portion.csv")
    {
      drive_on_portion_pub.publish(createObjectArray<DriveOnPortion, DriveOnPortionArray>(file_path));
      category |= Category::DRIVE_ON_PORTION;
    }
    else if (file_name == "intersection.csv")
    {
      cross_road_pub.publish(createObjectArray<CrossRoad, CrossRoadArray>(file_path));
      category |= Category::CROSS_ROAD;
    }
    else if (file_name == "sidestrip.csv")
    {
      side_strip_pub.publish(createObjectArray<SideStrip, SideStripArray>(file_path));
      category |= Category::SIDE_STRIP;
    }
    else if (file_name == "curvemirror.csv")
    {
      curve_mirror_pub.publish(createObjectArray<CurveMirror, CurveMirrorArray>(file_path));
      category |= Category::CURVE_MIRROR;
    }
    else if (file_name == "wall.csv")
    {
      wall_pub.publish(createObjectArray<Wall, WallArray>(file_path));
      category |= Category::WALL;
    }
    else if (file_name == "fence.csv")
    {
      fence_pub.publish(createObjectArray<Fence, FenceArray>(file_path));
      category |= Category::FENCE;
    }
    else if (file_name == "railroad_crossing.csv")
    {
      rail_crossing_pub.publish(createObjectArray<RailCrossing, RailCrossingArray>(file_path));
      category |= Category::RAIL_CROSSING;
]]>
            </text>
        </set>
        <set lineCount="93" fingerprint="e73def2c9db4ffad8d93125b3d209c70">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="558" endLineNumber="711"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="563" endLineNumber="716"/>
            <text>
<![CDATA[  if (category & VECTOR)
  {
    vector_.registerSubscriber(nh, "vector_map_info/vector");
    vector_.registerUpdater(updateVector);
  }
  if (category & LINE)
  {
    line_.registerSubscriber(nh, "vector_map_info/line");
    line_.registerUpdater(updateLine);
  }
  if (category & AREA)
  {
    area_.registerSubscriber(nh, "vector_map_info/area");
    area_.registerUpdater(updateArea);
  }
  if (category & POLE)
  {
    pole_.registerSubscriber(nh, "vector_map_info/pole");
    pole_.registerUpdater(updatePole);
  }
  if (category & BOX)
  {
    box_.registerSubscriber(nh, "vector_map_info/box");
    box_.registerUpdater(updateBox);
  }
  if (category & DTLANE)
  {
    dtlane_.registerSubscriber(nh, "vector_map_info/dtlane");
    dtlane_.registerUpdater(updateDTLane);
  }
  if (category & NODE)
  {
    node_.registerSubscriber(nh, "vector_map_info/node");
    node_.registerUpdater(updateNode);
  }
  if (category & LANE)
  {
    lane_.registerSubscriber(nh, "vector_map_info/lane");
    lane_.registerUpdater(updateLane);
  }
  if (category & WAY_AREA)
  {
    way_area_.registerSubscriber(nh, "vector_map_info/way_area");
    way_area_.registerUpdater(updateWayArea);
  }
  if (category & ROAD_EDGE)
  {
    road_edge_.registerSubscriber(nh, "vector_map_info/road_edge");
    road_edge_.registerUpdater(updateRoadEdge);
  }
  if (category & GUTTER)
  {
    gutter_.registerSubscriber(nh, "vector_map_info/gutter");
    gutter_.registerUpdater(updateGutter);
  }
  if (category & CURB)
  {
    curb_.registerSubscriber(nh, "vector_map_info/curb");
    curb_.registerUpdater(updateCurb);
  }
  if (category & WHITE_LINE)
  {
    white_line_.registerSubscriber(nh, "vector_map_info/white_line");
    white_line_.registerUpdater(updateWhiteLine);
  }
  if (category & STOP_LINE)
  {
    stop_line_.registerSubscriber(nh, "vector_map_info/stop_line");
    stop_line_.registerUpdater(updateStopLine);
  }
  if (category & ZEBRA_ZONE)
  {
    zebra_zone_.registerSubscriber(nh, "vector_map_info/zebra_zone");
    zebra_zone_.registerUpdater(updateZebraZone);
  }
  if (category & CROSS_WALK)
  {
    cross_walk_.registerSubscriber(nh, "vector_map_info/cross_walk");
    cross_walk_.registerUpdater(updateCrossWalk);
  }
  if (category & ROAD_MARK)
  {
    road_mark_.registerSubscriber(nh, "vector_map_info/road_mark");
    road_mark_.registerUpdater(updateRoadMark);
  }
  if (category & ROAD_POLE)
  {
    road_pole_.registerSubscriber(nh, "vector_map_info/road_pole");
    road_pole_.registerUpdater(updateRoadPole);
  }
  if (category & ROAD_SIGN)
  {
    road_sign_.registerSubscriber(nh, "vector_map_info/road_sign");
    road_sign_.registerUpdater(updateRoadSign);
  }
  if (category & SIGNAL)
  {
    signal_.registerSubscriber(nh, "vector_map_info/signal");
    signal_.registerUpdater(updateSignal);
  }
  if (category & STREET_LIGHT)
  {
    street_light_.registerSubscriber(nh, "vector_map_info/street_light");
    street_light_.registerUpdater(updateStreetLight);
  }
  if (category & UTILITY_POLE)
  {
    utility_pole_.registerSubscriber(nh, "vector_map_info/utility_pole");
    utility_pole_.registerUpdater(updateUtilityPole);
  }
  if (category & GUARD_RAIL)
  {
    guard_rail_.registerSubscriber(nh, "vector_map_info/guard_rail");
    guard_rail_.registerUpdater(updateGuardRail);
  }
  if (category & SIDE_WALK)
  {
    side_walk_.registerSubscriber(nh, "vector_map_info/side_walk");
    side_walk_.registerUpdater(updateSideWalk);
  }
  if (category & DRIVE_ON_PORTION)
  {
    drive_on_portion_.registerSubscriber(nh, "vector_map_info/drive_on_portion");
    drive_on_portion_.registerUpdater(updateDriveOnPortion);
  }
  if (category & CROSS_ROAD)
  {
    cross_road_.registerSubscriber(nh, "vector_map_info/cross_road");
    cross_road_.registerUpdater(updateCrossRoad);
  }
  if (category & SIDE_STRIP)
  {
    side_strip_.registerSubscriber(nh, "vector_map_info/side_strip");
    side_strip_.registerUpdater(updateSideStrip);
  }
  if (category & CURVE_MIRROR)
  {
    curve_mirror_.registerSubscriber(nh, "vector_map_info/curve_mirror");
    curve_mirror_.registerUpdater(updateCurveMirror);
  }
  if (category & WALL)
  {
    wall_.registerSubscriber(nh, "vector_map_info/wall");
    wall_.registerUpdater(updateWall);
  }
  if (category & FENCE)
  {
    fence_.registerSubscriber(nh, "vector_map_info/fence");
    fence_.registerUpdater(updateFence);
  }
  if (category & RAIL_CROSSING)
  {
    rail_crossing_.registerSubscriber(nh, "vector_map_info/rail_crossing");
    rail_crossing_.registerUpdater(updateRailCrossing);
]]>
            </text>
        </set>
        <set lineCount="93" fingerprint="fabee6fb2bd96c89c505a0324c4bec35">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="393" endLineNumber="546"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="398" endLineNumber="551"/>
            <text>
<![CDATA[  if (category & VECTOR)
  {
    if (vector_.empty())
      return false;
  }
  if (category & LINE)
  {
    if (line_.empty())
      return false;
  }
  if (category & AREA)
  {
    if (area_.empty())
      return false;
  }
  if (category & POLE)
  {
    if (pole_.empty())
      return false;
  }
  if (category & BOX)
  {
    if (box_.empty())
      return false;
  }
  if (category & DTLANE)
  {
    if (dtlane_.empty())
      return false;
  }
  if (category & NODE)
  {
    if (node_.empty())
      return false;
  }
  if (category & LANE)
  {
    if (lane_.empty())
      return false;
  }
  if (category & WAY_AREA)
  {
    if (way_area_.empty())
      return false;
  }
  if (category & ROAD_EDGE)
  {
    if (road_edge_.empty())
      return false;
  }
  if (category & GUTTER)
  {
    if (gutter_.empty())
      return false;
  }
  if (category & CURB)
  {
    if (curb_.empty())
      return false;
  }
  if (category & WHITE_LINE)
  {
    if (white_line_.empty())
      return false;
  }
  if (category & STOP_LINE)
  {
    if (stop_line_.empty())
      return false;
  }
  if (category & ZEBRA_ZONE)
  {
    if (zebra_zone_.empty())
      return false;
  }
  if (category & CROSS_WALK)
  {
    if (cross_walk_.empty())
      return false;
  }
  if (category & ROAD_MARK)
  {
    if (road_mark_.empty())
      return false;
  }
  if (category & ROAD_POLE)
  {
    if (road_pole_.empty())
      return false;
  }
  if (category & ROAD_SIGN)
  {
    if (road_sign_.empty())
      return false;
  }
  if (category & SIGNAL)
  {
    if (signal_.empty())
      return false;
  }
  if (category & STREET_LIGHT)
  {
    if (street_light_.empty())
      return false;
  }
  if (category & UTILITY_POLE)
  {
    if (utility_pole_.empty())
      return false;
  }
  if (category & GUARD_RAIL)
  {
    if (guard_rail_.empty())
      return false;
  }
  if (category & SIDE_WALK)
  {
    if (side_walk_.empty())
      return false;
  }
  if (category & DRIVE_ON_PORTION)
  {
    if (drive_on_portion_.empty())
      return false;
  }
  if (category & CROSS_ROAD)
  {
    if (cross_road_.empty())
      return false;
  }
  if (category & SIDE_STRIP)
  {
    if (side_strip_.empty())
      return false;
  }
  if (category & CURVE_MIRROR)
  {
    if (curve_mirror_.empty())
      return false;
  }
  if (category & WALL)
  {
    if (wall_.empty())
      return false;
  }
  if (category & FENCE)
  {
    if (fence_.empty())
      return false;
  }
  if (category & RAIL_CROSSING)
  {
    if (rail_crossing_.empty())
      return false;
]]>
            </text>
        </set>
        <set lineCount="96" fingerprint="dd129b494486e5f4c8cf2cce209bba8a">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\range_fusion\sync_range_fusion.cpp" startLineNumber="269" endLineNumber="424"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\kf_track\sync_track.cpp" startLineNumber="269" endLineNumber="424"/>
            <text>
<![CDATA[            nanosleep(&sleep_time, NULL);
    }
    pthread_mutex_unlock(&mutex);

    ros::spin();
    pthread_mutex_unlock(&mutex);

    /* shutdown server thread */
    ROS_INFO("wait until shutdown a thread");
    pthread_kill(th, SIGINT);
    pthread_join(th, NULL);

    return 0;
}



#if 0
cv_tracker::image_obj_ranged image_obj_ranged_buf;
sensor_msgs::Image image_raw_buf;

void image_obj_ranged_callback(const cv_tracker::image_obj_ranged::ConstPtr& image_obj_ranged_msg) {
    pthread_mutex_lock(&mutex);
    image_obj_ranged_ringbuf.push_front(*image_obj_ranged_msg);

    //image_raw is empty
    if (image_raw_ringbuf.begin() == image_raw_ringbuf.end()) {
        pthread_mutex_unlock(&mutex);
        ROS_INFO("image_raw ring buffer is empty");
        return;
    }

    buf_flag = true;

    // image_obj_ranged > image_raw
    if (get_time(&(image_obj_ranged_ringbuf.front().header)) >= get_time(&(image_raw_ringbuf.front().header))) {
        image_raw_buf = image_raw_ringbuf.front();
        boost::circular_buffer<cv_tracker::image_obj_ranged>::iterator it = image_obj_ranged_ringbuf.begin();
        if (image_obj_ranged_ringbuf.size() == 1) {
            image_obj_ranged_buf = *it;
            pthread_mutex_unlock(&mutex);
            return;
        } else {
            for (it++; it != image_obj_ranged_ringbuf.end(); it++) {
                if (fabs_time_diff(&(image_raw_ringbuf.front().header), &((it-1)->header))
                    < fabs_time_diff(&(image_raw_ringbuf.front().header), &(it->header))) {
                    image_obj_ranged_buf = *(it-1);
                    break;
                }
            }
            if (it == image_obj_ranged_ringbuf.end()) {
                image_obj_ranged_buf = image_obj_ranged_ringbuf.back();
            }
        }

    } else {
        image_obj_ranged_buf = image_obj_ranged_ringbuf.front();
        boost::circular_buffer<sensor_msgs::Image>::iterator it = image_raw_ringbuf.begin();
        if (image_raw_ringbuf.size() == 1) {
            image_raw_buf = *it;
            pthread_mutex_unlock(&mutex);
            return;
        }

        for (it++; it != image_raw_ringbuf.end(); it++) {
            if (fabs_time_diff(&(image_obj_ranged_ringbuf.front().header), &((it-1)->header))
                < fabs_time_diff(&(image_obj_ranged_ringbuf.front().header), &(it->header))) {
                image_raw_buf = *(it-1);
                break;
            }
        }

        if (it == image_raw_ringbuf.end()) {
            image_raw_buf = image_raw_ringbuf.back();
        }
    }
    pthread_mutex_unlock(&mutex);
}

void image_raw_callback(const sensor_msgs::Image::ConstPtr& image_raw_msg) {
    pthread_mutex_lock(&mutex);
    image_raw_ringbuf.push_front(*image_raw_msg);
    //image_obj_ranged is empty
    if (image_obj_ranged_ringbuf.begin() == image_obj_ranged_ringbuf.end()) {
        ROS_INFO("image_obj_ranged ring buffer is empty");
        pthread_mutex_unlock(&mutex);
        return;
    }

    buf_flag = true;

    // image_obj_ranged > image_raw
    if (get_time(&(image_obj_ranged_ringbuf.front().header)) >= get_time(&(image_raw_ringbuf.front().header))) {
        image_raw_buf = image_raw_ringbuf.front();
        boost::circular_buffer<cv_tracker::image_obj_ranged>::iterator it = image_obj_ranged_ringbuf.begin();
        if (image_obj_ranged_ringbuf.size() == 1) {
            image_obj_ranged_buf = *it;
            pthread_mutex_unlock(&mutex);
            return;
        } else {
            for (it++; it != image_obj_ranged_ringbuf.end(); it++) {
                if (fabs_time_diff(&(image_raw_ringbuf.front().header), &((it-1)->header))
                    < fabs_time_diff(&(image_raw_ringbuf.front().header), &(it->header))) {
                    image_obj_ranged_buf = *(it-1);
                    break;
                }
            }
            if (it == image_obj_ranged_ringbuf.end()) {
                image_obj_ranged_buf = image_obj_ranged_ringbuf.back();
            }
        }

    } else {
        image_obj_ranged_buf = image_obj_ranged_ringbuf.front();
        boost::circular_buffer<sensor_msgs::Image>::iterator it = image_raw_ringbuf.begin();
        if (image_raw_ringbuf.size() == 1) {
            image_raw_buf = *it;
            pthread_mutex_unlock(&mutex);
            return;
        }

        for (it++; it != image_raw_ringbuf.end(); it++) {
            if (fabs_time_diff(&(image_obj_ranged_ringbuf.front().header), &((it-1)->header))
                < fabs_time_diff(&(image_obj_ranged_ringbuf.front().header), &(it->header))) {
                image_raw_buf = *(it-1);
                break;
            }
        }

        if (it == image_raw_ringbuf.end()) {
            image_raw_buf = image_raw_ringbuf.back();
        }
    }
    pthread_mutex_unlock(&mutex);
}

bool publish() {
    if (buf_flag) {
        pthread_mutex_lock(&mutex);
        // scan_ringbuf.clear();
        // image_ringbuf.clear();
        // scan_ringbuf.push_front(scan_buf);
        // image_ringbuf.push_front(image_buf);
        ROS_INFO("publish");
        image_obj_ranged__pub.publish(image_obj_ranged_buf);
        image_raw__pub.publish(image_raw_buf);
        pthread_mutex_unlock(&mutex);
        return true;
    } else {
        ROS_INFO("publish failed");
        return false;
    }
}

#endif
#endif
]]>
            </text>
        </set>
        <set lineCount="105" fingerprint="559b08daf5e2920265301ca7dd061c33">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\obj_reproj\sync_obj_reproj.cpp" startLineNumber="7" endLineNumber="189"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\lidar_tracker\nodes\obj_fusion\sync_obj_fusion.cpp" startLineNumber="7" endLineNumber="189"/>
            <text>
<![CDATA[int main(int argc, char **argv) {
    ros::init(argc, argv, "sync_obj_fusion");
    std::string ns(ros::this_node::getNamespace());
    std::string sub1("/obj_label");
    std::string sub2("/cluster_centroids");
    std::string req("/obj_pose");
    std::string pub1("/obj_label");
    std::string pub2("/cluster_centroids");

    Synchronizer<cv_tracker::obj_label, lidar_tracker::centroids, visualization_msgs::MarkerArray> synchronizer(sub1, sub2, pub1, pub2, req, ns);
    synchronizer.run();

    return 0;
}

#if 0
/* ----header---- */
/* common header */
#include "ros/ros.h"
#include <ros/callback_queue.h>
#include <boost/circular_buffer.hpp>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
#include <sys/stat.h>
#include <sys/select.h>
#include <mqueue.h>
#include <fcntl.h>
#include <errno.h>
#include <unistd.h>
#include <pthread.h>
#include "t_sync_message.h"
/* user header */
#include "cv_tracker/obj_label.h"
#include "lidar_tracker/centroids.h"
#include "visualization_msgs/MarkerArray.h"

/* ----mode---- */
#define _REQ_PUB 1

/* ----var---- */
/* common var */
bool buf_flag;
pthread_mutex_t mutex;
/* user var */
boost::circular_buffer<cv_tracker::obj_label> obj_label_ringbuf(10);
boost::circular_buffer<lidar_tracker::centroids> cluster_centroids_ringbuf(10);
ros::Publisher obj_label__pub;
ros::Publisher cluster_centroids__pub;
bool obj_pose_flag;

/* ----function---- */
double fabs_time_diff(std_msgs::Header *timespec1, std_msgs::Header *timespec2) {
    double time1 = (double)timespec1->stamp.sec + (double)timespec1->stamp.nsec/1000000000L;
    double time2 = (double)timespec2->stamp.sec + (double)timespec2->stamp.nsec/1000000000L;

    return fabs(time1 - time2);
}

double get_time(const std_msgs::Header *timespec) {
    return (double)timespec->stamp.sec + (double)timespec->stamp.nsec/1000000000L;
}


#if _REQ_PUB
cv_tracker::obj_label* p_obj_label_buf;
lidar_tracker::centroids* p_cluster_centroids_buf;

void publish_msg(cv_tracker::obj_label* p_obj_label_buf, lidar_tracker::centroids* p_cluster_centroids_buf)
{
    ROS_INFO("publish");
    obj_label__pub.publish(*p_obj_label_buf);
    cluster_centroids__pub.publish(*p_cluster_centroids_buf);
}

bool publish() {
    if (buf_flag) {
        //obj_label is empty
        if (obj_label_ringbuf.begin() == obj_label_ringbuf.end()) {
            ROS_INFO("obj_label ring buffer is empty");
            return false;
        }

        //cluster_centroids is empty
        if (cluster_centroids_ringbuf.begin() == cluster_centroids_ringbuf.end()) {
            ROS_INFO("cluster_centroids ring buffer is empty");
            return false;
        }

        // obj_label > cluster_centroids
        if (get_time(&(obj_label_ringbuf.front().header)) >= get_time(&(cluster_centroids_ringbuf.front().header))) {
            p_cluster_centroids_buf = &(cluster_centroids_ringbuf.front());
            boost::circular_buffer<cv_tracker::obj_label>::iterator it = obj_label_ringbuf.begin();
            if (obj_label_ringbuf.size() == 1) {
                p_obj_label_buf = &*it;
                publish_msg(p_obj_label_buf, p_cluster_centroids_buf);
                if (obj_pose_flag == true){
                    buf_flag = false;
                    obj_pose_flag = false;
                    obj_label_ringbuf.clear();
                    cluster_centroids_ringbuf.clear();
                }
                return true;
            } else {
                for (it++; it != obj_label_ringbuf.end(); it++) {
                    if (fabs_time_diff(&(cluster_centroids_ringbuf.front().header), &((it-1)->header))
                        < fabs_time_diff(&(cluster_centroids_ringbuf.front().header), &(it->header))) {
                        p_obj_label_buf = &*(it-1);
                        break;
                    }
                }
                if (it == obj_label_ringbuf.end()) {
                    p_obj_label_buf = &(obj_label_ringbuf.back());
                }
            }
        }
        // obj_label < cluster_centroids
        else {
            p_obj_label_buf = &(obj_label_ringbuf.front());
            boost::circular_buffer<lidar_tracker::centroids>::iterator it = cluster_centroids_ringbuf.begin();
            if (cluster_centroids_ringbuf.size() == 1) {
                p_cluster_centroids_buf = &*it;
                publish_msg(p_obj_label_buf, p_cluster_centroids_buf);
                if (obj_pose_flag == true){
                    buf_flag = false;
                    obj_pose_flag = false;
                    obj_label_ringbuf.clear();
                    cluster_centroids_ringbuf.clear();
                }
                return true;
            }

            for (it++; it != cluster_centroids_ringbuf.end(); it++) {
                if (fabs_time_diff(&(obj_label_ringbuf.front().header), &((it-1)->header))
                    < fabs_time_diff(&(obj_label_ringbuf.front().header), &(it->header))) {
                    p_cluster_centroids_buf = &*(it-1);
                    break;
                }
            }

            if (it == cluster_centroids_ringbuf.end()) {
                p_cluster_centroids_buf = &(cluster_centroids_ringbuf.back());
            }
        }
        publish_msg(p_obj_label_buf, p_cluster_centroids_buf);
        if (obj_pose_flag == true){
            buf_flag = false;
            obj_pose_flag = false;
            obj_label_ringbuf.clear();
            cluster_centroids_ringbuf.clear();
        }
        return true;
    } else {
        return false;
    }
}

void obj_label_callback(const cv_tracker::obj_label::ConstPtr& obj_label_msg) {
    pthread_mutex_lock(&mutex);
    obj_label_ringbuf.push_front(*obj_label_msg);
    //cluster_centroids is empty
    if (cluster_centroids_ringbuf.begin() == cluster_centroids_ringbuf.end()) {
        buf_flag = false;
        pthread_mutex_unlock(&mutex);
        ROS_INFO("cluster_centroids ring buffer is empty");
        return;
    }
    buf_flag = true;
    pthread_mutex_unlock(&mutex);
    pthread_mutex_lock(&mutex);
    if (obj_pose_flag == true) {
        publish();
    }
    pthread_mutex_unlock(&mutex);
}

void cluster_centroids_callback(const lidar_tracker::centroids::ConstPtr& cluster_centroids_msg) {
    pthread_mutex_lock(&mutex);
    cluster_centroids_ringbuf.push_front(*cluster_centroids_msg);
    //obj_label is empty
    if (obj_label_ringbuf.begin() == obj_label_ringbuf.end()) {
]]>
            </text>
        </set>
        <set lineCount="112" fingerprint="bb0796d5ccfc11e9c2a72a4bbd12c4fc">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching_tku\ndt_matching_tku.cpp" startLineNumber="1022" endLineNumber="1198"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping_tku\ndt_mapping_tku.cpp" startLineNumber="1023" endLineNumber="1200"/>
            <text>
<![CDATA[int load_ndt_ini(char *name)
{
  FILE *ifp;

  ifp = fopen(name, "r");
  if (!ifp)
    return 0;

  // map path
  if (fscanf(ifp, "%s", g_ndmap_name) == EOF)
    return 0;
  // map size
  if (fscanf(ifp, "%d %d %d %lf", &g_map_x, &g_map_y, &g_map_z, &g_map_cellsize) == EOF)
    return 0;
  // map center
  if (fscanf(ifp, "%lf %lf %lf %lf", &g_map_center_x, &g_map_center_y, &g_map_center_z, &g_map_rotation) == EOF)
    return 0;
  // use gnss
  if (fscanf(ifp, "%d", &g_use_gnss) == EOF)
    return 0;
  if (!g_use_gnss)
  {
    if (fscanf(ifp, "%lf %lf %lf %lf %lf %lf", &g_ini_x, &g_ini_y, &g_ini_z, &g_ini_roll, &g_ini_pitch, &g_ini_yaw) ==
        EOF)
      return 0;
  }

  //
  return 1;
}

int load_nd_map(char *name)
{
  //  int i,j,k,layer;
  NDData nddat;
  NDMapPtr ndmap[2];
  NDPtr ndp;
  FILE *ifp;
  //  FILE *logfp;

  ndmap[0] = NDmap;
  ndmap[1] = NDmap->next;

  ifp = fopen(name, "r");
  if (!ifp)
    return 0;

  while (fread(&nddat, sizeof(NDData), 1, ifp) > 0)
  {
    ndp = add_ND();
    *ndp = nddat.nd;
    *(ndmap[nddat.layer]->nd + nddat.x * ndmap[nddat.layer]->to_x + nddat.y * ndmap[nddat.layer]->to_y + nddat.z) = ndp;
    ndp->flag = 0;
    update_covariance(ndp);
    // fprintf(logfp,"%f %f %f \n",ndp->mean.x, ndp->mean.y, ndp->mean.z);
  }

  printf("%d NDVoxels are loaded\n", NDs_num);
  fclose(ifp);
  return 1;
}

/*锟结イ锟斤拷乜锟?*/
int main(int argc, char *argv[])
{
  printf("----------------------\n");
  printf(" 3D NDT scan matching \n");
  printf("----------------------\n");

  ros::init(argc, argv, "ndt_matching_tku");

  ros::NodeHandle nh;
  ros::NodeHandle private_nh("~");

  private_nh.getParam("downsampler", _downsampler);
  private_nh.getParam("init_x", g_ini_x);
  private_nh.getParam("init_y", g_ini_y);
  private_nh.getParam("init_z", g_ini_z);
  private_nh.getParam("init_roll", g_ini_roll);
  private_nh.getParam("init_pitch", g_ini_pitch);
  private_nh.getParam("init_yaw", g_ini_yaw);

  std::cout << "Downsampler: " << _downsampler << std::endl;
  if (_downsampler == "voxel_grid")
  {
    _downsampler_num = 1;
  }
  if (_downsampler == "distance")
  {
    _downsampler_num = 0;
  }

  if (nh.getParam("tf_x", _tf_x) == false)
  {
    std::cout << "tf_x is not set." << std::endl;
    return 1;
  }
  if (nh.getParam("tf_y", _tf_y) == false)
  {
    std::cout << "tf_y is not set." << std::endl;
    return 1;
  }
  if (nh.getParam("tf_z", _tf_z) == false)
  {
    std::cout << "tf_z is not set." << std::endl;
    return 1;
  }
  if (nh.getParam("tf_roll", _tf_roll) == false)
  {
    std::cout << "tf_roll is not set." << std::endl;
    return 1;
  }
  if (nh.getParam("tf_pitch", _tf_pitch) == false)
  {
    std::cout << "tf_pitch is not set." << std::endl;
    return 1;
  }
  if (nh.getParam("tf_yaw", _tf_yaw) == false)
  {
    std::cout << "tf_yaw is not set." << std::endl;
    return 1;
  }

  Eigen::Translation3f tl_btol(_tf_x, _tf_y, _tf_z);  // tl: translation
  Eigen::AngleAxisf rot_x_btol(_tf_roll, Eigen::Vector3f::UnitX());  // rot: rotation
  Eigen::AngleAxisf rot_y_btol(_tf_pitch, Eigen::Vector3f::UnitY());
  Eigen::AngleAxisf rot_z_btol(_tf_yaw, Eigen::Vector3f::UnitZ());
  tf_btol = (tl_btol * rot_z_btol * rot_y_btol * rot_x_btol).matrix();

  Eigen::Translation3f tl_ltob((-1.0) * _tf_x, (-1.0) * _tf_y, (-1.0) * _tf_z);  // tl: translation
  Eigen::AngleAxisf rot_x_ltob((-1.0) * _tf_roll, Eigen::Vector3f::UnitX());  // rot: rotation
  Eigen::AngleAxisf rot_y_ltob((-1.0) * _tf_pitch, Eigen::Vector3f::UnitY());
  Eigen::AngleAxisf rot_z_ltob((-1.0) * _tf_yaw, Eigen::Vector3f::UnitZ());
  tf_ltob = (tl_ltob * rot_z_ltob * rot_y_ltob * rot_x_ltob).matrix();

  // map path
  sprintf(g_ndmap_name, "%s", "ndmap");

  // map size
  g_map_x = G_MAP_X;
  g_map_y = G_MAP_Y;
  g_map_z = G_MAP_Z;
  g_map_cellsize = G_MAP_CELLSIZE;
  // map center
  g_map_center_x = g_ini_x;
  g_map_center_y = g_ini_y;
  g_map_center_z = g_ini_z;
  g_map_rotation = 0.0;
  // use gnss
  g_use_gnss = 0;

  Eigen::Translation3f tl_local_to_global(g_map_center_x, g_map_center_y, g_map_center_z);  // tl: translation
  Eigen::AngleAxisf rot_x_local_to_global(0.0, Eigen::Vector3f::UnitX());  // rot: rotation
  Eigen::AngleAxisf rot_y_local_to_global(0.0, Eigen::Vector3f::UnitY());
  Eigen::AngleAxisf rot_z_local_to_global(g_map_rotation, Eigen::Vector3f::UnitZ());
  q_local_to_global.setRPY(0.0, 0.0, g_map_rotation);
  tf_local_to_global = (tl_local_to_global * rot_z_local_to_global * rot_y_local_to_global * rot_x_local_to_global).matrix();

  /*initialize(clear) NDmap data*/
  NDmap = initialize_NDmap();

  // load map
  prev_pose.x = (g_ini_x - g_map_center_x) * cos(-g_map_rotation) - (g_ini_y - g_map_center_y) * sin(-g_map_rotation);
  prev_pose.y = (g_ini_x - g_map_center_x) * sin(-g_map_rotation) + (g_ini_y - g_map_center_y) * cos(-g_map_rotation);
  prev_pose.z = g_ini_z - g_map_center_z;
  prev_pose.theta = g_ini_roll;
  prev_pose.theta2 = g_ini_pitch;
  prev_pose.theta3 = g_ini_yaw - g_map_rotation;

  prev_pose2 = prev_pose;
  is_first_time = 1;

  ndmap_pub = nh.advertise<sensor_msgs::PointCloud2>("/ndmap", 1000);
  ndt_pose_pub = nh.advertise<geometry_msgs::PoseStamped>("/ndt_pose", 1000);
  localizer_pose_pub = nh.advertise<geometry_msgs::PoseStamped>("/localizer_pose", 1000);

//  ros::Subscriber map_sub = nh.subscribe("points_map", 10, map_callback);
  ros::Subscriber points_sub = nh.subscribe("points_raw", 1000, points_callback);
]]>
            </text>
        </set>
        <set lineCount="129" fingerprint="9f693ad0d056354e2ac43de85ab0f877">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\util\capability_version_checker.cpp" startLineNumber="92" endLineNumber="220"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\detection\lib\image\dpm_ttic\util\capability_version_checker.cpp" startLineNumber="95" endLineNumber="223"/>
            <text>
<![CDATA[    case 1 :
      *str = "CUDA_ERROR_INVALID_VALUE";
      break;
    case 2 :
      *str = "CUDA_ERROR_OUT_OF_MEMORY";
      break;
    case 3 :
      *str = "CUDA_ERROR_NOT_INITIALIZED";
      break;
    case 4 :
      *str = "CUDA_ERROR_DEINITIALIZED";
      break;
    case 5 :
      *str = "CUDA_ERROR_PROFILER_DISABLED";
      break;
    case 6 :
      *str = "CUDA_ERROR_PROFILER_NOT_INITIALIZED";
      break;
    case 7 :
      *str = "CUDA_ERROR_PROFILER_ALREADY_STARTED";
      break;
    case 8 :
      *str = "CUDA_ERROR_PROFILER_ALREADY_STOPPED";
      break;
    case 100 :
      *str = "CUDA_ERROR_NO_DEVICE (no CUDA-capable devices were detected)";
      break;
    case 101 :
      *str = "CUDA_ERROR_INVALID_DEVICE (device specified is not a valid CUDA device)";
      break;
    case 200 :
      *str = "CUDA_ERROR_INVALID_IMAGE";
      break;
    case 201 :
      *str = "CUDA_ERROR_INVALID_CONTEXT";
      break;
    case 202 :
      *str = "CUDA_ERROR_CONTEXT_ALREADY_CURRENT";
      break;
    case 205 :
      *str = "CUDA_ERROR_MAP_FAILED";
      break;
    case 206 :
      *str = "CUDA_ERROR_UNMAP_FAILED";
      break;
    case 207 :
      *str = "CUDA_ERROR_ARRAY_IS_MAPPED";
      break;
    case 208 :
      *str = "CUDA_ERROR_ALREADY_MAPPED";
      break;
    case 209 :
      *str = "CUDA_ERROR_NO_BINARY_FOR_GPU";
      break;
    case 210 :
      *str = "CUDA_ERROR_ALREADY_ACQUIRED";
      break;
    case 211 :
      *str = "CUDA_ERROR_NOT_MAPPED";
      break;
    case 212 :
      *str = "CUDA_ERROR_NOT_MAPPED_AS_ARRAY";
      break;
    case 213 :
      *str = "CUDA_ERROR_NOT_MAPPED_AS_POINTER";
      break;
    case 214 :
      *str = "CUDA_ERROR_ECC_UNCORRECTABLE";
      break;
    case 215 :
      *str = "CUDA_ERROR_UNSUPPORTED_LIMIT";
      break;
    case 216 :
      *str = "CUDA_ERROR_CONTEXT_ALREADY_IN_USE";
      break;
    case 300 :
      *str = "CUDA_ERROR_INVALID_SOURCE";
      break;
    case 301 :
      *str = "CUDA_ERROR_FILE_NOT_FOUND";
      break;
    case 302 :
      *str = "CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND";
      break;
    case 303 :
      *str = "CUDA_ERROR_SHARED_OBJECT_INIT_FAILED";
      break;
    case 304 :
      *str = "CUDA_ERROR_OPERATING_SYSTEM";
      break;
    case 400 :
      *str = "CUDA_ERROR_INVALID_HANDLE";
      break;
    case 500 :
      *str = "CUDA_ERROR_NOT_FOUND";
      break;
    case 600 :
      *str = "CUDA_ERROR_NOT_READY";
      break;
    case 700 :
      *str = "CUDA_ERROR_LAUNCH_FAILED";
      break;
    case 701 :
      *str = "CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES";
      break;
    case 702 :
      *str = "CUDA_ERROR_LAUNCH_TIMEOUT";
      break;
    case 703 :
      *str = "CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING";
      break;
    case 704 :
      *str = "CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED";
      break;
    case 705 :
      *str = "CUDA_ERROR_PEER_ACCESS_NOT_ENABLED";
      break;
    case 708 :
      *str = "CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE";
      break;
    case 709 :
      *str = "CUDA_ERROR_CONTEXT_IS_DESTROYED";
      break;
    case 710 :
      *str = "CUDA_ERROR_ASSERT";
      break;
    case 999 :
      *str = "CUDA_ERROR_UNKNOWN";
      break;
]]>
            </text>
        </set>
        <set lineCount="137" fingerprint="abf611a4fa899ad793f2ac3ba919e824">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\lidar_tracker\nodes\obj_fusion\sync_obj_fusion.cpp" startLineNumber="191" endLineNumber="389"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\test.cpp" startLineNumber="167" endLineNumber="365"/>
            <text>
<![CDATA[        ROS_INFO("obj_label ring buffer is empty");
        pthread_mutex_unlock(&mutex);
        return;
    }

    buf_flag = true;
    pthread_mutex_unlock(&mutex);
    pthread_mutex_lock(&mutex);
    if (obj_pose_flag == true) {
        publish();
    }
    pthread_mutex_unlock(&mutex);
}

#else
cv_tracker::obj_label obj_label_buf;
lidar_tracker::centroids cluster_centroids_buf;

bool publish() {
    if (buf_flag) {
        ROS_INFO("publish");
        obj_label__pub.publish(obj_label_buf);
        cluster_centroids__pub.publish(cluster_centroids_buf);
        if (obj_pose_flag == true){
            buf_flag = false;
            obj_pose_flag = false;
            obj_label_ringbuf.clear();
            cluster_centroids_ringbuf.clear();
        }
        return true;
    } else {
        ROS_INFO("publish failed");
        return false;
    }
}

void obj_label_callback(const cv_tracker::obj_label::ConstPtr& obj_label_msg) {
    pthread_mutex_lock(&mutex);
    obj_label_ringbuf.push_front(*obj_label_msg);

    //cluster_centroids is empty
    if (cluster_centroids_ringbuf.begin() == cluster_centroids_ringbuf.end()) {
        pthread_mutex_unlock(&mutex);
        ROS_INFO("cluster_centroids ring buffer is empty");
        return;
    }

    buf_flag = true;

    // obj_label > cluster_centroids
    if (get_time(&(obj_label_ringbuf.front().header)) >= get_time(&(cluster_centroids_ringbuf.front().header))) {
        cluster_centroids_buf = cluster_centroids_ringbuf.front();
        boost::circular_buffer<cv_tracker::obj_label>::iterator it = obj_label_ringbuf.begin();
        if (obj_label_ringbuf.size() == 1) {
            obj_label_buf = *it;
            pthread_mutex_unlock(&mutex);
            pthread_mutex_lock(&mutex);
            if (obj_pose_flag == true) {
                publish();
            }
            pthread_mutex_unlock(&mutex);
            return;
        } else {
            for (it++; it != obj_label_ringbuf.end(); it++) {
                if (fabs_time_diff(&(cluster_centroids_ringbuf.front().header), &((it-1)->header))
                    < fabs_time_diff(&(cluster_centroids_ringbuf.front().header), &(it->header))) {
                    obj_label_buf = *(it-1);
                    break;
                }
            }
            if (it == obj_label_ringbuf.end()) {
                obj_label_buf = obj_label_ringbuf.back();
            }
        }

    } else {
        obj_label_buf = obj_label_ringbuf.front();
        boost::circular_buffer<lidar_tracker::centroids>::iterator it = cluster_centroids_ringbuf.begin();
        if (cluster_centroids_ringbuf.size() == 1) {
            cluster_centroids_buf = *it;
            pthread_mutex_unlock(&mutex);
            pthread_mutex_lock(&mutex);
            if (obj_pose_flag == true) {
                publish();
            }
            pthread_mutex_unlock(&mutex);
            return;
        }

        for (it++; it != cluster_centroids_ringbuf.end(); it++) {
            if (fabs_time_diff(&(obj_label_ringbuf.front().header), &((it-1)->header))
                < fabs_time_diff(&(obj_label_ringbuf.front().header), &(it->header))) {
                cluster_centroids_buf = *(it-1);
                break;
            }
        }

        if (it == cluster_centroids_ringbuf.end()) {
            cluster_centroids_buf = cluster_centroids_ringbuf.back();
        }
    }
    pthread_mutex_unlock(&mutex);
}

void cluster_centroids_callback(const lidar_tracker::centroids::ConstPtr& cluster_centroids_msg) {
    pthread_mutex_lock(&mutex);
    cluster_centroids_ringbuf.push_front(*cluster_centroids_msg);
    //obj_label is empty
    if (obj_label_ringbuf.begin() == obj_label_ringbuf.end()) {
        ROS_INFO("obj_label ring buffer is empty");
        pthread_mutex_unlock(&mutex);
        return;
    }

    buf_flag = true;

    // obj_label > cluster_centroids
    if (get_time(&(obj_label_ringbuf.front().header)) >= get_time(&(cluster_centroids_ringbuf.front().header))) {
        cluster_centroids_buf = cluster_centroids_ringbuf.front();
        boost::circular_buffer<cv_tracker::obj_label>::iterator it = obj_label_ringbuf.begin();
        if (obj_label_ringbuf.size() == 1) {
            obj_label_buf = *it;
            pthread_mutex_unlock(&mutex);
            pthread_mutex_lock(&mutex);
            if (obj_pose_flag == true) {
                publish();
            }
            pthread_mutex_unlock(&mutex);
            return;
        } else {
            for (it++; it != obj_label_ringbuf.end(); it++) {
                if (fabs_time_diff(&(cluster_centroids_ringbuf.front().header), &((it-1)->header))
                    < fabs_time_diff(&(cluster_centroids_ringbuf.front().header), &(it->header))) {
                    obj_label_buf = *(it-1);
                    break;
                }
            }
            if (it == obj_label_ringbuf.end()) {
                obj_label_buf = obj_label_ringbuf.back();
            }
        }

    } else {
        obj_label_buf = obj_label_ringbuf.front();
        boost::circular_buffer<lidar_tracker::centroids>::iterator it = cluster_centroids_ringbuf.begin();
        if (cluster_centroids_ringbuf.size() == 1) {
            cluster_centroids_buf = *it;
            pthread_mutex_unlock(&mutex);
            pthread_mutex_lock(&mutex);
            if (obj_pose_flag == true) {
                publish();
            }
            pthread_mutex_unlock(&mutex);
            return;
        }

        for (it++; it != cluster_centroids_ringbuf.end(); it++) {
            if (fabs_time_diff(&(obj_label_ringbuf.front().header), &((it-1)->header))
                < fabs_time_diff(&(obj_label_ringbuf.front().header), &(it->header))) {
                cluster_centroids_buf = *(it-1);
                break;
            }
        }

        if (it == cluster_centroids_ringbuf.end()) {
            cluster_centroids_buf = cluster_centroids_ringbuf.back();
        }
    }
    pthread_mutex_unlock(&mutex);
}

#endif

void obj_pose_callback(const visualization_msgs::MarkerArray::ConstPtr& obj_pose_msg) {
    pthread_mutex_lock(&mutex);
    obj_pose_flag = true;
    ROS_INFO("catch publish request");
    if (publish() == false) {
        ROS_INFO("waitting...");
    }
    pthread_mutex_unlock(&mutex);}

void* thread(void* args)
{
    ros::NodeHandle nh_rcv;
    ros::CallbackQueue rcv_callbackqueue;
    nh_rcv.setCallbackQueue(&rcv_callbackqueue);
    ros::Subscriber obj_pose_sub = nh_rcv.subscribe("obj_pose", 5, obj_pose_callback);
    while (nh_rcv.ok()) {
        rcv_callbackqueue.callAvailable(ros::WallDuration(1.0f));
        pthread_mutex_lock(&mutex);
        bool flag = (obj_pose_flag == false && buf_flag == true);
        if (flag) {
            ROS_INFO("timeout");
            if(!publish()) {
                /* when to publish is failure, republish */
                struct timespec sleep_time;
                sleep_time.tv_sec = 0;
                sleep_time.tv_nsec = 200000000; //5Hz
]]>
            </text>
        </set>
        <set lineCount="139" fingerprint="2a5cf456ec1712e8e2ce9b50273b146e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\astar_planner\nodes\velocity_set\libvelocity_set.cpp" startLineNumber="4" endLineNumber="248"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\planning\motion\packages\lattice_planner\nodes\lattice_velocity_set\libvelocity_set.cpp" startLineNumber="4" endLineNumber="248"/>
            <text>
<![CDATA[std::vector<geometry_msgs::Point> removeNeedlessPoints(std::vector<geometry_msgs::Point> &area_points)
{
  area_points.push_back(area_points.front());
  std::map<double, int> length_index;
  for (unsigned int i = 0; i < area_points.size() - 1; i++)
    length_index[calcSquareOfLength(area_points[i], area_points[i + 1])] = i;

  std::vector<geometry_msgs::Point> new_points;
  auto it = length_index.end();
  int first = (--it)->second;
  int second = (--it)->second;
  new_points.push_back(area_points[first]);
  new_points.push_back(area_points[first + 1]);
  new_points.push_back(area_points[second]);
  new_points.push_back(area_points[second + 1]);

  return new_points;
}

void CrossWalk::crossWalkCallback(const vector_map::CrossWalkArray &msg)
{
  crosswalk_ = msg;

  loaded_crosswalk = true;
  if (loaded_crosswalk && loaded_area && loaded_line && loaded_point)
  {
    loaded_all = true;
    ROS_INFO("All VectorMap loaded");
  }
}

void CrossWalk::areaCallback(const vector_map::AreaArray &msg)
{
  area_ = msg;

  loaded_area = true;
  if (loaded_crosswalk && loaded_area && loaded_line && loaded_point)
  {
    loaded_all = true;
    ROS_INFO("All VectorMap loaded");
  }
}

void CrossWalk::lineCallback(const vector_map::LineArray &msg)
{
  line_ = msg;

  loaded_line = true;
  if (loaded_crosswalk && loaded_area && loaded_line && loaded_point)
  {
    loaded_all = true;
    ROS_INFO("All VectorMap loaded");
  }
}

void CrossWalk::pointCallback(const vector_map::PointArray &msg)
{
  point_ = msg;

  loaded_point = true;
  if (loaded_crosswalk && loaded_area && loaded_line && loaded_point)
  {
    loaded_all = true;
    ROS_INFO("All VectorMap loaded");
  }
}

geometry_msgs::Point CrossWalk::getPoint(const int &pid) const
{
  geometry_msgs::Point point;
  for (const auto &p : point_.data)
  {
    if (p.pid == pid)
    {
      point.x = p.ly;
      point.y = p.bx;
      point.z = p.h;
      return point;
    }
  }

  ROS_ERROR("can't find a point of pid %d", pid);
  return point;
}

geometry_msgs::Point CrossWalk::calcCenterofGravity(const int &aid) const
{
  int search_lid = -1;
  for (const auto &area : area_.data)
    if (area.aid == aid)
    {
      search_lid = area.slid;
      break;
    }

  std::vector<geometry_msgs::Point> area_points;
  while (search_lid)
  {
    for (const auto &line : line_.data)
    {
      if (line.lid == search_lid)
      {
        area_points.push_back(getPoint(line.bpid));
        search_lid = line.flid;
      }
    }
  }

  geometry_msgs::Point point;
  point.x = 0.0;
  point.y = 0.0;
  point.z = 0.0;
  if (area_points.size() > 4)
  {
    std::vector<geometry_msgs::Point> filterd_points = removeNeedlessPoints(area_points);
    for (const auto &p : filterd_points)
    {
      point.x += p.x;
      point.y += p.y;
      point.z += p.z;
    }
  }
  else
  {
    for (const auto &p : area_points)
    {
      point.x += p.x;
      point.y += p.y;
      point.z += p.z;
    }
  }

  point.x /= 4;
  point.y /= 4;
  point.z /= 4;
  return point;
}

double CrossWalk::calcCrossWalkWidth(const int &aid) const
{
  int search_lid = -1;
  for (const auto &area : area_.data)
    if (area.aid == aid)
    {
      search_lid = area.slid;
      break;
    }

  std::vector<geometry_msgs::Point> area_points;
  while (search_lid)
  {
    for (const auto &line : line_.data)
    {
      if (line.lid == search_lid)
      {
        area_points.push_back(getPoint(line.bpid));
        //_points.push_back(area_points.back());///
        search_lid = line.flid;
      }
    }
  }

  area_points.push_back(area_points.front());
  double max_length = calcSquareOfLength(area_points[0], area_points[1]);
  for (unsigned int i = 1; i < area_points.size() - 1; i++)
  {
    if (calcSquareOfLength(area_points[i], area_points[i + 1]) > max_length)
      max_length = calcSquareOfLength(area_points[i], area_points[i + 1]);
  }

  return sqrt(max_length);
}

// count the number of crosswalks
int CrossWalk::countAreaSize() const
{
  int count = 0;
  for (const auto &x : crosswalk_.data)
    if (x.type == 0)  // type:0 -> outer frame of crosswalks
      count++;

  return count;
}

void CrossWalk::getAID(std::unordered_map<int, std::vector<int>> &bdid2aid_map) const
{
  for (const auto &x : crosswalk_.data)
    if (x.type == 1)
    {                                         // if it is zebra
      bdid2aid_map[x.bdid].push_back(x.aid);  // save area id
    }
}

void CrossWalk::calcDetectionArea(const std::unordered_map<int, std::vector<int>> &bdid2aid_map)
{
  for (const auto &crosswalk_aids : bdid2aid_map)
  {
    int bdid = crosswalk_aids.first;
    double width = 0.0;
    for (const auto &aid : crosswalk_aids.second)
    {
      detection_points_[bdid].points.push_back(calcCenterofGravity(aid));
      width += calcCrossWalkWidth(aid);
    }
    width /= crosswalk_aids.second.size();
    detection_points_[bdid].width = width;
  }
}

void CrossWalk::calcCenterPoints()
{
  for (const auto &i : bdID_)
  {
    geometry_msgs::Point center;
    center.x = 0.0;
    center.y = 0.0;
    center.z = 0.0;
    for (const auto &p : detection_points_[i].points)
    {
      center.x += p.x;
      center.y += p.y;
      center.z += p.z;
    }
    center.x /= detection_points_[i].points.size();
    center.y /= detection_points_[i].points.size();
    center.z /= detection_points_[i].points.size();
    detection_points_[i].center = center;
  }
}

void CrossWalk::setCrossWalkPoints()
{
  // bdid2aid_map[BDID] has AIDs of its zebra zone
  std::unordered_map<int, std::vector<int>> bdid2aid_map;
  getAID(bdid2aid_map);

  // Save key values
  for (const auto &bdid2aid : bdid2aid_map)
    bdID_.push_back(bdid2aid.first);

  calcDetectionArea(bdid2aid_map);
  calcCenterPoints();

  ROS_INFO("Set cross walk detection points");
  set_points = true;
]]>
            </text>
        </set>
        <set lineCount="162" fingerprint="9e5edd419824b993724d4d84f282eab1">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\range_fusion\sync_range_fusion.cpp" startLineNumber="7" endLineNumber="267"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\kf_track\sync_track.cpp" startLineNumber="7" endLineNumber="267"/>
            <text>
<![CDATA[int main(int argc, char **argv) {
    ros::init(argc, argv, "sync_tracking");
    std::string ns(ros::this_node::getNamespace());
    std::string sub1("/image_obj_ranged");
    std::string sub2("/sync_drivers/image_raw");
    std::string req("/image_obj_tracked");
    std::string pub1("/image_obj_ranged");
    std::string pub2("/image_raw");

    Synchronizer<cv_tracker::image_obj_ranged, sensor_msgs::Image, cv_tracker::image_obj_tracked> synchronizer(sub1, sub2, pub1, pub2, req, ns);
    synchronizer.run();

    return 0;
}

#if 0
/* ----header---- */
/* common header */
#include "ros/ros.h"
#include <ros/callback_queue.h>
#include <boost/circular_buffer.hpp>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
#include <sys/stat.h>
#include <sys/select.h>
#include <mqueue.h>
#include <fcntl.h>
#include <errno.h>
#include <unistd.h>
#include <pthread.h>
#include "t_sync_message.h"
/* user header */
#include "sensor_msgs/Image.h"
#include "cv_tracker/image_obj_tracked.h"
#include "cv_tracker/image_obj_ranged.h"

/* ----mode---- */
#define _REQ_PUB 1

/* ----var---- */
/* common var */
bool buf_flag;
pthread_mutex_t mutex;
/* user var */
boost::circular_buffer<cv_tracker::image_obj_ranged> image_obj_ranged_ringbuf(10);
boost::circular_buffer<sensor_msgs::Image> image_raw_ringbuf(10);
ros::Publisher image_obj_ranged__pub;
ros::Publisher image_raw__pub;
bool image_obj_tracked_flag;

/* ----function---- */
double fabs_time_diff(std_msgs::Header *timespec1, std_msgs::Header *timespec2) {
    double time1 = (double)timespec1->stamp.sec + (double)timespec1->stamp.nsec/1000000000L;
    double time2 = (double)timespec2->stamp.sec + (double)timespec2->stamp.nsec/1000000000L;

    return fabs(time1 - time2);
}

double get_time(const std_msgs::Header *timespec) {
    return (double)timespec->stamp.sec + (double)timespec->stamp.nsec/1000000000L;
}


#if _REQ_PUB
cv_tracker::image_obj_ranged* p_image_obj_ranged_buf;
sensor_msgs::Image* p_image_raw_buf;

void publish_msg(cv_tracker::image_obj_ranged* p_image_obj_ranged_buf, sensor_msgs::Image* p_image_raw_buf) {
    ROS_INFO("publish");
    image_obj_ranged__pub.publish(*p_image_obj_ranged_buf);
    image_raw__pub.publish(*p_image_raw_buf);
}

bool publish() {
    if (buf_flag) {
        //image_obj_ranged is empty
        if (image_obj_ranged_ringbuf.begin() == image_obj_ranged_ringbuf.end()) {
            ROS_INFO("image_obj_ranged ring buffer is empty");
            return false;
        }

        //image_raw is empty
        if (image_raw_ringbuf.begin() == image_raw_ringbuf.end()) {
            ROS_INFO("image_raw ring buffer is empty");
            return false;
        }

        // image_obj_ranged > image_raw
        if (get_time(&(image_obj_ranged_ringbuf.front().header)) >= get_time(&(image_raw_ringbuf.front().header))) {
            p_image_raw_buf = &(image_raw_ringbuf.front());
            boost::circular_buffer<cv_tracker::image_obj_ranged>::iterator it = image_obj_ranged_ringbuf.begin();
            if (image_obj_ranged_ringbuf.size() == 1) {
                p_image_obj_ranged_buf = &*it;
                publish_msg(p_image_obj_ranged_buf, p_image_raw_buf);
                if (image_obj_tracked_flag == true){
                    buf_flag = false;
                    image_obj_tracked_flag = false;
                    image_obj_ranged_ringbuf.clear();
                    image_raw_ringbuf.clear();
                }
                return true;
            } else {
                for (it++; it != image_obj_ranged_ringbuf.end(); it++) {
                    if (fabs_time_diff(&(image_raw_ringbuf.front().header), &((it-1)->header))
                        < fabs_time_diff(&(image_raw_ringbuf.front().header), &(it->header))) {
                        p_image_obj_ranged_buf = &*(it-1);
                        break;
                    }
                }
                if (it == image_obj_ranged_ringbuf.end()) {
                    p_image_obj_ranged_buf = &(image_obj_ranged_ringbuf.back());
                }
            }
        }
        // image_obj_ranged < image_raw
        else {
            p_image_obj_ranged_buf = &(image_obj_ranged_ringbuf.front());
            boost::circular_buffer<sensor_msgs::Image>::iterator it = image_raw_ringbuf.begin();
            if (image_raw_ringbuf.size() == 1) {
                p_image_raw_buf = &*it;
                publish_msg(p_image_obj_ranged_buf, p_image_raw_buf);
                if (image_obj_tracked_flag == true){
                    buf_flag = false;
                    image_obj_tracked_flag = false;
                    image_obj_ranged_ringbuf.clear();
                    image_raw_ringbuf.clear();
                }
                return true;
            }

            for (it++; it != image_raw_ringbuf.end(); it++) {
                if (fabs_time_diff(&(image_obj_ranged_ringbuf.front().header), &((it-1)->header))
                    < fabs_time_diff(&(image_obj_ranged_ringbuf.front().header), &(it->header))) {
                    p_image_raw_buf = &*(it-1);
                    break;
                }
            }

            if (it == image_raw_ringbuf.end()) {
                p_image_raw_buf = &(image_raw_ringbuf.back());
            }
        }
        publish_msg(p_image_obj_ranged_buf, p_image_raw_buf);
        if (image_obj_tracked_flag == true){
            buf_flag = false;
            image_obj_tracked_flag = false;
            image_obj_ranged_ringbuf.clear();
            image_raw_ringbuf.clear();
        }

        return true;
    } else {
        return false;
    }
}

void image_obj_ranged_callback(const cv_tracker::image_obj_ranged::ConstPtr& image_obj_ranged_msg) {
    pthread_mutex_lock(&mutex);
    image_obj_ranged_ringbuf.push_front(*image_obj_ranged_msg);
    //image_raw is empty
    if (image_raw_ringbuf.begin() == image_raw_ringbuf.end()) {
        ROS_INFO("image_raw ring buffer is empty");
        buf_flag = false;
        pthread_mutex_unlock(&mutex);
        return;
    }
    buf_flag = true;
    pthread_mutex_unlock(&mutex);
    pthread_mutex_lock(&mutex);
    if (image_obj_tracked_flag == true) {
        publish();
    }
    pthread_mutex_unlock(&mutex);
}

void image_raw_callback(const sensor_msgs::Image::ConstPtr& image_raw_msg) {
    pthread_mutex_lock(&mutex);
    image_raw_ringbuf.push_front(*image_raw_msg);
    //image_obj_ranged is empty
    if (image_obj_ranged_ringbuf.begin() == image_obj_ranged_ringbuf.end()) {
        ROS_INFO("image_obj_ranged ring buffer is empty");
        buf_flag = false;
        pthread_mutex_unlock(&mutex);
        return;
    }
    buf_flag = true;
    pthread_mutex_unlock(&mutex);
    pthread_mutex_lock(&mutex);
    if (image_obj_tracked_flag == true) {
        publish();
    }
    pthread_mutex_unlock(&mutex);
}
#else
#endif

void image_obj_tracked_callback(const cv_tracker::image_obj_tracked::ConstPtr& image_obj_tracked_msg) {
    pthread_mutex_lock(&mutex);
    image_obj_tracked_flag = true;
    ROS_INFO("catch publish request");
    if (publish() == false) {
        ROS_INFO("waitting...");
    }
    pthread_mutex_unlock(&mutex);
}

void* thread(void* args) {
    ros::NodeHandle nh_rcv;
    ros::CallbackQueue rcv_callbackqueue;
    nh_rcv.setCallbackQueue(&rcv_callbackqueue);
    ros::Subscriber image_obj_tracked_sub = nh_rcv.subscribe("/image_obj_tracked", 1, image_obj_tracked_callback);
    while (nh_rcv.ok()) {
        rcv_callbackqueue.callAvailable(ros::WallDuration(3.0f));
        pthread_mutex_lock(&mutex);
        bool flag = (image_obj_tracked_flag == false && buf_flag == true);
        if (flag) {
            ROS_INFO("timeout");
            if(!publish()) {
                /* when to publish is failure, republish */
                struct timespec sleep_time;
                sleep_time.tv_sec = 0;
                sleep_time.tv_nsec = 200000000; //5Hz
                while (!publish() && ros::ok())
                    nanosleep(&sleep_time, NULL);
            }
        }
        pthread_mutex_unlock(&mutex);

    }
    return NULL;
}

int main(int argc, char **argv) {
    /* init */
    buf_flag = false;
    image_obj_tracked_flag = false;
    ros::init(argc, argv, "sync_tracking");
    ros::NodeHandle nh;

    /* create server thread */
    pthread_t th;
    pthread_create(&th, NULL, thread, (void *)NULL );

    ros::Subscriber image_obj_ranged_sub = nh.subscribe("/image_obj_ranged", 1, image_obj_ranged_callback);
    ros::Subscriber image_raw_sub = nh.subscribe("/sync_drivers/image_raw", 1, image_raw_callback);
    image_obj_ranged__pub = nh.advertise<cv_tracker::image_obj_ranged>("/sync_tracking/image_obj_ranged", 5);
    image_raw__pub = nh.advertise<sensor_msgs::Image>("/sync_tracking/image_raw", 5);

    while ((!buf_flag) && ros::ok()) {
        ros::spinOnce();
        usleep(100000);
    }
    pthread_mutex_lock(&mutex);
    if(!publish()) {
        /* when to publish is failure, republish */
        struct timespec sleep_time;
        sleep_time.tv_sec = 0;
        sleep_time.tv_nsec = 200000000; //5Hz
]]>
            </text>
        </set>
        <set lineCount="169" fingerprint="2ec2d95a2a509efc81952b17cf63dc7b">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\copy.cpp" startLineNumber="24" endLineNumber="289"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\car_dpm_sync.cpp" startLineNumber="37" endLineNumber="302"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\sync_car_dpm.cpp" startLineNumber="37" endLineNumber="302"/>
            <text>
<![CDATA[bool image_obj_flag;
bool points_image_flag;

/* ----function---- */
double fabs_time_diff(std_msgs::Header *timespec1, std_msgs::Header *timespec2) {
    double time1 = (double)timespec1->stamp.sec + (double)timespec1->stamp.nsec/1000000000L;
    double time2 = (double)timespec2->stamp.sec + (double)timespec2->stamp.nsec/1000000000L;

    return fabs(time1 - time2);
}

double get_time(const std_msgs::Header *timespec) {
    return (double)timespec->stamp.sec + (double)timespec->stamp.nsec/1000000000L;
}


#if _REQ_PUB
sensor_msgs::Image* p_image_raw_buf;
sensor_msgs::PointCloud2* p_points_raw_buf;

void image_raw_callback(const sensor_msgs::Image::ConstPtr& image_raw_msg) {
    pthread_mutex_lock(&mutex);
    image_raw_ringbuf.push_front(*image_raw_msg);
    //points_raw is empty
    if (points_raw_ringbuf.begin() == points_raw_ringbuf.end()) {
        pthread_mutex_unlock(&mutex);
        ROS_INFO("points_raw ring buffer is empty");
        return;
    }
    buf_flag = true;
    pthread_mutex_unlock(&mutex);
}

void points_raw_callback(const sensor_msgs::PointCloud2::ConstPtr& points_raw_msg) {
    pthread_mutex_lock(&mutex);
    points_raw_ringbuf.push_front(*points_raw_msg);
    //image_raw is empty
    if (image_raw_ringbuf.begin() == image_raw_ringbuf.end()) {
        ROS_INFO("image_raw ring buffer is empty");
        pthread_mutex_unlock(&mutex);
        return;
    }

    buf_flag = true;
    pthread_mutex_unlock(&mutex);
}

void publish_msg(sensor_msgs::Image* p_image_raw_buf, sensor_msgs::PointCloud2* p_points_raw_buf)
{
    ROS_INFO("publish");
    image_raw_pub.publish(*p_image_raw_buf);
    points_raw_pub.publish(*p_points_raw_buf);
}

bool publish() {
    if (buf_flag) {
        pthread_mutex_lock(&mutex);

        //image_raw is empty
        if (image_raw_ringbuf.begin() == image_raw_ringbuf.end()) {
            pthread_mutex_unlock(&mutex);
            ROS_INFO("image_raw ring buffer is empty");
            return false;
        }

        //points_raw is empty
        if (points_raw_ringbuf.begin() == points_raw_ringbuf.end()) {
            pthread_mutex_unlock(&mutex);
            ROS_INFO("points_raw ring buffer is empty");
            return false;
        }

        // image_raw > points_raw
        if (get_time(&(image_raw_ringbuf.front().header)) >= get_time(&(points_raw_ringbuf.front().header))) {
            p_points_raw_buf = &(points_raw_ringbuf.front());
            boost::circular_buffer<sensor_msgs::Image>::iterator it = image_raw_ringbuf.begin();
            if (image_raw_ringbuf.size() == 1) {
                p_image_raw_buf = &*it;
                publish_msg(p_image_raw_buf, p_points_raw_buf);
                pthread_mutex_unlock(&mutex);
                return true;
            } else {
                for (it++; it != image_raw_ringbuf.end(); it++) {
                    if (fabs_time_diff(&(points_raw_ringbuf.front().header), &((it-1)->header))
                        < fabs_time_diff(&(points_raw_ringbuf.front().header), &(it->header))) {
                        p_image_raw_buf = &*(it-1);
                        break;
                    }
                }
                if (it == image_raw_ringbuf.end()) {
                    p_image_raw_buf = &(image_raw_ringbuf.back());
                }
            }
        }
        // image_raw < points_raw
        else {
            p_image_raw_buf = &(image_raw_ringbuf.front());
            boost::circular_buffer<sensor_msgs::PointCloud2>::iterator it = points_raw_ringbuf.begin();
            if (points_raw_ringbuf.size() == 1) {
                p_points_raw_buf = &*it;
                publish_msg(p_image_raw_buf, p_points_raw_buf);
                pthread_mutex_unlock(&mutex);
                return true;
            }

            for (it++; it != points_raw_ringbuf.end(); it++) {
                if (fabs_time_diff(&(image_raw_ringbuf.front().header), &((it-1)->header))
                    < fabs_time_diff(&(image_raw_ringbuf.front().header), &(it->header))) {
                    p_points_raw_buf = &*(it-1);
                    break;
                }
            }

            if (it == points_raw_ringbuf.end()) {
                p_points_raw_buf = &(points_raw_ringbuf.back());
            }
        }
        publish_msg(p_image_raw_buf, p_points_raw_buf);
        pthread_mutex_unlock(&mutex);
        return true;
    } else {
        return false;
    }
}
#else
sensor_msgs::Image image_raw_buf;
sensor_msgs::PointCloud2 points_raw_buf;

void image_raw_callback(const sensor_msgs::Image::ConstPtr& image_raw_msg) {
    pthread_mutex_lock(&mutex);
    image_raw_ringbuf.push_front(*image_raw_msg);

    //points_raw is empty
    if (points_raw_ringbuf.begin() == points_raw_ringbuf.end()) {
        pthread_mutex_unlock(&mutex);
        ROS_INFO("points_raw ring buffer is empty");
        return;
    }

    buf_flag = true;

    // image_raw > points_raw
    if (get_time(&(image_raw_ringbuf.front().header)) >= get_time(&(points_raw_ringbuf.front().header))) {
        points_raw_buf = points_raw_ringbuf.front();
        boost::circular_buffer<sensor_msgs::Image>::iterator it = image_raw_ringbuf.begin();
        if (image_raw_ringbuf.size() == 1) {
            image_raw_buf = *it;
            pthread_mutex_unlock(&mutex);
            return;
        } else {
            for (it++; it != image_raw_ringbuf.end(); it++) {
                if (fabs_time_diff(&(points_raw_ringbuf.front().header), &((it-1)->header))
                    < fabs_time_diff(&(points_raw_ringbuf.front().header), &(it->header))) {
                    image_raw_buf = *(it-1);
                    break;
                }
            }
            if (it == image_raw_ringbuf.end()) {
                image_raw_buf = image_raw_ringbuf.back();
            }
        }

    } else {
        image_raw_buf = image_raw_ringbuf.front();
        boost::circular_buffer<sensor_msgs::PointCloud2>::iterator it = points_raw_ringbuf.begin();
        if (points_raw_ringbuf.size() == 1) {
            points_raw_buf = *it;
            pthread_mutex_unlock(&mutex);
            return;
        }

        for (it++; it != points_raw_ringbuf.end(); it++) {
            if (fabs_time_diff(&(image_raw_ringbuf.front().header), &((it-1)->header))
                < fabs_time_diff(&(image_raw_ringbuf.front().header), &(it->header))) {
                points_raw_buf = *(it-1);
                break;
            }
        }

        if (it == points_raw_ringbuf.end()) {
            points_raw_buf = points_raw_ringbuf.back();
        }
    }
    pthread_mutex_unlock(&mutex);
}

void points_raw_callback(const sensor_msgs::PointCloud2::ConstPtr& points_raw_msg) {
    pthread_mutex_lock(&mutex);
    points_raw_ringbuf.push_front(*points_raw_msg);
    //image_raw is empty
    if (image_raw_ringbuf.begin() == image_raw_ringbuf.end()) {
        ROS_INFO("image_raw ring buffer is empty");
        pthread_mutex_unlock(&mutex);
        return;
    }

    buf_flag = true;

    // image_raw > points_raw
    if (get_time(&(image_raw_ringbuf.front().header)) >= get_time(&(points_raw_ringbuf.front().header))) {
        points_raw_buf = points_raw_ringbuf.front();
        boost::circular_buffer<sensor_msgs::Image>::iterator it = image_raw_ringbuf.begin();
        if (image_raw_ringbuf.size() == 1) {
            image_raw_buf = *it;
            pthread_mutex_unlock(&mutex);
            return;
        } else {
            for (it++; it != image_raw_ringbuf.end(); it++) {
                if (fabs_time_diff(&(points_raw_ringbuf.front().header), &((it-1)->header))
                    < fabs_time_diff(&(points_raw_ringbuf.front().header), &(it->header))) {
                    image_raw_buf = *(it-1);
                    break;
                }
            }
            if (it == image_raw_ringbuf.end()) {
                image_raw_buf = image_raw_ringbuf.back();
            }
        }

    } else {
        image_raw_buf = image_raw_ringbuf.front();
        boost::circular_buffer<sensor_msgs::PointCloud2>::iterator it = points_raw_ringbuf.begin();
        if (points_raw_ringbuf.size() == 1) {
            points_raw_buf = *it;
            pthread_mutex_unlock(&mutex);
            return;
        }

        for (it++; it != points_raw_ringbuf.end(); it++) {
            if (fabs_time_diff(&(image_raw_ringbuf.front().header), &((it-1)->header))
                < fabs_time_diff(&(image_raw_ringbuf.front().header), &(it->header))) {
                points_raw_buf = *(it-1);
                break;
            }
        }

        if (it == points_raw_ringbuf.end()) {
            points_raw_buf = points_raw_ringbuf.back();
        }
    }
    pthread_mutex_unlock(&mutex);
}

bool publish() {
    if (buf_flag) {
        pthread_mutex_lock(&mutex);
        // scan_ringbuf.clear();
        // image_ringbuf.clear();
        // scan_ringbuf.push_front(scan_buf);
        // image_ringbuf.push_front(image_buf);
        ROS_INFO("publish");
        image_raw_pub.publish(image_raw_buf);
        points_raw_pub.publish(points_raw_buf);
        pthread_mutex_unlock(&mutex);
        return true;
    } else {
        ROS_INFO("publish failed");
        return false;
    }
}
#endif

void image_obj_callback(const cv_tracker::image_obj::ConstPtr& image_obj_msg) {
    if (image_obj_flag) {
        image_obj_flag = false;
        points_image_flag = false;
]]>
            </text>
        </set>
        <set lineCount="186" fingerprint="9c44451026fb6c4249548bab0bc37e6e">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="49" endLineNumber="386"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map\lib\vector_map\vector_map.cpp" startLineNumber="38" endLineNumber="375"/>
            <text>
<![CDATA[void updatePoint(std::map<Key<Point>, Point>& map, const PointArray& msg)
{
  map = std::map<Key<Point>, Point>();
  for (const auto& item : msg.data)
  {
    if (item.pid == 0)
      continue;
    map.insert(std::make_pair(Key<Point>(item.pid), item));
  }
}

void updateVector(std::map<Key<Vector>, Vector>& map, const VectorArray& msg)
{
  map = std::map<Key<Vector>, Vector>();
  for (const auto& item : msg.data)
  {
    if (item.vid == 0)
      continue;
    map.insert(std::make_pair(Key<Vector>(item.vid), item));
  }
}

void updateLine(std::map<Key<Line>, Line>& map, const LineArray& msg)
{
  map = std::map<Key<Line>, Line>();
  for (const auto& item : msg.data)
  {
    if (item.lid == 0)
      continue;
    map.insert(std::make_pair(Key<Line>(item.lid), item));
  }
}

void updateArea(std::map<Key<Area>, Area>& map, const AreaArray& msg)
{
  map = std::map<Key<Area>, Area>();
  for (const auto& item : msg.data)
  {
    if (item.aid == 0)
      continue;
    map.insert(std::make_pair(Key<Area>(item.aid), item));
  }
}

void updatePole(std::map<Key<Pole>, Pole>& map, const PoleArray& msg)
{
  map = std::map<Key<Pole>, Pole>();
  for (const auto& item : msg.data)
  {
    if (item.plid == 0)
      continue;
    map.insert(std::make_pair(Key<Pole>(item.plid), item));
  }
}

void updateBox(std::map<Key<Box>, Box>& map, const BoxArray& msg)
{
  map = std::map<Key<Box>, Box>();
  for (const auto& item : msg.data)
  {
    if (item.bid == 0)
      continue;
    map.insert(std::make_pair(Key<Box>(item.bid), item));
  }
}

void updateDTLane(std::map<Key<DTLane>, DTLane>& map, const DTLaneArray& msg)
{
  map = std::map<Key<DTLane>, DTLane>();
  for (const auto& item : msg.data)
  {
    if (item.did == 0)
      continue;
    map.insert(std::make_pair(Key<DTLane>(item.did), item));
  }
}

void updateNode(std::map<Key<Node>, Node>& map, const NodeArray& msg)
{
  map = std::map<Key<Node>, Node>();
  for (const auto& item : msg.data)
  {
    if (item.nid == 0)
      continue;
    map.insert(std::make_pair(Key<Node>(item.nid), item));
  }
}

void updateLane(std::map<Key<Lane>, Lane>& map, const LaneArray& msg)
{
  map = std::map<Key<Lane>, Lane>();
  for (const auto& item : msg.data)
  {
    if (item.lnid == 0)
      continue;
    map.insert(std::make_pair(Key<Lane>(item.lnid), item));
  }
}

void updateWayArea(std::map<Key<WayArea>, WayArea>& map, const WayAreaArray& msg)
{
  map = std::map<Key<WayArea>, WayArea>();
  for (const auto& item : msg.data)
  {
    if (item.waid == 0)
      continue;
    map.insert(std::make_pair(Key<WayArea>(item.waid), item));
  }
}

void updateRoadEdge(std::map<Key<RoadEdge>, RoadEdge>& map, const RoadEdgeArray& msg)
{
  map = std::map<Key<RoadEdge>, RoadEdge>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<RoadEdge>(item.id), item));
  }
}

void updateGutter(std::map<Key<Gutter>, Gutter>& map, const GutterArray& msg)
{
  map = std::map<Key<Gutter>, Gutter>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<Gutter>(item.id), item));
  }
}

void updateCurb(std::map<Key<Curb>, Curb>& map, const CurbArray& msg)
{
  map = std::map<Key<Curb>, Curb>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<Curb>(item.id), item));
  }
}

void updateWhiteLine(std::map<Key<WhiteLine>, WhiteLine>& map, const WhiteLineArray& msg)
{
  map = std::map<Key<WhiteLine>, WhiteLine>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<WhiteLine>(item.id), item));
  }
}

void updateStopLine(std::map<Key<StopLine>, StopLine>& map, const StopLineArray& msg)
{
  map = std::map<Key<StopLine>, StopLine>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<StopLine>(item.id), item));
  }
}

void updateZebraZone(std::map<Key<ZebraZone>, ZebraZone>& map, const ZebraZoneArray& msg)
{
  map = std::map<Key<ZebraZone>, ZebraZone>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<ZebraZone>(item.id), item));
  }
}

void updateCrossWalk(std::map<Key<CrossWalk>, CrossWalk>& map, const CrossWalkArray& msg)
{
  map = std::map<Key<CrossWalk>, CrossWalk>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<CrossWalk>(item.id), item));
  }
}

void updateRoadMark(std::map<Key<RoadMark>, RoadMark>& map, const RoadMarkArray& msg)
{
  map = std::map<Key<RoadMark>, RoadMark>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<RoadMark>(item.id), item));
  }
}

void updateRoadPole(std::map<Key<RoadPole>, RoadPole>& map, const RoadPoleArray& msg)
{
  map = std::map<Key<RoadPole>, RoadPole>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<RoadPole>(item.id), item));
  }
}

void updateRoadSign(std::map<Key<RoadSign>, RoadSign>& map, const RoadSignArray& msg)
{
  map = std::map<Key<RoadSign>, RoadSign>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<RoadSign>(item.id), item));
  }
}

void updateSignal(std::map<Key<Signal>, Signal>& map, const SignalArray& msg)
{
  map = std::map<Key<Signal>, Signal>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<Signal>(item.id), item));
  }
}

void updateStreetLight(std::map<Key<StreetLight>, StreetLight>& map, const StreetLightArray& msg)
{
  map = std::map<Key<StreetLight>, StreetLight>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<StreetLight>(item.id), item));
  }
}

void updateUtilityPole(std::map<Key<UtilityPole>, UtilityPole>& map, const UtilityPoleArray& msg)
{
  map = std::map<Key<UtilityPole>, UtilityPole>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<UtilityPole>(item.id), item));
  }
}

void updateGuardRail(std::map<Key<GuardRail>, GuardRail>& map, const GuardRailArray& msg)
{
  map = std::map<Key<GuardRail>, GuardRail>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<GuardRail>(item.id), item));
  }
}

void updateSideWalk(std::map<Key<SideWalk>, SideWalk>& map, const SideWalkArray& msg)
{
  map = std::map<Key<SideWalk>, SideWalk>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<SideWalk>(item.id), item));
  }
}

void updateDriveOnPortion(std::map<Key<DriveOnPortion>, DriveOnPortion>& map, const DriveOnPortionArray& msg)
{
  map = std::map<Key<DriveOnPortion>, DriveOnPortion>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<DriveOnPortion>(item.id), item));
  }
}

void updateCrossRoad(std::map<Key<CrossRoad>, CrossRoad>& map, const CrossRoadArray& msg)
{
  map = std::map<Key<CrossRoad>, CrossRoad>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<CrossRoad>(item.id), item));
  }
}

void updateSideStrip(std::map<Key<SideStrip>, SideStrip>& map, const SideStripArray& msg)
{
  map = std::map<Key<SideStrip>, SideStrip>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<SideStrip>(item.id), item));
  }
}

void updateCurveMirror(std::map<Key<CurveMirror>, CurveMirror>& map, const CurveMirrorArray& msg)
{
  map = std::map<Key<CurveMirror>, CurveMirror>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<CurveMirror>(item.id), item));
  }
}

void updateWall(std::map<Key<Wall>, Wall>& map, const WallArray& msg)
{
  map = std::map<Key<Wall>, Wall>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<Wall>(item.id), item));
  }
}

void updateFence(std::map<Key<Fence>, Fence>& map, const FenceArray& msg)
{
  map = std::map<Key<Fence>, Fence>();
  for (const auto& item : msg.data)
  {
    if (item.id == 0)
      continue;
    map.insert(std::make_pair(Key<Fence>(item.id), item));
]]>
            </text>
        </set>
        <set lineCount="192" fingerprint="d3f4f3e9916a7073508fe488285ec4eb">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="674" endLineNumber="1015"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\data\packages\vector_map_server\nodes\vector_map_server\vector_map_server.cpp" startLineNumber="690" endLineNumber="1031"/>
            <text>
<![CDATA[        response.objects.data.push_back(road_edge);
    }
    return true;
  }

  bool getGutter(vector_map_server::GetGutter::Request& request,
                 vector_map_server::GetGutter::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& gutter : vmap_.findByFilter(
           [&lane](const Gutter& gutter){return gutter.linkid == lane.lnid;}))
        response.objects.data.push_back(gutter);
    }
    return true;
  }

  bool getCurb(vector_map_server::GetCurb::Request& request,
               vector_map_server::GetCurb::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& curb : vmap_.findByFilter(
           [&lane](const Curb& curb){return curb.linkid == lane.lnid;}))
        response.objects.data.push_back(curb);
    }
    return true;
  }

  bool getWhiteLine(vector_map_server::GetWhiteLine::Request& request,
                    vector_map_server::GetWhiteLine::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& white_line : vmap_.findByFilter(
           [&lane](const WhiteLine& white_line){return white_line.linkid == lane.lnid;}))
        response.objects.data.push_back(white_line);
    }
    return true;
  }

  bool getStopLine(vector_map_server::GetStopLine::Request& request,
                   vector_map_server::GetStopLine::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& stop_line : vmap_.findByFilter(
           [&lane](const StopLine& stop_line){return stop_line.linkid == lane.lnid;}))
        response.objects.data.push_back(stop_line);
    }
    return true;
  }

  bool getZebraZone(vector_map_server::GetZebraZone::Request& request,
                    vector_map_server::GetZebraZone::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& zebra_zone : vmap_.findByFilter(
           [&lane](const ZebraZone& zebra_zone){return zebra_zone.linkid == lane.lnid;}))
        response.objects.data.push_back(zebra_zone);
    }
    return true;
  }

  bool getCrossWalk(vector_map_server::GetCrossWalk::Request& request,
                    vector_map_server::GetCrossWalk::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& cross_walk : vmap_.findByFilter(
           [&lane](const CrossWalk& cross_walk){return cross_walk.linkid == lane.lnid;}))
        response.objects.data.push_back(cross_walk);
    }
    return true;
  }

  bool getRoadMark(vector_map_server::GetRoadMark::Request& request,
                   vector_map_server::GetRoadMark::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& road_mark : vmap_.findByFilter(
           [&lane](const RoadMark& road_mark){return road_mark.linkid == lane.lnid;}))
        response.objects.data.push_back(road_mark);
    }
    return true;
  }

  bool getRoadPole(vector_map_server::GetRoadPole::Request& request,
                   vector_map_server::GetRoadPole::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& road_pole : vmap_.findByFilter(
           [&lane](const RoadPole& road_pole){return road_pole.linkid == lane.lnid;}))
        response.objects.data.push_back(road_pole);
    }
    return true;
  }

  bool getRoadSign(vector_map_server::GetRoadSign::Request& request,
                   vector_map_server::GetRoadSign::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& road_sign : vmap_.findByFilter(
           [&lane](const RoadSign& road_sign){return road_sign.linkid == lane.lnid;}))
        response.objects.data.push_back(road_sign);
    }
    return true;
  }

  bool getSignal(vector_map_server::GetSignal::Request& request,
                 vector_map_server::GetSignal::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& signal : vmap_.findByFilter(
           [&lane](const Signal& signal){return signal.linkid == lane.lnid;}))
        response.objects.data.push_back(signal);
    }
    return true;
  }

  bool getStreetLight(vector_map_server::GetStreetLight::Request& request,
                      vector_map_server::GetStreetLight::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& street_light : vmap_.findByFilter(
           [&lane](const StreetLight& street_light){return street_light.linkid == lane.lnid;}))
        response.objects.data.push_back(street_light);
    }
    return true;
  }

  bool getUtilityPole(vector_map_server::GetUtilityPole::Request& request,
                      vector_map_server::GetUtilityPole::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& utility_pole : vmap_.findByFilter(
           [&lane](const UtilityPole& utility_pole){return utility_pole.linkid == lane.lnid;}))
        response.objects.data.push_back(utility_pole);
    }
    return true;
  }

  bool getGuardRail(vector_map_server::GetGuardRail::Request& request,
                    vector_map_server::GetGuardRail::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& guard_rail : vmap_.findByFilter(
           [&lane](const GuardRail& guard_rail){return guard_rail.linkid == lane.lnid;}))
        response.objects.data.push_back(guard_rail);
    }
    return true;
  }

  bool getSideWalk(vector_map_server::GetSideWalk::Request& request,
                   vector_map_server::GetSideWalk::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& side_walk : vmap_.findByFilter(
           [&lane](const SideWalk& side_walk){return side_walk.linkid == lane.lnid;}))
        response.objects.data.push_back(side_walk);
    }
    return true;
  }

  bool getDriveOnPortion(vector_map_server::GetDriveOnPortion::Request& request,
                         vector_map_server::GetDriveOnPortion::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& drive_on_portion : vmap_.findByFilter(
           [&lane](const DriveOnPortion& drive_on_portion){return drive_on_portion.linkid == lane.lnid;}))
        response.objects.data.push_back(drive_on_portion);
    }
    return true;
  }

  bool getCrossRoad(vector_map_server::GetCrossRoad::Request& request,
                    vector_map_server::GetCrossRoad::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& cross_road : vmap_.findByFilter(
           [&lane](const CrossRoad& cross_road){return cross_road.linkid == lane.lnid;}))
        response.objects.data.push_back(cross_road);
    }
    return true;
  }

  bool getSideStrip(vector_map_server::GetSideStrip::Request& request,
                    vector_map_server::GetSideStrip::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& side_strip : vmap_.findByFilter(
           [&lane](const SideStrip& side_strip){return side_strip.linkid == lane.lnid;}))
        response.objects.data.push_back(side_strip);
    }
    return true;
  }

  bool getCurveMirror(vector_map_server::GetCurveMirror::Request& request,
                      vector_map_server::GetCurveMirror::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& curve_mirror : vmap_.findByFilter(
           [&lane](const CurveMirror& curve_mirror){return curve_mirror.linkid == lane.lnid;}))
        response.objects.data.push_back(curve_mirror);
    }
    return true;
  }

  bool getWall(vector_map_server::GetWall::Request& request,
               vector_map_server::GetWall::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& wall : vmap_.findByFilter(
           [&lane](const Wall& wall){return wall.linkid == lane.lnid;}))
        response.objects.data.push_back(wall);
    }
    return true;
  }

  bool getFence(vector_map_server::GetFence::Request& request,
                vector_map_server::GetFence::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& fence : vmap_.findByFilter(
           [&lane](const Fence& fence){return fence.linkid == lane.lnid;}))
        response.objects.data.push_back(fence);
    }
    return true;
  }

  bool getRailCrossing(vector_map_server::GetRailCrossing::Request& request,
                       vector_map_server::GetRailCrossing::Response& response)
  {
    std::vector<Lane> traveling_route = createTravelingRoute(request.pose, request.waypoints);
    if (traveling_route.empty())
      return false;
    response.objects.header.frame_id = "map";
    for (const auto& lane : traveling_route)
    {
      for (const auto& rail_crossing : vmap_.findByFilter(
           [&lane](const RailCrossing& rail_crossing){return rail_crossing.linkid == lane.lnid;}))
        response.objects.data.push_back(rail_crossing);
    }
    return true;
  }

  bool isWayArea(vector_map_server::PositionState::Request& request,
]]>
            </text>
        </set>
        <set lineCount="247" fingerprint="aa177060bb2f80237a1963ed2cc074a3">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\car_dpm_sync.cpp" startLineNumber="26" endLineNumber="407"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\system\sync\computing\perception\detection\packages\cv_tracker\nodes\test\sync_car_dpm.cpp" startLineNumber="26" endLineNumber="407"/>
            <text>
<![CDATA[#define _REQ_PUB 1

/* ----var---- */
/* common var */
bool buf_flag;
pthread_mutex_t mutex;
/* user var */
boost::circular_buffer<sensor_msgs::Image> image_raw_ringbuf(3);
boost::circular_buffer<sensor_msgs::PointCloud2> points_raw_ringbuf(3);
ros::Publisher image_raw_pub;
ros::Publisher points_raw_pub;
bool image_obj_flag;
bool points_image_flag;

/* ----function---- */
double fabs_time_diff(std_msgs::Header *timespec1, std_msgs::Header *timespec2) {
    double time1 = (double)timespec1->stamp.sec + (double)timespec1->stamp.nsec/1000000000L;
    double time2 = (double)timespec2->stamp.sec + (double)timespec2->stamp.nsec/1000000000L;

    return fabs(time1 - time2);
}

double get_time(const std_msgs::Header *timespec) {
    return (double)timespec->stamp.sec + (double)timespec->stamp.nsec/1000000000L;
}


#if _REQ_PUB
sensor_msgs::Image* p_image_raw_buf;
sensor_msgs::PointCloud2* p_points_raw_buf;

void image_raw_callback(const sensor_msgs::Image::ConstPtr& image_raw_msg) {
    pthread_mutex_lock(&mutex);
    image_raw_ringbuf.push_front(*image_raw_msg);
    //points_raw is empty
    if (points_raw_ringbuf.begin() == points_raw_ringbuf.end()) {
        pthread_mutex_unlock(&mutex);
        ROS_INFO("points_raw ring buffer is empty");
        return;
    }
    buf_flag = true;
    pthread_mutex_unlock(&mutex);
}

void points_raw_callback(const sensor_msgs::PointCloud2::ConstPtr& points_raw_msg) {
    pthread_mutex_lock(&mutex);
    points_raw_ringbuf.push_front(*points_raw_msg);
    //image_raw is empty
    if (image_raw_ringbuf.begin() == image_raw_ringbuf.end()) {
        ROS_INFO("image_raw ring buffer is empty");
        pthread_mutex_unlock(&mutex);
        return;
    }

    buf_flag = true;
    pthread_mutex_unlock(&mutex);
}

void publish_msg(sensor_msgs::Image* p_image_raw_buf, sensor_msgs::PointCloud2* p_points_raw_buf)
{
    ROS_INFO("publish");
    image_raw_pub.publish(*p_image_raw_buf);
    points_raw_pub.publish(*p_points_raw_buf);
}

bool publish() {
    if (buf_flag) {
        pthread_mutex_lock(&mutex);

        //image_raw is empty
        if (image_raw_ringbuf.begin() == image_raw_ringbuf.end()) {
            pthread_mutex_unlock(&mutex);
            ROS_INFO("image_raw ring buffer is empty");
            return false;
        }

        //points_raw is empty
        if (points_raw_ringbuf.begin() == points_raw_ringbuf.end()) {
            pthread_mutex_unlock(&mutex);
            ROS_INFO("points_raw ring buffer is empty");
            return false;
        }

        // image_raw > points_raw
        if (get_time(&(image_raw_ringbuf.front().header)) >= get_time(&(points_raw_ringbuf.front().header))) {
            p_points_raw_buf = &(points_raw_ringbuf.front());
            boost::circular_buffer<sensor_msgs::Image>::iterator it = image_raw_ringbuf.begin();
            if (image_raw_ringbuf.size() == 1) {
                p_image_raw_buf = &*it;
                publish_msg(p_image_raw_buf, p_points_raw_buf);
                pthread_mutex_unlock(&mutex);
                return true;
            } else {
                for (it++; it != image_raw_ringbuf.end(); it++) {
                    if (fabs_time_diff(&(points_raw_ringbuf.front().header), &((it-1)->header))
                        < fabs_time_diff(&(points_raw_ringbuf.front().header), &(it->header))) {
                        p_image_raw_buf = &*(it-1);
                        break;
                    }
                }
                if (it == image_raw_ringbuf.end()) {
                    p_image_raw_buf = &(image_raw_ringbuf.back());
                }
            }
        }
        // image_raw < points_raw
        else {
            p_image_raw_buf = &(image_raw_ringbuf.front());
            boost::circular_buffer<sensor_msgs::PointCloud2>::iterator it = points_raw_ringbuf.begin();
            if (points_raw_ringbuf.size() == 1) {
                p_points_raw_buf = &*it;
                publish_msg(p_image_raw_buf, p_points_raw_buf);
                pthread_mutex_unlock(&mutex);
                return true;
            }

            for (it++; it != points_raw_ringbuf.end(); it++) {
                if (fabs_time_diff(&(image_raw_ringbuf.front().header), &((it-1)->header))
                    < fabs_time_diff(&(image_raw_ringbuf.front().header), &(it->header))) {
                    p_points_raw_buf = &*(it-1);
                    break;
                }
            }

            if (it == points_raw_ringbuf.end()) {
                p_points_raw_buf = &(points_raw_ringbuf.back());
            }
        }
        publish_msg(p_image_raw_buf, p_points_raw_buf);
        pthread_mutex_unlock(&mutex);
        return true;
    } else {
        return false;
    }
}
#else
sensor_msgs::Image image_raw_buf;
sensor_msgs::PointCloud2 points_raw_buf;

void image_raw_callback(const sensor_msgs::Image::ConstPtr& image_raw_msg) {
    pthread_mutex_lock(&mutex);
    image_raw_ringbuf.push_front(*image_raw_msg);

    //points_raw is empty
    if (points_raw_ringbuf.begin() == points_raw_ringbuf.end()) {
        pthread_mutex_unlock(&mutex);
        ROS_INFO("points_raw ring buffer is empty");
        return;
    }

    buf_flag = true;

    // image_raw > points_raw
    if (get_time(&(image_raw_ringbuf.front().header)) >= get_time(&(points_raw_ringbuf.front().header))) {
        points_raw_buf = points_raw_ringbuf.front();
        boost::circular_buffer<sensor_msgs::Image>::iterator it = image_raw_ringbuf.begin();
        if (image_raw_ringbuf.size() == 1) {
            image_raw_buf = *it;
            pthread_mutex_unlock(&mutex);
            return;
        } else {
            for (it++; it != image_raw_ringbuf.end(); it++) {
                if (fabs_time_diff(&(points_raw_ringbuf.front().header), &((it-1)->header))
                    < fabs_time_diff(&(points_raw_ringbuf.front().header), &(it->header))) {
                    image_raw_buf = *(it-1);
                    break;
                }
            }
            if (it == image_raw_ringbuf.end()) {
                image_raw_buf = image_raw_ringbuf.back();
            }
        }

    } else {
        image_raw_buf = image_raw_ringbuf.front();
        boost::circular_buffer<sensor_msgs::PointCloud2>::iterator it = points_raw_ringbuf.begin();
        if (points_raw_ringbuf.size() == 1) {
            points_raw_buf = *it;
            pthread_mutex_unlock(&mutex);
            return;
        }

        for (it++; it != points_raw_ringbuf.end(); it++) {
            if (fabs_time_diff(&(image_raw_ringbuf.front().header), &((it-1)->header))
                < fabs_time_diff(&(image_raw_ringbuf.front().header), &(it->header))) {
                points_raw_buf = *(it-1);
                break;
            }
        }

        if (it == points_raw_ringbuf.end()) {
            points_raw_buf = points_raw_ringbuf.back();
        }
    }
    pthread_mutex_unlock(&mutex);
}

void points_raw_callback(const sensor_msgs::PointCloud2::ConstPtr& points_raw_msg) {
    pthread_mutex_lock(&mutex);
    points_raw_ringbuf.push_front(*points_raw_msg);
    //image_raw is empty
    if (image_raw_ringbuf.begin() == image_raw_ringbuf.end()) {
        ROS_INFO("image_raw ring buffer is empty");
        pthread_mutex_unlock(&mutex);
        return;
    }

    buf_flag = true;

    // image_raw > points_raw
    if (get_time(&(image_raw_ringbuf.front().header)) >= get_time(&(points_raw_ringbuf.front().header))) {
        points_raw_buf = points_raw_ringbuf.front();
        boost::circular_buffer<sensor_msgs::Image>::iterator it = image_raw_ringbuf.begin();
        if (image_raw_ringbuf.size() == 1) {
            image_raw_buf = *it;
            pthread_mutex_unlock(&mutex);
            return;
        } else {
            for (it++; it != image_raw_ringbuf.end(); it++) {
                if (fabs_time_diff(&(points_raw_ringbuf.front().header), &((it-1)->header))
                    < fabs_time_diff(&(points_raw_ringbuf.front().header), &(it->header))) {
                    image_raw_buf = *(it-1);
                    break;
                }
            }
            if (it == image_raw_ringbuf.end()) {
                image_raw_buf = image_raw_ringbuf.back();
            }
        }

    } else {
        image_raw_buf = image_raw_ringbuf.front();
        boost::circular_buffer<sensor_msgs::PointCloud2>::iterator it = points_raw_ringbuf.begin();
        if (points_raw_ringbuf.size() == 1) {
            points_raw_buf = *it;
            pthread_mutex_unlock(&mutex);
            return;
        }

        for (it++; it != points_raw_ringbuf.end(); it++) {
            if (fabs_time_diff(&(image_raw_ringbuf.front().header), &((it-1)->header))
                < fabs_time_diff(&(image_raw_ringbuf.front().header), &(it->header))) {
                points_raw_buf = *(it-1);
                break;
            }
        }

        if (it == points_raw_ringbuf.end()) {
            points_raw_buf = points_raw_ringbuf.back();
        }
    }
    pthread_mutex_unlock(&mutex);
}

bool publish() {
    if (buf_flag) {
        pthread_mutex_lock(&mutex);
        // scan_ringbuf.clear();
        // image_ringbuf.clear();
        // scan_ringbuf.push_front(scan_buf);
        // image_ringbuf.push_front(image_buf);
        ROS_INFO("publish");
        image_raw_pub.publish(image_raw_buf);
        points_raw_pub.publish(points_raw_buf);
        pthread_mutex_unlock(&mutex);
        return true;
    } else {
        ROS_INFO("publish failed");
        return false;
    }
}
#endif

void image_obj_callback(const cv_tracker::image_obj::ConstPtr& image_obj_msg) {
    if (image_obj_flag) {
        image_obj_flag = false;
        points_image_flag = false;
        return;
    }

    image_obj_flag = true;
    if (points_image_flag) {
        ROS_INFO("catch publish request");
        if(!publish()) {
            /* when to publish is failure, republish */
            struct timespec sleep_time;
            sleep_time.tv_sec = 0;
            sleep_time.tv_nsec = 200000000; //5Hz
            while (!publish() || ros::ok())
                nanosleep(&sleep_time, NULL);
        }
        image_obj_flag = false;
        points_image_flag = false;
    }
}
void points_image_callback(const points2image::PointsImage::ConstPtr& points_image_msg) {
    if (points_image_flag) {
        image_obj_flag = false;
        points_image_flag = false;
        return;
    }

    points_image_flag = true;
    if (image_obj_flag) {
        ROS_INFO("catch publish request");
        if(!publish()) {
            /* when to publish is failure, republish */
            struct timespec sleep_time;
            sleep_time.tv_sec = 0;
            sleep_time.tv_nsec = 200000000; //5Hz
            while (!publish() || ros::ok())
                nanosleep(&sleep_time, NULL);
        }
        image_obj_flag = false;
        points_image_flag = false;
    }
}

void* thread(void* args)
{
    ros::NodeHandle nh_rcv;
    ros::CallbackQueue rcv_callbackqueue;
    nh_rcv.setCallbackQueue(&rcv_callbackqueue);
    ros::Subscriber image_obj_sub = nh_rcv.subscribe("/obj_car/image_obj", 5, image_obj_callback);
    ros::Subscriber points_image_sub = nh_rcv.subscribe("/points_image", 5, points_image_callback);
    bool prev_image_obj_flag;
    bool prev_points_image_flag;

    while (nh_rcv.ok()) {

        prev_points_image_flag = points_image_flag;
        prev_image_obj_flag = image_obj_flag;

        rcv_callbackqueue.callAvailable(ros::WallDuration(1.0f));

        if (image_obj_flag == prev_image_obj_flag && points_image_flag == prev_points_image_flag) {
            ROS_INFO("timeout");
            if(!publish()) {
                /* when to publish is failure, republish */
                struct timespec sleep_time;
                sleep_time.tv_sec = 0;
                sleep_time.tv_nsec = 200000000; //5Hz
                while (!publish() || ros::ok())
                    nanosleep(&sleep_time, NULL);
            }
        }
    }
    return NULL;
}

int main(int argc, char **argv) {
    ros::init(argc, argv, "sync_server");
    ros::NodeHandle nh;

    ros::Subscriber image_raw_sub = nh.subscribe("/image_raw", 1, image_raw_callback);
    ros::Subscriber points_raw_sub = nh.subscribe("/points_raw", 1, points_raw_callback);
    image_raw_pub = nh.advertise<sensor_msgs::Image>("/image_raw_", 5);
    points_raw_pub = nh.advertise<sensor_msgs::PointCloud2>("/points_raw_", 5);
    while (!buf_flag) {
        ros::spinOnce();
    }
    /* create server thread */
    pthread_t th;
    pthread_create(&th, NULL, thread, (void *)NULL );

    if(!publish()) {
        /* when to publish is failure, republish */
        struct timespec sleep_time;
        sleep_time.tv_sec = 0;
        sleep_time.tv_nsec = 200000000; //5Hz
        while (!publish() || ros::ok())
            nanosleep(&sleep_time, NULL);
    }

    ros::spin();

    /* shutdown server thread */
    ROS_INFO("wait until shutdown a thread");
    pthread_kill(th, SIGINT);
    pthread_join(th, NULL);

    return 0;
]]>
            </text>
        </set>
        <set lineCount="540" fingerprint="86f3da71238850fbef315454ef4f3b56">
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_matching_tku\ndt_matching_tku.cpp" startLineNumber="8" endLineNumber="1006"/>
            <block sourceFile="D:\download\autoware-1.1.0\autoware-1.1.0\ros\src\computing\perception\localization\packages\ndt_localizer\nodes\ndt_mapping_tku\ndt_mapping_tku.cpp" startLineNumber="8" endLineNumber="1006"/>
            <text>
<![CDATA[#define G_MAP_X 2000
#define G_MAP_Y 2000
#define G_MAP_Z 200
#define G_MAP_CELLSIZE 1.0

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <unistd.h>
#include <math.h>
#include <GL/glut.h>
#include <chrono>
#include "ndt.h"
#include "algebra.h"

#include "ros/ros.h"
#include "std_msgs/String.h"
#include "sensor_msgs/PointCloud2.h"
#include <geometry_msgs/TwistStamped.h>
#include <geometry_msgs/PoseWithCovarianceStamped.h>
#include "velodyne_pointcloud/point_types.h"
#include "velodyne_pointcloud/rawdata.h"
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
#include <iostream>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/filters/voxel_grid.h>

#define DEFAULT_NDMAP_FILE "../data/nd_dat"

/*grobal variables*/
NDMapPtr NDmap; /*锟斤拷锟街诧拷锟斤拷锟斤拷*/
NDPtr NDs;
int NDs_num;

char scan_file_base_name[100];

Point scan_points[130000];
double scan_points_i[130000];
double scan_points_e[130000];
int scan_points_num;

int is_first_time = 1;
int is_map_exist = 0;

double scan_points_weight[130000];
double scan_points_totalweight;

Point map_points[130000];
double map_points_i[130000];
int mapping_points_num;

int scan_num;
int layer_select = LAYER_NUM - 1;

Posture prev_pose, prev_pose2;

// params
double g_map_center_x, g_map_center_y, g_map_center_z;
double g_map_rotation;
int g_map_x, g_map_y, g_map_z;
double g_map_cellsize;
char g_ndmap_name[500];
int g_use_gnss;
int g_map_update = 1;
double g_ini_x, g_ini_y, g_ini_z, g_ini_roll, g_ini_pitch, g_ini_yaw;

static double _tf_x, _tf_y, _tf_z, _tf_roll, _tf_pitch, _tf_yaw;
static Eigen::Matrix4f tf_btol, tf_ltob; // tf between base_link and localizer
static tf::Quaternion q_local_to_global;
static Eigen::Matrix4f tf_local_to_global;

void print_matrix3d(double mat[3][3]);
void matrix_test(void);
void print_matrix6d(double mat[6][6]);

void save_nd_map(char *name);

static pcl::PointCloud<pcl::PointXYZ> map;
static int map_loaded = 0;

static ros::Publisher ndmap_pub;

static std::chrono::time_point<std::chrono::system_clock> matching_start, matching_end;
static double exe_time = 0.0;

std::string _downsampler = "voxel_grid";
int _downsampler_num = 1;

static ros::Publisher localizer_pose_pub, ndt_pose_pub;
static geometry_msgs::PoseStamped localizer_pose_msg, ndt_pose_msg;


// double pose_mod(Posture *pose){
void pose_mod(Posture *pose)
{
  while (pose->theta < -M_PI)
    pose->theta += 2 * M_PI;
  while (pose->theta > M_PI)
    pose->theta -= 2 * M_PI;
  while (pose->theta2 < -M_PI)
    pose->theta2 += 2 * M_PI;
  while (pose->theta2 > M_PI)
    pose->theta2 -= 2 * M_PI;
  while (pose->theta3 < -M_PI)
    pose->theta3 += 2 * M_PI;
  while (pose->theta3 > M_PI)
    pose->theta3 -= 2 * M_PI;
}

double nrand(double n)
{
  double r;
  r = n * sqrt(-2.0 * log((double)rand() / RAND_MAX)) * cos(2.0 * M_PI * rand() / RAND_MAX);
  return r;
}

static void map_callback(const sensor_msgs::PointCloud2::ConstPtr &input)
{
  if (map_loaded == 0)
  {
    // Convert the data type(from sensor_msgs to pcl).
    pcl::fromROSMsg(*input, map);

    pcl::PointCloud<pcl::PointXYZ>::Ptr map_ptr(new pcl::PointCloud<pcl::PointXYZ>(map));
    /*
    // Setting point cloud to be aligned to.
    ndt.setInputTarget(map_ptr);

    // Setting NDT parameters to default values
    ndt.setMaximumIterations(iter);
    ndt.setResolution(ndt_res);
    ndt.setStepSize(step_size);
    ndt.setTransformationEpsilon(trans_eps);
*/

    /*
        for(int i=2;i<argc;i++){
            printf("load(%d/%d) %s\n",i-2,argc-2,argv[i]);
            load(argv[i]);
          }
    */
    Point p;
    for (pcl::PointCloud<pcl::PointXYZ>::const_iterator item = map_ptr->begin(); item != map_ptr->end(); item++)
    {
      p.x = (item->x - g_map_center_x) * cos(-g_map_rotation) - (item->y - g_map_center_y) * sin(-g_map_rotation);
      p.y = (item->x - g_map_center_x) * sin(-g_map_rotation) + (item->y - g_map_center_y) * cos(-g_map_rotation);
      p.z = item->z - g_map_center_z;

      /*
      p.x = item->x;
      p.y = item->y;
      p.z = item->z;
      */
      add_point_map(NDmap, &p);
    }
    std::cout << "Finished loading point cloud map." << std::endl;
    std::cout << "Map points num: " << map_ptr->size() << " points." << std::endl;

    save_nd_map(g_ndmap_name);
    is_map_exist = 1;

    map_loaded = 1;
  }
}

void points_callback(const pcl::PointCloud<pcl::PointXYZI>::ConstPtr &msg)
{
  matching_start = std::chrono::system_clock::now();
  static int count = 0;
  static tf::TransformBroadcaster br;
  static FILE *log_fp;
  ros::Time time;
  static tf::TransformListener listener;
  std_msgs::Header header;

  static int iteration;
  int j = 0;

  Posture pose, bpose, initial_pose;
  static Posture key_pose;
  //  double e=0,theta,x2,y2;
  double e = 0;
  double x_offset, y_offset, z_offset, theta_offset;
  //  double distance,diff;
  double distance;

  tf::Quaternion ndt_q, localizer_q;

  //  pcl_conversions::fromPCL(msg->header.stamp,time);
  pcl_conversions::fromPCL(msg->header, header);

  //  ROS_INFO("%s",msg->header.frame_id.c_str());
  //  ROS_INFO("%f",msg->header.stamp.toSec());// + (double)msg->header.stamp.nsec/1000000000.);

  /*  ros::Time stamp;
  stamp = msg->header.stamp;
  double now = ros::Time::now().toSec();
  */
  if (!log_fp)
    log_fp = fopen("/tmp/ndt_log", "w");

  //  ROS_INFO("get data %d",msg->points.size());
  count++;
  scan_points_totalweight = 0;

  if (_downsampler == "voxel_grid")
  {
    pcl::PointCloud<pcl::PointXYZ> scan;

    for (int i = 0; i < (int)msg->points.size(); i++)
    {
      scan.points.push_back(pcl::PointXYZ(msg->points[i].x, msg->points[i].y, msg->points[i].z));
    }
    scan.header = msg->header;

    pcl::PointCloud<pcl::PointXYZ>::Ptr scan_ptr(new pcl::PointCloud<pcl::PointXYZ>(scan));
    pcl::PointCloud<pcl::PointXYZ>::Ptr filtered_scan_ptr(new pcl::PointCloud<pcl::PointXYZ>);

    pcl::VoxelGrid<pcl::PointXYZ> voxel_grid_filter;
    voxel_grid_filter.setLeafSize(0.5, 0.5, 0.5);
    voxel_grid_filter.setInputCloud(scan_ptr);
    voxel_grid_filter.filter(*filtered_scan_ptr);
    j = 0;
    for (int i = 0; i < (int)filtered_scan_ptr->points.size(); i++)
    {
      scan_points[j].x = filtered_scan_ptr->points[i].x + nrand(0.01);
      scan_points[j].y = filtered_scan_ptr->points[i].y + nrand(0.01);
      scan_points[j].z = filtered_scan_ptr->points[i].z + nrand(0.01);
      scan_points_i[j] = 100;  // filterd_scan_ptr->points[i].intensity;

      double dist = scan_points[j].x * scan_points[j].x + scan_points[j].y * scan_points[j].y +
                    scan_points[j].z * scan_points[j].z;
      if (dist < 3 * 3)
        continue;

      scan_points_weight[j] = 1;
      scan_points_totalweight += scan_points_weight[j];
      j++;
      if (j > 130000)
        break;
    }
    scan_points_num = j;
    mapping_points_num = j;
    //    printf("points_num = %d \n",scan_points_num);
  }

  if (_downsampler == "distance")
  {
    /*----------锟斤拷锟斤拷恰锟斤拷锟斤拷嗓呒锟斤拷---------*/
    j = 0;
    for (int i = 0; i < (int)msg->points.size(); i++)
    {
      scan_points[j].x = msg->points[i].x + nrand(0.01);
      scan_points[j].y = msg->points[i].y + nrand(0.01);
      scan_points[j].z = msg->points[i].z + nrand(0.01);
      scan_points_i[j] = msg->points[i].intensity;

      double dist = scan_points[j].x * scan_points[j].x + scan_points[j].y * scan_points[j].y +
                    scan_points[j].z * scan_points[j].z;
      if (dist < 3 * 3)
        continue;
      scan_points_weight[j] = (dist) * (1.2 - exp(-1 * (-0.5 - scan_points[j].z) * (-0.5 - scan_points[j].z) / 2.0));
      // scan_points_weight[j]= (1.2-exp(-1*(-0.5 - scan_points[j].z)*(-0.5 - scan_points[j].z)/2.0));
      scan_points_totalweight += scan_points_weight[j];

      j++;
      if (j > 130000)
        break;
    }
    scan_points_num = j;
    mapping_points_num = j;
    //    printf("points_num = %d \n",scan_points_num);
  }

  /*--matching---*/
  /*
  Posture pose, bpose,initial_pose;
  static Posture key_pose;
  double e=0,theta,x2,y2;
  double x_offset,y_offset,z_offset,theta_offset;
  double distance,diff;
*/
  // calc offset
  x_offset = prev_pose.x - prev_pose2.x;
  y_offset = prev_pose.y - prev_pose2.y;
  z_offset = prev_pose.z - prev_pose2.z;
  theta_offset = prev_pose.theta3 - prev_pose2.theta3;

  if (theta_offset < -M_PI)
    theta_offset += 2 * M_PI;
  if (theta_offset > M_PI)
    theta_offset -= 2 * M_PI;

  // calc estimated initial position
  pose.x = prev_pose.x + x_offset;
  pose.y = prev_pose.y + y_offset;
  pose.z = prev_pose.z + z_offset;
  pose.theta = prev_pose.theta;
  pose.theta2 = prev_pose.theta2;
  pose.theta3 = prev_pose.theta3 + theta_offset;

  initial_pose = pose;

  // matching
  for (layer_select = 1; layer_select >= 1; layer_select -= 1)
  {
    //    	printf("layer=%d\n",layer_select);
    for (j = 0; j < 100; j++)
    {
      if (layer_select != 1 && j > 2)
      {
        break;
      }
      bpose = pose;

      e = adjust3d(scan_points, scan_points_num, &pose, layer_select);
      //	printf("%f\n",e);

      pose_mod(&pose);

      if ((bpose.x - pose.x) * (bpose.x - pose.x) + (bpose.y - pose.y) * (bpose.y - pose.y) +
              (bpose.z - pose.z) * (bpose.z - pose.z) + 3 * (bpose.theta - pose.theta) * (bpose.theta - pose.theta) +
              3 * (bpose.theta2 - pose.theta2) * (bpose.theta2 - pose.theta2) +
              3 * (bpose.theta3 - pose.theta3) * (bpose.theta3 - pose.theta3) <
          0.00001)
      {
        break;
      }
    }
    iteration = j;

    /*gps resetting*/
    if (g_use_gnss)
    {
      static FILE *e_fp;
      if (!e_fp)
      {
        e_fp = fopen("/tmp/e_log", "w");
      }
      fprintf(e_fp, "%f\n", e);
      if (layer_select == 1 && e < 1000)
      {
        printf("reset\n");
        tf::StampedTransform gps_tf_on_world;
        try
        {
          listener.lookupTransform("world", "gps", ros::Time(0), gps_tf_on_world);
        }
        catch (tf::TransformException ex)
        {
          ROS_ERROR("%s", ex.what());
          return;
        }
        printf("set initial position by gps posiotion\n");
        pose.x = gps_tf_on_world.getOrigin().x();
        pose.y = gps_tf_on_world.getOrigin().y();
        pose.z = gps_tf_on_world.getOrigin().z() + nrand(5);
        tf::Quaternion q(gps_tf_on_world.getRotation().x(), gps_tf_on_world.getRotation().y(),
                         gps_tf_on_world.getRotation().z(), gps_tf_on_world.getRotation().w());
        double roll, pitch, yaw;
        tf::Matrix3x3 m(q);
        m.getRPY(roll, pitch, yaw);
        pose.theta = roll;
        pose.theta2 = pitch + 0.22;
        pose.theta3 = yaw + nrand(0.7);
        prev_pose2 = prev_pose = pose;
        printf("reset %f %f %f %f %f %f\n", pose.x, pose.y, pose.z, pose.theta, pose.theta2, pose.theta3);
        // reset

        /*	tf::Transform transform;
  //tf::Quaternion q;
transform.setOrigin( tf::Vector3(pose.x, pose.y, pose.z) );
q.setRPY(pose.theta,pose.theta2,pose.theta3);
transform.setRotation(q);
br.sendTransform(tf::StampedTransform(transform, ros::Time::now(),  "world", "ndt_frame"));
*/
        return;
      }
    }
    // unti-distotion

    if (layer_select == 2 && 1)
    {
      //    		double rate,angle,xrate,yrate,dx,dy,dtheta;
      double rate, xrate, yrate, dx, dy, dtheta;
      double tempx, tempy;
      int i;

      tempx = (pose.x - prev_pose.x);
      tempy = (pose.y - prev_pose.y);
      dx = tempx * cos(-prev_pose.theta3) - tempy * sin(-prev_pose.theta3);
      dy = tempx * sin(-prev_pose.theta3) + tempy * cos(-prev_pose.theta3);
      dtheta = pose.theta3 - prev_pose.theta3;
      if (dtheta < -M_PI)
      {
        dtheta += 2 * M_PI;
      }
      if (dtheta > M_PI)
      {
        dtheta -= 2 * M_PI;
      }

      rate = dtheta / (double)scan_points_num;
      xrate = dx / (double)scan_points_num;
      yrate = dy / (double)scan_points_num;

      printf("untidist x %f y %f yaw %f\n", dx, dy, dtheta);

      dx = -dx;
      dy = -dy;
      dtheta = -dtheta;
      for (i = 0; i < scan_points_num; i++)
      {
        tempx = scan_points[i].x * cos(dtheta) - scan_points[i].y * sin(dtheta) + dx;
        tempy = scan_points[i].x * sin(dtheta) + scan_points[i].y * cos(dtheta) + dy;

        scan_points[i].x = tempx;
        scan_points[i].y = tempy;

        dtheta += rate;
        dx += xrate;
        dy += yrate;
      }
    }
  }

  // localizer
  Eigen::Translation3f translation(pose.x, pose.y, pose.z);
  Eigen::AngleAxisf rotation_x(pose.theta, Eigen::Vector3f::UnitX());
  Eigen::AngleAxisf rotation_y(pose.theta2, Eigen::Vector3f::UnitY());
  Eigen::AngleAxisf rotation_z(pose.theta3, Eigen::Vector3f::UnitZ());
  Eigen::Matrix4f local_t = (translation * rotation_z * rotation_y * rotation_x).matrix();
  Eigen::Matrix4f global_t = tf_local_to_global * local_t;

  tf::Matrix3x3 mat_l;
  mat_l.setValue(static_cast<double>(global_t(0, 0)), static_cast<double>(global_t(0, 1)), static_cast<double>(global_t(0, 2)),
                 static_cast<double>(global_t(1, 0)), static_cast<double>(global_t(1, 1)), static_cast<double>(global_t(1, 2)),
                 static_cast<double>(global_t(2, 0)), static_cast<double>(global_t(2, 1)), static_cast<double>(global_t(2, 2)));

  mat_l.getRotation(localizer_q);
  localizer_pose_msg.header.frame_id = "/map";
  localizer_pose_msg.header.stamp = header.stamp;
  localizer_pose_msg.pose.position.x = global_t(0, 3);
  localizer_pose_msg.pose.position.y = global_t(1, 3);
  localizer_pose_msg.pose.position.z = global_t(2, 3);
  localizer_pose_msg.pose.orientation.x = localizer_q.x();
  localizer_pose_msg.pose.orientation.y = localizer_q.y();
  localizer_pose_msg.pose.orientation.z = localizer_q.z();
  localizer_pose_msg.pose.orientation.w = localizer_q.w();

  // base_link
  Eigen::Matrix4f global_t2 = global_t * tf_ltob;
  tf::Matrix3x3 mat_b;  // base_link
  mat_b.setValue(static_cast<double>(global_t2(0, 0)), static_cast<double>(global_t2(0, 1)), static_cast<double>(global_t2(0, 2)),
                 static_cast<double>(global_t2(1, 0)), static_cast<double>(global_t2(1, 1)), static_cast<double>(global_t2(1, 2)),
                 static_cast<double>(global_t2(2, 0)), static_cast<double>(global_t2(2, 1)), static_cast<double>(global_t2(2, 2)));
  mat_b.getRotation(ndt_q);

  ndt_pose_msg.header.frame_id = "/map";
  ndt_pose_msg.header.stamp = header.stamp;
  ndt_pose_msg.pose.position.x = global_t2(0, 3);
  ndt_pose_msg.pose.position.y = global_t2(1, 3);
  ndt_pose_msg.pose.position.z = global_t2(2, 3);
  ndt_pose_msg.pose.orientation.x = ndt_q.x();
  ndt_pose_msg.pose.orientation.y = ndt_q.y();
  ndt_pose_msg.pose.orientation.z = ndt_q.z();
  ndt_pose_msg.pose.orientation.w = ndt_q.w();

  localizer_pose_pub.publish(localizer_pose_msg);
  ndt_pose_pub.publish(ndt_pose_msg);

  scan_transrate(scan_points, map_points, &pose, scan_points_num);

  for (int i = 0; i < scan_points_num; i++)
  {
    map_points_i[i] = scan_points_i[i];
  }

  // update ND map
  distance = (key_pose.x - pose.x) * (key_pose.x - pose.x) + (key_pose.y - pose.y) * (key_pose.y - pose.y) +
             (key_pose.z - pose.z) * (key_pose.z - pose.z);

  if (g_map_update && (!is_map_exist || (distance > 0.1 * 0.1 && scan_points_num > 100)))
  {
    int i;
    for (i = 0; i < scan_points_num; i++)
    {
      add_point_map(NDmap, &map_points[i]);
    }
    key_pose = pose;
    is_map_exist = 1;
  }

  prev_pose2 = prev_pose;
  prev_pose = pose;

  if (is_first_time)
  {
    prev_pose2 = prev_pose;
    is_first_time = 0;
  }
  /*
  printf("%f %f %f %f %f %f %f %d \n",0,//(double)msg->header.stamp.toSec(),
   pose.x,pose.y,pose.z,pose.theta,pose.theta2,pose.theta3,NDs_num) ;
*/
  fprintf(log_fp, "%f %f %f %f %f %f %f\n", (double)header.stamp.toSec(),
          pose.x * cos(g_map_rotation) - pose.y * sin(g_map_rotation) + g_map_center_x,
          pose.x * sin(g_map_rotation) + pose.y * cos(g_map_rotation) + g_map_center_y, pose.z + g_map_center_z,
          pose.theta, pose.theta2, pose.theta3 + g_map_rotation);

  fflush(log_fp);
  tf::Transform transform;
//  tf::Quaternion q;
//  transform.setOrigin(tf::Vector3(pose.x, pose.y, pose.z));
//  transform.setOrigin(tf::Vector3(pose.x + g_map_center_x, pose.y + g_map_center_y, pose.z + g_map_center_z));
  transform.setOrigin(tf::Vector3(global_t2(0, 3), global_t2(1, 3), global_t2(2, 3)));
//  q.setRPY(pose.theta, pose.theta2, pose.theta3);
//  transform.setRotation(q_local_to_global * q);
  transform.setRotation(ndt_q);

//  br.sendTransform(tf::StampedTransform(transform, header.stamp, "map", "velodyne"));
  br.sendTransform(tf::StampedTransform(transform, header.stamp, "map", "base_link"));

  matching_end = std::chrono::system_clock::now();
  exe_time = std::chrono::duration_cast<std::chrono::microseconds>(matching_end - matching_start).count() / 1000.0;

  std::cout << "-----------------------------------------------------------------" << std::endl;
  std::cout << "Sequence number: " << msg->header.seq << std::endl;
  std::cout << "Number of scan points: " << msg->size() << " points." << std::endl;
  std::cout << "Number of filtered scan points: " << scan_points_num << " points." << std::endl;
  std::cout << "Number of iteration: " << iteration << std::endl;
  std::cout << "Execution time: " << exe_time << std::endl;
  std::cout << "(x,y,z,roll,pitch,yaw):" << std::endl;
  std::cout << "(" << pose.x << ", " << pose.y << ", " << pose.z << ", " << pose.theta << ", " << pose.theta2 << ", "
            << pose.theta3 << ")" << std::endl;
  std::cout << "-----------------------------------------------------------------" << std::endl;

  //  ROS_INFO("get data %d",msg->points.size());
}

/*add point to ndcell */
int add_point_covariance(NDPtr nd, PointPtr p)
{
  /*add data num*/
  nd->num++;
  nd->flag = 0; /*need to update*/
  // printf("%d \n",nd->num);

  /*calcurate means*/
  nd->m_x += p->x;
  nd->m_y += p->y;
  nd->m_z += p->z;

  /*calcurate covariances*/
  nd->c_xx += p->x * p->x;
  nd->c_yy += p->y * p->y;
  nd->c_zz += p->z * p->z;

  nd->c_xy += p->x * p->y;
  nd->c_yz += p->y * p->z;
  nd->c_zx += p->z * p->x;

  return 1;
}

int inv_check(double inv[3][3])
{
  for (int i = 0; i < 3; i++)
  {
    for (int j = 0; j < 3; j++)
    {
      if (isnan(inv[i][j]))
        return 0;
      if (fabs(inv[i][j]) > 1000)
        return 0;
    }
  }
  return 1;
}

/*calcurate covariances*/
int update_covariance(NDPtr nd)
{
  double a, b, c; /*for calcurate*/
  if (!nd->flag)
  { /*need calcurate?*/
    /*means*/
    nd->mean.x = a = nd->m_x / nd->num;
    nd->mean.y = b = nd->m_y / nd->num;
    nd->mean.z = c = nd->m_z / nd->num;

    /*covariances*/
    nd->covariance[0][0] = (nd->c_xx - 2 * a * nd->m_x) / nd->num + a * a;
    nd->covariance[1][1] = (nd->c_yy - 2 * b * nd->m_y) / nd->num + b * b;
    nd->covariance[2][2] = (nd->c_zz - 2 * c * nd->m_z) / nd->num + c * c;
    nd->covariance[0][1] = nd->covariance[1][0] = (nd->c_xy - nd->m_x * b - nd->m_y * a) / nd->num + a * b;
    nd->covariance[1][2] = nd->covariance[2][1] = (nd->c_yz - nd->m_y * c - nd->m_z * b) / nd->num + b * c;
    nd->covariance[2][0] = nd->covariance[0][2] = (nd->c_zx - nd->m_z * a - nd->m_x * c) / nd->num + c * a;
    nd->sign = 0;
    nd->flag = 1; /*this ND updated*/
    if (nd->num >= 5)
    {
      if (1 || round_covariance(nd) == 1)
      {
        if (ginverse_matrix3d(nd->covariance, nd->inv_covariance))
          if (inv_check(nd->inv_covariance))
            nd->sign = 1;
      }
    }
  }

  return 1;
}

/*add point to ndmap*/
int add_point_map(NDMapPtr ndmap, PointPtr point)
{
  int x, y, z, i;
  NDPtr *ndp[8];

  /*

  +---+---+
  |   |   |
  +---+---+
  |   |###|
  +---+---+

  */

  /*mapping*/
  x = (point->x / ndmap->size) + ndmap->x / 2;
  y = (point->y / ndmap->size) + ndmap->y / 2;
  z = (point->z / ndmap->size) + ndmap->z / 2;

  /*clipping*/
  if (x < 1 || x >= ndmap->x)
    return 0;
  if (y < 1 || y >= ndmap->y)
    return 0;
  if (z < 1 || z >= ndmap->z)
    return 0;

  /*select root ND*/
  ndp[0] = ndmap->nd + x * ndmap->to_x + y * ndmap->to_y + z;
  ndp[1] = ndp[0] - ndmap->to_x;
  ndp[2] = ndp[0] - ndmap->to_y;
  ndp[4] = ndp[0] - 1;
  ndp[3] = ndp[2] - ndmap->to_x;
  ndp[5] = ndp[4] - ndmap->to_x;
  ndp[6] = ndp[4] - ndmap->to_y;
  ndp[7] = ndp[3] - 1;

  /*add  point to map */
  for (i = 0; i < 8; i++)
  {
    if ((*ndp[i]) == 0)
      *ndp[i] = add_ND();
    if ((*ndp[i]) != 0)
      add_point_covariance(*ndp[i], point);
  }

  if (ndmap->next)
  {
    add_point_map(ndmap->next, point);
  }

  return 0;
}

/*get nd cell at point*/
int get_ND(NDMapPtr ndmap, PointPtr point, NDPtr *nd, int ndmode)
{
  int x, y, z;
  int i;
  NDPtr *ndp[8];

  /*
    
  +---+---+
  |   |   |
  +---+---+
  |   |###|
  +---+---+
  
  */ /*
   layer = layer_select;
   while(layer > 0){
     if(ndmap->next)ndmap = ndmap->next;
     layer--;
   }
     */
  /*mapping*/
  if (ndmode < 3)
  {
    x = (double)((point->x / ndmap->size) + ndmap->x / 2 - 0.5);
    y = (double)((point->y / ndmap->size) + ndmap->y / 2 - 0.5);
    z = (double)((point->z / ndmap->size) + ndmap->z / 2 - 0.5);
  }
  else
  {
    x = (point->x / ndmap->size) + ndmap->x / 2;
    y = (point->y / ndmap->size) + ndmap->y / 2;
    z = (point->z / ndmap->size) + ndmap->z / 2;
  }

  /*clipping*/
  if (x < 1 || x >= ndmap->x)
    return 0;
  if (y < 1 || y >= ndmap->y)
    return 0;
  if (z < 1 || z >= ndmap->z)
    return 0;

  /*select root ND*/
  ndp[0] = ndmap->nd + x * ndmap->to_x + y * ndmap->to_y + z;
  ndp[1] = ndp[0] - ndmap->to_x;
  ndp[2] = ndp[0] - ndmap->to_y;
  ndp[4] = ndp[0] - 1;
  ndp[3] = ndp[2] - ndmap->to_x;
  ndp[5] = ndp[4] - ndmap->to_x;
  ndp[6] = ndp[4] - ndmap->to_y;
  ndp[7] = ndp[3] - 1;

  for (i = 0; i < 8; i++)
  {
    if (*ndp[i] != 0)
    {
      if (!(*ndp[i])->flag)
        update_covariance(*ndp[i]);
      nd[i] = *ndp[i];
    }
    else
    {
      nd[i] = NDs;
      // return 0;
    }
  }

  return 1;
}

NDPtr add_ND(void)
{
  NDPtr ndp;
  // int m;

  if (NDs_num >= MAX_ND_NUM)
  {
    printf("over flow\n");
    return 0;
  }

  ndp = NDs + NDs_num;
  NDs_num++;

  ndp->flag = 0;
  ndp->sign = 0;
  ndp->num = 0;
  ndp->m_x = 0;
  ndp->m_y = 0;
  ndp->m_z = 0;
  ndp->c_xx = 0;
  ndp->c_yy = 0;
  ndp->c_zz = 0;
  ndp->c_xy = 0;
  ndp->c_yz = 0;
  ndp->c_zx = 0;
  ndp->w = 1;
  ndp->is_source = 0;

  return ndp;
}

NDMapPtr initialize_NDmap_layer(int layer, NDMapPtr child)
{
  // int i,j,k,i2,i3,m;
  int i, j, k;
  int x, y, z;
  NDPtr *nd, *ndp;
  NDMapPtr ndmap;

  //  i2 = i3 = 0;
  //  printf("Initializing...layer %d\n",layer);

  x = (g_map_x >> layer) + 1;
  y = (g_map_y >> layer) + 1;
  z = (g_map_z >> layer) + 1;

  /*锟斤拷锟斤拷纬锟斤拷荨锟?*/
  nd = (NDPtr *)malloc(x * y * z * sizeof(NDPtr));
  ndmap = (NDMapPtr)malloc(sizeof(NDMap));

  ndmap->x = x;
  ndmap->y = y;
  ndmap->z = z;
  ndmap->to_x = y * z;
  ndmap->to_y = z;
  ndmap->layer = layer;
  ndmap->nd = nd;
  ndmap->next = child;
  ndmap->size = g_map_cellsize * ((int)1 << layer);
  //  printf("size %f\n",ndmap->size);

  ndp = nd;

  /*锟届イ锟戒〖锟轿斤拷锟?*/
  for (i = 0; i < x; i++)
  {
    for (j = 0; j < y; j++)
    {
      for (k = 0; k < z; k++)
      {
        *ndp = 0;
        ndp++;
      }
    }
  }

  /*锟届イ锟戒〖锟街わ拷息锟诫々*/
  return ndmap;
}

/*ND锟杰ワ拷锟斤拷锟斤拷谓锟斤拷*/
NDMapPtr initialize_NDmap(void)
{
  int i;
  NDMapPtr ndmap;
  NDPtr null_nd;

  printf("Initialize NDmap\n");
  ndmap = 0;

  // init NDs
  NDs = (NDPtr)malloc(sizeof(NormalDistribution) * MAX_ND_NUM);
  NDs_num = 0;

  null_nd = add_ND();

  for (i = LAYER_NUM - 1; i >= 0; i--)
  {
    ndmap = initialize_NDmap_layer(i, ndmap);

    /*progress dots*/
    //    printf("layer %d\n",i);
  }

  //  printf("done\n");

  return ndmap; /*锟斤拷锟街诧拷锟斤拷锟截のポワ拷锟襟タわ拷锟街わ拷*/
}

int round_covariance(NDPtr nd)
{
  double v[3][3], a;

  eigenvecter_matrix3d(nd->covariance, v, nd->l);
  //  print_matrix3d(v);
  if (fabs(v[0][0] * v[0][0] + v[1][0] * v[1][0] + v[2][0] * v[2][0] - 1) > 0.1)
    printf("!1");
  if (fabs(v[0][0] * v[0][1] + v[1][0] * v[1][1] + v[2][0] * v[2][1]) > 0.01)
    printf("!01");
  if (fabs(v[0][1] * v[0][2] + v[1][1] * v[1][2] + v[2][1] * v[2][2]) > 0.01)
    printf("!02");
  if (fabs(v[0][2] * v[0][0] + v[1][2] * v[1][0] + v[2][2] * v[2][0]) > 0.01)
    printf("!03");

  a = fabs(nd->l[1] / nd->l[0]);
  if (a < 0.001)
  {
    return 0;
    if (nd->l[1] > 0)
      nd->l[1] = fabs(nd->l[0]) / 10.0;
    else
      nd->l[1] = -fabs(nd->l[0]) / 10.0;

    a = fabs(nd->l[2] / nd->l[0]);
    if (a < 0.01)
    {
      if (nd->l[2] > 0)
        nd->l[2] = fabs(nd->l[0]) / 10.0;
      else
        nd->l[2] = -fabs(nd->l[0]) / 10.0;
    }
    //    printf("r");
    matrix3d_eigen(v, nd->l[0], nd->l[1], nd->l[2], nd->covariance);
  }
  return 1;
}

/*锟斤拷锟斤拷ND锟杰ワ拷锟斤拷锟斤拷锟斤拷扦韦锟斤拷锟斤拷锟街での筹拷唯*/
double probability_on_ND(NDPtr nd, double xp, double yp, double zp)
{
  //  double xp,yp,zp;
  double e;

  if (nd->num < 5)
    return 0;
  /*
  xp = x - nd->mean.x;
  yp = y - nd->mean.y;
  zp = z - nd->mean.z;
  */
  e = exp((xp * xp * nd->inv_covariance[0][0] + yp * yp * nd->inv_covariance[1][1] +
           zp * zp * nd->inv_covariance[2][2] + 2.0 * xp * yp * nd->inv_covariance[0][1] +
           2.0 * yp * zp * nd->inv_covariance[1][2] + 2.0 * zp * xp * nd->inv_covariance[2][0]) /
          -2.0);

  if (e > 1)
    return 1;
  if (e < 0)
    return 0;
  return (e);
}

void load(char *name)
{
  FILE *fp;
  double x, y, z, q;
  Point p;

  fp = fopen(name, "r");
  int i = 0;
  while (fscanf(fp, "%lf %lf %lf %lf", &y, &x, &z, &q) != EOF)
  {  // x,y swaped
    p.x = (x - g_map_center_x) * cos(-g_map_rotation) - (y - g_map_center_y) * sin(-g_map_rotation);
    p.y = (x - g_map_center_x) * sin(-g_map_rotation) + (y - g_map_center_y) * cos(-g_map_rotation);
    p.z = z - g_map_center_z;
    add_point_map(NDmap, &p);
    std::cout << i << std::endl;
    i++;
  }
  std::cout << "Finished loading " << name << std::endl;
  fclose(fp);
}

void save_nd_map(char *name)
{
  int i, j, k, layer;
  NDData nddat;
  NDMapPtr ndmap;
  NDPtr *ndp;
  FILE *ofp;

  // for pcd
  pcl::PointCloud<pcl::PointXYZ> cloud;
  pcl::PointXYZ p;

  // cloud.is_dense = false;
  // cloud.points.resize (cloud.width * cloud.height);
  // ros::Time stamp;
  // stamp = msg->header.stamp;
  // double now = ros::Time::now().toSec();

  ndmap = NDmap;
  ofp = fopen(name, "w");

  for (layer = 0; layer < 2; layer++)
  {
    ndp = ndmap->nd;
    /*锟届イ锟戒〖锟轿斤拷锟?*/
    for (i = 0; i < ndmap->x; i++)
    {
      for (j = 0; j < ndmap->y; j++)
      {
        for (k = 0; k < ndmap->z; k++)
        {
          if (*ndp)
          {
            update_covariance(*ndp);
            nddat.nd = **ndp;
            nddat.x = i;
            nddat.y = j;
            nddat.z = k;
            nddat.layer = layer;

            fwrite(&nddat, sizeof(NDData), 1, ofp);

            // regist the point to pcd data;
            p.x = (*ndp)->mean.x;
            p.y = (*ndp)->mean.y;
            p.z = (*ndp)->mean.z;
            cloud.points.push_back(p);
          }
          ndp++;
        }
      }
      //      printf("a\n");
    }
    ndmap = ndmap->next;
  }
  //  printf("done\n");
  fclose(ofp);
]]>
            </text>
        </set>
        <summary duplicateFileCount="456" duplicateLineCount="36205" duplicateBlockCount="2684" totalFileCount="590" totalRawLineCount="135911" totalSignificantLineCount="66317" processingTime="1437"/>
    </check>
</simian>
